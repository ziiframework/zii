name: build

on: [push, pull_request]

env:
  DEFAULT_COMPOSER_FLAGS: "--prefer-dist --no-interaction --no-progress --optimize-autoloader"

jobs:
  phpunit:
    name: PHP ${{ matrix.php }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: yiitest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yiitest
        ports:
          - 5432:5432
        options: --name=postgres --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
      mssql:
          image: mcr.microsoft.com/mssql/server:2017-latest
          env:
              SA_PASSWORD: YourStrong!Passw0rd
              ACCEPT_EULA: Y
              MSSQL_PID: Developer
          ports:
              - 1433:1433
          options: --name=mssql --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        php: ['7.3', '7.4', '8.0']

    steps:
      - name: Generate french locale
        run: sudo locale-gen fr_FR.UTF-8
      - name: Create MS SQL Database
        run: docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'CREATE DATABASE yiitest'
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl
          extensions: apc, curl, dom, imagick, intl, mbstring, mcrypt, memcached, mysql, pdo, pdo_mysql, pdo_pgsql, pdo_sqlite, pgsql, sqlite
          ini-values: date.timezone='UTC'
      - name: Install php-sqlsrv
        run: |
            curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - >/dev/null 2>&1
            curl -sSL https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2017.list | sudo tee /etc/apt/sources.list.d/mssql-server-2017.list >/dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1madd microsoft keys & repository\n"
            sudo apt-get -q update >/dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1mapt-get update\n"
            sudo pecl -q install pdo_sqlsrv > /dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1mpecl install pdo_sqlsrv\n"
            if (php -m | grep -i -q -w "pdo_sqlsrv"); then
                printf "\033[32;1mpdo_sqlsrv installed correct\n"
            else
                printf "\033[31;1mpdo_sqlsrv not installed :-(\n"
            fi
        if: matrix.php == '7.4'
      - name: Install Memcached
        uses: niden/actions-memcached@v7
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install dependencies
        run: composer update $DEFAULT_COMPOSER_FLAGS
      - name: PHP Unit tests for PHP 7.3
        run: vendor/bin/phpunit --verbose --coverage-clover=coverage.clover
        if: matrix.php == '7.3'
      - name: PHP Unit tests for PHP 7.4
        run: vendor/bin/phpunit --verbose
        if: matrix.php == '7.4'
      - name: Code coverage
        run: |
          wget https://scrutinizer-ci.com/ocular.phar
          php ocular.phar code-coverage:upload --format=php-clover coverage.clover
        if: matrix.php == '7.3'
        continue-on-error: true # if is fork

  npm:
    name: NPM 6 on ubuntu-latest
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install dependencies
        run: composer update $DEFAULT_COMPOSER_FLAGS
      - name: Install node.js
        uses: actions/setup-node@v1
        with:
          node-version: 6
      - name: Tests
        run: |
          npm install
          npm test
#        env:
#          CI: true
