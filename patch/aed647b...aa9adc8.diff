diff --git a/src/BaseYii.php b/src/BaseYii.php
index efc453add05..496f6aa121a 100644
--- a/src/BaseYii.php
+++ b/src/BaseYii.php
@@ -68,7 +68,7 @@ class BaseYii
      */
     public static $classMap = [];
     /**
-     * @var \yii\console\Application|\yii\web\Application|\yii\base\Application the application instance
+     * @var \yii\console\Application|\yii\web\Application the application instance
      */
     public static $app;
     /**
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.48-dev';
+        return '2.0.50-dev';
     }
 
     /**
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index 40a25165de2..3867382321c 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -1,10 +1,98 @@
 Yii Framework 2 Change Log
 ==========================
 
-2.0.48 under development
+2.0.50 under development
 ------------------------
+- Bug #20040: Fix type `boolean` in `MSSQL` (terabytesoftw)
+- Bug #20005: Fix `yii\console\controllers\ServeController` to specify the router script (terabytesoftw)
+- Bug #19060: Fix `yii\widgets\Menu` bug when using Closure for active item and adding additional tests in `tests\framework\widgets\MenuTest` (atrandafir)
+- Bug #13920: Fixed erroneous validation for specific cases (tim-fischer-maschinensucher)
+- Bug #19927: Fixed `console\controllers\MessageController` when saving translations to database: fixed FK error when adding new string and language at the same time, checking/regenerating all missing messages and dropping messages for unused languages (atrandafir)
+- Bug #20002: Fixed superfluous query on HEAD request in serializer (xicond)
+- Enh #12743: Added new methods `BaseActiveRecord::loadRelations()` and `BaseActiveRecord::loadRelationsFor()` to eager load related models for existing primary model instances (PowerGamer1)
+- Enh #20030: Improve performance of handling `ErrorHandler::$memoryReserveSize` (antonshevelev, rob006)
+- Enh #20042: Add empty array check to `ActiveQueryTrait::findWith()` (renkas)
+- Enh #20032: Added `yii\helpers\BaseStringHelper::mask()` method for string masking with multibyte support (salehhashemi1992)
+- Enh #20034: Added `yii\helpers\BaseStringHelper::findBetween()` to retrieve a substring that lies between two strings (salehhashemi1992)
+
+
+2.0.49.2 October 12, 2023
+-------------------------
 
-- no changes in this release.
+- Bug #19925: Improved PHP version check when handling MIME types (schmunk42)
+
+
+2.0.49.1 October 05, 2023
+-------------------------
+
+- Bug #19940: File Log writer without newline (terabytesoftw)
+- Bug #19950: Fix `Query::groupBy(null)` causes error for PHP 8.1: `trim(): Passing null to parameter #1 ($string) of type string is deprecated` (uaoleg)
+- Bug #19951: Removed unneeded MIME file tests (schmunk42)
+- Bug #19984: Do not duplicate log messages in memory (lubosdz)
+- Enh #19780: added pcntl to requirements check (schmunk42)
+
+
+2.0.49 August 29, 2023
+----------------------
+
+- Bug #9899: Fix caching a MSSQL query with BLOB data type (terabytesoftw)
+- Bug #16208: Fix `yii\log\FileTarget` to not export empty messages (terabytesoftw)
+- Bug #18859: Fix `yii\web\Controller::bindInjectedParams()` to not throw error when argument of `ReflectionUnionType` type is passed (bizley)
+- Bug #19857: Fix AttributeTypecastBehavior::resetOldAttributes() causes "class has no attribute named" InvalidArgumentException (uaoleg)
+- Bug #19868: Added whitespace sanitation for tests, due to updates in ICU 72 (schmunk42)
+- Bug #19872: Fixed the definition of dirty attributes in AR properties for a non-associative array in case of changing the order of elements (eegusakov)
+- Bug #19899: Fixed `GridView` in some cases calling `Model::generateAttributeLabel()` to generate label values that are never used (PowerGamer1)
+- Bug #19906: Fixed multiline strings in the `\yii\console\widgets\Table` widget (rhertogh)
+- Bug #19908: Fix associative array cell content rendering in Table widget (rhertogh)
+- Bug #19911: Resolved inconsistency in `ActiveRecord::getAttributeLabel()` with regard of overriding in primary model labels for attributes of related model in favor of allowing such overriding for all levels of relation nesting (PowerGamer1)
+- Bug #19914: Fixed `ArrayHelper::keyExists()` and  `::remove()` functions when the key is a float and the value is `null` (rhertogh)
+- Bug #19924: Fix `yii\i18n\Formatter` to not throw error `Unknown named parameter` under PHP 8 (arollmann)
+- Enh #19841: Allow jQuery 3.7 to be installed (wouter90)
+- Enh #19853: Added support for default value for `\yii\helpers\Console::select()` (rhertogh)
+- Enh #19884: Added support Enums in Query Builder (sk1t0n)
+- Enh #19920: Broadened the accepted type of `Cookie::$expire` from `int` to `int|string|\DateTimeInterface|null` (rhertogh)
+
+
+2.0.48.1 May 24, 2023
+---------------------
+
+- Bug #19847: Fix regression introduced in #15376 that caused `DbManager::getRolesByUser()` to return stale data (michaelarnauts)
+
+
+2.0.48 May 22, 2023
+-------------------
+
+- Bug #15376: Added $userId for RBAC roles cache (manchenkoff)
+- Bug #17194: Fix unnecessary SQL updates in the database on attributes typecast via `yii\behaviors\AttributeTypecastBehavior` (aivchen)
+- Bug #18867: Fixed multiple issues with `yii\grid\CheckboxColumn`: "check all" checkbox not being checked on page load when all data row checkboxes are initially checked; clicking checkboxes triggered "change" event for other checkboxes that do not change their state; "check all" checkbox not being checked when disabled checkboxes are present and clicking last non-checked data row checkbox (PowerGamer1)
+- Bug #19635: PHP 8.2 compatibility fix for `yii\validators\DateValidator` (PowerGamer1)
+- Bug #19683: Updated `framework\mimeType.php` to the actual value. Fix typo in `build/controllers/MimeTypeController.php` (DeryabinSergey)
+- Bug #19693: Fix db/Command not caching `NULL` result with scalar fetchMode (Arkeins)
+- Bug #19705: Add binary and other data types to `$typeMap` list for MySQL (sohelahmed7)
+- Bug #19712: Cast shell_exec() output to string for jsCompressor (impayru)
+- Bug #19720: Fix "zh-HK" locale causing [error][yii\i18n\PhpMessageSource::loadFallbackMessages] The message file for category 'yii' doesn't exist (uaoleg)
+- Bug #19731: Fix `yii\data\Sort` to generate a proper link when multisort is on and attribute has a default sort order set (bizley)
+- Bug #19734: PHP 8.1 compatibility fix for `$query->orderBy(null)` (uaoleg)
+- Bug #19735: Fix `yii\validators\NumberValidator` to use a programmable message for the value validation (bizley)
+- Bug #19736: Fix `StringHelper::truncate(null, 10)` causes error `Deprecated: mb_strlen(): Passing null to parameter #1 ($string) of type string is deprecated` (uaoleg)
+- Bug #19743: Non-associative array values in AR weren't considered dirty when reordered (samdark)
+- Bug #19749: Add PHP 8.2 support (samdark, schmunk42, aldok10, DanaLuther)
+- Bug #19770: Fix `yii\mutex\MysqlMutex` `keyPrefix` expression param binding (kamarton)
+- Bug #19795: Fix `yii\web\Response::redirect()` to prevent setting headers with URL containing new line character (bizley)
+- Bug #19807: Fix REST serializer not using `serializeModel()` when working with an array of models (zucha)
+- Bug #19813: Fix `yii\base\DynamicModel` validation with validators that reference missing attributes (michaelarnauts)
+- Bug #19828: Fix "strtr(): Passing null to parameter #1 ($string) of type string is deprecated" (uaoleg)
+- Bug #19837: Fixed processing of numeric file extensions in `yii\build\controllers\MimeTypeController::generateMimeTypesFile()` (rhertogh)
+- Enh #9740: Usage of DI instead of new keyword in Schemas (manchenkoff)
+- Enh #15376: Added cache usage for `yii\rbac\DbManager::getRolesByUser()` (manchenkoff)
+- Enh #19689: Remove empty elements from the `class` array in `yii\helpers\BaseHtml::renderTagAttributes()` to prevent unwanted spaces (MoritzLost)
+- Enh #19741: Added option to use a closure for `$variations` definition in `yii\filters\PageCache` (nadar)
+- Enh #19766: Add support for PHP generators to JSON helper (vladis84)
+- Enh #19794: Add caching in `yii\web\Request` for `getUserIP()` and `getSecureForwardedHeaderTrustedParts()` (rhertogh)
+- Enh #19804: Remove the unnecessary call to `$this->oldAttributes` in `BaseActiveRecord::getDirtyAttributes()` (thiagotalma)
+- Enh #19816: Explicitly pass `$fallbackToMaster` as `true` to `getSlavePdo()` to ensure it isn't affected by child class with changed defaults (developedsoftware)
+- Enh #19838: Added `yii\helpers\BaseFileHelper::getExtensionByMimeType()` to get the most common extension for a given MIME type (rhertogh)
+- Chg #19696: Change visibility of `yii\web\View::isPageEnded` to `protected` (lubosdz, samdark)
 
 
 2.0.47 November 18, 2022
diff --git a/src/UPGRADE.md b/src/UPGRADE.md
index 898f77c6944..3a9569a9822 100644
--- a/src/UPGRADE.md
+++ b/src/UPGRADE.md
@@ -52,6 +52,17 @@ version B between A and C, you need to follow the instructions
 for both A and B.
 
 
+Upgrade from Yii 2.0.48
+-----------------------
+
+* Since Yii 2.0.49 the `yii\console\Controller::select()` function supports a default value and respects
+  the `yii\console\Controller::$interactive` setting. Before the user was always prompted to select an option
+  regardless of the `$interactive` setting. Now the `$default` value is automatically returned when `$interactive` is 
+  `false`.
+* The function signature for `yii\console\Controller::select()` and `yii\helpers\BaseConsole::select()` have changed.
+  They now have an additional `$default = null` parameter. In case those methods are overwritten you will need to
+  update your child classes accordingly.
+
 Upgrade from Yii 2.0.46
 -----------------------
 
@@ -89,6 +100,11 @@ Upgrade from Yii 2.0.45
   2.0.45 behavior, [introduce your own method](https://github.com/yiisoft/yii2/pull/19495/files).
 * `yii\log\FileTarget::$rotateByCopy` is now deprecated and setting it to `false` has no effect since rotating of 
   the files is done only by copy.
+* `yii\validators\UniqueValidator` and `yii\validators\ExistValidator`, when used on multiple attributes, now only
+  generate an error on a single attribute. Previously, they would report a separate error on each attribute.
+  Old behavior can be achieved by setting `'skipOnError' => false`, but this might have undesired side effects with
+  additional validators on one of the target attributes.
+  See [issue #19407](https://github.com/yiisoft/yii2/issues/19407)
 
 Upgrade from Yii 2.0.44
 -----------------------
diff --git a/src/assets/yii.activeForm.js b/src/assets/yii.activeForm.js
index b12f812c37d..5b9ce4aaec2 100644
--- a/src/assets/yii.activeForm.js
+++ b/src/assets/yii.activeForm.js
@@ -395,9 +395,11 @@
                         data: $form.serialize() + extData,
                         dataType: data.settings.ajaxDataType,
                         complete: function (jqXHR, textStatus) {
+                            currentAjaxRequest = null;
                             $form.trigger(events.ajaxComplete, [jqXHR, textStatus]);
                         },
                         beforeSend: function (jqXHR, settings) {
+                            currentAjaxRequest = jqXHR;
                             $form.trigger(events.ajaxBeforeSend, [jqXHR, settings]);
                         },
                         success: function (msgs) {
@@ -563,6 +565,9 @@
             return;
         }
 
+        if (currentAjaxRequest !== null) {
+            currentAjaxRequest.abort();
+        }
         if (data.settings.timer !== undefined) {
             clearTimeout(data.settings.timer);
         }
@@ -929,4 +934,7 @@
             $form.find(attribute.input).attr('aria-invalid', hasError ? 'true' : 'false');
         }
     }
+
+    var currentAjaxRequest = null;
+
 })(window.jQuery);
diff --git a/src/assets/yii.gridView.js b/src/assets/yii.gridView.js
index 825ff5044db..f02d4d95e94 100644
--- a/src/assets/yii.gridView.js
+++ b/src/assets/yii.gridView.js
@@ -188,16 +188,19 @@
             if (!options.multiple || !options.checkAll) {
                 return;
             }
-            var checkAll = "#" + id + " input[name='" + options.checkAll + "']";
-            var inputs = options['class'] ? "input." + options['class'] : "input[name='" + options.name + "']";
-            var inputsEnabled = "#" + id + " " + inputs + ":enabled";
-            initEventHandler($grid, 'checkAllRows', 'click.yiiGridView', checkAll, function () {
-                $grid.find(inputs + ":enabled").prop('checked', this.checked).change();
+            var checkAllInput = "input[name='" + options.checkAll + "']";
+            var inputs = (options['class'] ? "input." + options['class'] : "input[name='" + options.name + "']") + ":enabled";
+            initEventHandler($grid, 'checkAllRows', 'click.yiiGridView', "#" + id + " " + checkAllInput, function () {
+                $grid.find(inputs + (this.checked ? ":not(:checked)" : ":checked")).prop('checked', this.checked).change();
             });
-            initEventHandler($grid, 'checkRow', 'click.yiiGridView', inputsEnabled, function () {
+            var handler = function () {
                 var all = $grid.find(inputs).length == $grid.find(inputs + ":checked").length;
-                $grid.find("input[name='" + options.checkAll + "']").prop('checked', all).change();
-            });
+                $grid.find(checkAllInput + (all ? ":not(:checked)" : ":checked")).prop('checked', all).change();
+            };
+            initEventHandler($grid, 'checkRow', 'click.yiiGridView', "#" + id + " " + inputs, handler);
+            if($grid.find(inputs).length) {
+                handler(); // Ensure "check all" checkbox is checked on page load if all data row checkboxes are initially checked.
+            }
         },
 
         getSelectedRows: function () {
diff --git a/src/base/Configurable.php b/src/base/Configurable.php
index 9982d6f627c..b44a082841e 100644
--- a/src/base/Configurable.php
+++ b/src/base/Configurable.php
@@ -15,7 +15,7 @@
  * like the following:
  *
  * ```php
- * public function __constructor($param1, $param2, ..., $config = [])
+ * public function __construct($param1, $param2, ..., $config = [])
  * ```
  *
  * That is, the last parameter of the constructor must accept a configuration array.
diff --git a/src/base/DynamicModel.php b/src/base/DynamicModel.php
index 027da6d1982..9ce466b8fa3 100644
--- a/src/base/DynamicModel.php
+++ b/src/base/DynamicModel.php
@@ -201,6 +201,7 @@ public function addRule($attributes, $validator, $options = [])
         }
 
         $validators->append($validator);
+        $this->defineAttributesByValidator($validator);
 
         return $this;
     }
@@ -223,9 +224,11 @@ public static function validateData(array $data, $rules = [])
             foreach ($rules as $rule) {
                 if ($rule instanceof Validator) {
                     $validators->append($rule);
+                    $model->defineAttributesByValidator($rule);
                 } elseif (is_array($rule) && isset($rule[0], $rule[1])) { // attributes, validator type
                     $validator = Validator::createValidator($rule[1], $model, (array)$rule[0], array_slice($rule, 2));
                     $validators->append($validator);
+                    $model->defineAttributesByValidator($validator);
                 } else {
                     throw new InvalidConfigException('Invalid validation rule: a rule must specify both attribute names and validator type.');
                 }
@@ -237,6 +240,19 @@ public static function validateData(array $data, $rules = [])
         return $model;
     }
 
+    /**
+     * Define the attributes that applies to the specified Validator.
+     * @param Validator $validator the validator whose attributes are to be defined.
+     */
+    private function defineAttributesByValidator($validator)
+    {
+        foreach ($validator->getAttributeNames() as $attribute) {
+            if (!$this->hasAttribute($attribute)) {
+                $this->defineAttribute($attribute);
+            }
+        }
+    }
+
     /**
      * {@inheritdoc}
      */
diff --git a/src/base/ErrorHandler.php b/src/base/ErrorHandler.php
index 81a20f0a3c9..393438ede57 100644
--- a/src/base/ErrorHandler.php
+++ b/src/base/ErrorHandler.php
@@ -94,7 +94,7 @@ public function register()
                 set_error_handler([$this, 'handleError']);
             }
             if ($this->memoryReserveSize > 0) {
-                $this->_memoryReserve = str_pad('', $this->memoryReserveSize, 'x');
+                $this->_memoryReserve = str_repeat('x', $this->memoryReserveSize);
             }
             // to restore working directory in shutdown handler
             if (PHP_SAPI !== 'cli') {
diff --git a/src/behaviors/AttributeTypecastBehavior.php b/src/behaviors/AttributeTypecastBehavior.php
index 3d372bef582..a418b15de25 100644
--- a/src/behaviors/AttributeTypecastBehavior.php
+++ b/src/behaviors/AttributeTypecastBehavior.php
@@ -362,5 +362,25 @@ public function afterSave($event)
     public function afterFind($event)
     {
         $this->typecastAttributes();
+
+        $this->resetOldAttributes();
+    }
+
+    /**
+     * Resets the old values of the named attributes.
+     */
+    protected function resetOldAttributes()
+    {
+        if ($this->attributeTypes === null) {
+            return;
+        }
+
+        $attributes = array_keys($this->attributeTypes);
+
+        foreach ($attributes as $attribute) {
+            if ($this->owner->canSetOldAttribute($attribute)) {
+                $this->owner->setOldAttribute($attribute, $this->owner->{$attribute});
+            }
+        }
     }
 }
diff --git a/src/caching/DbCache.php b/src/caching/DbCache.php
index 5bf3b02dedd..d707ba41a27 100644
--- a/src/caching/DbCache.php
+++ b/src/caching/DbCache.php
@@ -317,7 +317,7 @@ protected function isVarbinaryDataField()
      */
     protected function getDataFieldName()
     {
-        return $this->isVarbinaryDataField() ? 'convert(nvarchar(max),[data]) data' : 'data';
+        return $this->isVarbinaryDataField() ? 'CONVERT(VARCHAR(MAX), [[data]]) data' : 'data';
     }
 
     /**
diff --git a/src/classes.php b/src/classes.php
index 439f757ce0b..46741e3180d 100644
--- a/src/classes.php
+++ b/src/classes.php
@@ -345,9 +345,9 @@
   'yii\validators\RequiredValidator' => YII2_PATH . '/validators/RequiredValidator.php',
   'yii\validators\SafeValidator' => YII2_PATH . '/validators/SafeValidator.php',
   'yii\validators\StringValidator' => YII2_PATH . '/validators/StringValidator.php',
+  'yii\validators\TrimValidator' => YII2_PATH . '/validators/TrimValidator.php',
   'yii\validators\UniqueValidator' => YII2_PATH . '/validators/UniqueValidator.php',
   'yii\validators\UrlValidator' => YII2_PATH . '/validators/UrlValidator.php',
-  'yii\validators\TrimValidator' => YII2_PATH . '/validators/TrimValidator.php',
   'yii\validators\ValidationAsset' => YII2_PATH . '/validators/ValidationAsset.php',
   'yii\validators\Validator' => YII2_PATH . '/validators/Validator.php',
   'yii\web\Application' => YII2_PATH . '/web/Application.php',
diff --git a/src/composer.json b/src/composer.json
index aaafa056878..ff36473707c 100644
--- a/src/composer.json
+++ b/src/composer.json
@@ -68,11 +68,11 @@
         "ext-ctype": "*",
         "lib-pcre": "*",
         "yiisoft/yii2-composer": "~2.0.4",
-        "ezyang/htmlpurifier": "~4.6",
+        "ezyang/htmlpurifier": "^4.6",
         "cebe/markdown": "~1.0.0 | ~1.1.0 | ~1.2.0",
-        "bower-asset/jquery": "3.6.*@stable | 3.5.*@stable | 3.4.*@stable | 3.3.*@stable | 3.2.*@stable | 3.1.*@stable | 2.2.*@stable | 2.1.*@stable | 1.11.*@stable | 1.12.*@stable",
-        "bower-asset/inputmask": "~3.2.2 | ~3.3.5",
-        "bower-asset/punycode": "1.3.*",
+        "bower-asset/jquery": "3.7.*@stable | 3.6.*@stable | 3.5.*@stable | 3.4.*@stable | 3.3.*@stable | 3.2.*@stable | 3.1.*@stable | 2.2.*@stable | 2.1.*@stable | 1.11.*@stable | 1.12.*@stable",
+        "bower-asset/inputmask": "^5.0.8 ",
+        "bower-asset/punycode": "^2.2",
         "bower-asset/yii2-pjax": "~2.0.1",
         "paragonie/random_compat": ">=1"
     },
diff --git a/src/console/Controller.php b/src/console/Controller.php
index 614241d0f31..579b5977830 100644
--- a/src/console/Controller.php
+++ b/src/console/Controller.php
@@ -28,8 +28,8 @@
  * where `<route>` is a route to a controller action and the params will be populated as properties of a command.
  * See [[options()]] for details.
  *
- * @property-read string $help The help information for this controller.
- * @property-read string $helpSummary The one-line short summary describing this controller.
+ * @property-read string $help
+ * @property-read string $helpSummary
  * @property-read array $passedOptionValues The properties corresponding to the passed options.
  * @property-read array $passedOptions The names of the options passed during execution.
  *
@@ -400,12 +400,19 @@ public function confirm($message, $default = false)
      *
      * @param string $prompt the prompt message
      * @param array $options Key-value array of options to choose from
+     * @param string|null $default value to use when the user doesn't provide an option.
+     * If the default is `null`, the user is required to select an option.
      *
      * @return string An option character the user chose
+     * @since 2.0.49 Added the $default argument
      */
-    public function select($prompt, $options = [])
+    public function select($prompt, $options = [], $default = null)
     {
-        return Console::select($prompt, $options);
+        if ($this->interactive) {
+            return Console::select($prompt, $options, $default);
+        }
+
+        return $default;
     }
 
     /**
diff --git a/src/console/controllers/AssetController.php b/src/console/controllers/AssetController.php
index 5215066df40..8b9d5a3fc27 100644
--- a/src/console/controllers/AssetController.php
+++ b/src/console/controllers/AssetController.php
@@ -515,7 +515,7 @@ protected function compressJsFiles($inputFiles, $outputFile)
         if (is_string($this->jsCompressor)) {
             $tmpFile = $outputFile . '.tmp';
             $this->combineJsFiles($inputFiles, $tmpFile);
-            $this->stdout(shell_exec(strtr($this->jsCompressor, [
+            $this->stdout((string)shell_exec(strtr($this->jsCompressor, [
                 '{from}' => escapeshellarg($tmpFile),
                 '{to}' => escapeshellarg($outputFile),
             ])));
diff --git a/src/console/controllers/MessageController.php b/src/console/controllers/MessageController.php
index e1a73576903..6d5a7d6448f 100644
--- a/src/console/controllers/MessageController.php
+++ b/src/console/controllers/MessageController.php
@@ -353,17 +353,7 @@ protected function saveMessagesToDb($messages, $db, $sourceMessageTable, $messag
         foreach ($rows as $row) {
             $currentMessages[$row['category']][$row['id']] = $row['message'];
         }
-
-        $currentLanguages = [];
-        $rows = (new Query())->select(['language'])->from($messageTable)->groupBy('language')->all($db);
-        foreach ($rows as $row) {
-            $currentLanguages[] = $row['language'];
-        }
-        $missingLanguages = [];
-        if (!empty($currentLanguages)) {
-            $missingLanguages = array_diff($languages, $currentLanguages);
-        }
-
+        
         $new = [];
         $obsolete = [];
 
@@ -372,89 +362,130 @@ protected function saveMessagesToDb($messages, $db, $sourceMessageTable, $messag
 
             if (isset($currentMessages[$category])) {
                 $new[$category] = array_diff($msgs, $currentMessages[$category]);
+                // obsolete messages per category
                 $obsolete += array_diff($currentMessages[$category], $msgs);
             } else {
                 $new[$category] = $msgs;
             }
         }
-
+        
+        // obsolete categories
         foreach (array_diff(array_keys($currentMessages), array_keys($messages)) as $category) {
             $obsolete += $currentMessages[$category];
         }
 
         if (!$removeUnused) {
             foreach ($obsolete as $pk => $msg) {
+                // skip already marked unused
                 if (strncmp($msg, '@@', 2) === 0 && substr($msg, -2) === '@@') {
                     unset($obsolete[$pk]);
                 }
             }
-        }
-
-        $obsolete = array_keys($obsolete);
+        }        
+        
         $this->stdout('Inserting new messages...');
-        $savedFlag = false;
+        $insertCount = 0;
 
         foreach ($new as $category => $msgs) {
             foreach ($msgs as $msg) {
-                $savedFlag = true;
-                $lastPk = $db->schema->insert($sourceMessageTable, ['category' => $category, 'message' => $msg]);
-                foreach ($languages as $language) {
-                    $db->createCommand()
-                       ->insert($messageTable, ['id' => $lastPk['id'], 'language' => $language])
-                       ->execute();
-                }
-            }
-        }
-
-        if (!empty($missingLanguages)) {
-            $updatedMessages = [];
-            $rows = (new Query())->select(['id', 'category', 'message'])->from($sourceMessageTable)->all($db);
-            foreach ($rows as $row) {
-                $updatedMessages[$row['category']][$row['id']] = $row['message'];
-            }
-            foreach ($updatedMessages as $category => $msgs) {
-                foreach ($msgs as $id => $msg) {
-                    $savedFlag = true;
-                    foreach ($missingLanguages as $language) {
-                        $db->createCommand()
-                            ->insert($messageTable, ['id' => $id, 'language' => $language])
-                            ->execute();
-                    }
-                }
+                $insertCount++;
+                $db->schema->insert($sourceMessageTable, ['category' => $category, 'message' => $msg]);
             }
         }
-
-        $this->stdout($savedFlag ? "saved.\n" : "Nothing to save.\n");
+        
+        $this->stdout($insertCount ? "{$insertCount} saved.\n" : "Nothing to save.\n");
+        
         $this->stdout($removeUnused ? 'Deleting obsoleted messages...' : 'Updating obsoleted messages...');
 
         if (empty($obsolete)) {
             $this->stdout("Nothing obsoleted...skipped.\n");
-            return;
         }
 
-        if ($removeUnused) {
-            $db->createCommand()
-               ->delete($sourceMessageTable, ['in', 'id', $obsolete])
-               ->execute();
-            $this->stdout("deleted.\n");
-        } elseif ($markUnused) {
-            $rows = (new Query())
-                ->select(['id', 'message'])
-                ->from($sourceMessageTable)
-                ->where(['in', 'id', $obsolete])
-                ->all($db);
-
-            foreach ($rows as $row) {
-                $db->createCommand()->update(
-                    $sourceMessageTable,
-                    ['message' => '@@' . $row['message'] . '@@'],
-                    ['id' => $row['id']]
-                )->execute();
+        if ($obsolete) {
+            if ($removeUnused) {
+                $affected = $db->createCommand()
+                   ->delete($sourceMessageTable, ['in', 'id', array_keys($obsolete)])
+                   ->execute();
+                $this->stdout("{$affected} deleted.\n");
+            } elseif ($markUnused) {
+                $marked=0;
+                $rows = (new Query())
+                    ->select(['id', 'message'])
+                    ->from($sourceMessageTable)
+                    ->where(['in', 'id', array_keys($obsolete)])
+                    ->all($db);
+    
+                foreach ($rows as $row) {
+                    $marked++;
+                    $db->createCommand()->update(
+                        $sourceMessageTable,
+                        ['message' => '@@' . $row['message'] . '@@'],
+                        ['id' => $row['id']]
+                    )->execute();
+                }
+                $this->stdout("{$marked} updated.\n");
+            } else {
+                $this->stdout("kept untouched.\n");
             }
-            $this->stdout("updated.\n");
-        } else {
-            $this->stdout("kept untouched.\n");
         }
+        
+        // get fresh message id list
+        $freshMessagesIds = [];
+        $rows = (new Query())->select(['id'])->from($sourceMessageTable)->all($db);
+        foreach ($rows as $row) {
+            $freshMessagesIds[] = $row['id'];
+        }
+            
+        $this->stdout("Generating missing rows...");
+        $generatedMissingRows = [];
+        
+        foreach ($languages as $language) {
+          $count = 0;
+          
+          // get list of ids of translations for this language
+          $msgRowsIds = [];
+          $msgRows = (new Query())->select(['id'])->from($messageTable)->where([
+              'language'=>$language,
+          ])->all($db);
+          foreach ($msgRows as $row) {
+              $msgRowsIds[] = $row['id'];
+          }
+          
+          // insert missing
+          foreach ($freshMessagesIds as $id) {
+            if (!in_array($id, $msgRowsIds)) {
+              $db->createCommand()
+                 ->insert($messageTable, ['id' => $id, 'language' => $language])
+                 ->execute();
+              $count++;
+            }
+          }
+          if ($count) {
+            $generatedMissingRows[] = "{$count} for {$language}";
+          }
+        }
+        
+        $this->stdout($generatedMissingRows ? implode(", ", $generatedMissingRows).".\n" : "Nothing to do.\n");
+        
+        $this->stdout("Dropping unused languages...");
+        $droppedLanguages=[];
+        
+        $currentLanguages = [];
+        $rows = (new Query())->select(['language'])->from($messageTable)->groupBy('language')->all($db);
+        foreach ($rows as $row) {
+            $currentLanguages[] = $row['language'];
+        }
+        
+        foreach ($currentLanguages as $currentLanguage) {
+          if (!in_array($currentLanguage, $languages)) {
+            $deleted=$db->createCommand()->delete($messageTable, "language=:language", [
+                'language'=>$currentLanguage,
+            ])->execute();
+            $droppedLanguages[] = "removed {$deleted} rows for $currentLanguage";
+          }
+        }
+        
+        $this->stdout($droppedLanguages ? implode(", ", $droppedLanguages).".\n" : "Nothing to do.\n");
     }
 
     /**
diff --git a/src/console/controllers/ServeController.php b/src/console/controllers/ServeController.php
index 68a7e50c286..b806f67d55b 100644
--- a/src/console/controllers/ServeController.php
+++ b/src/console/controllers/ServeController.php
@@ -80,7 +80,13 @@ public function actionIndex($address = 'localhost')
         }
         $this->stdout("Quit the server with CTRL-C or COMMAND-C.\n");
 
-        passthru('"' . PHP_BINARY . '"' . " -S {$address} -t \"{$documentRoot}\" $router");
+        $command = '"' . PHP_BINARY . '"' . " -S {$address} -t \"{$documentRoot}\"";
+
+        if ($this->router !== null && $router !== '') {
+            $command .= " -r \"{$router}\"";
+        }
+
+        $this->runCommand($command);
     }
 
     /**
@@ -122,4 +128,9 @@ protected function isAddressTaken($address)
         fclose($fp);
         return true;
     }
+
+    protected function runCommand($command)
+    {
+        passthru($command);
+    }
 }
diff --git a/src/console/widgets/Table.php b/src/console/widgets/Table.php
index 4862e88b6be..c0ece4d4d89 100644
--- a/src/console/widgets/Table.php
+++ b/src/console/widgets/Table.php
@@ -136,7 +136,11 @@ public function setRows(array $rows)
     {
         $this->rows = array_map(function($row) {
             return array_map(function($value) {
-                return empty($value) && !is_numeric($value) ? ' ' : $value;
+                return empty($value) && !is_numeric($value)
+                    ? ' '
+                    :  (is_array($value)
+                        ? array_values($value)
+                        : $value);
             }, array_values($row));
         }, $rows);
         return $this;
@@ -252,18 +256,32 @@ protected function renderRow(array $row, $spanLeft, $spanMiddle, $spanRight)
                 if ($index !== 0) {
                     $buffer .= $spanMiddle . ' ';
                 }
+
+                $arrayFromMultilineString = false;
+                if (is_string($cell)) {
+                    $cellLines = explode(PHP_EOL, $cell);
+                    if (count($cellLines) > 1) {
+                        $cell = $cellLines;
+                        $arrayFromMultilineString = true;
+                    }
+                }
+
                 if (is_array($cell)) {
                     if (empty($renderedChunkTexts[$index])) {
                         $renderedChunkTexts[$index] = '';
                         $start = 0;
-                        $prefix = $this->listPrefix;
+                        $prefix = $arrayFromMultilineString ? '' : $this->listPrefix;
                         if (!isset($arrayPointer[$index])) {
                             $arrayPointer[$index] = 0;
                         }
                     } else {
                         $start = mb_strwidth($renderedChunkTexts[$index], Yii::$app->charset);
                     }
-                    $chunk = Console::ansiColorizedSubstr($cell[$arrayPointer[$index]], $start, $cellSize - 4);
+                    $chunk = Console::ansiColorizedSubstr(
+                        $cell[$arrayPointer[$index]],
+                        $start,
+                        $cellSize - 2 - Console::ansiStrwidth($prefix)
+                    );
                     $renderedChunkTexts[$index] .= Console::stripAnsiFormat($chunk);
                     $fullChunkText = Console::stripAnsiFormat($cell[$arrayPointer[$index]]);
                     if (isset($cell[$arrayPointer[$index] + 1]) && $renderedChunkTexts[$index] === $fullChunkText) {
@@ -339,6 +357,9 @@ protected function calculateRowsSize()
                 if (is_array($val)) {
                     return max(array_map('yii\helpers\Console::ansiStrwidth', $val)) + Console::ansiStrwidth($this->listPrefix);
                 }
+                if (is_string($val)) {
+                    return max(array_map('yii\helpers\Console::ansiStrwidth', explode(PHP_EOL, $val)));
+                }
                 return Console::ansiStrwidth($val);
             }, $column)) + 2;
             $this->columnWidths[] = $columnWidth;
@@ -388,6 +409,9 @@ protected function calculateRowHeight($row)
             if (is_array($val)) {
                 return array_map('yii\helpers\Console::ansiStrwidth', $val);
             }
+            if (is_string($val)) {
+                return array_map('yii\helpers\Console::ansiStrwidth', explode(PHP_EOL, $val));
+            }
             return Console::ansiStrwidth($val);
         }, $row));
         return max($rowsPerCell);
diff --git a/src/data/ActiveDataProvider.php b/src/data/ActiveDataProvider.php
index a8b6e158ecf..3a129aa7293 100644
--- a/src/data/ActiveDataProvider.php
+++ b/src/data/ActiveDataProvider.php
@@ -183,15 +183,11 @@ public function setSort($value)
                     $sort->attributes[$attribute] = [
                         'asc' => [$attribute => SORT_ASC],
                         'desc' => [$attribute => SORT_DESC],
-                        'label' => $model->getAttributeLabel($attribute),
                     ];
                 }
-            } else {
-                foreach ($sort->attributes as $attribute => $config) {
-                    if (!isset($config['label'])) {
-                        $sort->attributes[$attribute]['label'] = $model->getAttributeLabel($attribute);
-                    }
-                }
+            }
+            if ($sort->modelClass === null) {
+                $sort->modelClass = $modelClass;
             }
         }
     }
diff --git a/src/data/Pagination.php b/src/data/Pagination.php
index e74bc09afcf..a928681c4da 100644
--- a/src/data/Pagination.php
+++ b/src/data/Pagination.php
@@ -133,8 +133,8 @@ class Pagination extends BaseObject implements Linkable
      */
     public $defaultPageSize = 20;
     /**
-     * @var array|false the page size limits. The first array element stands for the minimal page size, and the second
-     * the maximal page size. If this is false, it means [[pageSize]] should always return the value of [[defaultPageSize]].
+     * @var array|false the page size limits. The first array element defines the minimum page size, and the second
+     * the maximum page size. If this is false, it means [[pageSize]] should always return the value of [[defaultPageSize]].
      */
     public $pageSizeLimit = [1, 50];
 
diff --git a/src/data/Sort.php b/src/data/Sort.php
index 5b7ff3b77db..0c0abc8b606 100644
--- a/src/data/Sort.php
+++ b/src/data/Sort.php
@@ -145,7 +145,7 @@ class Sort extends BaseObject
      */
     public $sortParam = 'sort';
     /**
-     * @var array the order that should be used when the current request does not specify any order.
+     * @var array|null the order that should be used when the current request does not specify any order.
      * The array keys are attribute names and the array values are the corresponding sort directions. For example,
      *
      * ```php
@@ -191,6 +191,12 @@ class Sort extends BaseObject
      * @since 2.0.33
      */
     public $sortFlags = SORT_REGULAR;
+    /**
+     * @var string|null the name of the [[\yii\base\Model]]-based class used by the [[link()]] method to retrieve
+     * attributes' labels. See [[link]] method for details.
+     * @since 2.0.49
+     */
+    public $modelClass;
 
 
     /**
@@ -277,6 +283,8 @@ public function getAttributeOrders($recalculate = false)
                         }
                     }
                 }
+
+                return $this->_attributeOrders;
             }
             if (empty($this->_attributeOrders) && is_array($this->defaultOrder)) {
                 $this->_attributeOrders = $this->defaultOrder;
@@ -361,7 +369,8 @@ public function getAttributeOrder($attribute)
      * @param array $options additional HTML attributes for the hyperlink tag.
      * There is one special attribute `label` which will be used as the label of the hyperlink.
      * If this is not set, the label defined in [[attributes]] will be used.
-     * If no label is defined, [[\yii\helpers\Inflector::camel2words()]] will be called to get a label.
+     * If no label is defined, it will be retrieved from the instance of [[modelClass]] (if [[modelClass]] is not null)
+     * or generated from attribute name using [[\yii\helpers\Inflector::camel2words()]].
      * Note that it will not be HTML-encoded.
      * @return string the generated hyperlink
      * @throws InvalidConfigException if the attribute is unknown
@@ -386,6 +395,11 @@ public function link($attribute, $options = [])
         } else {
             if (isset($this->attributes[$attribute]['label'])) {
                 $label = $this->attributes[$attribute]['label'];
+            } elseif ($this->modelClass !== null) {
+                $modelClass = $this->modelClass;
+                /** @var \yii\base\Model $model */
+                $model = $modelClass::instance();
+                $label = $model->getAttributeLabel($attribute);
             } else {
                 $label = Inflector::camel2words($attribute);
             }
diff --git a/src/db/ActiveQueryTrait.php b/src/db/ActiveQueryTrait.php
index e2de1dd12d9..d49fa0fba87 100644
--- a/src/db/ActiveQueryTrait.php
+++ b/src/db/ActiveQueryTrait.php
@@ -135,6 +135,10 @@ protected function createModels($rows)
      */
     public function findWith($with, &$models)
     {
+        if (empty($models)) {
+            return;
+        }
+
         $primaryModel = reset($models);
         if (!$primaryModel instanceof ActiveRecordInterface) {
             /* @var $modelClass ActiveRecordInterface */
diff --git a/src/db/ActiveRecordInterface.php b/src/db/ActiveRecordInterface.php
index d845e9d32cb..441001a99ff 100644
--- a/src/db/ActiveRecordInterface.php
+++ b/src/db/ActiveRecordInterface.php
@@ -144,6 +144,7 @@ public static function isPrimaryKey($keys);
      * // Use where() to ignore the default condition
      * // SELECT FROM customer WHERE age>30
      * $customers = Customer::find()->where('age>30')->all();
+     * ```
      *
      * @return ActiveQueryInterface the newly created [[ActiveQueryInterface]] instance.
      */
diff --git a/src/db/BaseActiveRecord.php b/src/db/BaseActiveRecord.php
index 67a55d7884b..ab5414416c5 100644
--- a/src/db/BaseActiveRecord.php
+++ b/src/db/BaseActiveRecord.php
@@ -282,7 +282,7 @@ public function canSetProperty($name, $checkVars = true, $checkBehaviors = true)
      */
     public function __get($name)
     {
-        if (isset($this->_attributes[$name]) || array_key_exists($name, $this->_attributes)) {
+        if (array_key_exists($name, $this->_attributes)) {
             return $this->_attributes[$name];
         }
 
@@ -290,7 +290,7 @@ public function __get($name)
             return null;
         }
 
-        if (isset($this->_related[$name]) || array_key_exists($name, $this->_related)) {
+        if (array_key_exists($name, $this->_related)) {
             return $this->_related[$name];
         }
         $value = parent::__get($name);
@@ -576,13 +576,24 @@ public function getOldAttribute($name)
      */
     public function setOldAttribute($name, $value)
     {
-        if (isset($this->_oldAttributes[$name]) || $this->hasAttribute($name)) {
+        if ($this->canSetOldAttribute($name)) {
             $this->_oldAttributes[$name] = $value;
         } else {
             throw new InvalidArgumentException(get_class($this) . ' has no attribute named "' . $name . '".');
         }
     }
 
+    /**
+     * Returns if the old named attribute can be set.
+     * @param string $name the attribute name
+     * @return bool whether the old attribute can be set
+     * @see setOldAttribute()
+     */
+    public function canSetOldAttribute($name)
+    {
+        return (isset($this->_oldAttributes[$name]) || $this->hasAttribute($name));
+    }
+
     /**
      * Marks an attribute dirty.
      * This method may be called to force updating a record when calling [[update()]],
@@ -639,7 +650,7 @@ public function getDirtyAttributes($names = null)
             }
         } else {
             foreach ($this->_attributes as $name => $value) {
-                if (isset($names[$name]) && (!array_key_exists($name, $this->_oldAttributes) || $this->isAttributeDirty($name, $value))) {
+                if (isset($names[$name]) && (!array_key_exists($name, $this->_oldAttributes) || $this->isValueDifferent($value, $this->_oldAttributes[$name]))) {
                     $attributes[$name] = $value;
                 }
             }
@@ -1599,40 +1610,46 @@ public static function isPrimaryKey($keys)
 
     /**
      * Returns the text label for the specified attribute.
-     * If the attribute looks like `relatedModel.attribute`, then the attribute will be received from the related model.
+     * The attribute may be specified in a dot format to retrieve the label from related model or allow this model to override the label defined in related model.
+     * For example, if the attribute is specified as 'relatedModel1.relatedModel2.attr' the function will return the first label definition it can find
+     * in the following order:
+     * - the label for 'relatedModel1.relatedModel2.attr' defined in [[attributeLabels()]] of this model;
+     * - the label for 'relatedModel2.attr' defined in related model represented by relation 'relatedModel1' of this model;
+     * - the label for 'attr' defined in related model represented by relation 'relatedModel2' of relation 'relatedModel1'.
+     *   If no label definition was found then the value of $this->generateAttributeLabel('relatedModel1.relatedModel2.attr') will be returned.
      * @param string $attribute the attribute name
      * @return string the attribute label
-     * @see generateAttributeLabel()
      * @see attributeLabels()
+     * @see generateAttributeLabel()
      */
     public function getAttributeLabel($attribute)
     {
-        $labels = $this->attributeLabels();
-        if (isset($labels[$attribute])) {
-            return $labels[$attribute];
-        } elseif (strpos($attribute, '.')) {
-            $attributeParts = explode('.', $attribute);
-            $neededAttribute = array_pop($attributeParts);
+        $model = $this;
+        $modelAttribute = $attribute;
+        for (;;) {
+            $labels = $model->attributeLabels();
+            if (isset($labels[$modelAttribute])) {
+                return $labels[$modelAttribute];
+            }
 
-            $relatedModel = $this;
-            foreach ($attributeParts as $relationName) {
-                if ($relatedModel->isRelationPopulated($relationName) && $relatedModel->$relationName instanceof self) {
-                    $relatedModel = $relatedModel->$relationName;
-                } else {
-                    try {
-                        $relation = $relatedModel->getRelation($relationName);
-                    } catch (InvalidParamException $e) {
-                        return $this->generateAttributeLabel($attribute);
-                    }
-                    /* @var $modelClass ActiveRecordInterface */
-                    $modelClass = $relation->modelClass;
-                    $relatedModel = $modelClass::instance();
-                }
+            $parts = explode('.', $modelAttribute, 2);
+            if (count($parts) < 2) {
+                break;
             }
 
-            $labels = $relatedModel->attributeLabels();
-            if (isset($labels[$neededAttribute])) {
-                return $labels[$neededAttribute];
+            list ($relationName, $modelAttribute) = $parts;
+
+            if ($model->isRelationPopulated($relationName) && $model->$relationName instanceof self) {
+                $model = $model->$relationName;
+            } else {
+                try {
+                    $relation = $model->getRelation($relationName);
+                } catch (InvalidArgumentException $e) {
+                    break;
+                }
+                /* @var $modelClass ActiveRecordInterface */
+                $modelClass = $relation->modelClass;
+                $model = $modelClass::instance();
             }
         }
 
@@ -1756,18 +1773,71 @@ private function setRelationDependencies($name, $relation, $viaRelationName = nu
     }
 
     /**
-     * @param string $attribute
-     * @param mixed $value
+     * @param mixed $newValue
+     * @param mixed $oldValue
      * @return bool
+     * @since 2.0.48
+     */
+    private function isValueDifferent($newValue, $oldValue)
+    {
+        if (is_array($newValue) && is_array($oldValue) && ArrayHelper::isAssociative($oldValue)) {
+            $newValue = ArrayHelper::recursiveSort($newValue);
+            $oldValue = ArrayHelper::recursiveSort($oldValue);
+        }
+
+        return $newValue !== $oldValue;
+    }
+
+    /**
+     * Eager loads related models for the already loaded primary models.
+     *
+     * Helps to reduce the number of queries performed against database if some related models are only used
+     * when a specific condition is met. For example:
+     *
+     * ```php
+     * $customers = Customer::find()->where(['country_id' => 123])->all();
+     * if (Yii:app()->getUser()->getIdentity()->canAccessOrders()) {
+     *     Customer::loadRelationsFor($customers, 'orders.items');
+     * }
+     * ```
+     *
+     * @param array|ActiveRecordInterface[] $models array of primary models. Each model should have the same type and can be:
+     * - an active record instance;
+     * - active record instance represented by array (i.e. active record was loaded using [[ActiveQuery::asArray()]]).
+     * @param string|array $relationNames the names of the relations of primary models to be loaded from database. See [[ActiveQueryInterface::with()]] on how to specify this argument.
+     * @param bool $asArray whether to load each related model as an array or an object (if the relation itself does not specify that).
+     * @since 2.0.49
      */
-    private function isAttributeDirty($attribute, $value)
+    public static function loadRelationsFor(&$models, $relationNames, $asArray = false)
     {
-        $old_attribute = $this->oldAttributes[$attribute];
-        if (is_array($value) && is_array($this->oldAttributes[$attribute])) {
-            $value = ArrayHelper::recursiveSort($value);
-            $old_attribute = ArrayHelper::recursiveSort($old_attribute);
+        // ActiveQueryTrait::findWith() called below assumes $models array is non-empty.
+        if (empty($models)) {
+            return;
         }
 
-        return $value !== $old_attribute;
+        static::find()->asArray($asArray)->findWith((array)$relationNames, $models);
+    }
+
+    /**
+     * Eager loads related models for the already loaded primary model.
+     *
+     * Helps to reduce the number of queries performed against database if some related models are only used
+     * when a specific condition is met. For example:
+     *
+     * ```php
+     * $customer = Customer::find()->where(['id' => 123])->one();
+     * if (Yii:app()->getUser()->getIdentity()->canAccessOrders()) {
+     *     $customer->loadRelations('orders.items');
+     * }
+     * ```
+     *
+     * @param string|array $relationNames the names of the relations of this model to be loaded from database. See [[ActiveQueryInterface::with()]] on how to specify this argument.
+     * @param bool $asArray whether to load each relation as an array or an object (if the relation itself does not specify that).
+     * @since 2.0.49
+     */
+    public function loadRelations($relationNames, $asArray = false)
+    {
+        $models = [$this];
+        static::loadRelationsFor($models, $relationNames, $asArray);
     }
 }
diff --git a/src/db/Command.php b/src/db/Command.php
index 6f5d5daede2..72eda72e4e1 100644
--- a/src/db/Command.php
+++ b/src/db/Command.php
@@ -258,7 +258,7 @@ public function prepare($forRead = null)
             $forRead = false;
         }
         if ($forRead || $forRead === null && $this->db->getSchema()->isReadQuery($sql)) {
-            $pdo = $this->db->getSlavePdo();
+            $pdo = $this->db->getSlavePdo(true);
         } else {
             $pdo = $this->db->getMasterPdo();
         }
@@ -377,6 +377,13 @@ public function bindValues($values)
                 $this->pendingParams[$name] = [$value->getValue(), $value->getType()];
                 $this->params[$name] = $value->getValue();
             } else {
+                if (version_compare(PHP_VERSION, '8.1.0') >= 0) {
+                    if ($value instanceof \BackedEnum) {
+                        $value = $value->value;
+                    } elseif ($value instanceof \UnitEnum) {
+                        $value = $value->name;
+                    }
+                }
                 $type = $schema->getPdoType($value);
                 $this->pendingParams[$name] = [$value, $type];
                 $this->params[$name] = $value;
@@ -631,7 +638,8 @@ public function delete($table, $condition = '', $params = [])
      *
      * The columns in the new table should be specified as name-definition pairs (e.g. 'name' => 'string'),
      * where name stands for a column name which will be properly quoted by the method, and definition
-     * stands for the column type which can contain an abstract DB type.
+     * stands for the column type which must contain an abstract DB type.
+     *
      * The method [[QueryBuilder::getColumnType()]] will be called
      * to convert the abstract column types to physical ones. For example, `string` will be converted
      * as `varchar(255)`, and `string not null` becomes `varchar(255) not null`.
@@ -639,6 +647,16 @@ public function delete($table, $condition = '', $params = [])
      * If a column is specified with definition only (e.g. 'PRIMARY KEY (name, type)'), it will be directly
      * inserted into the generated SQL.
      *
+     * Example usage:
+     * ```php
+     * Yii::$app->db->createCommand()->createTable('post', [
+     *     'id' => 'pk',
+     *     'title' => 'string',
+     *     'text' => 'text',
+     *     'column_name double precision null default null',
+     * ]);
+     * ```
+     *
      * @param string $table the name of the table to be created. The name will be properly quoted by the method.
      * @param array $columns the columns (name => definition) in the new table.
      * @param string|null $options additional SQL fragment that will be appended to the generated SQL.
@@ -1153,7 +1171,7 @@ protected function queryInternal($method, $fetchMode = null)
                 $cache = $info[0];
                 $cacheKey = $this->getCacheKey($method, $fetchMode, '');
                 $result = $cache->get($cacheKey);
-                if (is_array($result) && isset($result[0])) {
+                if (is_array($result) && array_key_exists(0, $result)) {
                     Yii::debug('Query result served from cache', 'yii\db\Command::query');
                     return $result[0];
                 }
diff --git a/src/db/Connection.php b/src/db/Connection.php
index 0693d242206..4df8f3af62f 100644
--- a/src/db/Connection.php
+++ b/src/db/Connection.php
@@ -1013,7 +1013,7 @@ public function getDriverName()
             if (($pos = strpos((string)$this->dsn, ':')) !== false) {
                 $this->_driverName = strtolower(substr($this->dsn, 0, $pos));
             } else {
-                $this->_driverName = strtolower($this->getSlavePdo()->getAttribute(PDO::ATTR_DRIVER_NAME));
+                $this->_driverName = strtolower($this->getSlavePdo(true)->getAttribute(PDO::ATTR_DRIVER_NAME));
             }
         }
 
diff --git a/src/db/Migration.php b/src/db/Migration.php
index be61749514e..c4bf99981af 100644
--- a/src/db/Migration.php
+++ b/src/db/Migration.php
@@ -305,13 +305,25 @@ public function delete($table, $condition = '', $params = [])
      *
      * The columns in the new  table should be specified as name-definition pairs (e.g. 'name' => 'string'),
      * where name stands for a column name which will be properly quoted by the method, and definition
-     * stands for the column type which can contain an abstract DB type.
+     * stands for the column type which must contain an abstract DB type.
      *
      * The [[QueryBuilder::getColumnType()]] method will be invoked to convert any abstract type into a physical one.
      *
      * If a column is specified with definition only (e.g. 'PRIMARY KEY (name, type)'), it will be directly
      * put into the generated SQL.
      *
+     * Example usage:
+     * ```php
+     * class m200000_000000_create_table_fruits extends \yii\db\Migration
+     * {
+     *     public function safeUp()
+     *     {
+     *          $this->createTable('{{%fruits}}', [
+     *              // ...
+     *              'column_name double precision null default null',
+     * ```
+     *
+     *
      * @param string $table the name of the table to be created. The name will be properly quoted by the method.
      * @param array $columns the columns (name => definition) in the new table.
      * @param string|null $options additional SQL fragment that will be appended to the generated SQL.
diff --git a/src/db/Query.php b/src/db/Query.php
index f0b215859dc..1819c9c3107 100644
--- a/src/db/Query.php
+++ b/src/db/Query.php
@@ -1049,7 +1049,7 @@ public function rightJoin($table, $on = '', $params = [])
 
     /**
      * Sets the GROUP BY part of the query.
-     * @param string|array|ExpressionInterface $columns the columns to be grouped by.
+     * @param string|array|ExpressionInterface|null $columns the columns to be grouped by.
      * Columns can be specified in either a string (e.g. "id, name") or an array (e.g. ['id', 'name']).
      * The method will automatically quote the column names unless a column contains some parenthesis
      * (which means the column contains a DB expression).
@@ -1067,7 +1067,7 @@ public function groupBy($columns)
     {
         if ($columns instanceof ExpressionInterface) {
             $columns = [$columns];
-        } elseif (!is_array($columns)) {
+        } elseif (!is_array($columns) && !is_null($columns)) {
             $columns = preg_split('/\s*,\s*/', trim($columns), -1, PREG_SPLIT_NO_EMPTY);
         }
         $this->groupBy = $columns;
diff --git a/src/db/QueryBuilder.php b/src/db/QueryBuilder.php
index b96ffe28eff..114116e67c5 100644
--- a/src/db/QueryBuilder.php
+++ b/src/db/QueryBuilder.php
@@ -692,7 +692,7 @@ public function delete($table, $condition, &$params)
      *
      * The columns in the new table should be specified as name-definition pairs (e.g. 'name' => 'string'),
      * where name stands for a column name which will be properly quoted by the method, and definition
-     * stands for the column type which can contain an abstract DB type.
+     * stands for the column type which must contain an abstract DB type.
      * The [[getColumnType()]] method will be invoked to convert any abstract type into a physical one.
      *
      * If a column is specified with definition only (e.g. 'PRIMARY KEY (name, type)'), it will be directly
@@ -705,6 +705,7 @@ public function delete($table, $condition, &$params)
      *  'id' => 'pk',
      *  'name' => 'string',
      *  'age' => 'integer',
+     *  'column_name double precision null default null', # definition only example
      * ]);
      * ```
      *
diff --git a/src/db/QueryTrait.php b/src/db/QueryTrait.php
index 990520d4e5b..308e31db769 100644
--- a/src/db/QueryTrait.php
+++ b/src/db/QueryTrait.php
@@ -305,7 +305,7 @@ protected function isEmpty($value)
 
     /**
      * Sets the ORDER BY part of the query.
-     * @param string|array|ExpressionInterface $columns the columns (and the directions) to be ordered by.
+     * @param string|array|ExpressionInterface|null $columns the columns (and the directions) to be ordered by.
      * Columns can be specified in either a string (e.g. `"id ASC, name DESC"`) or an array
      * (e.g. `['id' => SORT_ASC, 'name' => SORT_DESC]`).
      *
@@ -358,12 +358,14 @@ public function addOrderBy($columns)
     /**
      * Normalizes format of ORDER BY data.
      *
-     * @param array|string|ExpressionInterface $columns the columns value to normalize. See [[orderBy]] and [[addOrderBy]].
+     * @param array|string|ExpressionInterface|null $columns the columns value to normalize. See [[orderBy]] and [[addOrderBy]].
      * @return array
      */
     protected function normalizeOrderBy($columns)
     {
-        if ($columns instanceof ExpressionInterface) {
+        if (empty($columns)) {
+            return [];
+        } elseif ($columns instanceof ExpressionInterface) {
             return [$columns];
         } elseif (is_array($columns)) {
             return $columns;
diff --git a/src/db/Schema.php b/src/db/Schema.php
index 002a68e2bf8..53c0af9882d 100644
--- a/src/db/Schema.php
+++ b/src/db/Schema.php
@@ -313,7 +313,7 @@ public function refreshTableSchema($name)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -328,7 +328,7 @@ public function createQueryBuilder()
      */
     public function createColumnSchemaBuilder($type, $length = null)
     {
-        return new ColumnSchemaBuilder($type, $length);
+        return Yii::createObject(ColumnSchemaBuilder::className(), [$type, $length]);
     }
 
     /**
@@ -458,7 +458,7 @@ public function quoteValue($str)
             return $str;
         }
 
-        if (mb_stripos($this->db->dsn, 'odbc:') === false && ($value = $this->db->getSlavePdo()->quote($str)) !== false) {
+        if (mb_stripos((string)$this->db->dsn, 'odbc:') === false && ($value = $this->db->getSlavePdo(true)->quote($str)) !== false) {
             return $value;
         }
 
@@ -695,7 +695,7 @@ public function isReadQuery($sql)
     public function getServerVersion()
     {
         if ($this->_serverVersion === null) {
-            $this->_serverVersion = $this->db->getSlavePdo()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+            $this->_serverVersion = $this->db->getSlavePdo(true)->getAttribute(\PDO::ATTR_SERVER_VERSION);
         }
         return $this->_serverVersion;
     }
@@ -809,7 +809,7 @@ protected function setTableMetadata($name, $type, $data)
      */
     protected function normalizePdoRowKeyCase(array $row, $multiple)
     {
-        if ($this->db->getSlavePdo()->getAttribute(\PDO::ATTR_CASE) !== \PDO::CASE_UPPER) {
+        if ($this->db->getSlavePdo(true)->getAttribute(\PDO::ATTR_CASE) !== \PDO::CASE_UPPER) {
             return $row;
         }
 
diff --git a/src/db/conditions/LikeCondition.php b/src/db/conditions/LikeCondition.php
index f4684d3f54f..0fe2a8fa0eb 100644
--- a/src/db/conditions/LikeCondition.php
+++ b/src/db/conditions/LikeCondition.php
@@ -18,8 +18,8 @@
 class LikeCondition extends SimpleCondition
 {
     /**
-     * @var array|null|false map of chars to their replacements, false if characters should not be escaped
-     * or either null or empty array if escaping is condition builder responsibility.
+     * @var array|null|false map of chars to their replacements, `false` if characters should not be escaped
+     * or either `null` or empty array if escaping is condition builder responsibility.
      * By default it's set to `null`.
      */
     protected $escapingReplacements;
@@ -40,9 +40,10 @@ public function __construct($column, $operator, $value)
     /**
      * This method allows to specify how to escape special characters in the value(s).
      *
-     * @param array an array of mappings from the special characters to their escaped counterparts.
-     * You may use `false` or an empty array to indicate the values are already escaped and no escape
-     * should be applied. Note that when using an escape mapping (or the third operand is not provided),
+     * @param array|null|false an array of mappings from the special characters to their escaped counterparts.
+     * You may use `false` to indicate the values are already escaped and no escape should be applied,
+     * or either `null` or empty array if escaping is condition builder responsibility.
+     * Note that when using an escape mapping (or the third operand is not provided),
      * the values will be automatically enclosed within a pair of percentage characters.
      */
     public function setEscapingReplacements($escapingReplacements)
@@ -51,7 +52,7 @@ public function setEscapingReplacements($escapingReplacements)
     }
 
     /**
-     * @return array|false
+     * @return array|null|false
      */
     public function getEscapingReplacements()
     {
diff --git a/src/db/conditions/LikeConditionBuilder.php b/src/db/conditions/LikeConditionBuilder.php
index 049be5b92ec..accb849c2aa 100644
--- a/src/db/conditions/LikeConditionBuilder.php
+++ b/src/db/conditions/LikeConditionBuilder.php
@@ -78,7 +78,7 @@ public function build(ExpressionInterface $expression, array &$params = [])
             if ($value instanceof ExpressionInterface) {
                 $phName = $this->queryBuilder->buildExpression($value, $params);
             } else {
-                $phName = $this->queryBuilder->bindParam(empty($escape) ? $value : ('%' . strtr($value, $escape) . '%'), $params);
+                $phName = $this->queryBuilder->bindParam(empty($escape) ? $value : ('%' . strtr((string)$value, $escape) . '%'), $params);
             }
             $parts[] = "{$column} {$operator} {$phName}{$escapeSql}";
         }
diff --git a/src/db/cubrid/Schema.php b/src/db/cubrid/Schema.php
index f2e0e3643c8..65b6c11b9d4 100644
--- a/src/db/cubrid/Schema.php
+++ b/src/db/cubrid/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\cubrid;
 
+use Yii;
 use yii\base\NotSupportedException;
 use yii\db\Constraint;
 use yii\db\ConstraintFinderInterface;
@@ -91,7 +92,7 @@ class Schema extends \yii\db\Schema implements ConstraintFinderInterface
      */
     protected function findTableNames($schema = '')
     {
-        $pdo = $this->db->getSlavePdo();
+        $pdo = $this->db->getSlavePdo(true);
         $tables = $pdo->cubrid_schema(\PDO::CUBRID_SCH_TABLE);
         $tableNames = [];
         foreach ($tables as $table) {
@@ -109,7 +110,7 @@ protected function findTableNames($schema = '')
      */
     protected function loadTableSchema($name)
     {
-        $pdo = $this->db->getSlavePdo();
+        $pdo = $this->db->getSlavePdo(true);
 
         $tableInfo = $pdo->cubrid_schema(\PDO::CUBRID_SCH_TABLE, $name);
 
@@ -158,7 +159,7 @@ protected function loadTableSchema($name)
      */
     protected function loadTablePrimaryKey($tableName)
     {
-        $primaryKey = $this->db->getSlavePdo()->cubrid_schema(\PDO::CUBRID_SCH_PRIMARY_KEY, $tableName);
+        $primaryKey = $this->db->getSlavePdo(true)->cubrid_schema(\PDO::CUBRID_SCH_PRIMARY_KEY, $tableName);
         if (empty($primaryKey)) {
             return null;
         }
@@ -182,7 +183,7 @@ protected function loadTableForeignKeys($tableName)
             3 => 'SET NULL',
         ];
 
-        $foreignKeys = $this->db->getSlavePdo()->cubrid_schema(\PDO::CUBRID_SCH_IMPORTED_KEYS, $tableName);
+        $foreignKeys = $this->db->getSlavePdo(true)->cubrid_schema(\PDO::CUBRID_SCH_IMPORTED_KEYS, $tableName);
         $foreignKeys = ArrayHelper::index($foreignKeys, null, 'FK_NAME');
         ArrayHelper::multisort($foreignKeys, 'KEY_SEQ', SORT_ASC, SORT_NUMERIC);
         $result = [];
@@ -248,7 +249,7 @@ public function releaseSavepoint($name)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -385,7 +386,7 @@ public function createColumnSchemaBuilder($type, $length = null)
      */
     private function loadTableConstraints($tableName, $returnType)
     {
-        $constraints = $this->db->getSlavePdo()->cubrid_schema(\PDO::CUBRID_SCH_CONSTRAINT, $tableName);
+        $constraints = $this->db->getSlavePdo(true)->cubrid_schema(\PDO::CUBRID_SCH_CONSTRAINT, $tableName);
         $constraints = ArrayHelper::index($constraints, null, ['TYPE', 'NAME']);
         ArrayHelper::multisort($constraints, 'KEY_ORDER', SORT_ASC, SORT_NUMERIC);
         $result = [
diff --git a/src/db/mssql/QueryBuilder.php b/src/db/mssql/QueryBuilder.php
index cc3595519cd..1225c466cc6 100644
--- a/src/db/mssql/QueryBuilder.php
+++ b/src/db/mssql/QueryBuilder.php
@@ -460,10 +460,9 @@ private function normalizeTableRowData($table, $columns, &$params)
             $columnSchemas = $tableSchema->columns;
             foreach ($columns as $name => $value) {
                 // @see https://github.com/yiisoft/yii2/issues/12599
-                if (isset($columnSchemas[$name]) && $columnSchemas[$name]->type === Schema::TYPE_BINARY && $columnSchemas[$name]->dbType === 'varbinary' && (is_string($value) || $value === null)) {
-                    $phName = $this->bindParam($value, $params);
+                if (isset($columnSchemas[$name]) && $columnSchemas[$name]->type === Schema::TYPE_BINARY && $columnSchemas[$name]->dbType === 'varbinary' && (is_string($value))) {
                     // @see https://github.com/yiisoft/yii2/issues/12599
-                    $columns[$name] = new Expression("CONVERT(VARBINARY(MAX), $phName)", $params);
+                    $columns[$name] = new Expression('CONVERT(VARBINARY(MAX), ' . ('0x' . bin2hex($value)) . ')');
                 }
             }
         }
diff --git a/src/db/mssql/Schema.php b/src/db/mssql/Schema.php
index 640b6ad093a..db7f07c87cb 100644
--- a/src/db/mssql/Schema.php
+++ b/src/db/mssql/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\mssql;
 
+use Yii;
 use yii\db\CheckConstraint;
 use yii\db\Constraint;
 use yii\db\ConstraintFinderInterface;
@@ -331,7 +332,7 @@ public function rollBackSavepoint($name)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -374,6 +375,7 @@ protected function resolveTableNames($table, $name)
      */
     protected function loadColumnSchema($info)
     {
+        $isVersion2017orLater = version_compare($this->db->getSchema()->getServerVersion(), '14', '>=');
         $column = $this->createColumnSchema();
 
         $column->name = $info['column_name'];
@@ -392,20 +394,21 @@ protected function loadColumnSchema($info)
             if (isset($this->typeMap[$type])) {
                 $column->type = $this->typeMap[$type];
             }
+
+            if ($isVersion2017orLater && $type === 'bit') {
+                $column->type = 'boolean';
+            }
+
             if (!empty($matches[2])) {
                 $values = explode(',', $matches[2]);
                 $column->size = $column->precision = (int) $values[0];
+
                 if (isset($values[1])) {
                     $column->scale = (int) $values[1];
                 }
-                if ($column->size === 1 && ($type === 'tinyint' || $type === 'bit')) {
-                    $column->type = 'boolean';
-                } elseif ($type === 'bit') {
-                    if ($column->size > 32) {
-                        $column->type = 'bigint';
-                    } elseif ($column->size === 32) {
-                        $column->type = 'integer';
-                    }
+
+                if ($isVersion2017orLater === false) {
+                    $column->type = $this->booleanTypeLegacy($column->size, $type);
                 }
             }
         }
@@ -810,6 +813,29 @@ public function insert($table, $columns)
      */
     public function createColumnSchemaBuilder($type, $length = null)
     {
-        return new ColumnSchemaBuilder($type, $length, $this->db);
+        return Yii::createObject(ColumnSchemaBuilder::className(), [$type, $length, $this->db]);
+    }
+
+    /**
+     * Assigns a type boolean for the column type bit, for legacy versions of MSSQL.
+     *
+     * @param int $size column size.
+     * @param string $type column type.
+     *
+     * @return string column type.
+     */
+    private function booleanTypeLegacy($size, $type)
+    {
+        if ($size === 1 && ($type === 'tinyint' || $type === 'bit')) {
+            return 'boolean';
+        } elseif ($type === 'bit') {
+            if ($size > 32) {
+                return 'bigint';
+            } elseif ($size === 32) {
+                return 'integer';
+            }
+        }
+
+        return $type;
     }
 }
diff --git a/src/db/mysql/QueryBuilder.php b/src/db/mysql/QueryBuilder.php
index b1517ab4da7..fc10931c7a1 100644
--- a/src/db/mysql/QueryBuilder.php
+++ b/src/db/mysql/QueryBuilder.php
@@ -410,7 +410,7 @@ private function supportsFractionalSeconds()
         }
         $version = $cache ? $cache->get($key) : null;
         if (!$version) {
-            $version = $this->db->getSlavePdo()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+            $version = $this->db->getSlavePdo(true)->getAttribute(\PDO::ATTR_SERVER_VERSION);
             if ($cache) {
                 $cache->set($key, $version, $this->db->schemaCacheDuration);
             }
diff --git a/src/db/mysql/Schema.php b/src/db/mysql/Schema.php
index 6a795b1de28..fa2270eb77d 100644
--- a/src/db/mysql/Schema.php
+++ b/src/db/mysql/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\mysql;
 
+use Yii;
 use yii\base\InvalidConfigException;
 use yii\base\NotSupportedException;
 use yii\db\Constraint;
@@ -44,6 +45,8 @@ class Schema extends \yii\db\Schema implements ConstraintFinderInterface
      */
     public $typeMap = [
         'tinyint' => self::TYPE_TINYINT,
+        'bool' => self::TYPE_TINYINT,
+        'boolean' => self::TYPE_TINYINT,
         'bit' => self::TYPE_INTEGER,
         'smallint' => self::TYPE_SMALLINT,
         'mediumint' => self::TYPE_INTEGER,
@@ -52,9 +55,12 @@ class Schema extends \yii\db\Schema implements ConstraintFinderInterface
         'bigint' => self::TYPE_BIGINT,
         'float' => self::TYPE_FLOAT,
         'double' => self::TYPE_DOUBLE,
+        'double precision' => self::TYPE_DOUBLE,
         'real' => self::TYPE_FLOAT,
         'decimal' => self::TYPE_DECIMAL,
         'numeric' => self::TYPE_DECIMAL,
+        'dec' => self::TYPE_DECIMAL,
+        'fixed' => self::TYPE_DECIMAL,
         'tinytext' => self::TYPE_TEXT,
         'mediumtext' => self::TYPE_TEXT,
         'longtext' => self::TYPE_TEXT,
@@ -70,6 +76,8 @@ class Schema extends \yii\db\Schema implements ConstraintFinderInterface
         'time' => self::TYPE_TIME,
         'timestamp' => self::TYPE_TIMESTAMP,
         'enum' => self::TYPE_STRING,
+        'set' => self::TYPE_STRING,
+        'binary' => self::TYPE_BINARY,
         'varbinary' => self::TYPE_BINARY,
         'json' => self::TYPE_JSON,
     ];
@@ -214,7 +222,7 @@ protected function loadTableDefaultValues($tableName)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -464,7 +472,7 @@ public function findUniqueIndexes($table)
      */
     public function createColumnSchemaBuilder($type, $length = null)
     {
-        return new ColumnSchemaBuilder($type, $length, $this->db);
+        return Yii::createObject(ColumnSchemaBuilder::className(), [$type, $length, $this->db]);
     }
 
     /**
@@ -476,7 +484,7 @@ public function createColumnSchemaBuilder($type, $length = null)
     protected function isOldMysql()
     {
         if ($this->_oldMysql === null) {
-            $version = $this->db->getSlavePdo()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+            $version = $this->db->getSlavePdo(true)->getAttribute(\PDO::ATTR_SERVER_VERSION);
             $this->_oldMysql = version_compare($version, '5.1', '<=');
         }
 
diff --git a/src/db/oci/Schema.php b/src/db/oci/Schema.php
index 5e581441892..e0e4c05e2da 100644
--- a/src/db/oci/Schema.php
+++ b/src/db/oci/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\oci;
 
+use Yii;
 use yii\base\InvalidCallException;
 use yii\base\NotSupportedException;
 use yii\db\CheckConstraint;
@@ -261,7 +262,7 @@ public function quoteSimpleTableName($name)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -269,7 +270,7 @@ public function createQueryBuilder()
      */
     public function createColumnSchemaBuilder($type, $length = null)
     {
-        return new ColumnSchemaBuilder($type, $length, $this->db);
+        return Yii::createObject(ColumnSchemaBuilder::className(), [$type, $length]);
     }
 
     /**
diff --git a/src/db/pgsql/Schema.php b/src/db/pgsql/Schema.php
index 8fb5943b92b..154e01a3808 100644
--- a/src/db/pgsql/Schema.php
+++ b/src/db/pgsql/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\pgsql;
 
+use Yii;
 use yii\base\NotSupportedException;
 use yii\db\CheckConstraint;
 use yii\db\Constraint;
@@ -288,7 +289,7 @@ protected function loadTableDefaultValues($tableName)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
diff --git a/src/db/sqlite/Schema.php b/src/db/sqlite/Schema.php
index 2ccd2be1ba1..32b209b2254 100644
--- a/src/db/sqlite/Schema.php
+++ b/src/db/sqlite/Schema.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\sqlite;
 
+use Yii;
 use yii\base\NotSupportedException;
 use yii\db\CheckConstraint;
 use yii\db\ColumnSchema;
@@ -206,7 +207,7 @@ protected function loadTableDefaultValues($tableName)
      */
     public function createQueryBuilder()
     {
-        return new QueryBuilder($this->db);
+        return Yii::createObject(QueryBuilder::className(), [$this->db]);
     }
 
     /**
@@ -215,7 +216,7 @@ public function createQueryBuilder()
      */
     public function createColumnSchemaBuilder($type, $length = null)
     {
-        return new ColumnSchemaBuilder($type, $length);
+        return Yii::createObject(ColumnSchemaBuilder::className(), [$type, $length]);
     }
 
     /**
diff --git a/src/filters/PageCache.php b/src/filters/PageCache.php
index c10dcabe4f6..b9f02ba4ec4 100644
--- a/src/filters/PageCache.php
+++ b/src/filters/PageCache.php
@@ -7,6 +7,7 @@
 
 namespace yii\filters;
 
+use Closure;
 use Yii;
 use yii\base\Action;
 use yii\base\ActionFilter;
@@ -98,7 +99,7 @@ class PageCache extends ActionFilter implements DynamicContentAwareInterface
      */
     public $dependency;
     /**
-     * @var string[]|string list of factors that would cause the variation of the content being cached.
+     * @var string[]|string|callable list of factors that would cause the variation of the content being cached.
      * Each factor is a string representing a variation (e.g. the language, a GET parameter).
      * The following variation setting will cause the content to be cached in different versions
      * according to the current application language:
@@ -108,6 +109,20 @@ class PageCache extends ActionFilter implements DynamicContentAwareInterface
      *     Yii::$app->language,
      * ]
      * ```
+     *
+     * Since version 2.0.48 you can provide an anonymous function to generate variations. This is especially helpful
+     * when you need to access the User component, which is resolved before the PageCache behavior:
+     *
+     * ```php
+     * 'variations' => function() {
+     *     return [
+     *         Yii::$app->language,
+     *         Yii::$app->user->id
+     *     ];
+     * }
+     * ```
+     *
+     * The callable should return an array.
      */
     public $variations;
     /**
@@ -318,7 +333,13 @@ protected function calculateCacheKey()
         if ($this->varyByRoute) {
             $key[] = Yii::$app->requestedRoute;
         }
-        return array_merge($key, (array)$this->variations);
+
+        if ($this->variations instanceof Closure) {
+            $variations = call_user_func($this->variations, $this);
+        } else {
+            $variations = $this->variations;
+        }
+        return array_merge($key, (array) $variations);
     }
 
     /**
diff --git a/src/helpers/BaseArrayHelper.php b/src/helpers/BaseArrayHelper.php
index 0e615a579db..56411163e1e 100644
--- a/src/helpers/BaseArrayHelper.php
+++ b/src/helpers/BaseArrayHelper.php
@@ -327,7 +327,12 @@ public static function setValue(&$array, $path, $value)
      */
     public static function remove(&$array, $key, $default = null)
     {
-        if (is_array($array) && (isset($array[$key]) || array_key_exists($key, $array))) {
+        // ToDo: This check can be removed when the minimum PHP version is >= 8.1 (Yii2.2)
+        if (is_float($key)) {
+            $key = (int)$key;
+        }
+
+        if (is_array($array) && array_key_exists($key, $array)) {
             $value = $array[$key];
             unset($array[$key]);
 
@@ -608,17 +613,20 @@ public static function map($array, $from, $to, $group = null)
      * Checks if the given array contains the specified key.
      * This method enhances the `array_key_exists()` function by supporting case-insensitive
      * key comparison.
-     * @param string $key the key to check
+     * @param string|int $key the key to check
      * @param array|ArrayAccess $array the array with keys to check
      * @param bool $caseSensitive whether the key comparison should be case-sensitive
      * @return bool whether the array contains the specified key
      */
     public static function keyExists($key, $array, $caseSensitive = true)
     {
+        // ToDo: This check can be removed when the minimum PHP version is >= 8.1 (Yii2.2)
+        if (is_float($key)) {
+            $key = (int)$key;
+        }
+
         if ($caseSensitive) {
-            // Function `isset` checks key faster but skips `null`, `array_key_exists` handles this case
-            // https://www.php.net/manual/en/function.array-key-exists.php#107786
-            if (is_array($array) && (isset($array[$key]) || array_key_exists($key, $array))) {
+            if (is_array($array) && array_key_exists($key, $array)) {
                 return true;
             }
             // Cannot use `array_has_key` on Objects for PHP 7.4+, therefore we need to check using [[ArrayAccess::offsetExists()]]
diff --git a/src/helpers/BaseConsole.php b/src/helpers/BaseConsole.php
index abb838c9c47..febeed313b1 100644
--- a/src/helpers/BaseConsole.php
+++ b/src/helpers/BaseConsole.php
@@ -948,13 +948,17 @@ public static function confirm($message, $default = false)
      * @param string $prompt the prompt message
      * @param array $options Key-value array of options to choose from. Key is what is inputed and used, value is
      * what's displayed to end user by help command.
+     * @param string|null $default value to use when the user doesn't provide an option.
+     * If the default is `null`, the user is required to select an option.
      *
      * @return string An option character the user chose
+     * @since 2.0.49 Added the $default argument
      */
-    public static function select($prompt, $options = [])
+    public static function select($prompt, $options = [], $default = null)
     {
         top:
-        static::stdout("$prompt [" . implode(',', array_keys($options)) . ',?]: ');
+        static::stdout("$prompt (" . implode(',', array_keys($options)) . ',?)'
+            . ($default !== null ? '[' . $default . ']' : '') . ': ');
         $input = static::stdin();
         if ($input === '?') {
             foreach ($options as $key => $value) {
@@ -962,6 +966,8 @@ public static function select($prompt, $options = [])
             }
             static::output(' ? - Show help');
             goto top;
+        } elseif ($default !== null && $input === '') {
+            return $default;
         } elseif (!array_key_exists($input, $options)) {
             goto top;
         }
diff --git a/src/helpers/BaseFileHelper.php b/src/helpers/BaseFileHelper.php
index 35deec5ef49..55445aec009 100644
--- a/src/helpers/BaseFileHelper.php
+++ b/src/helpers/BaseFileHelper.php
@@ -39,6 +39,11 @@ class BaseFileHelper
      * @since 2.0.14
      */
     public static $mimeAliasesFile = '@yii/helpers/mimeAliases.php';
+    /**
+     * @var string the path (or alias) of a PHP file containing extensions per MIME type.
+     * @since 2.0.48
+     */
+    public static $mimeExtensionsFile = '@yii/helpers/mimeExtensions.php';
 
 
     /**
@@ -213,10 +218,49 @@ public static function getExtensionsByMimeType($mimeType, $magicFile = null)
             $mimeType = $aliases[$mimeType];
         }
 
+        // Note: For backwards compatibility the "MimeTypes" file is used.
         $mimeTypes = static::loadMimeTypes($magicFile);
         return array_keys($mimeTypes, mb_strtolower($mimeType, 'UTF-8'), true);
     }
 
+    /**
+     * Determines the most common extension by given MIME type.
+     * This method will use a local map between MIME types and extension names.
+     * @param string $mimeType file MIME type.
+     * @param bool $preferShort return an extension with a maximum of 3 characters.
+     * @param string|null $magicFile the path (or alias) of the file that contains all available MIME type information.
+     * If this is not set, the file specified by [[mimeMagicFile]] will be used.
+     * @return string|null the extensions corresponding to the specified MIME type
+     * @since 2.0.48
+     */
+    public static function getExtensionByMimeType($mimeType, $preferShort = false, $magicFile = null)
+    {
+        $aliases = static::loadMimeAliases(static::$mimeAliasesFile);
+        if (isset($aliases[$mimeType])) {
+            $mimeType = $aliases[$mimeType];
+        }
+
+        $mimeExtensions = static::loadMimeExtensions($magicFile);
+
+        if (!array_key_exists($mimeType, $mimeExtensions)) {
+            return null;
+        }
+
+        $extensions = $mimeExtensions[$mimeType];
+        if (is_array($extensions)) {
+            if ($preferShort) {
+                foreach ($extensions as $extension) {
+                    if (mb_strlen($extension, 'UTF-8') <= 3) {
+                        return $extension;
+                    }
+                }
+            }
+            return $extensions[0];
+        } else {
+            return $extensions;
+        }
+    }
+
     private static $_mimeTypes = [];
 
     /**
@@ -260,6 +304,28 @@ protected static function loadMimeAliases($aliasesFile)
         return self::$_mimeAliases[$aliasesFile];
     }
 
+    private static $_mimeExtensions = [];
+
+    /**
+     * Loads MIME extensions from the specified file.
+     * @param string|null $extensionsFile the path (or alias) of the file that contains MIME type aliases.
+     * If this is not set, the file specified by [[mimeAliasesFile]] will be used.
+     * @return array the mapping from file extensions to MIME types
+     * @since 2.0.48
+     */
+    protected static function loadMimeExtensions($extensionsFile)
+    {
+        if ($extensionsFile === null) {
+            $extensionsFile = static::$mimeExtensionsFile;
+        }
+        $extensionsFile = Yii::getAlias($extensionsFile);
+        if (!isset(self::$_mimeExtensions[$extensionsFile])) {
+            self::$_mimeExtensions[$extensionsFile] = require $extensionsFile;
+        }
+
+        return self::$_mimeExtensions[$extensionsFile];
+    }
+
     /**
      * Copies a whole directory as another one.
      * The files and sub-directories will also be copied over.
@@ -465,6 +531,7 @@ public static function unlink($path)
      *   If a negated pattern matches, this will override lower precedence patterns sources. Put a backslash (`\`) in front of the first `!`
      *   for patterns that begin with a literal `!`, for example, `\!important!.txt`.
      *   Note, the '/' characters in a pattern matches both '/' and '\' in the paths.
+     *   You can find more details about the gitignore pattern format [here](https://git-scm.com/docs/gitignore/en#_pattern_format).
      * - `only`: array, list of patterns that the file paths should match if they are to be returned. Directory paths
      *   are not checked against them. Same pattern matching rules as in the `except` option are used.
      *   If a file path matches a pattern in both `only` and `except`, it will NOT be returned.
diff --git a/src/helpers/BaseFormatConverter.php b/src/helpers/BaseFormatConverter.php
index 1f2aeb4d673..3cea9c95017 100644
--- a/src/helpers/BaseFormatConverter.php
+++ b/src/helpers/BaseFormatConverter.php
@@ -97,22 +97,13 @@ class BaseFormatConverter
      * @param string|null $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
      * If not given, `Yii::$app->language` will be used.
      * @return string The converted date format pattern.
+     * @throws \Exception
      */
     public static function convertDateIcuToPhp($pattern, $type = 'date', $locale = null)
     {
         if (isset(self::$_icuShortFormats[$pattern])) {
             if (extension_loaded('intl')) {
-                if ($locale === null) {
-                    $locale = Yii::$app->language;
-                }
-                if ($type === 'date') {
-                    $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], IntlDateFormatter::NONE);
-                } elseif ($type === 'time') {
-                    $formatter = new IntlDateFormatter($locale, IntlDateFormatter::NONE, self::$_icuShortFormats[$pattern]);
-                } else {
-                    $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], self::$_icuShortFormats[$pattern]);
-                }
-                $pattern = $formatter->getPattern();
+                $pattern = self::createFormatter($locale, $type, $pattern);
             } else {
                 return static::$phpFallbackDatePatterns[$pattern][$type];
             }
@@ -350,22 +341,13 @@ public static function convertDatePhpToIcu($pattern)
      * @param string|null $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
      * If not given, `Yii::$app->language` will be used.
      * @return string The converted date format pattern.
+     * @throws \Exception
      */
     public static function convertDateIcuToJui($pattern, $type = 'date', $locale = null)
     {
         if (isset(self::$_icuShortFormats[$pattern])) {
             if (extension_loaded('intl')) {
-                if ($locale === null) {
-                    $locale = Yii::$app->language;
-                }
-                if ($type === 'date') {
-                    $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], IntlDateFormatter::NONE);
-                } elseif ($type === 'time') {
-                    $formatter = new IntlDateFormatter($locale, IntlDateFormatter::NONE, self::$_icuShortFormats[$pattern]);
-                } else {
-                    $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], self::$_icuShortFormats[$pattern]);
-                }
-                $pattern = $formatter->getPattern();
+                $pattern = self::createFormatter($locale, $type, $pattern);
             } else {
                 return static::$juiFallbackDatePatterns[$pattern][$type];
             }
@@ -545,4 +527,32 @@ public static function convertDatePhpToJui($pattern)
             'U' => '@',     // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
         ]);
     }
+
+    /**
+     * Creates a date/time formatter based on the given parameters.
+     *
+     * @param string|null $locale The locale to be used. If null, the application's current language will be used.
+     * @param string $type The type of formatter ('date', 'time', etc.)
+     * @param string $pattern The pattern for the IntlDateFormatter.
+     *
+     * @return string The resulting pattern after formatter creation.
+     *
+     * @throws \Exception If the 'intl' extension is not loaded.
+     */
+    private static function createFormatter($locale, $type, $pattern)
+    {
+        if ($locale === null) {
+            $locale = Yii::$app->language;
+        }
+
+        if ($type === 'date') {
+            $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], IntlDateFormatter::NONE);
+        } elseif ($type === 'time') {
+            $formatter = new IntlDateFormatter($locale, IntlDateFormatter::NONE, self::$_icuShortFormats[$pattern]);
+        } else {
+            $formatter = new IntlDateFormatter($locale, self::$_icuShortFormats[$pattern], self::$_icuShortFormats[$pattern]);
+        }
+
+        return $formatter->getPattern();
+    }
 }
diff --git a/src/helpers/BaseHtml.php b/src/helpers/BaseHtml.php
index 9c04ad90f95..45812e4165b 100644
--- a/src/helpers/BaseHtml.php
+++ b/src/helpers/BaseHtml.php
@@ -2017,7 +2017,7 @@ public static function renderTagAttributes($attributes)
                         $value = explode(' ', implode(' ', $value));
                         $value = array_unique($value);
                     }
-                    $html .= " $name=\"" . static::encode(implode(' ', $value)) . '"';
+                    $html .= " $name=\"" . static::encode(implode(' ', array_filter($value))) . '"';
                 } elseif ($name === 'style') {
                     if (empty($value)) {
                         continue;
diff --git a/src/helpers/BaseJson.php b/src/helpers/BaseJson.php
index eaaee0fbd05..a2821ad9ff7 100644
--- a/src/helpers/BaseJson.php
+++ b/src/helpers/BaseJson.php
@@ -185,6 +185,12 @@ protected static function processData($data, &$expressions, $expPrefix)
 
             if ($data instanceof Arrayable) {
                 $data = $data->toArray();
+            } elseif ($data instanceof \Generator) {
+                $_data = [];
+                foreach ($data as $name => $value) {
+                    $_data[$name] = static::processData($value, $expressions, $expPrefix);
+                }
+                $data = $_data;
             } elseif ($data instanceof \SimpleXMLElement) {
                 $data = (array) $data;
 
diff --git a/src/helpers/BaseStringHelper.php b/src/helpers/BaseStringHelper.php
index da134163105..749f92f79cd 100644
--- a/src/helpers/BaseStringHelper.php
+++ b/src/helpers/BaseStringHelper.php
@@ -49,7 +49,7 @@ public static function byteSubstr($string, $start, $length = null)
             $length = static::byteLength($string);
         }
 
-        return mb_substr($string, $start, $length, '8bit');
+        return mb_substr((string)$string, $start, $length, '8bit');
     }
 
     /**
@@ -67,6 +67,8 @@ public static function byteSubstr($string, $start, $length = null)
      */
     public static function basename($path, $suffix = '')
     {
+        $path = (string)$path;
+
         $len = mb_strlen($suffix);
         if ($len > 0 && mb_substr($path, -$len) === $suffix) {
             $path = mb_substr($path, 0, -$len);
@@ -93,7 +95,7 @@ public static function basename($path, $suffix = '')
     public static function dirname($path)
     {
         $normalizedPath = rtrim(
-            str_replace('\\', '/', $path),
+            str_replace('\\', '/', (string)$path),
             '/'
         );
         $separatorPosition = mb_strrpos($normalizedPath, '/');
@@ -122,6 +124,8 @@ public static function dirname($path)
      */
     public static function truncate($string, $length, $suffix = '...', $encoding = null, $asHtml = false)
     {
+        $string = (string)$string;
+
         if ($encoding === null) {
             $encoding = Yii::$app ? Yii::$app->charset : 'UTF-8';
         }
@@ -233,6 +237,9 @@ protected static function truncateHtml($string, $count, $suffix, $encoding = fal
      */
     public static function startsWith($string, $with, $caseSensitive = true)
     {
+        $string = (string)$string;
+        $with = (string)$with;
+
         if (!$bytes = static::byteLength($with)) {
             return true;
         }
@@ -257,6 +264,9 @@ public static function startsWith($string, $with, $caseSensitive = true)
      */
     public static function endsWith($string, $with, $caseSensitive = true)
     {
+        $string = (string)$string;
+        $with = (string)$with;
+
         if (!$bytes = static::byteLength($with)) {
             return true;
         }
@@ -487,4 +497,62 @@ public static function mb_ucwords($string, $encoding = 'UTF-8')
 
         return implode('', $parts);
     }
+
+    /**
+     * Masks a portion of a string with a repeated character.
+     * This method is multibyte-safe.
+     *
+     * @param string $string The input string.
+     * @param int $start The starting position from where to begin masking.
+     *                   This can be a positive or negative integer.
+     *                   Positive values count from the beginning,
+     *                   negative values count from the end of the string.
+     * @param int $length The length of the section to be masked.
+     *                    The masking will start from the $start position
+     *                    and continue for $length characters.
+     * @param string $mask The character to use for masking. The default is '*'.
+     * @return string The masked string.
+     */
+    public static function mask($string, $start, $length, $mask = '*') {
+        $strLength = mb_strlen($string, 'UTF-8');
+
+        // Return original string if start position is out of bounds
+        if ($start >= $strLength || $start < -$strLength) {
+            return $string;
+        }
+
+        $masked = mb_substr($string, 0, $start, 'UTF-8');
+        $masked .= str_repeat($mask, abs($length));
+        $masked .= mb_substr($string, $start + abs($length), null, 'UTF-8');
+
+        return $masked;
+    }
+
+    /**
+     * Returns the portion of the string that lies between the first occurrence of the start string
+     * and the last occurrence of the end string after that.
+     *
+     * @param string $string The input string.
+     * @param string $start The string marking the start of the portion to extract.
+     * @param string $end The string marking the end of the portion to extract.
+     * @return string|null The portion of the string between the first occurrence of
+     * start and the last occurrence of end, or null if either start or end cannot be found.
+     */
+    public static function findBetween($string, $start, $end)
+    {
+        $startPos = mb_strpos($string, $start);
+
+        if ($startPos === false) {
+            return null;
+        }
+
+        $startPos += mb_strlen($start);
+        $endPos = mb_strrpos($string, $end, $startPos);
+
+        if ($endPos === false) {
+            return null;
+        }
+
+        return mb_substr($string, $startPos, $endPos - $startPos);
+    }
 }
diff --git a/src/helpers/mimeAliases.php b/src/helpers/mimeAliases.php
index 4cd89888a77..a9e677adcbd 100644
--- a/src/helpers/mimeAliases.php
+++ b/src/helpers/mimeAliases.php
@@ -3,6 +3,9 @@
  * MIME aliases.
  *
  * This file contains aliases for MIME types.
+ *
+ * All extra changes made to this file must be comitted to /build/controllers/MimeTypeController.php
+ * otherwise they will be lost on next build.
  */
 return [
     'text/rtf' => 'application/rtf',
diff --git a/src/helpers/mimeExtensions.php b/src/helpers/mimeExtensions.php
new file mode 100644
index 00000000000..e4936030fd8
--- /dev/null
+++ b/src/helpers/mimeExtensions.php
@@ -0,0 +1,1241 @@
+<?php
+/**
+ * MIME type extensions.
+ *
+ * This file contains most commonly used extensions for MIME types.
+ * If there are multiple extensions for a singe MIME type
+ * they are ordered from most to least common.
+ * Its content is generated from the apache http mime.types file.
+ * https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup
+ * This file has been placed in the public domain for unlimited redistribution.
+ *
+ * All extra changes made to this file must be comitted to /build/controllers/MimeTypeController.php
+ * otherwise they will be lost on next build.
+ */
+return [
+    'application/andrew-inset' => 'ez',
+    'application/applixware' => 'aw',
+    'application/atom+xml' => 'atom',
+    'application/atomcat+xml' => 'atomcat',
+    'application/atomsvc+xml' => 'atomsvc',
+    'application/ccxml+xml' => 'ccxml',
+    'application/cdmi-capability' => 'cdmia',
+    'application/cdmi-container' => 'cdmic',
+    'application/cdmi-domain' => 'cdmid',
+    'application/cdmi-object' => 'cdmio',
+    'application/cdmi-queue' => 'cdmiq',
+    'application/cu-seeme' => 'cu',
+    'application/davmount+xml' => 'davmount',
+    'application/docbook+xml' => 'dbk',
+    'application/dssc+der' => 'dssc',
+    'application/dssc+xml' => 'xdssc',
+    'application/ecmascript' => 'ecma',
+    'application/emma+xml' => 'emma',
+    'application/epub+zip' => 'epub',
+    'application/exi' => 'exi',
+    'application/font-tdpfr' => 'pfr',
+    'application/gml+xml' => 'gml',
+    'application/gpx+xml' => 'gpx',
+    'application/gxf' => 'gxf',
+    'application/hyperstudio' => 'stk',
+    'application/inkml+xml' => [
+        'ink',
+        'inkml',
+    ],
+    'application/ipfix' => 'ipfix',
+    'application/java-archive' => 'jar',
+    'application/java-serialized-object' => 'ser',
+    'application/java-vm' => 'class',
+    'application/json' => 'json',
+    'application/jsonml+json' => 'jsonml',
+    'application/lost+xml' => 'lostxml',
+    'application/mac-binhex40' => 'hqx',
+    'application/mac-compactpro' => 'cpt',
+    'application/mads+xml' => 'mads',
+    'application/marc' => 'mrc',
+    'application/marcxml+xml' => 'mrcx',
+    'application/mathematica' => [
+        'ma',
+        'nb',
+        'mb',
+    ],
+    'application/mathml+xml' => 'mathml',
+    'application/mbox' => 'mbox',
+    'application/mediaservercontrol+xml' => 'mscml',
+    'application/metalink+xml' => 'metalink',
+    'application/metalink4+xml' => 'meta4',
+    'application/mets+xml' => 'mets',
+    'application/mods+xml' => 'mods',
+    'application/mp21' => [
+        'm21',
+        'mp21',
+    ],
+    'application/mp4' => 'mp4s',
+    'application/msword' => [
+        'doc',
+        'dot',
+    ],
+    'application/mxf' => 'mxf',
+    'application/octet-stream' => [
+        'bin',
+        'dms',
+        'lrf',
+        'mar',
+        'so',
+        'dist',
+        'distz',
+        'pkg',
+        'bpk',
+        'dump',
+        'elc',
+        'deploy',
+    ],
+    'application/oda' => 'oda',
+    'application/oebps-package+xml' => 'opf',
+    'application/ogg' => 'ogx',
+    'application/omdoc+xml' => 'omdoc',
+    'application/onenote' => [
+        'onetoc',
+        'onetoc2',
+        'onetmp',
+        'onepkg',
+    ],
+    'application/oxps' => 'oxps',
+    'application/patch-ops-error+xml' => 'xer',
+    'application/pdf' => 'pdf',
+    'application/pgp-encrypted' => 'pgp',
+    'application/pgp-signature' => [
+        'asc',
+        'sig',
+    ],
+    'application/pics-rules' => 'prf',
+    'application/pkcs10' => 'p10',
+    'application/pkcs7-mime' => [
+        'p7m',
+        'p7c',
+    ],
+    'application/pkcs7-signature' => 'p7s',
+    'application/pkcs8' => 'p8',
+    'application/pkix-attr-cert' => 'ac',
+    'application/pkix-cert' => 'cer',
+    'application/pkix-crl' => 'crl',
+    'application/pkix-pkipath' => 'pkipath',
+    'application/pkixcmp' => 'pki',
+    'application/pls+xml' => 'pls',
+    'application/postscript' => [
+        'ai',
+        'eps',
+        'ps',
+    ],
+    'application/prs.cww' => 'cww',
+    'application/pskc+xml' => 'pskcxml',
+    'application/rdf+xml' => 'rdf',
+    'application/reginfo+xml' => 'rif',
+    'application/relax-ng-compact-syntax' => 'rnc',
+    'application/resource-lists+xml' => 'rl',
+    'application/resource-lists-diff+xml' => 'rld',
+    'application/rls-services+xml' => 'rs',
+    'application/rpki-ghostbusters' => 'gbr',
+    'application/rpki-manifest' => 'mft',
+    'application/rpki-roa' => 'roa',
+    'application/rsd+xml' => 'rsd',
+    'application/rss+xml' => 'rss',
+    'application/rtf' => 'rtf',
+    'application/sbml+xml' => 'sbml',
+    'application/scvp-cv-request' => 'scq',
+    'application/scvp-cv-response' => 'scs',
+    'application/scvp-vp-request' => 'spq',
+    'application/scvp-vp-response' => 'spp',
+    'application/sdp' => 'sdp',
+    'application/set-payment-initiation' => 'setpay',
+    'application/set-registration-initiation' => 'setreg',
+    'application/shf+xml' => 'shf',
+    'application/smil+xml' => [
+        'smi',
+        'smil',
+    ],
+    'application/sparql-query' => 'rq',
+    'application/sparql-results+xml' => 'srx',
+    'application/srgs' => 'gram',
+    'application/srgs+xml' => 'grxml',
+    'application/sru+xml' => 'sru',
+    'application/ssdl+xml' => 'ssdl',
+    'application/ssml+xml' => 'ssml',
+    'application/tei+xml' => [
+        'tei',
+        'teicorpus',
+    ],
+    'application/thraud+xml' => 'tfi',
+    'application/timestamped-data' => 'tsd',
+    'application/vnd.3gpp.pic-bw-large' => 'plb',
+    'application/vnd.3gpp.pic-bw-small' => 'psb',
+    'application/vnd.3gpp.pic-bw-var' => 'pvb',
+    'application/vnd.3gpp2.tcap' => 'tcap',
+    'application/vnd.3m.post-it-notes' => 'pwn',
+    'application/vnd.accpac.simply.aso' => 'aso',
+    'application/vnd.accpac.simply.imp' => 'imp',
+    'application/vnd.acucobol' => 'acu',
+    'application/vnd.acucorp' => [
+        'atc',
+        'acutc',
+    ],
+    'application/vnd.adobe.air-application-installer-package+zip' => 'air',
+    'application/vnd.adobe.formscentral.fcdt' => 'fcdt',
+    'application/vnd.adobe.fxp' => [
+        'fxp',
+        'fxpl',
+    ],
+    'application/vnd.adobe.xdp+xml' => 'xdp',
+    'application/vnd.adobe.xfdf' => 'xfdf',
+    'application/vnd.ahead.space' => 'ahead',
+    'application/vnd.airzip.filesecure.azf' => 'azf',
+    'application/vnd.airzip.filesecure.azs' => 'azs',
+    'application/vnd.amazon.ebook' => 'azw',
+    'application/vnd.americandynamics.acc' => 'acc',
+    'application/vnd.amiga.ami' => 'ami',
+    'application/vnd.android.package-archive' => 'apk',
+    'application/vnd.anser-web-certificate-issue-initiation' => 'cii',
+    'application/vnd.anser-web-funds-transfer-initiation' => 'fti',
+    'application/vnd.antix.game-component' => 'atx',
+    'application/vnd.apple.installer+xml' => 'mpkg',
+    'application/vnd.apple.mpegurl' => 'm3u8',
+    'application/vnd.aristanetworks.swi' => 'swi',
+    'application/vnd.astraea-software.iota' => 'iota',
+    'application/vnd.audiograph' => 'aep',
+    'application/vnd.blueice.multipass' => 'mpm',
+    'application/vnd.bmi' => 'bmi',
+    'application/vnd.businessobjects' => 'rep',
+    'application/vnd.chemdraw+xml' => 'cdxml',
+    'application/vnd.chipnuts.karaoke-mmd' => 'mmd',
+    'application/vnd.cinderella' => 'cdy',
+    'application/vnd.claymore' => 'cla',
+    'application/vnd.cloanto.rp9' => 'rp9',
+    'application/vnd.clonk.c4group' => [
+        'c4g',
+        'c4d',
+        'c4f',
+        'c4p',
+        'c4u',
+    ],
+    'application/vnd.cluetrust.cartomobile-config' => 'c11amc',
+    'application/vnd.cluetrust.cartomobile-config-pkg' => 'c11amz',
+    'application/vnd.commonspace' => 'csp',
+    'application/vnd.contact.cmsg' => 'cdbcmsg',
+    'application/vnd.cosmocaller' => 'cmc',
+    'application/vnd.crick.clicker' => 'clkx',
+    'application/vnd.crick.clicker.keyboard' => 'clkk',
+    'application/vnd.crick.clicker.palette' => 'clkp',
+    'application/vnd.crick.clicker.template' => 'clkt',
+    'application/vnd.crick.clicker.wordbank' => 'clkw',
+    'application/vnd.criticaltools.wbs+xml' => 'wbs',
+    'application/vnd.ctc-posml' => 'pml',
+    'application/vnd.cups-ppd' => 'ppd',
+    'application/vnd.curl.car' => 'car',
+    'application/vnd.curl.pcurl' => 'pcurl',
+    'application/vnd.dart' => 'dart',
+    'application/vnd.data-vision.rdz' => 'rdz',
+    'application/vnd.dece.data' => [
+        'uvf',
+        'uvvf',
+        'uvd',
+        'uvvd',
+    ],
+    'application/vnd.dece.ttml+xml' => [
+        'uvt',
+        'uvvt',
+    ],
+    'application/vnd.dece.unspecified' => [
+        'uvx',
+        'uvvx',
+    ],
+    'application/vnd.dece.zip' => [
+        'uvz',
+        'uvvz',
+    ],
+    'application/vnd.denovo.fcselayout-link' => 'fe_launch',
+    'application/vnd.dna' => 'dna',
+    'application/vnd.dolby.mlp' => 'mlp',
+    'application/vnd.dpgraph' => 'dpg',
+    'application/vnd.dreamfactory' => 'dfac',
+    'application/vnd.ds-keypoint' => 'kpxx',
+    'application/vnd.dvb.ait' => 'ait',
+    'application/vnd.dvb.service' => 'svc',
+    'application/vnd.dynageo' => 'geo',
+    'application/vnd.ecowin.chart' => 'mag',
+    'application/vnd.enliven' => 'nml',
+    'application/vnd.epson.esf' => 'esf',
+    'application/vnd.epson.msf' => 'msf',
+    'application/vnd.epson.quickanime' => 'qam',
+    'application/vnd.epson.salt' => 'slt',
+    'application/vnd.epson.ssf' => 'ssf',
+    'application/vnd.eszigno3+xml' => [
+        'es3',
+        'et3',
+    ],
+    'application/vnd.ezpix-album' => 'ez2',
+    'application/vnd.ezpix-package' => 'ez3',
+    'application/vnd.fdf' => 'fdf',
+    'application/vnd.fdsn.mseed' => 'mseed',
+    'application/vnd.fdsn.seed' => [
+        'seed',
+        'dataless',
+    ],
+    'application/vnd.flographit' => 'gph',
+    'application/vnd.fluxtime.clip' => 'ftc',
+    'application/vnd.framemaker' => [
+        'fm',
+        'frame',
+        'maker',
+        'book',
+    ],
+    'application/vnd.frogans.fnc' => 'fnc',
+    'application/vnd.frogans.ltf' => 'ltf',
+    'application/vnd.fsc.weblaunch' => 'fsc',
+    'application/vnd.fujitsu.oasys' => 'oas',
+    'application/vnd.fujitsu.oasys2' => 'oa2',
+    'application/vnd.fujitsu.oasys3' => 'oa3',
+    'application/vnd.fujitsu.oasysgp' => 'fg5',
+    'application/vnd.fujitsu.oasysprs' => 'bh2',
+    'application/vnd.fujixerox.ddd' => 'ddd',
+    'application/vnd.fujixerox.docuworks' => 'xdw',
+    'application/vnd.fujixerox.docuworks.binder' => 'xbd',
+    'application/vnd.fuzzysheet' => 'fzs',
+    'application/vnd.genomatix.tuxedo' => 'txd',
+    'application/vnd.geogebra.file' => 'ggb',
+    'application/vnd.geogebra.slides' => 'ggs',
+    'application/vnd.geogebra.tool' => 'ggt',
+    'application/vnd.geometry-explorer' => [
+        'gex',
+        'gre',
+    ],
+    'application/vnd.geonext' => 'gxt',
+    'application/vnd.geoplan' => 'g2w',
+    'application/vnd.geospace' => 'g3w',
+    'application/vnd.gmx' => 'gmx',
+    'application/vnd.google-earth.kml+xml' => 'kml',
+    'application/vnd.google-earth.kmz' => 'kmz',
+    'application/vnd.grafeq' => [
+        'gqf',
+        'gqs',
+    ],
+    'application/vnd.groove-account' => 'gac',
+    'application/vnd.groove-help' => 'ghf',
+    'application/vnd.groove-identity-message' => 'gim',
+    'application/vnd.groove-injector' => 'grv',
+    'application/vnd.groove-tool-message' => 'gtm',
+    'application/vnd.groove-tool-template' => 'tpl',
+    'application/vnd.groove-vcard' => 'vcg',
+    'application/vnd.hal+xml' => 'hal',
+    'application/vnd.handheld-entertainment+xml' => 'zmm',
+    'application/vnd.hbci' => 'hbci',
+    'application/vnd.hhe.lesson-player' => 'les',
+    'application/vnd.hp-hpgl' => 'hpgl',
+    'application/vnd.hp-hpid' => 'hpid',
+    'application/vnd.hp-hps' => 'hps',
+    'application/vnd.hp-jlyt' => 'jlt',
+    'application/vnd.hp-pcl' => 'pcl',
+    'application/vnd.hp-pclxl' => 'pclxl',
+    'application/vnd.hydrostatix.sof-data' => 'sfd-hdstx',
+    'application/vnd.ibm.minipay' => 'mpy',
+    'application/vnd.ibm.modcap' => [
+        'afp',
+        'listafp',
+        'list3820',
+    ],
+    'application/vnd.ibm.rights-management' => 'irm',
+    'application/vnd.ibm.secure-container' => 'sc',
+    'application/vnd.iccprofile' => [
+        'icc',
+        'icm',
+    ],
+    'application/vnd.igloader' => 'igl',
+    'application/vnd.immervision-ivp' => 'ivp',
+    'application/vnd.immervision-ivu' => 'ivu',
+    'application/vnd.insors.igm' => 'igm',
+    'application/vnd.intercon.formnet' => [
+        'xpw',
+        'xpx',
+    ],
+    'application/vnd.intergeo' => 'i2g',
+    'application/vnd.intu.qbo' => 'qbo',
+    'application/vnd.intu.qfx' => 'qfx',
+    'application/vnd.ipunplugged.rcprofile' => 'rcprofile',
+    'application/vnd.irepository.package+xml' => 'irp',
+    'application/vnd.is-xpr' => 'xpr',
+    'application/vnd.isac.fcs' => 'fcs',
+    'application/vnd.jam' => 'jam',
+    'application/vnd.jcp.javame.midlet-rms' => 'rms',
+    'application/vnd.jisp' => 'jisp',
+    'application/vnd.joost.joda-archive' => 'joda',
+    'application/vnd.kahootz' => [
+        'ktz',
+        'ktr',
+    ],
+    'application/vnd.kde.karbon' => 'karbon',
+    'application/vnd.kde.kchart' => 'chrt',
+    'application/vnd.kde.kformula' => 'kfo',
+    'application/vnd.kde.kivio' => 'flw',
+    'application/vnd.kde.kontour' => 'kon',
+    'application/vnd.kde.kpresenter' => [
+        'kpr',
+        'kpt',
+    ],
+    'application/vnd.kde.kspread' => 'ksp',
+    'application/vnd.kde.kword' => [
+        'kwd',
+        'kwt',
+    ],
+    'application/vnd.kenameaapp' => 'htke',
+    'application/vnd.kidspiration' => 'kia',
+    'application/vnd.kinar' => [
+        'kne',
+        'knp',
+    ],
+    'application/vnd.koan' => [
+        'skp',
+        'skd',
+        'skt',
+        'skm',
+    ],
+    'application/vnd.kodak-descriptor' => 'sse',
+    'application/vnd.las.las+xml' => 'lasxml',
+    'application/vnd.llamagraphics.life-balance.desktop' => 'lbd',
+    'application/vnd.llamagraphics.life-balance.exchange+xml' => 'lbe',
+    'application/vnd.lotus-1-2-3' => '123',
+    'application/vnd.lotus-approach' => 'apr',
+    'application/vnd.lotus-freelance' => 'pre',
+    'application/vnd.lotus-notes' => 'nsf',
+    'application/vnd.lotus-organizer' => 'org',
+    'application/vnd.lotus-screencam' => 'scm',
+    'application/vnd.lotus-wordpro' => 'lwp',
+    'application/vnd.macports.portpkg' => 'portpkg',
+    'application/vnd.mcd' => 'mcd',
+    'application/vnd.medcalcdata' => 'mc1',
+    'application/vnd.mediastation.cdkey' => 'cdkey',
+    'application/vnd.mfer' => 'mwf',
+    'application/vnd.mfmp' => 'mfm',
+    'application/vnd.micrografx.flo' => 'flo',
+    'application/vnd.micrografx.igx' => 'igx',
+    'application/vnd.mif' => 'mif',
+    'application/vnd.mobius.daf' => 'daf',
+    'application/vnd.mobius.dis' => 'dis',
+    'application/vnd.mobius.mbk' => 'mbk',
+    'application/vnd.mobius.mqy' => 'mqy',
+    'application/vnd.mobius.msl' => 'msl',
+    'application/vnd.mobius.plc' => 'plc',
+    'application/vnd.mobius.txf' => 'txf',
+    'application/vnd.mophun.application' => 'mpn',
+    'application/vnd.mophun.certificate' => 'mpc',
+    'application/vnd.mozilla.xul+xml' => 'xul',
+    'application/vnd.ms-artgalry' => 'cil',
+    'application/vnd.ms-cab-compressed' => 'cab',
+    'application/vnd.ms-excel' => [
+        'xls',
+        'xlm',
+        'xla',
+        'xlc',
+        'xlt',
+        'xlw',
+    ],
+    'application/vnd.ms-excel.addin.macroenabled.12' => 'xlam',
+    'application/vnd.ms-excel.sheet.binary.macroenabled.12' => 'xlsb',
+    'application/vnd.ms-excel.sheet.macroenabled.12' => 'xlsm',
+    'application/vnd.ms-excel.template.macroenabled.12' => 'xltm',
+    'application/vnd.ms-fontobject' => 'eot',
+    'application/vnd.ms-htmlhelp' => 'chm',
+    'application/vnd.ms-ims' => 'ims',
+    'application/vnd.ms-lrm' => 'lrm',
+    'application/vnd.ms-officetheme' => 'thmx',
+    'application/vnd.ms-pki.seccat' => 'cat',
+    'application/vnd.ms-pki.stl' => 'stl',
+    'application/vnd.ms-powerpoint' => [
+        'ppt',
+        'pps',
+        'pot',
+    ],
+    'application/vnd.ms-powerpoint.addin.macroenabled.12' => 'ppam',
+    'application/vnd.ms-powerpoint.presentation.macroenabled.12' => 'pptm',
+    'application/vnd.ms-powerpoint.slide.macroenabled.12' => 'sldm',
+    'application/vnd.ms-powerpoint.slideshow.macroenabled.12' => 'ppsm',
+    'application/vnd.ms-powerpoint.template.macroenabled.12' => 'potm',
+    'application/vnd.ms-project' => [
+        'mpp',
+        'mpt',
+    ],
+    'application/vnd.ms-word.document.macroenabled.12' => 'docm',
+    'application/vnd.ms-word.template.macroenabled.12' => 'dotm',
+    'application/vnd.ms-works' => [
+        'wps',
+        'wks',
+        'wcm',
+        'wdb',
+    ],
+    'application/vnd.ms-wpl' => 'wpl',
+    'application/vnd.ms-xpsdocument' => 'xps',
+    'application/vnd.mseq' => 'mseq',
+    'application/vnd.musician' => 'mus',
+    'application/vnd.muvee.style' => 'msty',
+    'application/vnd.mynfc' => 'taglet',
+    'application/vnd.neurolanguage.nlu' => 'nlu',
+    'application/vnd.nitf' => [
+        'ntf',
+        'nitf',
+    ],
+    'application/vnd.noblenet-directory' => 'nnd',
+    'application/vnd.noblenet-sealer' => 'nns',
+    'application/vnd.noblenet-web' => 'nnw',
+    'application/vnd.nokia.n-gage.data' => 'ngdat',
+    'application/vnd.nokia.n-gage.symbian.install' => 'n-gage',
+    'application/vnd.nokia.radio-preset' => 'rpst',
+    'application/vnd.nokia.radio-presets' => 'rpss',
+    'application/vnd.novadigm.edm' => 'edm',
+    'application/vnd.novadigm.edx' => 'edx',
+    'application/vnd.novadigm.ext' => 'ext',
+    'application/vnd.oasis.opendocument.chart' => 'odc',
+    'application/vnd.oasis.opendocument.chart-template' => 'otc',
+    'application/vnd.oasis.opendocument.database' => 'odb',
+    'application/vnd.oasis.opendocument.formula' => 'odf',
+    'application/vnd.oasis.opendocument.formula-template' => 'odft',
+    'application/vnd.oasis.opendocument.graphics' => 'odg',
+    'application/vnd.oasis.opendocument.graphics-template' => 'otg',
+    'application/vnd.oasis.opendocument.image' => 'odi',
+    'application/vnd.oasis.opendocument.image-template' => 'oti',
+    'application/vnd.oasis.opendocument.presentation' => 'odp',
+    'application/vnd.oasis.opendocument.presentation-template' => 'otp',
+    'application/vnd.oasis.opendocument.spreadsheet' => 'ods',
+    'application/vnd.oasis.opendocument.spreadsheet-template' => 'ots',
+    'application/vnd.oasis.opendocument.text' => 'odt',
+    'application/vnd.oasis.opendocument.text-master' => 'odm',
+    'application/vnd.oasis.opendocument.text-template' => 'ott',
+    'application/vnd.oasis.opendocument.text-web' => 'oth',
+    'application/vnd.olpc-sugar' => 'xo',
+    'application/vnd.oma.dd2+xml' => 'dd2',
+    'application/vnd.openofficeorg.extension' => 'oxt',
+    'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'pptx',
+    'application/vnd.openxmlformats-officedocument.presentationml.slide' => 'sldx',
+    'application/vnd.openxmlformats-officedocument.presentationml.slideshow' => 'ppsx',
+    'application/vnd.openxmlformats-officedocument.presentationml.template' => 'potx',
+    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'xlsx',
+    'application/vnd.openxmlformats-officedocument.spreadsheetml.template' => 'xltx',
+    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'docx',
+    'application/vnd.openxmlformats-officedocument.wordprocessingml.template' => 'dotx',
+    'application/vnd.osgeo.mapguide.package' => 'mgp',
+    'application/vnd.osgi.dp' => 'dp',
+    'application/vnd.osgi.subsystem' => 'esa',
+    'application/vnd.palm' => [
+        'pdb',
+        'pqa',
+        'oprc',
+    ],
+    'application/vnd.pawaafile' => 'paw',
+    'application/vnd.pg.format' => 'str',
+    'application/vnd.pg.osasli' => 'ei6',
+    'application/vnd.picsel' => 'efif',
+    'application/vnd.pmi.widget' => 'wg',
+    'application/vnd.pocketlearn' => 'plf',
+    'application/vnd.powerbuilder6' => 'pbd',
+    'application/vnd.previewsystems.box' => 'box',
+    'application/vnd.proteus.magazine' => 'mgz',
+    'application/vnd.publishare-delta-tree' => 'qps',
+    'application/vnd.pvi.ptid1' => 'ptid',
+    'application/vnd.quark.quarkxpress' => [
+        'qxd',
+        'qxt',
+        'qwd',
+        'qwt',
+        'qxl',
+        'qxb',
+    ],
+    'application/vnd.realvnc.bed' => 'bed',
+    'application/vnd.recordare.musicxml' => 'mxl',
+    'application/vnd.recordare.musicxml+xml' => 'musicxml',
+    'application/vnd.rig.cryptonote' => 'cryptonote',
+    'application/vnd.rim.cod' => 'cod',
+    'application/vnd.rn-realmedia' => 'rm',
+    'application/vnd.rn-realmedia-vbr' => 'rmvb',
+    'application/vnd.route66.link66+xml' => 'link66',
+    'application/vnd.sailingtracker.track' => 'st',
+    'application/vnd.seemail' => 'see',
+    'application/vnd.sema' => 'sema',
+    'application/vnd.semd' => 'semd',
+    'application/vnd.semf' => 'semf',
+    'application/vnd.shana.informed.formdata' => 'ifm',
+    'application/vnd.shana.informed.formtemplate' => 'itp',
+    'application/vnd.shana.informed.interchange' => 'iif',
+    'application/vnd.shana.informed.package' => 'ipk',
+    'application/vnd.simtech-mindmapper' => [
+        'twd',
+        'twds',
+    ],
+    'application/vnd.smaf' => 'mmf',
+    'application/vnd.smart.teacher' => 'teacher',
+    'application/vnd.solent.sdkm+xml' => [
+        'sdkm',
+        'sdkd',
+    ],
+    'application/vnd.spotfire.dxp' => 'dxp',
+    'application/vnd.spotfire.sfs' => 'sfs',
+    'application/vnd.stardivision.calc' => 'sdc',
+    'application/vnd.stardivision.draw' => 'sda',
+    'application/vnd.stardivision.impress' => 'sdd',
+    'application/vnd.stardivision.math' => 'smf',
+    'application/vnd.stardivision.writer' => [
+        'sdw',
+        'vor',
+    ],
+    'application/vnd.stardivision.writer-global' => 'sgl',
+    'application/vnd.stepmania.package' => 'smzip',
+    'application/vnd.stepmania.stepchart' => 'sm',
+    'application/vnd.sun.xml.calc' => 'sxc',
+    'application/vnd.sun.xml.calc.template' => 'stc',
+    'application/vnd.sun.xml.draw' => 'sxd',
+    'application/vnd.sun.xml.draw.template' => 'std',
+    'application/vnd.sun.xml.impress' => 'sxi',
+    'application/vnd.sun.xml.impress.template' => 'sti',
+    'application/vnd.sun.xml.math' => 'sxm',
+    'application/vnd.sun.xml.writer' => 'sxw',
+    'application/vnd.sun.xml.writer.global' => 'sxg',
+    'application/vnd.sun.xml.writer.template' => 'stw',
+    'application/vnd.sus-calendar' => [
+        'sus',
+        'susp',
+    ],
+    'application/vnd.svd' => 'svd',
+    'application/vnd.symbian.install' => [
+        'sis',
+        'sisx',
+    ],
+    'application/vnd.syncml+xml' => 'xsm',
+    'application/vnd.syncml.dm+wbxml' => 'bdm',
+    'application/vnd.syncml.dm+xml' => 'xdm',
+    'application/vnd.tao.intent-module-archive' => 'tao',
+    'application/vnd.tcpdump.pcap' => [
+        'pcap',
+        'cap',
+        'dmp',
+    ],
+    'application/vnd.tmobile-livetv' => 'tmo',
+    'application/vnd.trid.tpt' => 'tpt',
+    'application/vnd.triscape.mxs' => 'mxs',
+    'application/vnd.trueapp' => 'tra',
+    'application/vnd.ufdl' => [
+        'ufd',
+        'ufdl',
+    ],
+    'application/vnd.uiq.theme' => 'utz',
+    'application/vnd.umajin' => 'umj',
+    'application/vnd.unity' => 'unityweb',
+    'application/vnd.uoml+xml' => 'uoml',
+    'application/vnd.vcx' => 'vcx',
+    'application/vnd.visio' => [
+        'vsd',
+        'vst',
+        'vss',
+        'vsw',
+    ],
+    'application/vnd.visionary' => 'vis',
+    'application/vnd.vsf' => 'vsf',
+    'application/vnd.wap.wbxml' => 'wbxml',
+    'application/vnd.wap.wmlc' => 'wmlc',
+    'application/vnd.wap.wmlscriptc' => 'wmlsc',
+    'application/vnd.webturbo' => 'wtb',
+    'application/vnd.wolfram.player' => 'nbp',
+    'application/vnd.wordperfect' => 'wpd',
+    'application/vnd.wqd' => 'wqd',
+    'application/vnd.wt.stf' => 'stf',
+    'application/vnd.xara' => 'xar',
+    'application/vnd.xfdl' => 'xfdl',
+    'application/vnd.yamaha.hv-dic' => 'hvd',
+    'application/vnd.yamaha.hv-script' => 'hvs',
+    'application/vnd.yamaha.hv-voice' => 'hvp',
+    'application/vnd.yamaha.openscoreformat' => 'osf',
+    'application/vnd.yamaha.openscoreformat.osfpvg+xml' => 'osfpvg',
+    'application/vnd.yamaha.smaf-audio' => 'saf',
+    'application/vnd.yamaha.smaf-phrase' => 'spf',
+    'application/vnd.yellowriver-custom-menu' => 'cmp',
+    'application/vnd.zul' => [
+        'zir',
+        'zirz',
+    ],
+    'application/vnd.zzazz.deck+xml' => 'zaz',
+    'application/voicexml+xml' => 'vxml',
+    'application/wasm' => 'wasm',
+    'application/widget' => 'wgt',
+    'application/winhlp' => 'hlp',
+    'application/wsdl+xml' => 'wsdl',
+    'application/wspolicy+xml' => 'wspolicy',
+    'application/x-7z-compressed' => '7z',
+    'application/x-abiword' => 'abw',
+    'application/x-ace-compressed' => 'ace',
+    'application/x-apple-diskimage' => 'dmg',
+    'application/x-authorware-bin' => [
+        'aab',
+        'x32',
+        'u32',
+        'vox',
+    ],
+    'application/x-authorware-map' => 'aam',
+    'application/x-authorware-seg' => 'aas',
+    'application/x-bcpio' => 'bcpio',
+    'application/x-bittorrent' => 'torrent',
+    'application/x-blorb' => [
+        'blb',
+        'blorb',
+    ],
+    'application/x-bzip' => 'bz',
+    'application/x-bzip2' => [
+        'bz2',
+        'boz',
+    ],
+    'application/x-cbr' => [
+        'cbr',
+        'cba',
+        'cbt',
+        'cbz',
+        'cb7',
+    ],
+    'application/x-cdlink' => 'vcd',
+    'application/x-cfs-compressed' => 'cfs',
+    'application/x-chat' => 'chat',
+    'application/x-chess-pgn' => 'pgn',
+    'application/x-conference' => 'nsc',
+    'application/x-cpio' => 'cpio',
+    'application/x-csh' => 'csh',
+    'application/x-debian-package' => [
+        'deb',
+        'udeb',
+    ],
+    'application/x-dgc-compressed' => 'dgc',
+    'application/x-director' => [
+        'dir',
+        'dcr',
+        'dxr',
+        'cst',
+        'cct',
+        'cxt',
+        'w3d',
+        'fgd',
+        'swa',
+    ],
+    'application/x-doom' => 'wad',
+    'application/x-dtbncx+xml' => 'ncx',
+    'application/x-dtbook+xml' => 'dtb',
+    'application/x-dtbresource+xml' => 'res',
+    'application/x-dvi' => 'dvi',
+    'application/x-envoy' => 'evy',
+    'application/x-eva' => 'eva',
+    'application/x-font-bdf' => 'bdf',
+    'application/x-font-ghostscript' => 'gsf',
+    'application/x-font-linux-psf' => 'psf',
+    'application/x-font-pcf' => 'pcf',
+    'application/x-font-snf' => 'snf',
+    'application/x-font-type1' => [
+        'pfa',
+        'pfb',
+        'pfm',
+        'afm',
+    ],
+    'application/x-freearc' => 'arc',
+    'application/x-futuresplash' => 'spl',
+    'application/x-gca-compressed' => 'gca',
+    'application/x-glulx' => 'ulx',
+    'application/x-gnumeric' => 'gnumeric',
+    'application/x-gramps-xml' => 'gramps',
+    'application/x-gtar' => 'gtar',
+    'application/x-hdf' => 'hdf',
+    'application/x-install-instructions' => 'install',
+    'application/x-iso9660-image' => 'iso',
+    'application/x-java-jnlp-file' => 'jnlp',
+    'application/x-latex' => 'latex',
+    'application/x-lzh-compressed' => [
+        'lzh',
+        'lha',
+    ],
+    'application/x-mie' => 'mie',
+    'application/x-mobipocket-ebook' => [
+        'prc',
+        'mobi',
+    ],
+    'application/x-ms-application' => 'application',
+    'application/x-ms-shortcut' => 'lnk',
+    'application/x-ms-wmd' => 'wmd',
+    'application/x-ms-wmz' => 'wmz',
+    'application/x-ms-xbap' => 'xbap',
+    'application/x-msaccess' => 'mdb',
+    'application/x-msbinder' => 'obd',
+    'application/x-mscardfile' => 'crd',
+    'application/x-msclip' => 'clp',
+    'application/x-msdownload' => [
+        'exe',
+        'dll',
+        'com',
+        'bat',
+        'msi',
+    ],
+    'application/x-msmediaview' => [
+        'mvb',
+        'm13',
+        'm14',
+    ],
+    'application/x-msmetafile' => [
+        'wmf',
+        'wmz',
+        'emf',
+        'emz',
+    ],
+    'application/x-msmoney' => 'mny',
+    'application/x-mspublisher' => 'pub',
+    'application/x-msschedule' => 'scd',
+    'application/x-msterminal' => 'trm',
+    'application/x-mswrite' => 'wri',
+    'application/x-netcdf' => [
+        'nc',
+        'cdf',
+    ],
+    'application/x-nzb' => 'nzb',
+    'application/x-pkcs12' => [
+        'p12',
+        'pfx',
+    ],
+    'application/x-pkcs7-certificates' => [
+        'p7b',
+        'spc',
+    ],
+    'application/x-pkcs7-certreqresp' => 'p7r',
+    'application/x-rar-compressed' => 'rar',
+    'application/x-research-info-systems' => 'ris',
+    'application/x-sh' => 'sh',
+    'application/x-shar' => 'shar',
+    'application/x-shockwave-flash' => 'swf',
+    'application/x-silverlight-app' => 'xap',
+    'application/x-sql' => 'sql',
+    'application/x-stuffit' => 'sit',
+    'application/x-stuffitx' => 'sitx',
+    'application/x-subrip' => 'srt',
+    'application/x-sv4cpio' => 'sv4cpio',
+    'application/x-sv4crc' => 'sv4crc',
+    'application/x-t3vm-image' => 't3',
+    'application/x-tads' => 'gam',
+    'application/x-tar' => 'tar',
+    'application/x-tcl' => 'tcl',
+    'application/x-tex' => 'tex',
+    'application/x-tex-tfm' => 'tfm',
+    'application/x-texinfo' => [
+        'texinfo',
+        'texi',
+    ],
+    'application/x-tgif' => 'obj',
+    'application/x-ustar' => 'ustar',
+    'application/x-wais-source' => 'src',
+    'application/x-x509-ca-cert' => [
+        'der',
+        'crt',
+    ],
+    'application/x-xfig' => 'fig',
+    'application/x-xliff+xml' => 'xlf',
+    'application/x-xpinstall' => 'xpi',
+    'application/x-xz' => 'xz',
+    'application/x-zmachine' => [
+        'z1',
+        'z2',
+        'z3',
+        'z4',
+        'z5',
+        'z6',
+        'z7',
+        'z8',
+    ],
+    'application/xaml+xml' => 'xaml',
+    'application/xcap-diff+xml' => 'xdf',
+    'application/xenc+xml' => 'xenc',
+    'application/xhtml+xml' => [
+        'xhtml',
+        'xht',
+    ],
+    'application/xml' => [
+        'xml',
+        'xsl',
+    ],
+    'application/xml-dtd' => 'dtd',
+    'application/xop+xml' => 'xop',
+    'application/xproc+xml' => 'xpl',
+    'application/xslt+xml' => 'xslt',
+    'application/xspf+xml' => 'xspf',
+    'application/xv+xml' => [
+        'mxml',
+        'xhvml',
+        'xvml',
+        'xvm',
+    ],
+    'application/yang' => 'yang',
+    'application/yin+xml' => 'yin',
+    'application/zip' => 'zip',
+    'audio/adpcm' => 'adp',
+    'audio/basic' => [
+        'au',
+        'snd',
+    ],
+    'audio/midi' => [
+        'mid',
+        'midi',
+        'kar',
+        'rmi',
+    ],
+    'audio/mp4' => [
+        'm4a',
+        'mp4a',
+    ],
+    'audio/mpeg' => [
+        'mpga',
+        'mp2',
+        'mp2a',
+        'mp3',
+        'm2a',
+        'm3a',
+    ],
+    'audio/ogg' => [
+        'oga',
+        'ogg',
+        'spx',
+        'opus',
+    ],
+    'audio/s3m' => 's3m',
+    'audio/silk' => 'sil',
+    'audio/vnd.dece.audio' => [
+        'uva',
+        'uvva',
+    ],
+    'audio/vnd.digital-winds' => 'eol',
+    'audio/vnd.dra' => 'dra',
+    'audio/vnd.dts' => 'dts',
+    'audio/vnd.dts.hd' => 'dtshd',
+    'audio/vnd.lucent.voice' => 'lvp',
+    'audio/vnd.ms-playready.media.pya' => 'pya',
+    'audio/vnd.nuera.ecelp4800' => 'ecelp4800',
+    'audio/vnd.nuera.ecelp7470' => 'ecelp7470',
+    'audio/vnd.nuera.ecelp9600' => 'ecelp9600',
+    'audio/vnd.rip' => 'rip',
+    'audio/webm' => 'weba',
+    'audio/x-aac' => 'aac',
+    'audio/x-aiff' => [
+        'aif',
+        'aiff',
+        'aifc',
+    ],
+    'audio/x-caf' => 'caf',
+    'audio/x-flac' => 'flac',
+    'audio/x-matroska' => 'mka',
+    'audio/x-mpegurl' => 'm3u',
+    'audio/x-ms-wax' => 'wax',
+    'audio/x-ms-wma' => 'wma',
+    'audio/x-pn-realaudio' => [
+        'ram',
+        'ra',
+    ],
+    'audio/x-pn-realaudio-plugin' => 'rmp',
+    'audio/x-wav' => 'wav',
+    'audio/xm' => 'xm',
+    'chemical/x-cdx' => 'cdx',
+    'chemical/x-cif' => 'cif',
+    'chemical/x-cmdf' => 'cmdf',
+    'chemical/x-cml' => 'cml',
+    'chemical/x-csml' => 'csml',
+    'chemical/x-xyz' => 'xyz',
+    'font/collection' => 'ttc',
+    'font/otf' => 'otf',
+    'font/ttf' => 'ttf',
+    'font/woff' => 'woff',
+    'font/woff2' => 'woff2',
+    'image/apng' => 'apng',
+    'image/avif' => 'avif',
+    'image/bmp' => 'bmp',
+    'image/cgm' => 'cgm',
+    'image/g3fax' => 'g3',
+    'image/gif' => 'gif',
+    'image/ief' => 'ief',
+    'image/jpeg' => [
+        'jpeg',
+        'jpg',
+        'jpe',
+        'jfif',
+        'pjp',
+        'pjpeg',
+    ],
+    'image/ktx' => 'ktx',
+    'image/png' => 'png',
+    'image/prs.btif' => 'btif',
+    'image/sgi' => 'sgi',
+    'image/svg+xml' => [
+        'svg',
+        'svgz',
+    ],
+    'image/tiff' => [
+        'tiff',
+        'tif',
+    ],
+    'image/vnd.adobe.photoshop' => 'psd',
+    'image/vnd.dece.graphic' => [
+        'uvi',
+        'uvvi',
+        'uvg',
+        'uvvg',
+    ],
+    'image/vnd.djvu' => [
+        'djvu',
+        'djv',
+    ],
+    'image/vnd.dvb.subtitle' => 'sub',
+    'image/vnd.dwg' => 'dwg',
+    'image/vnd.dxf' => 'dxf',
+    'image/vnd.fastbidsheet' => 'fbs',
+    'image/vnd.fpx' => 'fpx',
+    'image/vnd.fst' => 'fst',
+    'image/vnd.fujixerox.edmics-mmr' => 'mmr',
+    'image/vnd.fujixerox.edmics-rlc' => 'rlc',
+    'image/vnd.ms-modi' => 'mdi',
+    'image/vnd.ms-photo' => 'wdp',
+    'image/vnd.net-fpx' => 'npx',
+    'image/vnd.wap.wbmp' => 'wbmp',
+    'image/vnd.xiff' => 'xif',
+    'image/webp' => 'webp',
+    'image/x-3ds' => '3ds',
+    'image/x-cmu-raster' => 'ras',
+    'image/x-cmx' => 'cmx',
+    'image/x-freehand' => [
+        'fh',
+        'fhc',
+        'fh4',
+        'fh5',
+        'fh7',
+    ],
+    'image/x-icon' => 'ico',
+    'image/x-mrsid-image' => 'sid',
+    'image/x-pcx' => 'pcx',
+    'image/x-pict' => [
+        'pic',
+        'pct',
+    ],
+    'image/x-portable-anymap' => 'pnm',
+    'image/x-portable-bitmap' => 'pbm',
+    'image/x-portable-graymap' => 'pgm',
+    'image/x-portable-pixmap' => 'ppm',
+    'image/x-rgb' => 'rgb',
+    'image/x-tga' => 'tga',
+    'image/x-xbitmap' => 'xbm',
+    'image/x-xpixmap' => 'xpm',
+    'image/x-xwindowdump' => 'xwd',
+    'message/rfc822' => [
+        'eml',
+        'mime',
+    ],
+    'model/iges' => [
+        'igs',
+        'iges',
+    ],
+    'model/mesh' => [
+        'msh',
+        'mesh',
+        'silo',
+    ],
+    'model/vnd.collada+xml' => 'dae',
+    'model/vnd.dwf' => 'dwf',
+    'model/vnd.gdl' => 'gdl',
+    'model/vnd.gtw' => 'gtw',
+    'model/vnd.mts' => 'mts',
+    'model/vnd.vtu' => 'vtu',
+    'model/vrml' => [
+        'wrl',
+        'vrml',
+    ],
+    'model/x3d+binary' => [
+        'x3db',
+        'x3dbz',
+    ],
+    'model/x3d+vrml' => [
+        'x3dv',
+        'x3dvz',
+    ],
+    'model/x3d+xml' => [
+        'x3d',
+        'x3dz',
+    ],
+    'text/cache-manifest' => 'appcache',
+    'text/calendar' => [
+        'ics',
+        'ifb',
+    ],
+    'text/css' => 'css',
+    'text/csv' => 'csv',
+    'text/html' => [
+        'html',
+        'htm',
+    ],
+    'text/javascript' => [
+        'js',
+        'mjs',
+        'mjs',
+    ],
+    'text/n3' => 'n3',
+    'text/plain' => [
+        'txt',
+        'text',
+        'conf',
+        'def',
+        'list',
+        'log',
+        'in',
+    ],
+    'text/prs.lines.tag' => 'dsc',
+    'text/richtext' => 'rtx',
+    'text/sgml' => [
+        'sgml',
+        'sgm',
+    ],
+    'text/tab-separated-values' => 'tsv',
+    'text/troff' => [
+        't',
+        'tr',
+        'roff',
+        'man',
+        'me',
+        'ms',
+    ],
+    'text/turtle' => 'ttl',
+    'text/uri-list' => [
+        'uri',
+        'uris',
+        'urls',
+    ],
+    'text/vcard' => 'vcard',
+    'text/vnd.curl' => 'curl',
+    'text/vnd.curl.dcurl' => 'dcurl',
+    'text/vnd.curl.mcurl' => 'mcurl',
+    'text/vnd.curl.scurl' => 'scurl',
+    'text/vnd.dvb.subtitle' => 'sub',
+    'text/vnd.fly' => 'fly',
+    'text/vnd.fmi.flexstor' => 'flx',
+    'text/vnd.graphviz' => 'gv',
+    'text/vnd.in3d.3dml' => '3dml',
+    'text/vnd.in3d.spot' => 'spot',
+    'text/vnd.sun.j2me.app-descriptor' => 'jad',
+    'text/vnd.wap.wml' => 'wml',
+    'text/vnd.wap.wmlscript' => 'wmls',
+    'text/x-asm' => [
+        's',
+        'asm',
+    ],
+    'text/x-c' => [
+        'c',
+        'cc',
+        'cxx',
+        'cpp',
+        'h',
+        'hh',
+        'dic',
+    ],
+    'text/x-fortran' => [
+        'f',
+        'for',
+        'f77',
+        'f90',
+    ],
+    'text/x-java-source' => 'java',
+    'text/x-nfo' => 'nfo',
+    'text/x-opml' => 'opml',
+    'text/x-pascal' => [
+        'p',
+        'pas',
+    ],
+    'text/x-setext' => 'etx',
+    'text/x-sfv' => 'sfv',
+    'text/x-uuencode' => 'uu',
+    'text/x-vcalendar' => 'vcs',
+    'text/x-vcard' => 'vcf',
+    'video/3gpp' => '3gp',
+    'video/3gpp2' => '3g2',
+    'video/h261' => 'h261',
+    'video/h263' => 'h263',
+    'video/h264' => 'h264',
+    'video/jpeg' => 'jpgv',
+    'video/jpm' => [
+        'jpm',
+        'jpgm',
+    ],
+    'video/mj2' => [
+        'mj2',
+        'mjp2',
+    ],
+    'video/mp4' => [
+        'mp4',
+        'mp4v',
+        'mpg4',
+    ],
+    'video/mpeg' => [
+        'mpeg',
+        'mpg',
+        'mpe',
+        'm1v',
+        'm2v',
+    ],
+    'video/ogg' => 'ogv',
+    'video/quicktime' => [
+        'qt',
+        'mov',
+    ],
+    'video/vnd.dece.hd' => [
+        'uvh',
+        'uvvh',
+    ],
+    'video/vnd.dece.mobile' => [
+        'uvm',
+        'uvvm',
+    ],
+    'video/vnd.dece.pd' => [
+        'uvp',
+        'uvvp',
+    ],
+    'video/vnd.dece.sd' => [
+        'uvs',
+        'uvvs',
+    ],
+    'video/vnd.dece.video' => [
+        'uvv',
+        'uvvv',
+    ],
+    'video/vnd.dvb.file' => 'dvb',
+    'video/vnd.fvt' => 'fvt',
+    'video/vnd.mpegurl' => [
+        'mxu',
+        'm4u',
+    ],
+    'video/vnd.ms-playready.media.pyv' => 'pyv',
+    'video/vnd.uvvu.mp4' => [
+        'uvu',
+        'uvvu',
+    ],
+    'video/vnd.vivo' => 'viv',
+    'video/webm' => 'webm',
+    'video/x-f4v' => 'f4v',
+    'video/x-fli' => 'fli',
+    'video/x-flv' => 'flv',
+    'video/x-m4v' => 'm4v',
+    'video/x-matroska' => [
+        'mkv',
+        'mk3d',
+        'mks',
+    ],
+    'video/x-mng' => 'mng',
+    'video/x-ms-asf' => [
+        'asf',
+        'asx',
+    ],
+    'video/x-ms-vob' => 'vob',
+    'video/x-ms-wm' => 'wm',
+    'video/x-ms-wmv' => 'wmv',
+    'video/x-ms-wmx' => 'wmx',
+    'video/x-ms-wvx' => 'wvx',
+    'video/x-msvideo' => 'avi',
+    'video/x-sgi-movie' => 'movie',
+    'video/x-smv' => 'smv',
+    'x-conference/x-cooltalk' => 'ice',
+];
diff --git a/src/helpers/mimeTypes.php b/src/helpers/mimeTypes.php
index 944633aa5d2..f895e8d0728 100644
--- a/src/helpers/mimeTypes.php
+++ b/src/helpers/mimeTypes.php
@@ -7,8 +7,12 @@
  * Its content is generated from the apache http mime.types file.
  * https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup
  * This file has been placed in the public domain for unlimited redistribution.
+ *
+ * All extra changes made to this file must be comitted to /build/controllers/MimeTypeController.php
+ * otherwise they will be lost on next build.
  */
 $mimeTypes = [
+    123 => 'application/vnd.lotus-1-2-3',
     '3dml' => 'text/vnd.in3d.3dml',
     '3ds' => 'image/x-3ds',
     '3g2' => 'video/3gpp2',
@@ -37,6 +41,7 @@
     'ait' => 'application/vnd.dvb.ait',
     'ami' => 'application/vnd.amiga.ami',
     'apk' => 'application/vnd.android.package-archive',
+    'apng' => 'image/apng',
     'appcache' => 'text/cache-manifest',
     'application' => 'application/x-ms-application',
     'apr' => 'application/vnd.lotus-approach',
@@ -53,6 +58,7 @@
     'atx' => 'application/vnd.antix.game-component',
     'au' => 'audio/basic',
     'avi' => 'video/x-msvideo',
+    'avif' => 'image/avif',
     'aw' => 'application/applixware',
     'azf' => 'application/vnd.airzip.filesecure.azf',
     'azs' => 'application/vnd.airzip.filesecure.azs',
@@ -279,6 +285,7 @@
     'geo' => 'application/vnd.dynageo',
     'gex' => 'application/vnd.geometry-explorer',
     'ggb' => 'application/vnd.geogebra.file',
+    'ggs' => 'application/vnd.geogebra.slides',
     'ggt' => 'application/vnd.geogebra.tool',
     'ghf' => 'application/vnd.groove-help',
     'gif' => 'image/gif',
@@ -366,7 +373,7 @@
     'jpgm' => 'video/jpm',
     'jpgv' => 'video/jpeg',
     'jpm' => 'video/jpm',
-    'js' => 'application/javascript',
+    'js' => 'text/javascript',
     'json' => 'application/json',
     'jsonml' => 'application/jsonml+json',
     'kar' => 'audio/midi',
@@ -401,7 +408,6 @@
     'log' => 'text/plain',
     'lostxml' => 'application/lost+xml',
     'lrf' => 'application/octet-stream',
-    0 => 'application/vnd.lotus-1-2-3',
     'lrm' => 'application/vnd.ms-lrm',
     'ltf' => 'application/vnd.frogans.ltf',
     'lvp' => 'audio/vnd.lucent.voice',
@@ -599,6 +605,8 @@
     'pgn' => 'application/x-chess-pgn',
     'pgp' => 'application/pgp-encrypted',
     'pic' => 'image/x-pict',
+    'pjp' => 'image/jpeg',
+    'pjpeg' => 'image/jpeg',
     'pkg' => 'application/octet-stream',
     'pki' => 'application/pkixcmp',
     'pkipath' => 'application/pkix-pkipath',
@@ -883,6 +891,7 @@
     'vxml' => 'application/voicexml+xml',
     'w3d' => 'application/x-director',
     'wad' => 'application/x-doom',
+    'wasm' => 'application/wasm',
     'wav' => 'audio/x-wav',
     'wax' => 'audio/x-ms-wax',
     'wbmp' => 'image/vnd.wap.wbmp',
@@ -997,7 +1006,8 @@
     'zmm' => 'application/vnd.handheld-entertainment+xml',
 ];
 
-if (PHP_VERSION_ID >= 80100) {
+# fix for bundled libmagic bug, see also https://github.com/yiisoft/yii2/issues/19925
+if ((PHP_VERSION_ID >= 80100 && PHP_VERSION_ID < 80122) || (PHP_VERSION_ID >= 80200 && PHP_VERSION_ID < 80209)) {
     $mimeTypes = array_replace($mimeTypes, array('xz' => 'application/octet-stream'));
 }
 
diff --git a/src/i18n/Formatter.php b/src/i18n/Formatter.php
index 3236a433beb..001b81bfa90 100644
--- a/src/i18n/Formatter.php
+++ b/src/i18n/Formatter.php
@@ -460,7 +460,7 @@ public function format($value, $format)
         }
         $method = 'as' . $format;
         if ($this->hasMethod($method)) {
-            return call_user_func_array([$this, $method], $params);
+            return call_user_func_array([$this, $method], array_values($params));
         }
 
         throw new InvalidArgumentException("Unknown format type: $format");
diff --git a/src/log/FileTarget.php b/src/log/FileTarget.php
index 05ad09430af..d4c267e2ed1 100644
--- a/src/log/FileTarget.php
+++ b/src/log/FileTarget.php
@@ -106,12 +106,17 @@ public function init()
      */
     public function export()
     {
+        $text = implode("\n", array_map([$this, 'formatMessage'], $this->messages)) . "\n";
+
+        if (trim($text) === '') {
+            return; // No messages to export, so we exit the function early
+        }
+
         if (strpos($this->logFile, '://') === false || strncmp($this->logFile, 'file://', 7) === 0) {
             $logPath = dirname($this->logFile);
             FileHelper::createDirectory($logPath, $this->dirMode, true);
         }
 
-        $text = implode("\n", array_map([$this, 'formatMessage'], $this->messages)) . "\n";
         if (($fp = @fopen($this->logFile, 'a')) === false) {
             throw new InvalidConfigException("Unable to append to log file: {$this->logFile}");
         }
diff --git a/src/mutex/MysqlMutex.php b/src/mutex/MysqlMutex.php
index cbbd49dad3f..d7716e8c64e 100644
--- a/src/mutex/MysqlMutex.php
+++ b/src/mutex/MysqlMutex.php
@@ -69,9 +69,13 @@ protected function acquireLock($name, $timeout = 0)
     {
         return $this->db->useMaster(function ($db) use ($name, $timeout) {
             /** @var \yii\db\Connection $db */
-            return (bool) $db->createCommand(
-                'SELECT GET_LOCK(SUBSTRING(CONCAT(:prefix, :name), 1, 64), :timeout)',
-                [':name' => $this->hashLockName($name), ':timeout' => $timeout, ':prefix' => $this->keyPrefix]
+            $nameData = $this->prepareName();
+            return (bool)$db->createCommand(
+                'SELECT GET_LOCK(' . $nameData[0] . ', :timeout), :prefix',
+                array_merge(
+                    [':name' => $this->hashLockName($name), ':timeout' => $timeout, ':prefix' => $this->keyPrefix],
+                    $nameData[1]
+                )
             )->queryScalar();
         });
     }
@@ -86,13 +90,33 @@ protected function releaseLock($name)
     {
         return $this->db->useMaster(function ($db) use ($name) {
             /** @var \yii\db\Connection $db */
-            return (bool) $db->createCommand(
-                'SELECT RELEASE_LOCK(SUBSTRING(CONCAT(:prefix, :name), 1, 64))',
-                [':name' => $this->hashLockName($name), ':prefix' => $this->keyPrefix]
+            $nameData = $this->prepareName();
+            return (bool)$db->createCommand(
+                'SELECT RELEASE_LOCK(' . $nameData[0] . '), :prefix',
+                array_merge(
+                    [':name' => $this->hashLockName($name), ':prefix' => $this->keyPrefix],
+                    $nameData[1]
+                )
             )->queryScalar();
         });
     }
 
+    /**
+     * Prepare lock name
+     * @return array expression and params
+     * @since 2.0.48
+     */
+    protected function prepareName()
+    {
+        $params = [];
+        $expression = "SUBSTRING(CONCAT(:prefix, :name), 1, 64)";
+        if ($this->keyPrefix instanceof Expression) {
+            $expression = strtr($expression, [':prefix' => $this->keyPrefix->expression]);
+            $params = $this->keyPrefix->params;
+        }
+        return [$expression, $params];
+    }
+
     /**
      * Generate hash for lock name to avoid exceeding lock name length limit.
      *
@@ -101,7 +125,8 @@ protected function releaseLock($name)
      * @since 2.0.16
      * @see https://github.com/yiisoft/yii2/pull/16836
      */
-    protected function hashLockName($name) {
+    protected function hashLockName($name)
+    {
         return sha1($name);
     }
 }
diff --git a/src/rbac/DbManager.php b/src/rbac/DbManager.php
index 00c40711eb8..2685ad5a1cd 100644
--- a/src/rbac/DbManager.php
+++ b/src/rbac/DbManager.php
@@ -87,6 +87,11 @@ class DbManager extends BaseManager
      * @since 2.0.3
      */
     public $cacheKey = 'rbac';
+    /**
+     * @var string the key used to store user RBAC roles in cache
+     * @since 2.0.48
+     */
+    public $rolesCacheSuffix = 'roles';
 
     /**
      * @var Item[] all auth items (name => Item)
@@ -471,6 +476,14 @@ public function getRolesByUser($userId)
             return [];
         }
 
+        if ($this->cache !== null) {
+            $data = $this->cache->get($this->getUserRolesCacheKey($userId));
+
+            if ($data !== false) {
+                return $data;
+            }
+        }
+
         $query = (new Query())->select('b.*')
             ->from(['a' => $this->assignmentTable, 'b' => $this->itemTable])
             ->where('{{a}}.[[item_name]]={{b}}.[[name]]')
@@ -482,6 +495,10 @@ public function getRolesByUser($userId)
             $roles[$row['name']] = $this->populateItem($row);
         }
 
+        if ($this->cache !== null) {
+            $this->cacheUserRolesData($userId, $roles);
+        }
+
         return $roles;
     }
 
@@ -865,6 +882,9 @@ public function assign($role, $userId)
             ])->execute();
 
         unset($this->checkAccessAssignments[(string) $userId]);
+
+        $this->invalidateCache();
+
         return $assignment;
     }
 
@@ -878,9 +898,13 @@ public function revoke($role, $userId)
         }
 
         unset($this->checkAccessAssignments[(string) $userId]);
-        return $this->db->createCommand()
+        $result = $this->db->createCommand()
             ->delete($this->assignmentTable, ['user_id' => (string) $userId, 'item_name' => $role->name])
             ->execute() > 0;
+
+        $this->invalidateCache();
+
+        return $result;
     }
 
     /**
@@ -893,9 +917,13 @@ public function revokeAll($userId)
         }
 
         unset($this->checkAccessAssignments[(string) $userId]);
-        return $this->db->createCommand()
+        $result = $this->db->createCommand()
             ->delete($this->assignmentTable, ['user_id' => (string) $userId])
             ->execute() > 0;
+
+        $this->invalidateCache();
+
+        return $result;
     }
 
     /**
@@ -988,6 +1016,16 @@ public function invalidateCache()
             $this->items = null;
             $this->rules = null;
             $this->parents = null;
+
+            $cachedUserIds = $this->cache->get($this->getUserRolesCachedSetKey());
+
+            if ($cachedUserIds !== false) {
+                foreach ($cachedUserIds as $userId) {
+                    $this->cache->delete($this->getUserRolesCacheKey($userId));
+                }
+
+                $this->cache->delete($this->getUserRolesCachedSetKey());
+            }
         }
         $this->checkAccessAssignments = [];
     }
@@ -1061,4 +1099,28 @@ protected function isEmptyUserId($userId)
     {
         return !isset($userId) || $userId === '';
     }
+
+    private function getUserRolesCacheKey($userId)
+    {
+        return $this->cacheKey . $this->rolesCacheSuffix . $userId;
+    }
+
+    private function getUserRolesCachedSetKey()
+    {
+        return $this->cacheKey . $this->rolesCacheSuffix;
+    }
+
+    private function cacheUserRolesData($userId, $roles)
+    {
+        $cachedUserIds = $this->cache->get($this->getUserRolesCachedSetKey());
+
+        if ($cachedUserIds === false) {
+            $cachedUserIds = [];
+        }
+
+        $cachedUserIds[] = $userId;
+
+        $this->cache->set($this->getUserRolesCacheKey($userId), $roles);
+        $this->cache->set($this->getUserRolesCachedSetKey(), $cachedUserIds);
+    }
 }
diff --git a/src/requirements/YiiRequirementChecker.php b/src/requirements/YiiRequirementChecker.php
index c3c707876fb..45675cd716c 100644
--- a/src/requirements/YiiRequirementChecker.php
+++ b/src/requirements/YiiRequirementChecker.php
@@ -56,6 +56,11 @@
  */
 class YiiRequirementChecker
 {
+    /**
+     * @var Check result
+     */
+    public $result;
+
     /**
      * Check the given requirements, collecting results into internal field.
      * This method can be invoked several times checking different requirement sets.
diff --git a/src/requirements/requirements.php b/src/requirements/requirements.php
index 55593061518..d065f6363bc 100644
--- a/src/requirements/requirements.php
+++ b/src/requirements/requirements.php
@@ -111,5 +111,12 @@
         'memo' => 'When <a href="https://www.yiiframework.com/doc-2.0/yii-validators-ipvalidator.html#$expandIPv6-detail">IpValidator::expandIPv6</a>
         property is set to <code>true</code>, PHP must support IPv6 protocol stack. Currently PHP constant <code>AF_INET6</code> is not defined
         and IPv6 is probably unsupported.'
+    ),
+    array(
+        'name' => 'pcntl',
+        'mandatory' => false,
+        'condition' => extension_loaded('pcntl'),
+        'by' => '<a href="https://www.php.net/manual/de/book.pcntl.php">Process Control</a>',
+        'memo' => 'Recommended for yii2-queue CLI operations'
     )
 );
diff --git a/src/rest/Serializer.php b/src/rest/Serializer.php
index a4d16b195f2..eedd96c2cc6 100644
--- a/src/rest/Serializer.php
+++ b/src/rest/Serializer.php
@@ -188,6 +188,12 @@ protected function getRequestedFields()
      */
     protected function serializeDataProvider($dataProvider)
     {
+        if (($pagination = $dataProvider->getPagination()) !== false) {
+            $this->addPaginationHeaders($pagination);
+        }
+        if ($this->request->getIsHead()) {
+            return null;
+        }
         if ($this->preserveKeys) {
             $models = $dataProvider->getModels();
         } else {
@@ -195,13 +201,7 @@ protected function serializeDataProvider($dataProvider)
         }
         $models = $this->serializeModels($models);
 
-        if (($pagination = $dataProvider->getPagination()) !== false) {
-            $this->addPaginationHeaders($pagination);
-        }
-
-        if ($this->request->getIsHead()) {
-            return null;
-        } elseif ($this->collectionEnvelope === null) {
+        if ($this->collectionEnvelope === null) {
             return $models;
         }
 
@@ -294,10 +294,9 @@ protected function serializeModelErrors($model)
      */
     protected function serializeModels(array $models)
     {
-        list($fields, $expand) = $this->getRequestedFields();
         foreach ($models as $i => $model) {
             if ($model instanceof Arrayable) {
-                $models[$i] = $model->toArray($fields, $expand);
+                $models[$i] = $this->serializeModel($model);
             } elseif (is_array($model)) {
                 $models[$i] = ArrayHelper::toArray($model);
             }
diff --git a/src/validators/DateValidator.php b/src/validators/DateValidator.php
index 740011846de..c0f66454120 100644
--- a/src/validators/DateValidator.php
+++ b/src/validators/DateValidator.php
@@ -441,8 +441,8 @@ private function parseDateValuePHP($value, $format)
         // if no time was provided in the format string set timezone to default one to match yii\i18n\Formatter::formatDateTimeValue()
         $timezone = $hasTimeInfo ? $this->timeZone : $this->defaultTimeZone;
         $date = DateTime::createFromFormat($format, $value, new DateTimeZone($timezone));
-        $errors = DateTime::getLastErrors();
-        if ($date === false || $errors['error_count'] || $errors['warning_count'] || ($this->strictDateFormat && $date->format($format) !== $value)) {
+        $errors = DateTime::getLastErrors(); // Before PHP 8.2 may return array instead of false (see https://github.com/php/php-src/issues/9431).
+        if ($date === false || ($errors !== false && ($errors['error_count'] || $errors['warning_count'])) || ($this->strictDateFormat && $date->format($format) !== $value)) {
             return false;
         }
 
diff --git a/src/validators/NumberValidator.php b/src/validators/NumberValidator.php
index 714288a27f6..074af8cf45f 100644
--- a/src/validators/NumberValidator.php
+++ b/src/validators/NumberValidator.php
@@ -116,19 +116,19 @@ public function validateAttribute($model, $attribute)
     protected function validateValue($value)
     {
         if (is_array($value) && !$this->allowArray) {
-            return [Yii::t('yii', '{attribute} is invalid.'), []];
+            return [$this->message, []];
         }
         $values = !is_array($value) ? [$value] : $value;
-        foreach ($values as $value) {
-            if ($this->isNotNumber($value)) {
-                return [Yii::t('yii', '{attribute} is invalid.'), []];
+        foreach ($values as $sample) {
+            if ($this->isNotNumber($sample)) {
+                return [$this->message, []];
             }
             $pattern = $this->integerOnly ? $this->integerPattern : $this->numberPattern;
-            if (!preg_match($pattern, StringHelper::normalizeNumber($value))) {
+            if (!preg_match($pattern, StringHelper::normalizeNumber($sample))) {
                 return [$this->message, []];
-            } elseif ($this->min !== null && $value < $this->min) {
+            } elseif ($this->min !== null && $sample < $this->min) {
                 return [$this->tooSmall, ['min' => $this->min]];
-            } elseif ($this->max !== null && $value > $this->max) {
+            } elseif ($this->max !== null && $sample > $this->max) {
                 return [$this->tooBig, ['max' => $this->max]];
             }
         }
diff --git a/src/web/Controller.php b/src/web/Controller.php
index 52de6c998e7..86be85819f0 100644
--- a/src/web/Controller.php
+++ b/src/web/Controller.php
@@ -17,10 +17,6 @@
  *
  * For more details and usage information on Controller, see the [guide article on controllers](guide:structure-controllers).
  *
- * @property Request $request The request object.
- * @property Response $response The response object.
- * @property View $view The view object that can be used to render views or view files.
- *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
@@ -145,6 +141,7 @@ public function bindActionParams($action, $params)
                 } elseif (
                     PHP_VERSION_ID >= 70000
                     && ($type = $param->getType()) !== null
+                    && method_exists($type, 'isBuiltin')
                     && $type->isBuiltin()
                     && ($params[$name] !== null || !$type->allowsNull())
                 ) {
diff --git a/src/web/Cookie.php b/src/web/Cookie.php
index ac9a7233710..d249afa6cbd 100644
--- a/src/web/Cookie.php
+++ b/src/web/Cookie.php
@@ -57,8 +57,8 @@ class Cookie extends \yii\base\BaseObject
      */
     public $domain = '';
     /**
-     * @var int the timestamp at which the cookie expires. This is the server timestamp.
-     * Defaults to 0, meaning "until the browser is closed".
+     * @var int|string|\DateTimeInterface|null the timestamp or date at which the cookie expires. This is the server timestamp.
+     * Defaults to 0, meaning "until the browser is closed" (the same applies to `null`).
      */
     public $expire = 0;
     /**
diff --git a/src/web/CookieCollection.php b/src/web/CookieCollection.php
index aa09b9ca455..597fc2f5fd7 100644
--- a/src/web/CookieCollection.php
+++ b/src/web/CookieCollection.php
@@ -18,7 +18,6 @@
  * For more details and usage information on CookieCollection, see the [guide article on handling cookies](guide:runtime-sessions-cookies).
  *
  * @property-read int $count The number of cookies in the collection.
- * @property-read ArrayIterator $iterator An iterator for traversing the cookies in the collection.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -52,7 +51,7 @@ public function __construct($cookies = [], $config = [])
      * Returns an iterator for traversing the cookies in the collection.
      * This method is required by the SPL interface [[\IteratorAggregate]].
      * It will be implicitly called when you use `foreach` to traverse the collection.
-     * @return ArrayIterator an iterator for traversing the cookies in the collection.
+     * @return ArrayIterator<string, Cookie> an iterator for traversing the cookies in the collection.
      */
     #[\ReturnTypeWillChange]
     public function getIterator()
@@ -114,7 +113,18 @@ public function getValue($name, $defaultValue = null)
     public function has($name)
     {
         return isset($this->_cookies[$name]) && $this->_cookies[$name]->value !== ''
-            && ($this->_cookies[$name]->expire === null || $this->_cookies[$name]->expire === 0 || $this->_cookies[$name]->expire >= time());
+            && ($this->_cookies[$name]->expire === null
+                || $this->_cookies[$name]->expire === 0
+                || (
+                    (is_string($this->_cookies[$name]->expire) && strtotime($this->_cookies[$name]->expire) >= time())
+                    || (
+                        interface_exists('\\DateTimeInterface')
+                        && $this->_cookies[$name]->expire instanceof \DateTimeInterface
+                        && $this->_cookies[$name]->expire->getTimestamp() >= time()
+                    )
+                    || $this->_cookies[$name]->expire >= time()
+                )
+            );
     }
 
     /**
@@ -175,7 +185,7 @@ public function removeAll()
 
     /**
      * Returns the collection as a PHP array.
-     * @return array the array representation of the collection.
+     * @return Cookie[] the array representation of the collection.
      * The array keys are cookie names, and the array values are the corresponding cookie objects.
      */
     public function toArray()
diff --git a/src/web/HeaderCollection.php b/src/web/HeaderCollection.php
index 07d6502ef46..724e875bc69 100644
--- a/src/web/HeaderCollection.php
+++ b/src/web/HeaderCollection.php
@@ -13,9 +13,6 @@
 /**
  * HeaderCollection is used by [[Response]] to maintain the currently registered HTTP headers.
  *
- * @property-read int $count The number of headers in the collection.
- * @property-read \ArrayIterator $iterator An iterator for traversing the headers in the collection.
- *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
diff --git a/src/web/Request.php b/src/web/Request.php
index d3a716c97f0..d87489ce389 100644
--- a/src/web/Request.php
+++ b/src/web/Request.php
@@ -1220,6 +1220,8 @@ protected function getUserIpFromIpHeaders()
         return null;
     }
 
+    private $_ip = null;
+
     /**
      * Returns the user IP address.
      * The IP is determined using headers and / or `$_SERVER` variables.
@@ -1227,8 +1229,14 @@ protected function getUserIpFromIpHeaders()
      */
     public function getUserIP()
     {
-        $ip = $this->getUserIpFromIpHeaders();
-        return $ip === null ? $this->getRemoteIP() : $ip;
+        if ($this->_ip === null) {
+            $this->_ip = $this->getUserIpFromIpHeaders();
+            if ($this->_ip === null) {
+                $this->_ip = $this->getRemoteIP();
+            }
+        }
+
+        return $this->_ip;
     }
 
     /**
@@ -1902,6 +1910,8 @@ protected function getSecureForwardedHeaderTrustedPart($token)
         return null;
     }
 
+    private $_secureForwardedHeaderTrustedParts;
+
     /**
      * Gets only trusted `Forwarded` header parts
      *
@@ -1911,6 +1921,10 @@ protected function getSecureForwardedHeaderTrustedPart($token)
      */
     protected function getSecureForwardedHeaderTrustedParts()
     {
+        if ($this->_secureForwardedHeaderTrustedParts !== null) {
+            return $this->_secureForwardedHeaderTrustedParts;
+        }
+
         $validator = $this->getIpValidator();
         $trustedHosts = [];
         foreach ($this->trustedHosts as $trustedCidr => $trustedCidrOrHeaders) {
@@ -1921,9 +1935,14 @@ protected function getSecureForwardedHeaderTrustedParts()
         }
         $validator->setRanges($trustedHosts);
 
-        return array_filter($this->getSecureForwardedHeaderParts(), function ($headerPart) use ($validator) {
-            return isset($headerPart['for']) ? !$validator->validate($headerPart['for']) : true;
-        });
+        $this->_secureForwardedHeaderTrustedParts = array_filter(
+            $this->getSecureForwardedHeaderParts(),
+            function ($headerPart) use ($validator) {
+                return isset($headerPart['for']) ? !$validator->validate($headerPart['for']) : true;
+            }
+        );
+
+        return $this->_secureForwardedHeaderTrustedParts;
     }
 
     private $_secureForwardedHeaderParts;
diff --git a/src/web/Response.php b/src/web/Response.php
index bc06a4b04dd..1724438803e 100644
--- a/src/web/Response.php
+++ b/src/web/Response.php
@@ -10,6 +10,7 @@
 use Yii;
 use yii\base\InvalidArgumentException;
 use yii\base\InvalidConfigException;
+use yii\base\InvalidRouteException;
 use yii\helpers\FileHelper;
 use yii\helpers\Inflector;
 use yii\helpers\StringHelper;
@@ -400,12 +401,21 @@ protected function sendCookies()
         }
         foreach ($this->getCookies() as $cookie) {
             $value = $cookie->value;
-            if ($cookie->expire != 1 && isset($validationKey)) {
+            $expire = $cookie->expire;
+            if (is_string($expire)) {
+                $expire = strtotime($expire);
+            } elseif (interface_exists('\\DateTimeInterface') && $expire instanceof \DateTimeInterface) {
+                $expire = $expire->getTimestamp();
+            }
+            if ($expire === null || $expire === false) {
+                $expire = 0;
+            }
+            if ($expire != 1 && isset($validationKey)) {
                 $value = Yii::$app->getSecurity()->hashData(serialize([$cookie->name, $value]), $validationKey);
             }
             if (PHP_VERSION_ID >= 70300) {
                 setcookie($cookie->name, $value, [
-                    'expires' => $cookie->expire,
+                    'expires' => $expire,
                     'path' => $cookie->path,
                     'domain' => $cookie->domain,
                     'secure' => $cookie->secure,
@@ -419,7 +429,7 @@ protected function sendCookies()
                 if (!is_null($cookie->sameSite)) {
                     $cookiePath .= '; samesite=' . $cookie->sameSite;
                 }
-                setcookie($cookie->name, $value, $cookie->expire, $cookiePath, $cookie->domain, $cookie->secure, $cookie->httpOnly);
+                setcookie($cookie->name, $value, $expire, $cookiePath, $cookie->domain, $cookie->secure, $cookie->httpOnly);
             }
         }
     }
@@ -886,12 +896,13 @@ public function redirect($url, $statusCode = 302, $checkAjax = true)
         }
         $request = Yii::$app->getRequest();
         $normalizedUrl = Url::to($url);
-        if (
-            $normalizedUrl !== null
-            && strncmp($normalizedUrl, '/', 1) === 0
-            && strncmp($normalizedUrl, '//', 2) !== 0
-        ) {
-            $normalizedUrl = $request->getHostInfo() . $normalizedUrl;
+        if ($normalizedUrl !== null) {
+            if (preg_match('/\n/', $normalizedUrl)) {
+                throw new InvalidRouteException('Route with new line character detected "' . $normalizedUrl . '".');
+            }
+            if (strncmp($normalizedUrl, '/', 1) === 0 && strncmp($normalizedUrl, '//', 2) !== 0) {
+                $normalizedUrl = $request->getHostInfo() . $normalizedUrl;
+            }
         }
 
         if ($checkAjax && $request->getIsAjax()) {
diff --git a/src/web/Session.php b/src/web/Session.php
index 01997ff5f5f..40768924cf5 100644
--- a/src/web/Session.php
+++ b/src/web/Session.php
@@ -57,7 +57,6 @@
  * @property bool $hasSessionId Whether the current request has sent the session ID.
  * @property string $id The current session ID.
  * @property-read bool $isActive Whether the session has started.
- * @property-read SessionIterator $iterator An iterator for traversing the session variables.
  * @property string $name The current session name.
  * @property string $savePath The current session save path, defaults to '/tmp'.
  * @property int $timeout The number of seconds after which data will be seen as 'garbage' and cleaned up. The
@@ -406,7 +405,7 @@ public function getCookieParams()
      *     'sameSite' => PHP_VERSION_ID >= 70300 ? yii\web\Cookie::SAME_SITE_LAX : null,
      * ]
      * ```
-     * See https://www.owasp.org/index.php/SameSite for more information about `sameSite`.
+     * See https://owasp.org/www-community/SameSite for more information about `sameSite`.
      *
      * @throws InvalidArgumentException if the parameters are incomplete.
      * @see https://www.php.net/manual/en/function.session-set-cookie-params.php
diff --git a/src/web/View.php b/src/web/View.php
index c372fece58c..f2c19fc721f 100644
--- a/src/web/View.php
+++ b/src/web/View.php
@@ -132,12 +132,14 @@ class View extends \yii\base\View
     public $jsFiles = [];
 
     private $_assetManager;
+
+
     /**
      * Whether [[endPage()]] has been called and all files have been registered
      * @var bool
+     * @since 2.0.44
      */
-    private $_isPageEnded = false;
-
+    protected $isPageEnded = false;
 
     /**
      * Marks the position of an HTML head section.
@@ -179,7 +181,7 @@ public function endPage($ajaxMode = false)
     {
         $this->trigger(self::EVENT_END_PAGE);
 
-        $this->_isPageEnded = true;
+        $this->isPageEnded = true;
 
         $content = ob_get_clean();
 
@@ -497,8 +499,8 @@ private function registerFile($type, $url, $options = [], $key = null)
         }
         $appendTimestamp = ArrayHelper::remove($options, 'appendTimestamp', $assetManagerAppendTimestamp);
 
-        if ($this->_isPageEnded) {
-            Yii::warning('You\'re trying to register a file after View::endPage() has been called');
+        if ($this->isPageEnded) {
+            Yii::warning('You\'re trying to register a file after View::endPage() has been called.');
         }
 
         if (empty($depends)) {
diff --git a/src/widgets/MaskedInputAsset.php b/src/widgets/MaskedInputAsset.php
index 57748be86f8..473f4315ffa 100644
--- a/src/widgets/MaskedInputAsset.php
+++ b/src/widgets/MaskedInputAsset.php
@@ -21,7 +21,7 @@ class MaskedInputAsset extends AssetBundle
 {
     public $sourcePath = '@bower/inputmask/dist';
     public $js = [
-        'jquery.inputmask.bundle.js',
+        'jquery.inputmask.js',
     ];
     public $depends = [
         'yii\web\YiiAsset',
diff --git a/src/widgets/Menu.php b/src/widgets/Menu.php
index a70ad1f3e1a..025379796f1 100644
--- a/src/widgets/Menu.php
+++ b/src/widgets/Menu.php
@@ -283,7 +283,11 @@ protected function normalizeItems($items, &$active)
                     $items[$i]['active'] = false;
                 }
             } elseif ($item['active'] instanceof Closure) {
-                $active = $items[$i]['active'] = call_user_func($item['active'], $item, $hasActiveChild, $this->isItemActive($item), $this);
+                if (call_user_func($item['active'], $item, $hasActiveChild, $this->isItemActive($item), $this)) {
+                    $active = $items[$i]['active'] = true;
+                } else {
+                    $items[$i]['active'] = false;
+                }
             } elseif ($item['active']) {
                 $active = true;
             }
diff --git a/tests/TestCase.php b/tests/TestCase.php
index d18e1145949..5a8287f1f55 100644
--- a/tests/TestCase.php
+++ b/tests/TestCase.php
@@ -123,6 +123,39 @@ protected function assertEqualsWithoutLE($expected, $actual, $message = '')
         $this->assertEquals($expected, $actual, $message);
     }
 
+    /**
+     * Asserting two strings equality ignoring unicode whitespaces.
+     * @param string $expected
+     * @param string $actual
+     * @param string $message
+     */
+    protected function assertEqualsAnyWhitespace($expected, $actual, $message = ''){
+        $expected = $this->sanitizeWhitespaces($expected);
+        $actual = $this->sanitizeWhitespaces($actual);
+
+        $this->assertEquals($expected, $actual, $message);
+    }
+
+    /**
+     * Asserts that two variables have the same type and value and sanitizes value if it is a string.
+     * Used on objects, it asserts that two variables reference
+     * the same object.
+     *
+     * @param mixed  $expected
+     * @param mixed  $actual
+     * @param string $message
+     */
+    protected function assertSameAnyWhitespace($expected, $actual, $message = ''){
+        if (is_string($expected)) {
+            $expected = $this->sanitizeWhitespaces($expected);
+        }
+        if (is_string($actual)) {
+            $actual = $this->sanitizeWhitespaces($actual);
+        }
+
+        $this->assertSame($expected, $actual, $message);
+    }
+
     /**
      * Asserts that a haystack contains a needle ignoring line endings.
      *
@@ -138,6 +171,17 @@ protected function assertContainsWithoutLE($needle, $haystack, $message = '')
         $this->assertContains($needle, $haystack, $message);
     }
 
+    /**
+     * Replaces unicode whitespaces with standard whitespace
+     *
+     * @see https://github.com/yiisoft/yii2/issues/19868 (ICU 72 changes)
+     * @param $string
+     * @return string
+     */
+    protected function sanitizeWhitespaces($string){
+        return preg_replace("/[\pZ\pC]/u", " ", $string);
+    }
+
     /**
      * Invokes a inaccessible method.
      * @param $object
diff --git a/tests/data/ar/NoAutoLabels.php b/tests/data/ar/NoAutoLabels.php
new file mode 100644
index 00000000000..e33a3847d84
--- /dev/null
+++ b/tests/data/ar/NoAutoLabels.php
@@ -0,0 +1,27 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\data\ar;
+
+/**
+ * @property int $attr1
+ * @property int $attr2
+ */
+class NoAutoLabels extends ActiveRecord
+{
+    public function attributeLabels()
+    {
+        return [
+            'attr1' => 'Label for attr1',
+        ];
+    }
+
+    public function generateAttributeLabel($name)
+    {
+        throw new \yii\base\InvalidArgumentException('Label not defined!');
+    }
+}
diff --git a/tests/framework/base/DynamicModelTest.php b/tests/framework/base/DynamicModelTest.php
index 0c4a25110b3..d3dca504b6f 100644
--- a/tests/framework/base/DynamicModelTest.php
+++ b/tests/framework/base/DynamicModelTest.php
@@ -37,6 +37,20 @@ public function testValidateData()
         $this->assertTrue($model->hasErrors('age'));
     }
 
+    public function testValidateDataWithPostData()
+    {
+        $post = [
+            'name' => 'long name',
+        ];
+        $model = DynamicModel::validateData($post, [
+            [['email', 'name'], 'required'],
+            ['age', 'default', 'value' => 18],
+        ]);
+        $this->assertTrue($model->hasErrors());
+        $this->assertTrue($model->hasErrors('email'));
+        $this->assertEquals(18, $model->age);
+    }
+
     public function testAddRule()
     {
         $model = new DynamicModel();
diff --git a/tests/framework/behaviors/AttributeTypecastBehaviorTest.php b/tests/framework/behaviors/AttributeTypecastBehaviorTest.php
index ee84530e53d..a43b9346bbe 100644
--- a/tests/framework/behaviors/AttributeTypecastBehaviorTest.php
+++ b/tests/framework/behaviors/AttributeTypecastBehaviorTest.php
@@ -127,6 +127,24 @@ public function testAfterFindEvent()
         $this->assertSame('callback: find', $model->callback);
     }
 
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/17194
+     */
+    public function testDirtyAttributesAreEmptyAfterFind()
+    {
+        $model = new ActiveRecordAttributeTypecast();
+        $model->name = 123;
+        $model->amount = '58';
+        $model->price = '100.8';
+        $model->isActive = 1;
+        $model->callback = 'foo';
+        $model->save(false);
+
+        $model = ActiveRecordAttributeTypecast::find()->one();
+
+        $this->assertEmpty($model->getDirtyAttributes());
+    }
+
     /**
      * @depends testTypecast
      */
diff --git a/tests/framework/caching/ApcCacheTest.php b/tests/framework/caching/ApcCacheTest.php
index 809286bbd89..7f3311b7702 100644
--- a/tests/framework/caching/ApcCacheTest.php
+++ b/tests/framework/caching/ApcCacheTest.php
@@ -23,7 +23,7 @@ class ApcCacheTest extends CacheTestCase
      */
     protected function getCacheInstance()
     {
-        if (!extension_loaded('apc')) {
+        if (!extension_loaded('apc') && !extension_loaded('apcu')) {
             $this->markTestSkipped('APC not installed. Skipping.');
         } elseif ('cli' === PHP_SAPI && !ini_get('apc.enable_cli')) {
             $this->markTestSkipped('APC cli is not enabled. Skipping.');
@@ -33,7 +33,9 @@ protected function getCacheInstance()
             $this->markTestSkipped('APC is installed but not enabled. Skipping.');
         }
 
-        if ($this->_cacheInstance === null) {
+        if ($this->_cacheInstance === null && PHP_VERSION_ID >= 70400) {
+            $this->_cacheInstance = new ApcCache(['useApcu' => true]);
+        } elseif ($this->_cacheInstance === null) {
             $this->_cacheInstance = new ApcCache();
         }
 
diff --git a/tests/framework/caching/DbDependencyTest.php b/tests/framework/caching/DbDependencyTest.php
index bd801e3528c..bb723be3a49 100644
--- a/tests/framework/caching/DbDependencyTest.php
+++ b/tests/framework/caching/DbDependencyTest.php
@@ -21,7 +21,6 @@ class DbDependencyTest extends DatabaseTestCase
      */
     protected $driverName = 'sqlite';
 
-
     /**
      * {@inheritdoc}
      */
@@ -39,11 +38,14 @@ protected function setUp()
         $db->createCommand()->insert('dependency_item', ['value' => 'initial'])->execute();
     }
 
-    public function testIsChanged()
+    public function testQueryOneIsExecutedWhenQueryCacheEnabled()
     {
         $db = $this->getConnection(false);
         $cache = new ArrayCache();
 
+        // Enable the query cache
+        $db->enableQueryCache = true;
+
         $dependency = new DbDependency();
         $dependency->db = $db;
         $dependency->sql = 'SELECT [[id]] FROM {{dependency_item}} ORDER BY [[id]] DESC LIMIT 1';
@@ -56,4 +58,39 @@ public function testIsChanged()
 
         $this->assertTrue($dependency->isChanged($cache));
     }
+
+    public function testQueryOneIsExecutedWhenQueryCacheDisabled()
+    {
+        $db = $this->getConnection(false);
+        $cache = new ArrayCache();
+
+        // Disable the query cache
+        $db->enableQueryCache = false;
+
+        $dependency = new DbDependency();
+        $dependency->db = $db;
+        $dependency->sql = 'SELECT [[id]] FROM {{dependency_item}} ORDER BY [[id]] DESC LIMIT 1';
+        $dependency->reusable = false;
+
+        $dependency->evaluateDependency($cache);
+        $this->assertFalse($dependency->isChanged($cache));
+
+        $db->createCommand()->insert('dependency_item', ['value' => 'new'])->execute();
+
+        $this->assertTrue($dependency->isChanged($cache));
+    }
+
+    public function testMissingSqlThrowsException()
+    {
+        $this->expectException('\yii\base\InvalidConfigException');
+
+        $db = $this->getConnection(false);
+        $cache = new ArrayCache();
+
+        $dependency = new DbDependency();
+        $dependency->db = $db;
+        $dependency->sql = null;
+
+        $dependency->evaluateDependency($cache);
+    }
 }
diff --git a/tests/framework/caching/MemCachedTest.php b/tests/framework/caching/MemCachedTest.php
index 8b6b735b433..742d53d05ae 100644
--- a/tests/framework/caching/MemCachedTest.php
+++ b/tests/framework/caching/MemCachedTest.php
@@ -27,7 +27,9 @@ protected function getCacheInstance()
             $this->markTestSkipped('memcached not installed. Skipping.');
         }
 
-        if (PHP_VERSION_ID >= 80100 && version_compare(phpversion('memcached'), '3.1.5', '<=')) {
+        if (
+            PHP_VERSION_ID >= 80100 && version_compare(phpversion('memcached'), '3.1.5', '<=')
+        ) {
             $php_version = phpversion();
             $memcached_version = phpversion('memcached');
             $this->markTestSkipped("memcached version $memcached_version is not ready for PHP $php_version. Skipping.");
diff --git a/tests/framework/console/controllers/ServeControllerTest.php b/tests/framework/console/controllers/ServeControllerTest.php
new file mode 100644
index 00000000000..35a5db6d075
--- /dev/null
+++ b/tests/framework/console/controllers/ServeControllerTest.php
@@ -0,0 +1,163 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\console\controllers;
+
+use Yii;
+use yii\console\controllers\ServeController;
+use yiiunit\TestCase;
+
+/**
+ * Unit test for [[\yii\console\controllers\ServeController]].
+ * @see ServeController
+ *
+ * @group console
+ */
+class ServeControllerTest extends TestCase
+{
+    public function setUp()
+    {
+        $this->mockApplication();
+    }
+
+    public function testAddressTaken()
+    {
+        $docroot = __DIR__ . '/stub';
+
+        /** @var ServeController $serveController */
+        $serveController = $this->getMockBuilder(ServeControllerMocK::className())
+            ->setConstructorArgs(['serve', Yii::$app])
+            ->setMethods(['isAddressTaken', 'runCommand'])
+            ->getMock();
+
+        $serveController->expects($this->once())->method('isAddressTaken')->willReturn(true);
+        $serveController->expects($this->never())->method('runCommand');
+
+        $serveController->docroot = $docroot;
+        $serveController->port = 8080;
+
+        ob_start();
+        $serveController->actionIndex('localhost:8080');
+        ob_end_clean();
+
+        $result = $serveController->flushStdOutBuffer();
+
+        $this->assertContains('http://localhost:8080 is taken by another process.', $result);
+    }
+
+    public function testDefaultValues()
+    {
+        $docroot = __DIR__ . '/stub';
+
+        /** @var ServeController $serveController */
+        $serveController = $this->getMockBuilder(ServeControllerMock::className())
+            ->setConstructorArgs(['serve', Yii::$app])
+            ->setMethods(['runCommand'])
+            ->getMock();
+
+        $serveController->docroot = $docroot;
+        $serveController->port = 8080;
+
+        $serveController->expects($this->once())->method('runCommand')->willReturn(true);
+
+        ob_start();
+        $serveController->actionIndex();
+        ob_end_clean();
+
+        $result = $serveController->flushStdOutBuffer();
+
+        $this->assertContains('Server started on http://localhost:8080', $result);
+        $this->assertContains("Document root is \"{$docroot}\"", $result);
+        $this->assertContains('Quit the server with CTRL-C or COMMAND-C.', $result);
+    }
+
+    public function testDoocRootWithNoExistValue()
+    {
+        $docroot = '/not/exist/path';
+
+        /** @var ServeController $serveController */
+        $serveController = $this->getMockBuilder(ServeControllerMock::className())
+            ->setConstructorArgs(['serve', Yii::$app])
+            ->setMethods(['runCommand'])
+            ->getMock();
+
+        $serveController->docroot = $docroot;
+
+        $serveController->expects($this->any())->method('runCommand')->willReturn(true);
+
+        ob_start();
+        $serveController->actionIndex();
+        ob_end_clean();
+
+        $result = $serveController->flushStdOutBuffer();
+
+        $this->assertContains("Document root \"{$docroot}\" does not exist.", $result);
+    }
+
+    public function testWithRouterNoExistValue()
+    {
+        $docroot = __DIR__ . '/stub';
+        $router = '/not/exist/path';
+
+        /** @var ServeController $serveController */
+        $serveController = $this->getMockBuilder(ServeControllerMock::className())
+            ->setConstructorArgs(['serve', Yii::$app])
+            ->setMethods(['runCommand'])
+            ->getMock();
+
+        $serveController->docroot = $docroot;
+        $serveController->port = 8081;
+        $serveController->router = $router;
+
+        $serveController->expects($this->any())->method('runCommand')->willReturn(true);
+
+        ob_start();
+        $serveController->actionIndex();
+        ob_end_clean();
+
+        $result = $serveController->flushStdOutBuffer();
+
+        $this->assertContains("Routing file \"$router\" does not exist.", $result);
+    }
+
+    public function testWithRouterValue()
+    {
+        $docroot = __DIR__ . '/stub';
+        $router = __DIR__ . '/stub/index.php';
+
+        /** @var ServeController $serveController */
+        $serveController = $this->getMockBuilder(ServeControllerMock::className())
+            ->setConstructorArgs(['serve', Yii::$app])
+            ->setMethods(['runCommand'])
+            ->getMock();
+
+        $serveController->docroot = $docroot;
+        $serveController->port = 8081;
+        $serveController->router = $router;
+
+        $serveController->expects($this->once())->method('runCommand')->willReturn(true);
+
+        ob_start();
+        $serveController->actionIndex();
+        ob_end_clean();
+
+        $result = $serveController->flushStdOutBuffer();
+
+        $this->assertContains('Server started on http://localhost:8081', $result);
+        $this->assertContains("Document root is \"{$docroot}\"", $result);
+        $this->assertContains("Routing file is \"{$router}\"", $result);
+        $this->assertContains('Quit the server with CTRL-C or COMMAND-C.', $result);
+    }
+}
+
+/**
+ * Mock class for [[\yii\console\controllers\ServeController]].
+ */
+class ServeControllerMock extends ServeController
+{
+    use StdOutBufferControllerTrait;
+}
diff --git a/tests/framework/console/controllers/stub/index.php b/tests/framework/console/controllers/stub/index.php
new file mode 100644
index 00000000000..8b57cd3113e
--- /dev/null
+++ b/tests/framework/console/controllers/stub/index.php
@@ -0,0 +1,3 @@
+<?php
+
+echo "Hello!";
diff --git a/tests/framework/console/widgets/TableTest.php b/tests/framework/console/widgets/TableTest.php
index 95e7c60e462..796c95ad1d6 100644
--- a/tests/framework/console/widgets/TableTest.php
+++ b/tests/framework/console/widgets/TableTest.php
@@ -58,6 +58,121 @@ public function testTable($headers, $rows)
 ║ testcontent21 │ testcontent22 │ testcontent23 ║
 ╚═══════════════╧═══════════════╧═══════════════╝
 
+EXPECTED;
+
+        $tableContent = $table
+            ->setHeaders($headers)
+            ->setRows($rows)
+            ->setScreenWidth(200)
+            ->run();
+        $this->assertEqualsWithoutLE($expected, $tableContent);
+    }
+
+    public function getMultiLineTableData()
+    {
+        return [
+            [
+                ['test1', 'test2', 'test3' . PHP_EOL . 'multiline'],
+                [
+                    ['test' . PHP_EOL . 'content1', 'testcontent2', 'test' . PHP_EOL . 'content3'],
+                    [
+                        'testcontent21',
+                        'testcontent22' . PHP_EOL
+                        . 'loooooooooooooooooooooooooooooooooooong' . PHP_EOL
+                        . 'content',
+                        'testcontent23' . PHP_EOL
+                        . 'loooooooooooooooooooooooooooooooooooong content'
+                    ],
+                ]
+            ],
+            [
+                ['key1' => 'test1', 'key2' => 'test2', 'key3' => 'test3' . PHP_EOL . 'multiline'],
+                [
+                    [
+                        'key1' => 'test' . PHP_EOL . 'content1',
+                        'key2' => 'testcontent2',
+                        'key3' => 'test' . PHP_EOL . 'content3'
+                    ],
+                    [
+                        'key1' => 'testcontent21',
+                        'key2' => 'testcontent22' . PHP_EOL
+                            . 'loooooooooooooooooooooooooooooooooooong' . PHP_EOL
+                            . 'content',
+                        'key3' => 'testcontent23' . PHP_EOL
+                            . 'loooooooooooooooooooooooooooooooooooong content'
+                    ],
+                ]
+            ]
+        ];
+    }
+
+    /**
+     * @dataProvider getMultiLineTableData
+     */
+    public function testMultiLineTable($headers, $rows)
+    {
+        $table = new Table();
+
+        $expected = <<<'EXPECTED'
+╔═════════════╤═════════════════════════════════════╤═════════════════════════════════════════════╗
+║ test1       │ test2                               │ test3                                       ║
+║             │                                     │ multiline                                   ║
+╟─────────────┼─────────────────────────────────────┼─────────────────────────────────────────────╢
+║ test        │ testcontent2                        │ test                                        ║
+║ content1    │                                     │ content3                                    ║
+╟─────────────┼─────────────────────────────────────┼─────────────────────────────────────────────╢
+║ testcontent │ testcontent22                       │ testcontent23                               ║
+║ 21          │ loooooooooooooooooooooooooooooooooo │ loooooooooooooooooooooooooooooooooooong con ║
+║             │ oong                                │ tent                                        ║
+║             │ content                             │                                             ║
+╚═════════════╧═════════════════════════════════════╧═════════════════════════════════════════════╝
+
+EXPECTED;
+
+        $tableContent = $table
+            ->setHeaders($headers)
+            ->setRows($rows)
+            ->setScreenWidth(100)
+            ->run();
+        $this->assertEqualsWithoutLE($expected, $tableContent);
+    }
+
+    public function getNumericTableData()
+    {
+        return [
+            [
+                [1, 2, 3],
+                [
+                    [1, 1.2, -1.3],
+                    [-2, 2.2, 2.3],
+                ]
+            ],
+            [
+                ['key1' => 1, 'key2' => 2, 'key3' => 3],
+                [
+                    ['key1' => 1, 'key2' => 1.2, 'key3' => -1.3],
+                    ['key1' => -2, 'key2' => 2.2, 'key3' => 2.3],
+                ]
+            ]
+        ];
+    }
+
+    /**
+     * @dataProvider getNumericTableData
+     */
+    public function testNumericTable($headers, $rows)
+    {
+        $table = new Table();
+
+        $expected = <<<'EXPECTED'
+╔════╤═════╤══════╗
+║ 1  │ 2   │ 3    ║
+╟────┼─────┼──────╢
+║ 1  │ 1.2 │ -1.3 ║
+╟────┼─────┼──────╢
+║ -2 │ 2.2 │ 2.3  ║
+╚════╧═════╧══════╝
+
 EXPECTED;
 
         $tableContent = $table
@@ -101,7 +216,8 @@ public function testLists()
 ╔═══════════════╤═══════════════╤══════════════╗
 ║ test1         │ test2         │ test3        ║
 ╟───────────────┼───────────────┼──────────────╢
-║ testcontent1  │ testcontent2  │ testcontent3 ║
+║ • col1        │ testcontent2  │ testcontent3 ║
+║ • col2        │               │              ║
 ╟───────────────┼───────────────┼──────────────╢
 ║ testcontent21 │ testcontent22 │ • col1       ║
 ║               │               │ • col2       ║
@@ -111,7 +227,7 @@ public function testLists()
 
         $this->assertEqualsWithoutLE($expected, $table->setHeaders(['test1', 'test2', 'test3'])
             ->setRows([
-                ['testcontent1', 'testcontent2', 'testcontent3'],
+                [['key1' => 'col1', 'key2' => 'col2'], 'testcontent2', 'testcontent3'],
                 ['testcontent21', 'testcontent22', ['col1', 'col2']],
             ])->setScreenWidth(200)->run()
         );
@@ -141,6 +257,35 @@ public function testListPrefix()
         );
     }
 
+    public function testLongerListPrefix()
+    {
+        $table = new Table();
+
+        $expected = <<<'EXPECTED'
+╔═════════════════════════════════╤═════════════════════════════════╤═════════════════════════════╗
+║ test1                           │ test2                           │ test3                       ║
+╟─────────────────────────────────┼─────────────────────────────────┼─────────────────────────────╢
+║ testcontent1                    │ testcontent2                    │ testcontent3                ║
+╟─────────────────────────────────┼─────────────────────────────────┼─────────────────────────────╢
+║ testcontent21 with looooooooooo │ testcontent22 with looooooooooo │ -- col1 with looooooooooooo ║
+║ ooooooooooooong content         │ ooooooooooooong content         │ ooooooooooong content       ║
+║                                 │                                 │ -- col2 with long content   ║
+╚═════════════════════════════════╧═════════════════════════════════╧═════════════════════════════╝
+
+EXPECTED;
+
+        $this->assertEqualsWithoutLE($expected, $table->setHeaders(['test1', 'test2', 'test3'])
+            ->setRows([
+                ['testcontent1', 'testcontent2', 'testcontent3'],
+                [
+                    'testcontent21 with loooooooooooooooooooooooong content',
+                    'testcontent22 with loooooooooooooooooooooooong content',
+                    ['col1 with loooooooooooooooooooooooong content', 'col2 with long content']
+                ],
+            ])->setScreenWidth(100)->setListPrefix('-- ')->run()
+        );
+    }
+
     public function testCustomChars()
     {
         $table = new Table();
diff --git a/tests/framework/data/SortTest.php b/tests/framework/data/SortTest.php
index 19367bfa2c2..c9bb1884212 100644
--- a/tests/framework/data/SortTest.php
+++ b/tests/framework/data/SortTest.php
@@ -53,9 +53,6 @@ public function testGetOrders()
         $this->assertEquals(SORT_ASC, $orders['age']);
     }
 
-    /**
-     * @depends testGetOrders
-     */
     public function testGetAttributeOrders()
     {
         $sort = new Sort([
@@ -83,9 +80,6 @@ public function testGetAttributeOrders()
         $this->assertEquals(SORT_ASC, $orders['age']);
     }
 
-    /**
-     * @depends testGetAttributeOrders
-     */
     public function testGetAttributeOrder()
     {
         $sort = new Sort([
@@ -107,9 +101,6 @@ public function testGetAttributeOrder()
         $this->assertNull($sort->getAttributeOrder('xyz'));
     }
 
-    /**
-     * @depends testGetAttributeOrders
-     */
     public function testSetAttributeOrders()
     {
         $sort = new Sort([
@@ -217,10 +208,20 @@ public function testCreateUrl()
         $this->assertEquals('/index.php?r=site%2Findex&sort=age', $sort->createUrl('name'));
     }
 
+    public function providerForLinkWithParams()
+    {
+        return [
+            [true, null, '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age%2C-name" data-sort="-age,-name">Age</a>'],
+            [false, null, '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age" data-sort="-age">Age</a>'],
+            [true, ['age' => SORT_DESC], '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age%2C-name" data-sort="-age,-name">Age</a>'],
+            [false, ['age' => SORT_DESC], '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age" data-sort="-age">Age</a>'],
+        ];
+    }
+
     /**
-     * @depends testCreateUrl
+     * @dataProvider providerForLinkWithParams
      */
-    public function testLink()
+    public function testLinkWithParams($enableMultiSort, $defaultOrder, $link)
     {
         $this->mockApplication();
         $manager = new UrlManager([
@@ -240,12 +241,98 @@ public function testLink()
             'params' => [
                 'sort' => 'age,-name',
             ],
+            'enableMultiSort' => $enableMultiSort,
+            'defaultOrder' => $defaultOrder,
+            'urlManager' => $manager,
+            'route' => 'site/index',
+        ]);
+
+        $this->assertEquals($link, $sort->link('age'));
+    }
+
+    public function providerForLinkWithParamsAndPassedButEmptySort()
+    {
+        return [
+            [null],
+            [['age' => SORT_DESC]],
+            [['age' => SORT_ASC]],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForLinkWithParamsAndPassedButEmptySort
+     */
+    public function testLinkWithParamsAndPassedButEmptySort($defaultOrder)
+    {
+        $this->mockApplication();
+        $manager = new UrlManager([
+            'baseUrl' => '/',
+            'scriptUrl' => '/index.php',
+            'cache' => null,
+        ]);
+
+        $sort = new Sort([
+            'attributes' => [
+                'age',
+                'name' => [
+                    'asc' => ['first_name' => SORT_ASC, 'last_name' => SORT_ASC],
+                    'desc' => ['first_name' => SORT_DESC, 'last_name' => SORT_DESC],
+                ],
+            ],
+            'params' => [
+                'sort' => '',
+            ],
             'enableMultiSort' => true,
+            'defaultOrder' => $defaultOrder,
+            'urlManager' => $manager,
+            'route' => 'site/index',
+        ]);
+
+        $this->assertEquals(
+            '<a href="/index.php?r=site%2Findex&amp;sort=age" data-sort="age">Age</a>',
+            $sort->link('age')
+        );
+    }
+
+    public function providerForLinkWithoutParams()
+    {
+        return [
+            [false, null, '<a href="/index.php?r=site%2Findex&amp;sort=age" data-sort="age">Age</a>'],
+            [false, ['age' => SORT_DESC], '<a class="desc" href="/index.php?r=site%2Findex&amp;sort=age" data-sort="age">Age</a>'],
+            [false, ['age' => SORT_ASC], '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age" data-sort="-age">Age</a>'],
+            [true, null, '<a href="/index.php?r=site%2Findex&amp;sort=age" data-sort="age">Age</a>'],
+            [true, ['age' => SORT_DESC], '<a class="desc" href="/index.php?r=site%2Findex&amp;sort=" data-sort="">Age</a>'],
+            [true, ['age' => SORT_ASC], '<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age" data-sort="-age">Age</a>'],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForLinkWithoutParams
+     */
+    public function testLinkWithoutParams($enableMultiSort, $defaultOrder, $link)
+    {
+        $this->mockApplication();
+        $manager = new UrlManager([
+            'baseUrl' => '/',
+            'scriptUrl' => '/index.php',
+            'cache' => null,
+        ]);
+
+        $sort = new Sort([
+            'attributes' => [
+                'age',
+                'name' => [
+                    'asc' => ['first_name' => SORT_ASC, 'last_name' => SORT_ASC],
+                    'desc' => ['first_name' => SORT_DESC, 'last_name' => SORT_DESC],
+                ],
+            ],
+            'enableMultiSort' => $enableMultiSort,
+            'defaultOrder' => $defaultOrder,
             'urlManager' => $manager,
             'route' => 'site/index',
         ]);
 
-        $this->assertEquals('<a class="asc" href="/index.php?r=site%2Findex&amp;sort=-age%2C-name" data-sort="-age,-name">Age</a>', $sort->link('age'));
+        $this->assertEquals($link, $sort->link('age'));
     }
 
     public function testParseSortParam()
@@ -269,8 +356,6 @@ public function testParseSortParam()
     }
 
     /**
-     * @depends testGetOrders
-     *
      * @see https://github.com/yiisoft/yii2/pull/13260
      */
     public function testGetExpressionOrders()
diff --git a/tests/framework/db/ActiveRecordTest.php b/tests/framework/db/ActiveRecordTest.php
index f1370f47282..e50cca3e024 100644
--- a/tests/framework/db/ActiveRecordTest.php
+++ b/tests/framework/db/ActiveRecordTest.php
@@ -2192,4 +2192,134 @@ public function testVirtualRelation()
         $this->assertNotNull($order->virtualCustomer);
     }
 
+    public function labelTestModelProvider()
+    {
+        $data = [];
+
+        // Model 2 and 3 are represented by objects.
+        $model1 = new LabelTestModel1();
+        $model2 = new LabelTestModel2();
+        $model3 = new LabelTestModel3();
+        $model2->populateRelation('model3', $model3);
+        $model1->populateRelation('model2', $model2);
+        $data[] = [$model1];
+
+        // Model 2 and 3 are represented by arrays instead of objects.
+        $model1 = new LabelTestModel1();
+        $model2 = ['model3' => []];
+        $model1->populateRelation('model2', $model2);
+        $data[] = [$model1];
+
+        return $data;
+    }
+
+    /**
+     * @dataProvider labelTestModelProvider
+     * @param \yii\db\ActiveRecord $model
+     */
+    public function testGetAttributeLabel($model)
+    {
+        $this->assertEquals('model3.attr1 from model2', $model->getAttributeLabel('model2.model3.attr1'));
+        $this->assertEquals('attr2 from model3', $model->getAttributeLabel('model2.model3.attr2'));
+        $this->assertEquals('model3.attr3 from model2', $model->getAttributeLabel('model2.model3.attr3'));
+        $attr = 'model2.doesNotExist.attr1';
+        $this->assertEquals($model->generateAttributeLabel($attr), $model->getAttributeLabel($attr));
+    }
+
+    public function testLoadRelations()
+    {
+        // Test eager loading relations for multiple primary models using loadRelationsFor().
+        /** @var Customer[] $customers */
+        $customers = Customer::find()->all();
+        Customer::loadRelationsFor($customers, ['orders.items']);
+        foreach ($customers as $customer) {
+            $this->assertTrue($customer->isRelationPopulated('orders'));
+            foreach ($customer->orders as $order) {
+                $this->assertTrue($order->isRelationPopulated('items'));
+            }
+        }
+
+        // Test eager loading relations as arrays.
+        /** @var array $customers */
+        $customers = Customer::find()->asArray(true)->all();
+        Customer::loadRelationsFor($customers, ['orders.items' => function ($query) { $query->asArray(false); }], true);
+        foreach ($customers as $customer) {
+            $this->assertTrue(isset($customer['orders']));
+            $this->assertTrue(is_array($customer['orders']));
+            foreach ($customer['orders'] as $order) {
+                $this->assertTrue(is_array($order));
+                $this->assertTrue(isset($order['items']));
+                $this->assertTrue(is_array($order['items']));
+                foreach ($order['items'] as $item) {
+                    $this->assertFalse(is_array($item));
+                }
+            }
+        }
+
+        // Test eager loading relations for a single primary model using loadRelations().
+        /** @var Customer $customer */
+        $customer = Customer::find()->where(['id' => 1])->one();
+        $customer->loadRelations('orders.items');
+        $this->assertTrue($customer->isRelationPopulated('orders'));
+        foreach ($customer->orders as $order) {
+            $this->assertTrue($order->isRelationPopulated('items'));
+        }
+
+        // Test eager loading previously loaded relation (relation value should be replaced with a new value loaded from database).
+        /** @var Customer $customer */
+        $customer = Customer::find()->where(['id' => 2])->with(['orders' => function ($query) { $query->orderBy(['id' => SORT_ASC]); }])->one();
+        $this->assertTrue($customer->orders[0]->id < $customer->orders[1]->id, 'Related models should be sorted by ID in ascending order.');
+        $customer->loadRelations(['orders' => function ($query) { $query->orderBy(['id' => SORT_DESC]); }]);
+        $this->assertTrue($customer->orders[0]->id > $customer->orders[1]->id, 'Related models should be sorted by ID in descending order.');
+    }
+}
+
+class LabelTestModel1 extends \yii\db\ActiveRecord
+{
+    public function attributes()
+    {
+        return [];
+    }
+
+    public function getModel2()
+    {
+        return $this->hasOne(LabelTestModel2::className(), []);
+    }
+}
+
+class LabelTestModel2 extends \yii\db\ActiveRecord
+{
+    public function attributes()
+    {
+        return [];
+    }
+
+    public function getModel3()
+    {
+        return $this->hasOne(LabelTestModel3::className(), []);
+    }
+
+    public function attributeLabels()
+    {
+        return [
+            'model3.attr1' => 'model3.attr1 from model2', // Override label defined in model3.
+            'model3.attr3' => 'model3.attr3 from model2', // Define label not defined in model3.
+        ];
+    }
+}
+
+class LabelTestModel3 extends \yii\db\ActiveRecord
+{
+    public function attributes()
+    {
+        return ['attr1', 'attr2', 'attr3'];
+    }
+
+    public function attributeLabels()
+    {
+        return [
+            'attr1' => 'attr1 from model3',
+            'attr2' => 'attr2 from model3',
+        ];
+    }
 }
diff --git a/tests/framework/db/BaseActiveRecordTest.php b/tests/framework/db/BaseActiveRecordTest.php
new file mode 100644
index 00000000000..0427421cd81
--- /dev/null
+++ b/tests/framework/db/BaseActiveRecordTest.php
@@ -0,0 +1,42 @@
+<?php
+
+namespace yiiunit\framework\db;
+
+use yiiunit\data\ar\ActiveRecord;
+
+abstract class BaseActiveRecordTest extends DatabaseTestCase
+{
+    protected function setUp()
+    {
+        parent::setUp();
+        ActiveRecord::$db = $this->getConnection();
+    }
+
+    public function provideArrayValueWithChange()
+    {
+        return [
+            'not an associative array with data change' => [
+                [1, 2, 3],
+                [1, 3, 2],
+            ],
+
+            'associative array with data change case 1' => [
+                ['pineapple' => 2, 'apple' => 5, 'banana' => 1],
+                ['apple' => 5, 'pineapple' => 1, 'banana' => 3],
+            ],
+            'associative array with data change case 2' => [
+                ['pineapple' => 2, 'apple' => 5, 'banana' => 1],
+                ['pineapple' => 2, 'apple' => 3, 'banana' => 1],
+            ],
+
+            'filling an empty array' => [
+                [],
+                ['pineapple' => 3, 'apple' => 1, 'banana' => 1],
+            ],
+            'zeroing the array' => [
+                ['pineapple' => 3, 'apple' => 1, 'banana' => 17],
+                [],
+            ],
+        ];
+    }
+}
diff --git a/tests/framework/db/CommandTest.php b/tests/framework/db/CommandTest.php
index 15ac5f4160f..041b788f3c1 100644
--- a/tests/framework/db/CommandTest.php
+++ b/tests/framework/db/CommandTest.php
@@ -1525,4 +1525,23 @@ public function testBindValuesSupportsDeprecatedPDOCastingFormat()
         $db->createCommand()->setSql("SELECT :p1")->bindValues([':p1' => [2, \PDO::PARAM_STR]]);
         $this->assertTrue(true);
     }
+
+    public function testBindValuesSupportsEnums()
+	{
+		if (version_compare(PHP_VERSION, '8.1.0') >= 0) {
+		    $db = $this->getConnection();
+		    $command = $db->createCommand();
+
+		    $command->setSql('SELECT :p1')->bindValues([':p1' => enums\Status::ACTIVE]);
+		    $this->assertSame('ACTIVE', $command->params[':p1']);
+
+		    $command->setSql('SELECT :p1')->bindValues([':p1' => enums\StatusTypeString::ACTIVE]);
+		    $this->assertSame('active', $command->params[':p1']);
+
+		    $command->setSql('SELECT :p1')->bindValues([':p1' => enums\StatusTypeInt::ACTIVE]);
+		    $this->assertSame(1, $command->params[':p1']);
+		} else {
+            $this->markTestSkipped('Enums are not supported in PHP < 8.1');
+        }
+	}
 }
diff --git a/tests/framework/db/ConnectionTest.php b/tests/framework/db/ConnectionTest.php
index 39e6677610b..a155517ffdf 100644
--- a/tests/framework/db/ConnectionTest.php
+++ b/tests/framework/db/ConnectionTest.php
@@ -469,7 +469,7 @@ public function testClone()
 
 
     /**
-     * Test whether slave connection is recovered when call getSlavePdo() after close().
+     * Test whether slave connection is recovered when call getSlavePdo(true) after close().
      *
      * @see https://github.com/yiisoft/yii2/issues/14165
      */
diff --git a/tests/framework/db/QueryTest.php b/tests/framework/db/QueryTest.php
index 5dbcc0b0b7d..4de29107045 100644
--- a/tests/framework/db/QueryTest.php
+++ b/tests/framework/db/QueryTest.php
@@ -727,6 +727,11 @@ public function testQueryCache()
             $this->assertEquals('user1', $query->noCache()->where(['id' => 1])->scalar($db));
             $this->assertEquals('user11', $query->cache()->where(['id' => 1])->scalar($db));
         }, 10);
+
+        $update->bindValues([':id' => 3, ':name' => null])->execute();
+        $this->assertEquals(null, $query->cache()->where(['id' => 3])->scalar($db));
+        $update->bindValues([':id' => 3, ':name' => 'user3'])->execute();
+        $this->assertEquals(null, $query->cache()->where(['id' => 3])->scalar($db), 'Null value should be cached.');
     }
 
 
diff --git a/tests/framework/db/SchemaTest.php b/tests/framework/db/SchemaTest.php
index b3200207e99..af02b2170b6 100644
--- a/tests/framework/db/SchemaTest.php
+++ b/tests/framework/db/SchemaTest.php
@@ -757,7 +757,7 @@ public function testTableSchemaConstraintsWithPdoUppercase($tableName, $type, $e
         }
 
         $connection = $this->getConnection(false);
-        $connection->getSlavePdo()->setAttribute(PDO::ATTR_CASE, PDO::CASE_UPPER);
+        $connection->getSlavePdo(true)->setAttribute(PDO::ATTR_CASE, PDO::CASE_UPPER);
         $constraints = $connection->getSchema()->{'getTable' . ucfirst($type)}($tableName, true);
         $this->assertMetadataEquals($expected, $constraints);
     }
@@ -775,7 +775,7 @@ public function testTableSchemaConstraintsWithPdoLowercase($tableName, $type, $e
         }
 
         $connection = $this->getConnection(false);
-        $connection->getSlavePdo()->setAttribute(PDO::ATTR_CASE, PDO::CASE_LOWER);
+        $connection->getSlavePdo(true)->setAttribute(PDO::ATTR_CASE, PDO::CASE_LOWER);
         $constraints = $connection->getSchema()->{'getTable' . ucfirst($type)}($tableName, true);
         $this->assertMetadataEquals($expected, $constraints);
     }
diff --git a/tests/framework/db/cubrid/QueryBuilderTest.php b/tests/framework/db/cubrid/QueryBuilderTest.php
index 6dc54e56375..366a457a5f9 100644
--- a/tests/framework/db/cubrid/QueryBuilderTest.php
+++ b/tests/framework/db/cubrid/QueryBuilderTest.php
@@ -57,7 +57,7 @@ public function testResetSequence()
 
     public function testCommentColumn()
     {
-        $version = $this->getQueryBuilder(false)->db->getSlavePdo()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+        $version = $this->getQueryBuilder(false)->db->getSlavePdo(true)->getAttribute(\PDO::ATTR_SERVER_VERSION);
         if (version_compare($version, '10.0', '<')) {
             $this->markTestSkipped('Comments on columns are supported starting with CUBRID 10.0.');
             return;
diff --git a/tests/framework/db/enums/Status.php b/tests/framework/db/enums/Status.php
new file mode 100644
index 00000000000..799a552319b
--- /dev/null
+++ b/tests/framework/db/enums/Status.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace yiiunit\framework\db\enums;
+
+enum Status
+{
+    case ACTIVE;
+    case INACTIVE;
+}
diff --git a/tests/framework/db/enums/StatusTypeInt.php b/tests/framework/db/enums/StatusTypeInt.php
new file mode 100644
index 00000000000..ed4739c0227
--- /dev/null
+++ b/tests/framework/db/enums/StatusTypeInt.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace yiiunit\framework\db\enums;
+
+enum StatusTypeInt: int
+{
+    case ACTIVE = 1;
+    case INACTIVE = 0;
+}
diff --git a/tests/framework/db/enums/StatusTypeString.php b/tests/framework/db/enums/StatusTypeString.php
new file mode 100644
index 00000000000..019f4273a7f
--- /dev/null
+++ b/tests/framework/db/enums/StatusTypeString.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace yiiunit\framework\db\enums;
+
+enum StatusTypeString: string
+{
+    case ACTIVE = 'active';
+    case INACTIVE = 'inactive';
+}
diff --git a/tests/framework/db/mssql/CommandTest.php b/tests/framework/db/mssql/CommandTest.php
index b09f87bb6b8..25a58a3a9e4 100644
--- a/tests/framework/db/mssql/CommandTest.php
+++ b/tests/framework/db/mssql/CommandTest.php
@@ -134,22 +134,19 @@ public function testUpsertVarbinary()
     {
         $db = $this->getConnection();
 
-        $testData = json_encode(['test' => 'string', 'test2' => 'integer']);
-        $params = [];
-
         $qb = $db->getQueryBuilder();
-        $sql = $qb->upsert('T_upsert_varbinary', ['id' => 1, 'blob_col' => $testData] , ['blob_col' => $testData], $params);
+        $testData = json_encode(['test' => 'string', 'test2' => 'integer'], JSON_THROW_ON_ERROR);
 
-        $result = $db->createCommand($sql, $params)->execute();
+        $params = [];
 
-        $this->assertEquals(1, $result);
+        $sql = $qb->upsert('T_upsert_varbinary', ['id' => 1, 'blob_col' => $testData], ['blob_col' => $testData], $params);
+        $result = $db->createCommand($sql, $params)->execute();
 
-        $query = (new Query())
-            ->select(['convert(nvarchar(max),blob_col) as blob_col'])
-            ->from('T_upsert_varbinary')
-            ->where(['id' => 1]);
+        $this->assertSame(1, $result);
 
+        $query = (new Query())->select(['blob_col'])->from('T_upsert_varbinary')->where(['id' => 1]);
         $resultData = $query->createCommand($db)->queryOne();
-        $this->assertEquals($testData, $resultData['blob_col']);
+
+        $this->assertSame($testData, $resultData['blob_col']);
     }
 }
diff --git a/tests/framework/db/mssql/QueryCacheTest.php b/tests/framework/db/mssql/QueryCacheTest.php
new file mode 100644
index 00000000000..b35c11fde1c
--- /dev/null
+++ b/tests/framework/db/mssql/QueryCacheTest.php
@@ -0,0 +1,55 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db\mssql;
+
+use yii\caching\FileCache;
+use yii\db\Query;
+use yiiunit\framework\db\DatabaseTestCase;
+
+/**
+ * @group db
+ * @group mssql
+ */
+class QueryCacheTest extends DatabaseTestCase
+{
+    protected $driverName = 'sqlsrv';
+
+    public function testQueryCacheFileCache()
+    {
+        $db = $this->getConnection();
+        $db->enableQueryCache = true;
+        $db->queryCache = new FileCache(['cachePath' => '@yiiunit/runtime/cache']);
+
+        $db->createCommand()->delete('type')->execute();
+        $db->createCommand()->insert('type', [
+            'int_col' => $key = 1,
+            'char_col' => '',
+            'char_col2' => '6a3ce1a0bffe8eeb6fa986caf443e24c',
+            'float_col' => 0.0,
+            'blob_col' => 'a:1:{s:13:"template";s:1:"1";}',
+            'bool_col' => true,
+        ])->execute();
+
+        $function = function($db) use ($key){
+            return (new Query())
+                ->select(['blob_col'])
+                ->from('type')
+                ->where(['int_col' => $key])
+                ->createCommand($db)
+                ->queryScalar();
+        };
+
+        // First run return
+        $result = $db->cache($function);
+        $this->assertSame('a:1:{s:13:"template";s:1:"1";}', $result);
+
+        // After the request has been cached return
+        $result = $db->cache($function);
+        $this->assertSame('a:1:{s:13:"template";s:1:"1";}', $result);
+    }
+}
diff --git a/tests/framework/db/mssql/type/BooleanTest.php b/tests/framework/db/mssql/type/BooleanTest.php
new file mode 100644
index 00000000000..97fd7124519
--- /dev/null
+++ b/tests/framework/db/mssql/type/BooleanTest.php
@@ -0,0 +1,198 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db\mssql\type;
+
+use yii\db\mssql\Schema;
+use yiiunit\framework\db\DatabaseTestCase;
+
+/**
+ * @group db
+ * @group mssql
+ */
+class BooleanTest extends DatabaseTestCase
+{
+    protected $driverName = 'sqlsrv';
+
+    public function testBoolean()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `false`
+        $db->createCommand()->insert($tableName, ['bool_col' => false])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(0, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertFalse($phpTypeCast);
+
+        // test value `true`
+        $db->createCommand()->insert($tableName, ['bool_col' => true])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 2")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueInteger()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value 0
+        $db->createCommand()->insert($tableName, ['bool_col' => 0])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(0, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertFalse($phpTypeCast);
+
+        // test value 1
+        $db->createCommand()->insert($tableName, ['bool_col' => 1])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 2")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanValueNegative()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value 2
+        $db->createCommand()->insert($tableName, ['bool_col' => -1])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueNull()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `null`
+        $db->createCommand()->insert($tableName, ['bool_col' => null])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertNull($boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertNull($phpTypeCast);
+    }
+
+    public function testBooleanWithValueOverflow()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value 2
+        $db->createCommand()->insert($tableName, ['bool_col' => 2])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+}
diff --git a/tests/framework/db/mssql/type/VarbinaryTest.php b/tests/framework/db/mssql/type/VarbinaryTest.php
new file mode 100644
index 00000000000..b72a2b4c469
--- /dev/null
+++ b/tests/framework/db/mssql/type/VarbinaryTest.php
@@ -0,0 +1,44 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db\mssql\Type;
+
+use yii\db\Query;
+use yiiunit\framework\db\DatabaseTestCase;
+
+/**
+ * @group db
+ * @group mssql
+ */
+class VarbinaryTest extends DatabaseTestCase
+{
+    protected $driverName = 'sqlsrv';
+
+    public function testVarbinary()
+    {
+        $db = $this->getConnection();
+
+        $db->createCommand()->delete('type')->execute();
+        $db->createCommand()->insert('type', [
+            'int_col' => $key = 1,
+            'char_col' => '',
+            'char_col2' => '6a3ce1a0bffe8eeb6fa986caf443e24c',
+            'float_col' => 0.0,
+            'blob_col' => 'a:1:{s:13:"template";s:1:"1";}',
+            'bool_col' => true,
+        ])->execute();
+
+        $result = (new Query())
+            ->select(['blob_col'])
+            ->from('type')
+            ->where(['int_col' => $key])
+            ->createCommand($db)
+            ->queryScalar();
+
+        $this->assertSame('a:1:{s:13:"template";s:1:"1";}', $result);
+    }
+}
diff --git a/tests/framework/db/mysql/BaseActiveRecordTest.php b/tests/framework/db/mysql/BaseActiveRecordTest.php
new file mode 100644
index 00000000000..394922e87f7
--- /dev/null
+++ b/tests/framework/db/mysql/BaseActiveRecordTest.php
@@ -0,0 +1,37 @@
+<?php
+
+namespace yiiunit\framework\db\mysql;
+
+use yiiunit\data\ar\Storage;
+
+class BaseActiveRecordTest extends \yiiunit\framework\db\BaseActiveRecordTest
+{
+    public $driverName = 'mysql';
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/19872
+     *
+     * @dataProvider provideArrayValueWithChange
+     */
+    public function testJsonDirtyAttributesWithDataChange($actual, $modified)
+    {
+        if (version_compare($this->getConnection()->getSchema()->getServerVersion(), '5.7', '<')) {
+            $this->markTestSkipped('JSON columns are not supported in MySQL < 5.7');
+        }
+        if (version_compare(PHP_VERSION, '5.6', '<')) {
+            $this->markTestSkipped('JSON columns are not supported in PDO for PHP < 5.6');
+        }
+
+        $createdStorage = new Storage(['data' => $actual]);
+
+        $createdStorage->save();
+
+        $foundStorage = Storage::find()->limit(1)->one();
+
+        $this->assertNotNull($foundStorage);
+
+        $foundStorage->data = $modified;
+
+        $this->assertSame(['data' => $modified], $foundStorage->getDirtyAttributes());
+    }
+}
diff --git a/tests/framework/db/mysql/QueryBuilderTest.php b/tests/framework/db/mysql/QueryBuilderTest.php
index 21257bb2b2e..659bf1a9ee2 100644
--- a/tests/framework/db/mysql/QueryBuilderTest.php
+++ b/tests/framework/db/mysql/QueryBuilderTest.php
@@ -125,7 +125,7 @@ public function columnTimeTypes()
         /**
          * @link https://github.com/yiisoft/yii2/issues/14367
          */
-        $mysqlVersion = $this->getDb()->getSlavePdo()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+        $mysqlVersion = $this->getDb()->getSlavePdo(true)->getAttribute(\PDO::ATTR_SERVER_VERSION);
         $supportsFractionalSeconds = version_compare($mysqlVersion,'5.6.4', '>=');
         if ($supportsFractionalSeconds) {
             $expectedValues = [
diff --git a/tests/framework/db/mysql/SchemaTest.php b/tests/framework/db/mysql/SchemaTest.php
index 4e602a317ea..43a66a60b57 100644
--- a/tests/framework/db/mysql/SchemaTest.php
+++ b/tests/framework/db/mysql/SchemaTest.php
@@ -230,7 +230,6 @@ public function getExpectedColumns()
 
         if (version_compare($version, '5.7', '<')) {
             $columns['int_col3']['phpType'] = 'string';
-
             $columns['json_col']['type'] = 'text';
             $columns['json_col']['dbType'] = 'longtext';
             $columns['json_col']['phpType'] = 'string';
diff --git a/tests/framework/db/mysql/connection/DeadLockTest.php b/tests/framework/db/mysql/connection/DeadLockTest.php
index 40f6d573f87..6e3da047eea 100644
--- a/tests/framework/db/mysql/connection/DeadLockTest.php
+++ b/tests/framework/db/mysql/connection/DeadLockTest.php
@@ -119,7 +119,12 @@ public function testDeadlockException()
                 . ($logContent ? ". Shared children log:\n$logContent" : '')
             );
         }
-        $this->assertEquals(1, $deadlockHitCount, "exactly one child must hit deadlock; shared children log:\n" . $logContent);
+
+        if (version_compare($this->getConnection()->getSchema()->getServerVersion(), '8.0', '<')) {
+            $this->assertEquals(1, $deadlockHitCount, "exactly one child must hit deadlock; shared children log:\n" . $logContent);
+        } else {
+            $this->assertEquals(0, $deadlockHitCount, "exactly zero children must hit deadlock; shared children log:\n" . $logContent);
+        }
     }
 
     /**
diff --git a/tests/framework/db/pgsql/BaseActiveRecordTest.php b/tests/framework/db/pgsql/BaseActiveRecordTest.php
new file mode 100644
index 00000000000..a4993685249
--- /dev/null
+++ b/tests/framework/db/pgsql/BaseActiveRecordTest.php
@@ -0,0 +1,46 @@
+<?php
+
+namespace yiiunit\framework\db\pgsql;
+
+use yii\db\JsonExpression;
+use yiiunit\data\ar\ActiveRecord;
+
+class BaseActiveRecordTest extends \yiiunit\framework\db\BaseActiveRecordTest
+{
+    public $driverName = 'pgsql';
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/19872
+     *
+     * @dataProvider provideArrayValueWithChange
+     */
+    public function testJsonDirtyAttributesWithDataChange($actual, $modified)
+    {
+        $createdStorage = new ArrayAndJsonType([
+            'json_col' => new JsonExpression($actual),
+        ]);
+
+        $createdStorage->save();
+
+        $foundStorage = ArrayAndJsonType::find()->limit(1)->one();
+
+        $this->assertNotNull($foundStorage);
+
+        $foundStorage->json_col = $modified;
+
+        $this->assertSame(['json_col' => $modified], $foundStorage->getDirtyAttributes());
+    }
+}
+
+/**
+ * {@inheritdoc}
+ * @property array id
+ * @property array json_col
+ */
+class ArrayAndJsonType extends ActiveRecord
+{
+    public static function tableName()
+    {
+        return '{{%array_and_json_types}}';
+    }
+}
diff --git a/tests/framework/db/pgsql/type/BooleanTest.php b/tests/framework/db/pgsql/type/BooleanTest.php
new file mode 100644
index 00000000000..4a9b21df249
--- /dev/null
+++ b/tests/framework/db/pgsql/type/BooleanTest.php
@@ -0,0 +1,239 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db\pgsql\type;
+
+use yii\db\pgsql\Schema;
+use yiiunit\framework\db\DatabaseTestCase;
+
+/**
+ * @group db
+ * @group pgsql
+ */
+class BooleanTest extends DatabaseTestCase
+{
+    protected $driverName = 'pgsql';
+
+    public function testBoolean()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `false`
+        $db->createCommand()->insert($tableName, ['bool_col' => false])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(0, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertFalse($phpTypeCast);
+
+        // test value `true`
+        $db->createCommand()->insert($tableName, ['bool_col' => true])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 2")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueInteger()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `0`
+        $db->createCommand()->insert($tableName, ['bool_col' => 0])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(0, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertFalse($phpTypeCast);
+
+        // test value `1`
+        $db->createCommand()->insert($tableName, ['bool_col' => 1])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 2")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueNegative()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `-1`
+        $db->createCommand()->insert($tableName, ['bool_col' => '-1'])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueNull()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `null`
+        $db->createCommand()->insert($tableName, ['bool_col' => null])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertNull($boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertNull($phpTypeCast);
+    }
+
+    public function testBooleanWithValueOverflow()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `2`
+        $db->createCommand()->insert($tableName, ['bool_col' => 2])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+
+    public function testBooleanWithValueString()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $column = $db->getTableSchema($tableName)->getColumn('bool_col');
+        $this->assertSame('boolean', $column->phpType);
+
+        // test value `0`
+        $db->createCommand()->insert($tableName, ['bool_col' => '0'])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 1")->queryScalar();
+        $this->assertEquals(0, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertFalse($phpTypeCast);
+
+        // test value `1`
+        $db->createCommand()->insert($tableName, ['bool_col' => '1'])->execute();
+        $boolValue = $db->createCommand("SELECT bool_col FROM $tableName WHERE id = 2")->queryScalar();
+        $this->assertEquals(1, $boolValue);
+
+        // test php typecast
+        $phpTypeCast = $column->phpTypecast($boolValue);
+        $this->assertTrue($phpTypeCast);
+    }
+}
diff --git a/tests/framework/db/sqlite/CommandTest.php b/tests/framework/db/sqlite/CommandTest.php
index 23012f38fec..b7492c0d1d8 100644
--- a/tests/framework/db/sqlite/CommandTest.php
+++ b/tests/framework/db/sqlite/CommandTest.php
@@ -7,6 +7,8 @@
 
 namespace yiiunit\framework\db\sqlite;
 
+use yii\db\sqlite\Schema;
+
 /**
  * @group db
  * @group sqlite
@@ -109,4 +111,60 @@ public function batchInsertSqlProvider()
 
         return $parent;
     }
+
+    public function testResetSequence()
+    {
+        $db = $this->getConnection();
+
+        if ($db->getTableSchema('reset_sequence', true) !== null) {
+            $db->createCommand()->dropTable('reset_sequence')->execute();
+        }
+
+        // create table reset_sequence
+        $db->createCommand()->createTable(
+            'reset_sequence',
+            [
+                'id' => Schema::TYPE_PK,
+                'description' => Schema::TYPE_TEXT,
+            ]
+        )->execute();
+
+        // ensure auto increment is working
+        $db->createCommand()->insert('reset_sequence', ['description' => 'test'])->execute();
+        $this->assertEquals(1, $db->createCommand('SELECT MAX([[id]]) FROM {{reset_sequence}}')->queryScalar());
+
+        // remove all records
+        $db->createCommand()->delete('reset_sequence')->execute();
+        $this->assertEquals(0, $db->createCommand('SELECT COUNT(*) FROM {{reset_sequence}}')->queryScalar());
+
+        // counter should be reset to 1
+        $db->createCommand()->resetSequence('reset_sequence')->execute();
+        $db->createCommand()->insert('reset_sequence', ['description' => 'test'])->execute();
+        $this->assertEquals(1, $db->createCommand('SELECT COUNT(*) FROM {{reset_sequence}}')->queryScalar());
+        $this->assertEquals(1, $db->createCommand('SELECT MAX([[id]]) FROM {{reset_sequence}}')->queryScalar());
+
+        // counter should be reset to 5, so next record gets ID 5
+        $db->createCommand()->resetSequence('reset_sequence', 5)->execute();
+        $db->createCommand()->insert('reset_sequence', ['description' => 'test'])->execute();
+        $this->assertEquals(2, $db->createCommand('SELECT COUNT(*) FROM {{reset_sequence}}')->queryScalar());
+        $this->assertEquals(5, $db->createCommand('SELECT MAX([[id]]) FROM {{reset_sequence}}')->queryScalar());
+    }
+
+    public function testResetSequenceExceptionTableNoExist()
+    {
+        $this->expectException('yii\base\InvalidArgumentException');
+        $this->expectExceptionMessage('Table not found: no_exist_table');
+
+        $db = $this->getConnection();
+        $db->createCommand()->resetSequence('no_exist_table', 5)->execute();
+    }
+
+    public function testResetSequenceExceptionSquenceNoExist()
+    {
+        $this->expectException('yii\base\InvalidArgumentException');
+        $this->expectExceptionMessage("There is not sequence associated with table 'type'.");
+
+        $db = $this->getConnection();
+        $db->createCommand()->resetSequence('type', 5)->execute();
+    }
 }
diff --git a/tests/framework/db/sqlite/type/BooleanTest.php b/tests/framework/db/sqlite/type/BooleanTest.php
new file mode 100644
index 00000000000..c5bfd811c11
--- /dev/null
+++ b/tests/framework/db/sqlite/type/BooleanTest.php
@@ -0,0 +1,249 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db\sqlite\type;
+
+use yii\db\sqlite\Schema;
+use yiiunit\framework\db\DatabaseTestCase;
+
+/**
+ * @group db
+ * @group sqlite
+ */
+class BooleanTest extends DatabaseTestCase
+{
+    protected $driverName = 'sqlite';
+
+    public function testBoolean()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col_tinyint' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+                'bool_col_bit' => $schema->createColumnSchemaBuilder('bit', 1),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $columnBoolColTinyint = $db->getTableSchema($tableName)->getColumn('bool_col_tinyint');
+        $this->assertSame('boolean', $columnBoolColTinyint->phpType);
+
+        $columnBoolColBit = $db->getTableSchema($tableName)->getColumn('bool_col_bit');
+        $this->assertSame('boolean', $columnBoolColBit->phpType);
+
+        // test value `false`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => false, 'bool_col_bit' => false])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 1")->queryOne();
+        $this->assertEquals(0, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(0, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertFalse($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertFalse($phpTypeCastBoolColBit);
+
+        // test value `true`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => true, 'bool_col_bit' => true])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 2")->queryOne();
+        $this->assertEquals(1, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(1, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertTrue($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertTrue($phpTypeCastBoolColBit);
+    }
+
+    public function testBooleanWithValueInteger()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col_tinyint' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+                'bool_col_bit' => $schema->createColumnSchemaBuilder('bit', 1),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $columnBoolColTinyint = $db->getTableSchema($tableName)->getColumn('bool_col_tinyint');
+        $this->assertSame('boolean', $columnBoolColTinyint->phpType);
+
+        $columnBoolColBit = $db->getTableSchema($tableName)->getColumn('bool_col_bit');
+        $this->assertSame('boolean', $columnBoolColBit->phpType);
+
+        // test value `0`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => 0, 'bool_col_bit' => 0])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 1")->queryOne();
+        $this->assertEquals(0, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(0, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertFalse($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertFalse($phpTypeCastBoolColBit);
+
+        // test value `1`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => 1, 'bool_col_bit' => 1])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 2")->queryOne();
+        $this->assertEquals(1, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(1, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertTrue($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertTrue($phpTypeCastBoolColBit);
+    }
+
+    public function testBooleanWithValueNegative()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col_tinyint' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+                'bool_col_bit' => $schema->createColumnSchemaBuilder('bit', 1),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $columnBoolColTinyint = $db->getTableSchema($tableName)->getColumn('bool_col_tinyint');
+        $this->assertSame('boolean', $columnBoolColTinyint->phpType);
+
+        $columnBoolColBit = $db->getTableSchema($tableName)->getColumn('bool_col_bit');
+        $this->assertSame('boolean', $columnBoolColBit->phpType);
+
+        // test value `-1`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => -1, 'bool_col_bit' => -1])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 1")->queryOne();
+
+        $this->assertEquals(1, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(1, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertTrue($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertTrue($phpTypeCastBoolColBit);
+    }
+
+    public function testBooleanWithValueNull()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col_tinyint' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+                'bool_col_bit' => $schema->createColumnSchemaBuilder('bit', 1),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $columnBoolColTinyint = $db->getTableSchema($tableName)->getColumn('bool_col_tinyint');
+        $this->assertSame('boolean', $columnBoolColTinyint->phpType);
+
+        $columnBoolColBit = $db->getTableSchema($tableName)->getColumn('bool_col_bit');
+        $this->assertSame('boolean', $columnBoolColBit->phpType);
+
+        // test value `null`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => null, 'bool_col_bit' => null])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 1")->queryOne();
+
+        $this->assertNull($boolValues['bool_col_tinyint']);
+        $this->assertNull($boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertNull($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertNull($phpTypeCastBoolColBit);
+    }
+
+    public function testBooleanWithValueOverflow()
+    {
+        $db = $this->getConnection(true);
+        $schema = $db->getSchema();
+        $tableName = '{{%boolean}}';
+
+        if ($db->getTableSchema($tableName)) {
+            $db->createCommand()->dropTable($tableName)->execute();
+        }
+
+        $db->createCommand()->createTable(
+            $tableName,
+            [
+                'id' => $schema->createColumnSchemaBuilder(Schema::TYPE_PK),
+                'bool_col_tinyint' => $schema->createColumnSchemaBuilder(Schema::TYPE_BOOLEAN),
+                'bool_col_bit' => $schema->createColumnSchemaBuilder('bit', 1),
+            ]
+        )->execute();
+
+        // test type `boolean`
+        $columnBoolColTinyint = $db->getTableSchema($tableName)->getColumn('bool_col_tinyint');
+        $this->assertSame('boolean', $columnBoolColTinyint->phpType);
+
+        $columnBoolColBit = $db->getTableSchema($tableName)->getColumn('bool_col_bit');
+        $this->assertSame('boolean', $columnBoolColBit->phpType);
+
+        // test value `2`
+        $db->createCommand()->insert($tableName, ['bool_col_tinyint' => 2, 'bool_col_bit' => 2])->execute();
+        $boolValues = $db->createCommand("SELECT * FROM $tableName WHERE id = 1")->queryOne();
+
+        $this->assertEquals(1, $boolValues['bool_col_tinyint']);
+        $this->assertEquals(1, $boolValues['bool_col_bit']);
+
+        // test php typecast
+        $phpTypeCastBoolColTinyint = $columnBoolColTinyint->phpTypecast($boolValues['bool_col_tinyint']);
+        $this->assertTrue($phpTypeCastBoolColTinyint);
+
+        $phpTypeCastBoolColBit = $columnBoolColBit->phpTypecast($boolValues['bool_col_bit']);
+        $this->assertTrue($phpTypeCastBoolColBit);
+    }
+}
diff --git a/tests/framework/filters/AccessRuleTest.php b/tests/framework/filters/AccessRuleTest.php
index 4c2ded2d2dd..620766788d8 100644
--- a/tests/framework/filters/AccessRuleTest.php
+++ b/tests/framework/filters/AccessRuleTest.php
@@ -422,17 +422,18 @@ public function testMatchIP()
     {
         $action = $this->mockAction();
         $user = false;
-        $request = $this->mockRequest();
 
         $rule = new AccessRule();
 
         // by default match all IPs
+        $request = $this->mockRequest();
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
         $rule->allow = false;
         $this->assertFalse($rule->allows($action, $user, $request));
 
         // empty IPs = match all IPs
+        $request = $this->mockRequest();
         $rule->ips = [];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -441,6 +442,7 @@ public function testMatchIP()
 
         // match, one IP
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.0.1'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -449,6 +451,7 @@ public function testMatchIP()
 
         // no match, one IP
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['192.168.0.1'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -457,12 +460,14 @@ public function testMatchIP()
 
         // no partial match, one IP
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.0.10'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
         $rule->allow = false;
         $this->assertNull($rule->allows($action, $user, $request));
         $_SERVER['REMOTE_ADDR'] = '127.0.0.10';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.0.1'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -471,6 +476,7 @@ public function testMatchIP()
 
         // match, one IP IPv6
         $_SERVER['REMOTE_ADDR'] = '::1';
+        $request = $this->mockRequest();
         $rule->ips = ['::1'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -479,6 +485,7 @@ public function testMatchIP()
 
         // no match, one IP IPv6
         $_SERVER['REMOTE_ADDR'] = '::1';
+        $request = $this->mockRequest();
         $rule->ips = ['dead::beaf::1'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -487,12 +494,14 @@ public function testMatchIP()
 
         // no partial match, one IP IPv6
         $_SERVER['REMOTE_ADDR'] = '::1';
+        $request = $this->mockRequest();
         $rule->ips = ['::123'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
         $rule->allow = false;
         $this->assertNull($rule->allows($action, $user, $request));
         $_SERVER['REMOTE_ADDR'] = '::123';
+        $request = $this->mockRequest();
         $rule->ips = ['::1'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -501,6 +510,7 @@ public function testMatchIP()
 
         // undefined IP
         $_SERVER['REMOTE_ADDR'] = null;
+        $request = $this->mockRequest();
         $rule->ips = ['192.168.*'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -512,12 +522,12 @@ public function testMatchIPWildcard()
     {
         $action = $this->mockAction();
         $user = false;
-        $request = $this->mockRequest();
 
         $rule = new AccessRule();
 
         // no match
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['192.168.*'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -526,6 +536,7 @@ public function testMatchIPWildcard()
 
         // match
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.*'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -534,6 +545,7 @@ public function testMatchIPWildcard()
 
         // match, IPv6
         $_SERVER['REMOTE_ADDR'] = '2a01:4f8:120:7202::2';
+        $request = $this->mockRequest();
         $rule->ips = ['2a01:4f8:120:*'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -542,6 +554,7 @@ public function testMatchIPWildcard()
 
         // no match, IPv6
         $_SERVER['REMOTE_ADDR'] = '::1';
+        $request = $this->mockRequest();
         $rule->ips = ['2a01:4f8:120:*'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -553,12 +566,12 @@ public function testMatchIPMask()
     {
         $action = $this->mockAction();
         $user = false;
-        $request = $this->mockRequest();
 
         $rule = new AccessRule();
 
         // no match
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.0.32/27'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
@@ -567,6 +580,7 @@ public function testMatchIPMask()
 
         // match
         $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+        $request = $this->mockRequest();
         $rule->ips = ['127.0.0.1/27'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -575,6 +589,7 @@ public function testMatchIPMask()
 
         // match, IPv6
         $_SERVER['REMOTE_ADDR'] = '2a01:4f8:120:7202::2';
+        $request = $this->mockRequest();
         $rule->ips = ['2a01:4f8:120:7202::2/127'];
         $rule->allow = true;
         $this->assertTrue($rule->allows($action, $user, $request));
@@ -583,6 +598,7 @@ public function testMatchIPMask()
 
         // no match, IPv6
         $_SERVER['REMOTE_ADDR'] = '2a01:4f8:120:7202::ffff';
+        $request = $this->mockRequest();
         $rule->ips = ['2a01:4f8:120:7202::2/123'];
         $rule->allow = true;
         $this->assertNull($rule->allows($action, $user, $request));
diff --git a/tests/framework/filters/PageCacheTest.php b/tests/framework/filters/PageCacheTest.php
index 0d69a1a76e9..6dc5ef5f9a6 100644
--- a/tests/framework/filters/PageCacheTest.php
+++ b/tests/framework/filters/PageCacheTest.php
@@ -472,4 +472,24 @@ public function testCalculateCacheKey()
         $keys = $this->invokeMethod(new PageCache(), 'calculateCacheKey');
         $this->assertEquals(['yii\filters\PageCache', 'test'], $keys);
     }
+
+    public function testClosureVariations()
+    {
+        $keys = $this->invokeMethod(new PageCache([
+            'variations' => function() {
+                return [
+                    'foobar'
+                ];
+            }
+        ]), 'calculateCacheKey');
+        $this->assertEquals(['yii\filters\PageCache', 'test', 'foobar'], $keys);
+
+        // test type cast of string
+        $keys = $this->invokeMethod(new PageCache([
+            'variations' => function() {
+                return 'foobarstring';
+            }
+        ]), 'calculateCacheKey');
+        $this->assertEquals(['yii\filters\PageCache', 'test', 'foobarstring'], $keys);
+    }
 }
diff --git a/tests/framework/grid/GridViewTest.php b/tests/framework/grid/GridViewTest.php
index 392aefbd0ba..b698011493b 100644
--- a/tests/framework/grid/GridViewTest.php
+++ b/tests/framework/grid/GridViewTest.php
@@ -7,10 +7,12 @@
 
 namespace yiiunit\framework\grid;
 
+use Yii;
 use yii\data\ArrayDataProvider;
 use yii\grid\DataColumn;
 use yii\grid\GridView;
 use yii\web\View;
+use yiiunit\data\ar\NoAutoLabels;
 
 /**
  * @author Evgeniy Tkachenko <et.coder@gmail.com>
@@ -150,4 +152,53 @@ public function testFooter() {
 
 		$this->assertTrue(preg_match("/<\/tbody><tfoot>/", $html) === 1);
 	}
+
+    public function testHeaderLabels()
+    {
+        // Ensure GridView does not call Model::generateAttributeLabel() to generate labels unless the labels are explicitly used.
+
+        $this->mockApplication([
+            'components' => [
+                'db' => [
+                    'class' => \yii\db\Connection::className(),
+                    'dsn' => 'sqlite::memory:',
+                ],
+            ],
+        ]);
+
+        NoAutoLabels::$db = Yii::$app->getDb();
+        Yii::$app->getDb()->createCommand()->createTable(NoAutoLabels::tableName(), ['attr1' => 'int', 'attr2' => 'int'])->execute();
+
+        $urlManager = new \yii\web\UrlManager([
+            'baseUrl' => '/',
+            'scriptUrl' => '/index.php',
+        ]);
+
+        $grid = new GridView([
+            'dataProvider' => new \yii\data\ActiveDataProvider([
+                'query' => NoAutoLabels::find(),
+            ]),
+            'columns' => [
+                'attr1',
+                'attr2:text:Label for attr2',
+            ],
+        ]);
+
+        // NoAutoLabels::generateAttributeLabel() should not be called.
+        $grid->dataProvider->setSort([
+            'route' => '/',
+            'urlManager' => $urlManager,
+        ]);
+        $grid->renderTableHeader();
+
+        // NoAutoLabels::generateAttributeLabel() should not be called.
+        $grid->dataProvider->setSort([
+            'route' => '/',
+            'urlManager' => $urlManager,
+            'attributes' => ['attr1', 'attr2'],
+        ]);
+        $grid->renderTableHeader();
+
+        // If NoAutoLabels::generateAttributeLabel() has not been called no exception will be thrown meaning this test passed successfully.
+	}
 }
diff --git a/tests/framework/helpers/ArrayHelperTest.php b/tests/framework/helpers/ArrayHelperTest.php
index 063eeafcaf6..0d706bc552f 100644
--- a/tests/framework/helpers/ArrayHelperTest.php
+++ b/tests/framework/helpers/ArrayHelperTest.php
@@ -135,6 +135,29 @@ public function testRemove()
         $this->assertEquals('defaultValue', $default);
     }
 
+    /**
+     * @return void
+     */
+    public function testRemoveWithFloat()
+    {
+        if (version_compare(PHP_VERSION, '8.1.0', '>=')) {
+            $this->markTestSkipped('Using floats as array key is deprecated.');
+        }
+
+        $array = ['name' => 'b', 'age' => 3, 1.1 => null];
+
+        $name = ArrayHelper::remove($array, 'name');
+        $this->assertEquals($name, 'b');
+        $this->assertEquals($array, ['age' => 3, 1.1 => null]);
+
+        $floatVal = ArrayHelper::remove($array, 1.1);
+        $this->assertNull($floatVal);
+        $this->assertEquals($array, ['age' => 3]);
+
+        $default = ArrayHelper::remove($array, 'nonExisting', 'defaultValue');
+        $this->assertEquals('defaultValue', $default);
+    }
+
     public function testRemoveValueMultiple()
     {
         $array = [
@@ -506,14 +529,21 @@ public function testMergeEmpty()
     /**
      * @see https://github.com/yiisoft/yii2/pull/11549
      */
-    public function test()
+    public function testGetValueWithFloatKeys()
     {
-        $array = [];
-        $array[1.0] = 'some value';
+        if (version_compare(PHP_VERSION, '8.1.0', '>=')) {
+            $this->markTestSkipped('Using floats as array key is deprecated.');
+        }
 
-        $result = ArrayHelper::getValue($array, 1.0);
+        $array = [];
+        $array[1.1] = 'some value';
+        $array[2.1] = null;
 
+        $result = ArrayHelper::getValue($array, 1.2);
         $this->assertEquals('some value', $result);
+
+        $result = ArrayHelper::getValue($array, 2.2);
+        $this->assertNull($result);
     }
 
     public function testIndex()
@@ -712,6 +742,7 @@ public function testKeyExists()
             'a' => 1,
             'B' => 2,
         ];
+
         $this->assertTrue(ArrayHelper::keyExists('a', $array));
         $this->assertFalse(ArrayHelper::keyExists('b', $array));
         $this->assertTrue(ArrayHelper::keyExists('B', $array));
@@ -723,6 +754,27 @@ public function testKeyExists()
         $this->assertFalse(ArrayHelper::keyExists('c', $array, false));
     }
 
+    public function testKeyExistsWithFloat()
+    {
+        if (version_compare(PHP_VERSION, '8.1.0', '>=')) {
+            $this->markTestSkipped('Using floats as array key is deprecated.');
+        }
+
+        $array = [
+            1 => 3,
+            2.2 => 4, // Note: Floats are cast to ints, which means that the fractional part will be truncated.
+            3.3 => null,
+        ];
+
+        $this->assertTrue(ArrayHelper::keyExists(1, $array));
+        $this->assertTrue(ArrayHelper::keyExists(1.1, $array));
+        $this->assertTrue(ArrayHelper::keyExists(2, $array));
+        $this->assertTrue(ArrayHelper::keyExists('2', $array));
+        $this->assertTrue(ArrayHelper::keyExists(2.2, $array));
+        $this->assertTrue(ArrayHelper::keyExists(3, $array));
+        $this->assertTrue(ArrayHelper::keyExists(3.3, $array));
+    }
+
     public function testKeyExistsArrayAccess()
     {
         $array = new TraversableArrayAccessibleObject([
diff --git a/tests/framework/helpers/ConsoleTest.php b/tests/framework/helpers/ConsoleTest.php
index b729e266910..cbd1b322ee5 100644
--- a/tests/framework/helpers/ConsoleTest.php
+++ b/tests/framework/helpers/ConsoleTest.php
@@ -216,27 +216,6 @@ public function testErrorSummary()
         $expectedHtml =  "Error message. Here are some chars: < >\nError message. Here are even more chars: \"\"";
         $this->assertEqualsWithoutLE($expectedHtml, Console::errorSummary($model, $options));
     }
-}
-
-/**
- * @property string name
- * @property array types
- * @property string description
- */
-class TestConsoleModel extends DynamicModel
-{
-    public function rules()
-    {
-        return [
-            ['name', 'required'],
-            ['name', 'string', 'max' => 100]
-        ];
-    }
-
-    public function init()
-    {
-        $this->defineAttribute('name');
-    }
 
     /**
      * @covers \yii\helpers\BaseConsole::input()
@@ -390,16 +369,16 @@ public function testConfirm()
         $this->truncateStreams();
 
         foreach ([
-            'y' => true,
-            'Y' => true,
-            'yes' => true,
-            'YeS' => true,
-            'n' => false,
-            'N' => false,
-            'no' => false,
-            'NO' => false,
-            'WHAT?!' . PHP_EOL . 'yes' => true,
-        ] as $currInput => $currAssertion) {
+                     'y' => true,
+                     'Y' => true,
+                     'yes' => true,
+                     'YeS' => true,
+                     'n' => false,
+                     'N' => false,
+                     'no' => false,
+                     'NO' => false,
+                     'WHAT?!' . PHP_EOL . 'yes' => true,
+                 ] as $currInput => $currAssertion) {
             $this->sendInput($currInput);
             $result = ConsoleStub::confirm('Are you sure?');
             $this->assertEquals($currAssertion, $result, $currInput);
@@ -420,31 +399,63 @@ public function testSelect()
 
         $this->sendInput('c');
         $result = ConsoleStub::select('Usual behavior', $options);
-        $this->assertEquals('Usual behavior [c,d,m,?]: ', $this->readOutput());
+        $this->assertEquals('Usual behavior (c,d,m,?): ', $this->readOutput());
         $this->assertEquals('c', $result);
         $this->truncateStreams();
 
         $this->sendInput('x', 'd');
         $result = ConsoleStub::select('Wrong character', $options);
-        $this->assertEquals('Wrong character [c,d,m,?]: Wrong character [c,d,m,?]: ', $this->readOutput());
+        $this->assertEquals('Wrong character (c,d,m,?): Wrong character (c,d,m,?): ', $this->readOutput());
         $this->assertEquals('d', $result);
         $this->truncateStreams();
 
         $this->sendInput('?', 'm');
         $result = ConsoleStub::select('Using help', $options);
         $this->assertEquals(
-            'Using help [c,d,m,?]: '
-                . ' c - cat'
-                . PHP_EOL
-                . ' d - dog'
-                . PHP_EOL
-                . ' m - mouse'
-                . PHP_EOL
-                . ' ? - Show help'
-                . PHP_EOL
-                . 'Using help [c,d,m,?]: ',
+            'Using help (c,d,m,?): '
+            . ' c - cat'
+            . PHP_EOL
+            . ' d - dog'
+            . PHP_EOL
+            . ' m - mouse'
+            . PHP_EOL
+            . ' ? - Show help'
+            . PHP_EOL
+            . 'Using help (c,d,m,?): ',
             $this->readOutput()
         );
         $this->truncateStreams();
+
+        $this->sendInput('');
+        $result = ConsoleStub::select('Use Default', $options, 'm');
+        $this->assertEquals('m', $result);
+        $this->truncateStreams();
+
+        $this->sendInput('', 'd');
+        $result = ConsoleStub::select('Empty without Default', $options);
+        $this->assertEquals('Empty without Default (c,d,m,?): Empty without Default (c,d,m,?): ', $this->readOutput());
+        $this->assertEquals('d', $result);
+        $this->truncateStreams();
+    }
+}
+
+/**
+ * @property string name
+ * @property array types
+ * @property string description
+ */
+class TestConsoleModel extends DynamicModel
+{
+    public function rules()
+    {
+        return [
+            ['name', 'required'],
+            ['name', 'string', 'max' => 100]
+        ];
+    }
+
+    public function init()
+    {
+        $this->defineAttribute('name');
     }
 }
diff --git a/tests/framework/helpers/FileHelperTest.php b/tests/framework/helpers/FileHelperTest.php
index df33c8c1801..448e6148fd4 100644
--- a/tests/framework/helpers/FileHelperTest.php
+++ b/tests/framework/helpers/FileHelperTest.php
@@ -653,6 +653,15 @@ public function testFindFilesExclude()
             );
         }));
         $this->assertEquals($expect, $foundFiles);
+
+        // negative pattern
+        $foundFiles = FileHelper::findFiles($basePath, ['except' => ['/one/*', '!/one/two']]);
+        sort($foundFiles);
+        $expect = array_values(array_filter($flat, function ($p) {
+            return strpos($p, DIRECTORY_SEPARATOR . 'one') === false || strpos($p, DIRECTORY_SEPARATOR . 'two') !== false;
+        }));
+
+        $this->assertEquals($expect, $foundFiles);
     }
 
     /**
@@ -1261,4 +1270,60 @@ public function changeOwnershipInvalidArgumentsProvider()
             [true, null, 'test'],
         ];
     }
+
+    /**
+     * @dataProvider getExtensionsByMimeTypeProvider
+     * @param string $mimeType
+     * @param array $extensions
+     * @return void
+     */
+    public function testGetExtensionsByMimeType($mimeType, $extensions)
+    {
+        $this->assertEquals($extensions, FileHelper::getExtensionsByMimeType($mimeType));
+    }
+
+    public function getExtensionsByMimeTypeProvider()
+    {
+        return [
+            [
+                'application/json',
+                [
+                    'json',
+                ],
+            ],
+            [
+                'image/jpeg',
+                [ // Note: For backwards compatibility the (alphabetic) order of `framework/helpers/mimeTypes.php` is expected.
+                    'jfif',
+                    'jpe',
+                    'jpeg',
+                    'jpg',
+                    'pjp',
+                    'pjpeg',
+                ],
+            ],
+        ];
+    }
+
+    /**
+     * @dataProvider getExtensionByMimeTypeProvider
+     * @param string $mimeType
+     * @param bool $preferShort
+     * @param array $extension
+     * @return void
+     */
+    public function testGetExtensionByMimeType($mimeType, $preferShort, $extension)
+    {
+        $this->assertEquals($extension, FileHelper::getExtensionByMimeType($mimeType, $preferShort));
+    }
+
+    public function getExtensionByMimeTypeProvider()
+    {
+        return [
+            ['application/json', true, 'json'],
+            ['application/json', false, 'json'],
+            ['image/jpeg', true, 'jpg'],
+            ['image/jpeg', false, 'jpeg'],
+        ];
+    }
 }
diff --git a/tests/framework/helpers/FormatConverterTest.php b/tests/framework/helpers/FormatConverterTest.php
index 3dffe4e0823..dd8d470a1cd 100644
--- a/tests/framework/helpers/FormatConverterTest.php
+++ b/tests/framework/helpers/FormatConverterTest.php
@@ -39,8 +39,8 @@ protected function tearDown()
 
     public function testIntlIcuToPhpShortForm()
     {
-        $this->assertEquals('n/j/y', FormatConverter::convertDateIcuToPhp('short', 'date', 'en-US'));
-        $this->assertEquals('d.m.y', FormatConverter::convertDateIcuToPhp('short', 'date', 'de-DE'));
+        $this->assertEqualsAnyWhitespace('n/j/y', FormatConverter::convertDateIcuToPhp('short', 'date', 'en-US'));
+        $this->assertEqualsAnyWhitespace('d.m.y', FormatConverter::convertDateIcuToPhp('short', 'date', 'de-DE'));
     }
 
     public function testIntlIcuToPhpShortFormDefaultLang()
@@ -53,13 +53,13 @@ public function testIntlIcuToPhpShortFormDefaultLang()
 
     public function testIntlIcuToPhpShortFormTime()
     {
-        $this->assertEquals('g:i A', FormatConverter::convertDateIcuToPhp('short', 'time', 'en-US'));
-        $this->assertEquals('H:i', FormatConverter::convertDateIcuToPhp('short', 'time', 'de-DE'));
+        $this->assertEqualsAnyWhitespace('g:i A', FormatConverter::convertDateIcuToPhp('short', 'time', 'en-US'));
+        $this->assertEqualsAnyWhitespace('H:i', FormatConverter::convertDateIcuToPhp('short', 'time', 'de-DE'));
     }
 
     public function testIntlIcuToPhpShortFormDateTime()
     {
-        $this->assertEquals('n/j/y, g:i A', FormatConverter::convertDateIcuToPhp('short', 'datetime', 'en-US'));
+        $this->assertEqualsAnyWhitespace('n/j/y, g:i A', FormatConverter::convertDateIcuToPhp('short', 'datetime', 'en-US'));
         $this->assertEquals(
             PHP_VERSION_ID < 50600 ? 'd.m.y H:i' : 'd.m.y, H:i',
             FormatConverter::convertDateIcuToPhp('short', 'datetime', 'de-DE')
@@ -208,13 +208,13 @@ public function testIntlIcuToJuiShortFormDefaultLang()
 
     public function testIntlIcuToJuiShortFormTime()
     {
-        $this->assertEquals(': ', FormatConverter::convertDateIcuToJui('short', 'time', 'en-US'));
-        $this->assertEquals(':', FormatConverter::convertDateIcuToJui('short', 'time', 'de-DE'));
+        $this->assertEqualsAnyWhitespace(': ', FormatConverter::convertDateIcuToJui('short', 'time', 'en-US'));
+        $this->assertEqualsAnyWhitespace(':', FormatConverter::convertDateIcuToJui('short', 'time', 'de-DE'));
     }
 
     public function testIntlIcuToJuiShortFormDateTime()
     {
-        $this->assertEquals('m/d/y, : ', FormatConverter::convertDateIcuToJui('short', 'datetime', 'en-US'));
+        $this->assertEqualsAnyWhitespace('m/d/y, : ', FormatConverter::convertDateIcuToJui('short', 'datetime', 'en-US'));
         $this->assertEquals(
             PHP_VERSION_ID < 50600 ? 'dd.mm.y :' : 'dd.mm.y, :',
             FormatConverter::convertDateIcuToJui('short', 'datetime', 'de-DE')
diff --git a/tests/framework/helpers/HtmlTest.php b/tests/framework/helpers/HtmlTest.php
index 24cc4d6bd0d..12e8869d2d8 100644
--- a/tests/framework/helpers/HtmlTest.php
+++ b/tests/framework/helpers/HtmlTest.php
@@ -1210,6 +1210,7 @@ public function testRenderTagAttributes()
         $this->assertEquals(' name="test" value="1&lt;&gt;"', Html::renderTagAttributes(['name' => 'test', 'empty' => null, 'value' => '1<>']));
         $this->assertEquals(' checked disabled', Html::renderTagAttributes(['checked' => true, 'disabled' => true, 'hidden' => false]));
         $this->assertEquals(' class="first second"', Html::renderTagAttributes(['class' => ['first', 'second']]));
+        $this->assertEquals(' class="first second"', Html::renderTagAttributes(['class' => ['first', null, 'second', '']]));
         Html::$normalizeClassAttribute = true;
         $this->assertEquals(' class="first second"', Html::renderTagAttributes(['class' => ['first second', 'first']]));
         $this->assertEquals('', Html::renderTagAttributes(['class' => []]));
diff --git a/tests/framework/helpers/JsonTest.php b/tests/framework/helpers/JsonTest.php
index b2bcf0b86a3..f8150c764d8 100644
--- a/tests/framework/helpers/JsonTest.php
+++ b/tests/framework/helpers/JsonTest.php
@@ -95,6 +95,19 @@ public function testEncode()
         $data = new JsonModel();
         $data->data = (object) null;
         $this->assertSame('{}', Json::encode($data));
+
+        // Generator (Only supported since PHP 5.5)
+        if (PHP_VERSION_ID >= 50500) {
+            $data = eval(<<<'PHP'
+                return function () {
+                    foreach (['a' => 1, 'b' => 2] as $name => $value) {
+                        yield $name => $value;
+                    }
+                };
+PHP
+            );
+            $this->assertSame('{"a":1,"b":2}', Json::encode($data()));
+        }
     }
 
     public function testHtmlEncode()
diff --git a/tests/framework/helpers/MimeTest.php b/tests/framework/helpers/MimeTest.php
deleted file mode 100644
index 0d4aa3792b2..00000000000
--- a/tests/framework/helpers/MimeTest.php
+++ /dev/null
@@ -1,1038 +0,0 @@
-<?php
-/**
- * @link https://www.yiiframework.com/
- * @copyright Copyright (c) 2008 Yii Software LLC
- * @license https://www.yiiframework.com/license/
- */
-
-namespace yiiunit\framework\helpers;
-
-use yiiunit\TestCase;
-
-/**
- * @group helpers
- */
-class MimeTest extends TestCase
-{
-    public function testMimeAliases()
-    {
-        $this->assertSame(
-            [
-                'text/rtf' => 'application/rtf',
-                'text/xml' => 'application/xml',
-                'image/svg' => 'image/svg+xml',
-                'image/x-bmp' => 'image/bmp',
-                'image/x-bitmap' => 'image/bmp',
-                'image/x-xbitmap' => 'image/bmp',
-                'image/x-win-bitmap' => 'image/bmp',
-                'image/x-windows-bmp' => 'image/bmp',
-                'image/ms-bmp' => 'image/bmp',
-                'image/x-ms-bmp' => 'image/bmp',
-                'application/bmp' => 'image/bmp',
-                'application/x-bmp' => 'image/bmp',
-                'application/x-win-bitmap' => 'image/bmp',
-            ],
-            require __DIR__ . '/../../../framework/helpers/mimeAliases.php'
-        );
-    }
-
-    public function testMimeTypes()
-    {
-        $coreMimeTypes = [
-                '3dml' => 'text/vnd.in3d.3dml',
-                '3ds' => 'image/x-3ds',
-                '3g2' => 'video/3gpp2',
-                '3gp' => 'video/3gpp',
-                '7z' => 'application/x-7z-compressed',
-                'aab' => 'application/x-authorware-bin',
-                'aac' => 'audio/x-aac',
-                'aam' => 'application/x-authorware-map',
-                'aas' => 'application/x-authorware-seg',
-                'abw' => 'application/x-abiword',
-                'ac' => 'application/pkix-attr-cert',
-                'acc' => 'application/vnd.americandynamics.acc',
-                'ace' => 'application/x-ace-compressed',
-                'acu' => 'application/vnd.acucobol',
-                'acutc' => 'application/vnd.acucorp',
-                'adp' => 'audio/adpcm',
-                'aep' => 'application/vnd.audiograph',
-                'afm' => 'application/x-font-type1',
-                'afp' => 'application/vnd.ibm.modcap',
-                'ahead' => 'application/vnd.ahead.space',
-                'ai' => 'application/postscript',
-                'aif' => 'audio/x-aiff',
-                'aifc' => 'audio/x-aiff',
-                'aiff' => 'audio/x-aiff',
-                'air' => 'application/vnd.adobe.air-application-installer-package+zip',
-                'ait' => 'application/vnd.dvb.ait',
-                'ami' => 'application/vnd.amiga.ami',
-                'apk' => 'application/vnd.android.package-archive',
-                'appcache' => 'text/cache-manifest',
-                'application' => 'application/x-ms-application',
-                'apr' => 'application/vnd.lotus-approach',
-                'arc' => 'application/x-freearc',
-                'asc' => 'application/pgp-signature',
-                'asf' => 'video/x-ms-asf',
-                'asm' => 'text/x-asm',
-                'aso' => 'application/vnd.accpac.simply.aso',
-                'asx' => 'video/x-ms-asf',
-                'atc' => 'application/vnd.acucorp',
-                'atom' => 'application/atom+xml',
-                'atomcat' => 'application/atomcat+xml',
-                'atomsvc' => 'application/atomsvc+xml',
-                'atx' => 'application/vnd.antix.game-component',
-                'au' => 'audio/basic',
-                'avi' => 'video/x-msvideo',
-                'aw' => 'application/applixware',
-                'azf' => 'application/vnd.airzip.filesecure.azf',
-                'azs' => 'application/vnd.airzip.filesecure.azs',
-                'azw' => 'application/vnd.amazon.ebook',
-                'bat' => 'application/x-msdownload',
-                'bcpio' => 'application/x-bcpio',
-                'bdf' => 'application/x-font-bdf',
-                'bdm' => 'application/vnd.syncml.dm+wbxml',
-                'bed' => 'application/vnd.realvnc.bed',
-                'bh2' => 'application/vnd.fujitsu.oasysprs',
-                'bin' => 'application/octet-stream',
-                'blb' => 'application/x-blorb',
-                'blorb' => 'application/x-blorb',
-                'bmi' => 'application/vnd.bmi',
-                'bmp' => 'image/bmp',
-                'book' => 'application/vnd.framemaker',
-                'box' => 'application/vnd.previewsystems.box',
-                'boz' => 'application/x-bzip2',
-                'bpk' => 'application/octet-stream',
-                'btif' => 'image/prs.btif',
-                'bz' => 'application/x-bzip',
-                'bz2' => 'application/x-bzip2',
-                'c' => 'text/x-c',
-                'c11amc' => 'application/vnd.cluetrust.cartomobile-config',
-                'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
-                'c4d' => 'application/vnd.clonk.c4group',
-                'c4f' => 'application/vnd.clonk.c4group',
-                'c4g' => 'application/vnd.clonk.c4group',
-                'c4p' => 'application/vnd.clonk.c4group',
-                'c4u' => 'application/vnd.clonk.c4group',
-                'cab' => 'application/vnd.ms-cab-compressed',
-                'caf' => 'audio/x-caf',
-                'cap' => 'application/vnd.tcpdump.pcap',
-                'car' => 'application/vnd.curl.car',
-                'cat' => 'application/vnd.ms-pki.seccat',
-                'cb7' => 'application/x-cbr',
-                'cba' => 'application/x-cbr',
-                'cbr' => 'application/x-cbr',
-                'cbt' => 'application/x-cbr',
-                'cbz' => 'application/x-cbr',
-                'cc' => 'text/x-c',
-                'cct' => 'application/x-director',
-                'ccxml' => 'application/ccxml+xml',
-                'cdbcmsg' => 'application/vnd.contact.cmsg',
-                'cdf' => 'application/x-netcdf',
-                'cdkey' => 'application/vnd.mediastation.cdkey',
-                'cdmia' => 'application/cdmi-capability',
-                'cdmic' => 'application/cdmi-container',
-                'cdmid' => 'application/cdmi-domain',
-                'cdmio' => 'application/cdmi-object',
-                'cdmiq' => 'application/cdmi-queue',
-                'cdx' => 'chemical/x-cdx',
-                'cdxml' => 'application/vnd.chemdraw+xml',
-                'cdy' => 'application/vnd.cinderella',
-                'cer' => 'application/pkix-cert',
-                'cfs' => 'application/x-cfs-compressed',
-                'cgm' => 'image/cgm',
-                'chat' => 'application/x-chat',
-                'chm' => 'application/vnd.ms-htmlhelp',
-                'chrt' => 'application/vnd.kde.kchart',
-                'cif' => 'chemical/x-cif',
-                'cii' => 'application/vnd.anser-web-certificate-issue-initiation',
-                'cil' => 'application/vnd.ms-artgalry',
-                'cla' => 'application/vnd.claymore',
-                'class' => 'application/java-vm',
-                'clkk' => 'application/vnd.crick.clicker.keyboard',
-                'clkp' => 'application/vnd.crick.clicker.palette',
-                'clkt' => 'application/vnd.crick.clicker.template',
-                'clkw' => 'application/vnd.crick.clicker.wordbank',
-                'clkx' => 'application/vnd.crick.clicker',
-                'clp' => 'application/x-msclip',
-                'cmc' => 'application/vnd.cosmocaller',
-                'cmdf' => 'chemical/x-cmdf',
-                'cml' => 'chemical/x-cml',
-                'cmp' => 'application/vnd.yellowriver-custom-menu',
-                'cmx' => 'image/x-cmx',
-                'cod' => 'application/vnd.rim.cod',
-                'com' => 'application/x-msdownload',
-                'conf' => 'text/plain',
-                'cpio' => 'application/x-cpio',
-                'cpp' => 'text/x-c',
-                'cpt' => 'application/mac-compactpro',
-                'crd' => 'application/x-mscardfile',
-                'crl' => 'application/pkix-crl',
-                'crt' => 'application/x-x509-ca-cert',
-                'cryptonote' => 'application/vnd.rig.cryptonote',
-                'csh' => 'application/x-csh',
-                'csml' => 'chemical/x-csml',
-                'csp' => 'application/vnd.commonspace',
-                'css' => 'text/css',
-                'cst' => 'application/x-director',
-                'csv' => 'text/csv',
-                'cu' => 'application/cu-seeme',
-                'curl' => 'text/vnd.curl',
-                'cww' => 'application/prs.cww',
-                'cxt' => 'application/x-director',
-                'cxx' => 'text/x-c',
-                'dae' => 'model/vnd.collada+xml',
-                'daf' => 'application/vnd.mobius.daf',
-                'dart' => 'application/vnd.dart',
-                'dataless' => 'application/vnd.fdsn.seed',
-                'davmount' => 'application/davmount+xml',
-                'dbk' => 'application/docbook+xml',
-                'dcr' => 'application/x-director',
-                'dcurl' => 'text/vnd.curl.dcurl',
-                'dd2' => 'application/vnd.oma.dd2+xml',
-                'ddd' => 'application/vnd.fujixerox.ddd',
-                'deb' => 'application/x-debian-package',
-                'def' => 'text/plain',
-                'deploy' => 'application/octet-stream',
-                'der' => 'application/x-x509-ca-cert',
-                'dfac' => 'application/vnd.dreamfactory',
-                'dgc' => 'application/x-dgc-compressed',
-                'dic' => 'text/x-c',
-                'dir' => 'application/x-director',
-                'dis' => 'application/vnd.mobius.dis',
-                'dist' => 'application/octet-stream',
-                'distz' => 'application/octet-stream',
-                'djv' => 'image/vnd.djvu',
-                'djvu' => 'image/vnd.djvu',
-                'dll' => 'application/x-msdownload',
-                'dmg' => 'application/x-apple-diskimage',
-                'dmp' => 'application/vnd.tcpdump.pcap',
-                'dms' => 'application/octet-stream',
-                'dna' => 'application/vnd.dna',
-                'doc' => 'application/msword',
-                'docm' => 'application/vnd.ms-word.document.macroenabled.12',
-                'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
-                'dot' => 'application/msword',
-                'dotm' => 'application/vnd.ms-word.template.macroenabled.12',
-                'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
-                'dp' => 'application/vnd.osgi.dp',
-                'dpg' => 'application/vnd.dpgraph',
-                'dra' => 'audio/vnd.dra',
-                'dsc' => 'text/prs.lines.tag',
-                'dssc' => 'application/dssc+der',
-                'dtb' => 'application/x-dtbook+xml',
-                'dtd' => 'application/xml-dtd',
-                'dts' => 'audio/vnd.dts',
-                'dtshd' => 'audio/vnd.dts.hd',
-                'dump' => 'application/octet-stream',
-                'dvb' => 'video/vnd.dvb.file',
-                'dvi' => 'application/x-dvi',
-                'dwf' => 'model/vnd.dwf',
-                'dwg' => 'image/vnd.dwg',
-                'dxf' => 'image/vnd.dxf',
-                'dxp' => 'application/vnd.spotfire.dxp',
-                'dxr' => 'application/x-director',
-                'ecelp4800' => 'audio/vnd.nuera.ecelp4800',
-                'ecelp7470' => 'audio/vnd.nuera.ecelp7470',
-                'ecelp9600' => 'audio/vnd.nuera.ecelp9600',
-                'ecma' => 'application/ecmascript',
-                'edm' => 'application/vnd.novadigm.edm',
-                'edx' => 'application/vnd.novadigm.edx',
-                'efif' => 'application/vnd.picsel',
-                'ei6' => 'application/vnd.pg.osasli',
-                'elc' => 'application/octet-stream',
-                'emf' => 'application/x-msmetafile',
-                'eml' => 'message/rfc822',
-                'emma' => 'application/emma+xml',
-                'emz' => 'application/x-msmetafile',
-                'eol' => 'audio/vnd.digital-winds',
-                'eot' => 'application/vnd.ms-fontobject',
-                'eps' => 'application/postscript',
-                'epub' => 'application/epub+zip',
-                'es3' => 'application/vnd.eszigno3+xml',
-                'esa' => 'application/vnd.osgi.subsystem',
-                'esf' => 'application/vnd.epson.esf',
-                'et3' => 'application/vnd.eszigno3+xml',
-                'etx' => 'text/x-setext',
-                'eva' => 'application/x-eva',
-                'evy' => 'application/x-envoy',
-                'exe' => 'application/x-msdownload',
-                'exi' => 'application/exi',
-                'ext' => 'application/vnd.novadigm.ext',
-                'ez' => 'application/andrew-inset',
-                'ez2' => 'application/vnd.ezpix-album',
-                'ez3' => 'application/vnd.ezpix-package',
-                'f' => 'text/x-fortran',
-                'f4v' => 'video/x-f4v',
-                'f77' => 'text/x-fortran',
-                'f90' => 'text/x-fortran',
-                'fbs' => 'image/vnd.fastbidsheet',
-                'fcdt' => 'application/vnd.adobe.formscentral.fcdt',
-                'fcs' => 'application/vnd.isac.fcs',
-                'fdf' => 'application/vnd.fdf',
-                'fe_launch' => 'application/vnd.denovo.fcselayout-link',
-                'fg5' => 'application/vnd.fujitsu.oasysgp',
-                'fgd' => 'application/x-director',
-                'fh' => 'image/x-freehand',
-                'fh4' => 'image/x-freehand',
-                'fh5' => 'image/x-freehand',
-                'fh7' => 'image/x-freehand',
-                'fhc' => 'image/x-freehand',
-                'fig' => 'application/x-xfig',
-                'flac' => 'audio/x-flac',
-                'fli' => 'video/x-fli',
-                'flo' => 'application/vnd.micrografx.flo',
-                'flv' => 'video/x-flv',
-                'flw' => 'application/vnd.kde.kivio',
-                'flx' => 'text/vnd.fmi.flexstor',
-                'fly' => 'text/vnd.fly',
-                'fm' => 'application/vnd.framemaker',
-                'fnc' => 'application/vnd.frogans.fnc',
-                'for' => 'text/x-fortran',
-                'fpx' => 'image/vnd.fpx',
-                'frame' => 'application/vnd.framemaker',
-                'fsc' => 'application/vnd.fsc.weblaunch',
-                'fst' => 'image/vnd.fst',
-                'ftc' => 'application/vnd.fluxtime.clip',
-                'fti' => 'application/vnd.anser-web-funds-transfer-initiation',
-                'fvt' => 'video/vnd.fvt',
-                'fxp' => 'application/vnd.adobe.fxp',
-                'fxpl' => 'application/vnd.adobe.fxp',
-                'fzs' => 'application/vnd.fuzzysheet',
-                'g2w' => 'application/vnd.geoplan',
-                'g3' => 'image/g3fax',
-                'g3w' => 'application/vnd.geospace',
-                'gac' => 'application/vnd.groove-account',
-                'gam' => 'application/x-tads',
-                'gbr' => 'application/rpki-ghostbusters',
-                'gca' => 'application/x-gca-compressed',
-                'gdl' => 'model/vnd.gdl',
-                'geo' => 'application/vnd.dynageo',
-                'gex' => 'application/vnd.geometry-explorer',
-                'ggb' => 'application/vnd.geogebra.file',
-                'ggt' => 'application/vnd.geogebra.tool',
-                'ghf' => 'application/vnd.groove-help',
-                'gif' => 'image/gif',
-                'gim' => 'application/vnd.groove-identity-message',
-                'gml' => 'application/gml+xml',
-                'gmx' => 'application/vnd.gmx',
-                'gnumeric' => 'application/x-gnumeric',
-                'gph' => 'application/vnd.flographit',
-                'gpx' => 'application/gpx+xml',
-                'gqf' => 'application/vnd.grafeq',
-                'gqs' => 'application/vnd.grafeq',
-                'gram' => 'application/srgs',
-                'gramps' => 'application/x-gramps-xml',
-                'gre' => 'application/vnd.geometry-explorer',
-                'grv' => 'application/vnd.groove-injector',
-                'grxml' => 'application/srgs+xml',
-                'gsf' => 'application/x-font-ghostscript',
-                'gtar' => 'application/x-gtar',
-                'gtm' => 'application/vnd.groove-tool-message',
-                'gtw' => 'model/vnd.gtw',
-                'gv' => 'text/vnd.graphviz',
-                'gxf' => 'application/gxf',
-                'gxt' => 'application/vnd.geonext',
-                'h' => 'text/x-c',
-                'h261' => 'video/h261',
-                'h263' => 'video/h263',
-                'h264' => 'video/h264',
-                'hal' => 'application/vnd.hal+xml',
-                'hbci' => 'application/vnd.hbci',
-                'hdf' => 'application/x-hdf',
-                'hh' => 'text/x-c',
-                'hlp' => 'application/winhlp',
-                'hpgl' => 'application/vnd.hp-hpgl',
-                'hpid' => 'application/vnd.hp-hpid',
-                'hps' => 'application/vnd.hp-hps',
-                'hqx' => 'application/mac-binhex40',
-                'htke' => 'application/vnd.kenameaapp',
-                'htm' => 'text/html',
-                'html' => 'text/html',
-                'hvd' => 'application/vnd.yamaha.hv-dic',
-                'hvp' => 'application/vnd.yamaha.hv-voice',
-                'hvs' => 'application/vnd.yamaha.hv-script',
-                'i2g' => 'application/vnd.intergeo',
-                'icc' => 'application/vnd.iccprofile',
-                'ice' => 'x-conference/x-cooltalk',
-                'icm' => 'application/vnd.iccprofile',
-                'ico' => 'image/x-icon',
-                'ics' => 'text/calendar',
-                'ief' => 'image/ief',
-                'ifb' => 'text/calendar',
-                'ifm' => 'application/vnd.shana.informed.formdata',
-                'iges' => 'model/iges',
-                'igl' => 'application/vnd.igloader',
-                'igm' => 'application/vnd.insors.igm',
-                'igs' => 'model/iges',
-                'igx' => 'application/vnd.micrografx.igx',
-                'iif' => 'application/vnd.shana.informed.interchange',
-                'imp' => 'application/vnd.accpac.simply.imp',
-                'ims' => 'application/vnd.ms-ims',
-                'in' => 'text/plain',
-                'ink' => 'application/inkml+xml',
-                'inkml' => 'application/inkml+xml',
-                'install' => 'application/x-install-instructions',
-                'iota' => 'application/vnd.astraea-software.iota',
-                'ipfix' => 'application/ipfix',
-                'ipk' => 'application/vnd.shana.informed.package',
-                'irm' => 'application/vnd.ibm.rights-management',
-                'irp' => 'application/vnd.irepository.package+xml',
-                'iso' => 'application/x-iso9660-image',
-                'itp' => 'application/vnd.shana.informed.formtemplate',
-                'ivp' => 'application/vnd.immervision-ivp',
-                'ivu' => 'application/vnd.immervision-ivu',
-                'jad' => 'text/vnd.sun.j2me.app-descriptor',
-                'jam' => 'application/vnd.jam',
-                'jar' => 'application/java-archive',
-                'java' => 'text/x-java-source',
-                'jfif' => 'image/jpeg',
-                'jisp' => 'application/vnd.jisp',
-                'jlt' => 'application/vnd.hp-jlyt',
-                'jnlp' => 'application/x-java-jnlp-file',
-                'joda' => 'application/vnd.joost.joda-archive',
-                'jpe' => 'image/jpeg',
-                'jpeg' => 'image/jpeg',
-                'jpg' => 'image/jpeg',
-                'jpgm' => 'video/jpm',
-                'jpgv' => 'video/jpeg',
-                'jpm' => 'video/jpm',
-                'js' => 'application/javascript',
-                'json' => 'application/json',
-                'jsonml' => 'application/jsonml+json',
-                'kar' => 'audio/midi',
-                'karbon' => 'application/vnd.kde.karbon',
-                'kfo' => 'application/vnd.kde.kformula',
-                'kia' => 'application/vnd.kidspiration',
-                'kml' => 'application/vnd.google-earth.kml+xml',
-                'kmz' => 'application/vnd.google-earth.kmz',
-                'kne' => 'application/vnd.kinar',
-                'knp' => 'application/vnd.kinar',
-                'kon' => 'application/vnd.kde.kontour',
-                'kpr' => 'application/vnd.kde.kpresenter',
-                'kpt' => 'application/vnd.kde.kpresenter',
-                'kpxx' => 'application/vnd.ds-keypoint',
-                'ksp' => 'application/vnd.kde.kspread',
-                'ktr' => 'application/vnd.kahootz',
-                'ktx' => 'image/ktx',
-                'ktz' => 'application/vnd.kahootz',
-                'kwd' => 'application/vnd.kde.kword',
-                'kwt' => 'application/vnd.kde.kword',
-                'lasxml' => 'application/vnd.las.las+xml',
-                'latex' => 'application/x-latex',
-                'lbd' => 'application/vnd.llamagraphics.life-balance.desktop',
-                'lbe' => 'application/vnd.llamagraphics.life-balance.exchange+xml',
-                'les' => 'application/vnd.hhe.lesson-player',
-                'lha' => 'application/x-lzh-compressed',
-                'link66' => 'application/vnd.route66.link66+xml',
-                'list' => 'text/plain',
-                'list3820' => 'application/vnd.ibm.modcap',
-                'listafp' => 'application/vnd.ibm.modcap',
-                'lnk' => 'application/x-ms-shortcut',
-                'log' => 'text/plain',
-                'lostxml' => 'application/lost+xml',
-                'lrf' => 'application/octet-stream',
-                0 => 'application/vnd.lotus-1-2-3',
-                'lrm' => 'application/vnd.ms-lrm',
-                'ltf' => 'application/vnd.frogans.ltf',
-                'lvp' => 'audio/vnd.lucent.voice',
-                'lwp' => 'application/vnd.lotus-wordpro',
-                'lzh' => 'application/x-lzh-compressed',
-                'm13' => 'application/x-msmediaview',
-                'm14' => 'application/x-msmediaview',
-                'm1v' => 'video/mpeg',
-                'm21' => 'application/mp21',
-                'm2a' => 'audio/mpeg',
-                'm2v' => 'video/mpeg',
-                'm3a' => 'audio/mpeg',
-                'm3u' => 'audio/x-mpegurl',
-                'm3u8' => 'application/vnd.apple.mpegurl',
-                'm4a' => 'audio/mp4',
-                'm4u' => 'video/vnd.mpegurl',
-                'm4v' => 'video/x-m4v',
-                'ma' => 'application/mathematica',
-                'mads' => 'application/mads+xml',
-                'mag' => 'application/vnd.ecowin.chart',
-                'maker' => 'application/vnd.framemaker',
-                'man' => 'text/troff',
-                'mar' => 'application/octet-stream',
-                'mathml' => 'application/mathml+xml',
-                'mb' => 'application/mathematica',
-                'mbk' => 'application/vnd.mobius.mbk',
-                'mbox' => 'application/mbox',
-                'mc1' => 'application/vnd.medcalcdata',
-                'mcd' => 'application/vnd.mcd',
-                'mcurl' => 'text/vnd.curl.mcurl',
-                'mdb' => 'application/x-msaccess',
-                'mdi' => 'image/vnd.ms-modi',
-                'me' => 'text/troff',
-                'mesh' => 'model/mesh',
-                'meta4' => 'application/metalink4+xml',
-                'metalink' => 'application/metalink+xml',
-                'mets' => 'application/mets+xml',
-                'mfm' => 'application/vnd.mfmp',
-                'mft' => 'application/rpki-manifest',
-                'mgp' => 'application/vnd.osgeo.mapguide.package',
-                'mgz' => 'application/vnd.proteus.magazine',
-                'mid' => 'audio/midi',
-                'midi' => 'audio/midi',
-                'mie' => 'application/x-mie',
-                'mif' => 'application/vnd.mif',
-                'mime' => 'message/rfc822',
-                'mj2' => 'video/mj2',
-                'mjp2' => 'video/mj2',
-                'mjs' => 'text/javascript',
-                'mk3d' => 'video/x-matroska',
-                'mka' => 'audio/x-matroska',
-                'mks' => 'video/x-matroska',
-                'mkv' => 'video/x-matroska',
-                'mlp' => 'application/vnd.dolby.mlp',
-                'mmd' => 'application/vnd.chipnuts.karaoke-mmd',
-                'mmf' => 'application/vnd.smaf',
-                'mmr' => 'image/vnd.fujixerox.edmics-mmr',
-                'mng' => 'video/x-mng',
-                'mny' => 'application/x-msmoney',
-                'mobi' => 'application/x-mobipocket-ebook',
-                'mods' => 'application/mods+xml',
-                'mov' => 'video/quicktime',
-                'movie' => 'video/x-sgi-movie',
-                'mp2' => 'audio/mpeg',
-                'mp21' => 'application/mp21',
-                'mp2a' => 'audio/mpeg',
-                'mp3' => 'audio/mpeg',
-                'mp4' => 'video/mp4',
-                'mp4a' => 'audio/mp4',
-                'mp4s' => 'application/mp4',
-                'mp4v' => 'video/mp4',
-                'mpc' => 'application/vnd.mophun.certificate',
-                'mpe' => 'video/mpeg',
-                'mpeg' => 'video/mpeg',
-                'mpg' => 'video/mpeg',
-                'mpg4' => 'video/mp4',
-                'mpga' => 'audio/mpeg',
-                'mpkg' => 'application/vnd.apple.installer+xml',
-                'mpm' => 'application/vnd.blueice.multipass',
-                'mpn' => 'application/vnd.mophun.application',
-                'mpp' => 'application/vnd.ms-project',
-                'mpt' => 'application/vnd.ms-project',
-                'mpy' => 'application/vnd.ibm.minipay',
-                'mqy' => 'application/vnd.mobius.mqy',
-                'mrc' => 'application/marc',
-                'mrcx' => 'application/marcxml+xml',
-                'ms' => 'text/troff',
-                'mscml' => 'application/mediaservercontrol+xml',
-                'mseed' => 'application/vnd.fdsn.mseed',
-                'mseq' => 'application/vnd.mseq',
-                'msf' => 'application/vnd.epson.msf',
-                'msh' => 'model/mesh',
-                'msi' => 'application/x-msdownload',
-                'msl' => 'application/vnd.mobius.msl',
-                'msty' => 'application/vnd.muvee.style',
-                'mts' => 'model/vnd.mts',
-                'mus' => 'application/vnd.musician',
-                'musicxml' => 'application/vnd.recordare.musicxml+xml',
-                'mvb' => 'application/x-msmediaview',
-                'mwf' => 'application/vnd.mfer',
-                'mxf' => 'application/mxf',
-                'mxl' => 'application/vnd.recordare.musicxml',
-                'mxml' => 'application/xv+xml',
-                'mxs' => 'application/vnd.triscape.mxs',
-                'mxu' => 'video/vnd.mpegurl',
-                'n-gage' => 'application/vnd.nokia.n-gage.symbian.install',
-                'n3' => 'text/n3',
-                'nb' => 'application/mathematica',
-                'nbp' => 'application/vnd.wolfram.player',
-                'nc' => 'application/x-netcdf',
-                'ncx' => 'application/x-dtbncx+xml',
-                'nfo' => 'text/x-nfo',
-                'ngdat' => 'application/vnd.nokia.n-gage.data',
-                'nitf' => 'application/vnd.nitf',
-                'nlu' => 'application/vnd.neurolanguage.nlu',
-                'nml' => 'application/vnd.enliven',
-                'nnd' => 'application/vnd.noblenet-directory',
-                'nns' => 'application/vnd.noblenet-sealer',
-                'nnw' => 'application/vnd.noblenet-web',
-                'npx' => 'image/vnd.net-fpx',
-                'nsc' => 'application/x-conference',
-                'nsf' => 'application/vnd.lotus-notes',
-                'ntf' => 'application/vnd.nitf',
-                'nzb' => 'application/x-nzb',
-                'oa2' => 'application/vnd.fujitsu.oasys2',
-                'oa3' => 'application/vnd.fujitsu.oasys3',
-                'oas' => 'application/vnd.fujitsu.oasys',
-                'obd' => 'application/x-msbinder',
-                'obj' => 'application/x-tgif',
-                'oda' => 'application/oda',
-                'odb' => 'application/vnd.oasis.opendocument.database',
-                'odc' => 'application/vnd.oasis.opendocument.chart',
-                'odf' => 'application/vnd.oasis.opendocument.formula',
-                'odft' => 'application/vnd.oasis.opendocument.formula-template',
-                'odg' => 'application/vnd.oasis.opendocument.graphics',
-                'odi' => 'application/vnd.oasis.opendocument.image',
-                'odm' => 'application/vnd.oasis.opendocument.text-master',
-                'odp' => 'application/vnd.oasis.opendocument.presentation',
-                'ods' => 'application/vnd.oasis.opendocument.spreadsheet',
-                'odt' => 'application/vnd.oasis.opendocument.text',
-                'oga' => 'audio/ogg',
-                'ogg' => 'audio/ogg',
-                'ogv' => 'video/ogg',
-                'ogx' => 'application/ogg',
-                'omdoc' => 'application/omdoc+xml',
-                'onepkg' => 'application/onenote',
-                'onetmp' => 'application/onenote',
-                'onetoc' => 'application/onenote',
-                'onetoc2' => 'application/onenote',
-                'opf' => 'application/oebps-package+xml',
-                'opml' => 'text/x-opml',
-                'oprc' => 'application/vnd.palm',
-                'opus' => 'audio/ogg',
-                'org' => 'application/vnd.lotus-organizer',
-                'osf' => 'application/vnd.yamaha.openscoreformat',
-                'osfpvg' => 'application/vnd.yamaha.openscoreformat.osfpvg+xml',
-                'otc' => 'application/vnd.oasis.opendocument.chart-template',
-                'otf' => 'font/otf',
-                'otg' => 'application/vnd.oasis.opendocument.graphics-template',
-                'oth' => 'application/vnd.oasis.opendocument.text-web',
-                'oti' => 'application/vnd.oasis.opendocument.image-template',
-                'otp' => 'application/vnd.oasis.opendocument.presentation-template',
-                'ots' => 'application/vnd.oasis.opendocument.spreadsheet-template',
-                'ott' => 'application/vnd.oasis.opendocument.text-template',
-                'oxps' => 'application/oxps',
-                'oxt' => 'application/vnd.openofficeorg.extension',
-                'p' => 'text/x-pascal',
-                'p10' => 'application/pkcs10',
-                'p12' => 'application/x-pkcs12',
-                'p7b' => 'application/x-pkcs7-certificates',
-                'p7c' => 'application/pkcs7-mime',
-                'p7m' => 'application/pkcs7-mime',
-                'p7r' => 'application/x-pkcs7-certreqresp',
-                'p7s' => 'application/pkcs7-signature',
-                'p8' => 'application/pkcs8',
-                'pas' => 'text/x-pascal',
-                'paw' => 'application/vnd.pawaafile',
-                'pbd' => 'application/vnd.powerbuilder6',
-                'pbm' => 'image/x-portable-bitmap',
-                'pcap' => 'application/vnd.tcpdump.pcap',
-                'pcf' => 'application/x-font-pcf',
-                'pcl' => 'application/vnd.hp-pcl',
-                'pclxl' => 'application/vnd.hp-pclxl',
-                'pct' => 'image/x-pict',
-                'pcurl' => 'application/vnd.curl.pcurl',
-                'pcx' => 'image/x-pcx',
-                'pdb' => 'application/vnd.palm',
-                'pdf' => 'application/pdf',
-                'pfa' => 'application/x-font-type1',
-                'pfb' => 'application/x-font-type1',
-                'pfm' => 'application/x-font-type1',
-                'pfr' => 'application/font-tdpfr',
-                'pfx' => 'application/x-pkcs12',
-                'pgm' => 'image/x-portable-graymap',
-                'pgn' => 'application/x-chess-pgn',
-                'pgp' => 'application/pgp-encrypted',
-                'pic' => 'image/x-pict',
-                'pkg' => 'application/octet-stream',
-                'pki' => 'application/pkixcmp',
-                'pkipath' => 'application/pkix-pkipath',
-                'plb' => 'application/vnd.3gpp.pic-bw-large',
-                'plc' => 'application/vnd.mobius.plc',
-                'plf' => 'application/vnd.pocketlearn',
-                'pls' => 'application/pls+xml',
-                'pml' => 'application/vnd.ctc-posml',
-                'png' => 'image/png',
-                'pnm' => 'image/x-portable-anymap',
-                'portpkg' => 'application/vnd.macports.portpkg',
-                'pot' => 'application/vnd.ms-powerpoint',
-                'potm' => 'application/vnd.ms-powerpoint.template.macroenabled.12',
-                'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',
-                'ppam' => 'application/vnd.ms-powerpoint.addin.macroenabled.12',
-                'ppd' => 'application/vnd.cups-ppd',
-                'ppm' => 'image/x-portable-pixmap',
-                'pps' => 'application/vnd.ms-powerpoint',
-                'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroenabled.12',
-                'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
-                'ppt' => 'application/vnd.ms-powerpoint',
-                'pptm' => 'application/vnd.ms-powerpoint.presentation.macroenabled.12',
-                'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
-                'pqa' => 'application/vnd.palm',
-                'prc' => 'application/x-mobipocket-ebook',
-                'pre' => 'application/vnd.lotus-freelance',
-                'prf' => 'application/pics-rules',
-                'ps' => 'application/postscript',
-                'psb' => 'application/vnd.3gpp.pic-bw-small',
-                'psd' => 'image/vnd.adobe.photoshop',
-                'psf' => 'application/x-font-linux-psf',
-                'pskcxml' => 'application/pskc+xml',
-                'ptid' => 'application/vnd.pvi.ptid1',
-                'pub' => 'application/x-mspublisher',
-                'pvb' => 'application/vnd.3gpp.pic-bw-var',
-                'pwn' => 'application/vnd.3m.post-it-notes',
-                'pya' => 'audio/vnd.ms-playready.media.pya',
-                'pyv' => 'video/vnd.ms-playready.media.pyv',
-                'qam' => 'application/vnd.epson.quickanime',
-                'qbo' => 'application/vnd.intu.qbo',
-                'qfx' => 'application/vnd.intu.qfx',
-                'qps' => 'application/vnd.publishare-delta-tree',
-                'qt' => 'video/quicktime',
-                'qwd' => 'application/vnd.quark.quarkxpress',
-                'qwt' => 'application/vnd.quark.quarkxpress',
-                'qxb' => 'application/vnd.quark.quarkxpress',
-                'qxd' => 'application/vnd.quark.quarkxpress',
-                'qxl' => 'application/vnd.quark.quarkxpress',
-                'qxt' => 'application/vnd.quark.quarkxpress',
-                'ra' => 'audio/x-pn-realaudio',
-                'ram' => 'audio/x-pn-realaudio',
-                'rar' => 'application/x-rar-compressed',
-                'ras' => 'image/x-cmu-raster',
-                'rcprofile' => 'application/vnd.ipunplugged.rcprofile',
-                'rdf' => 'application/rdf+xml',
-                'rdz' => 'application/vnd.data-vision.rdz',
-                'rep' => 'application/vnd.businessobjects',
-                'res' => 'application/x-dtbresource+xml',
-                'rgb' => 'image/x-rgb',
-                'rif' => 'application/reginfo+xml',
-                'rip' => 'audio/vnd.rip',
-                'ris' => 'application/x-research-info-systems',
-                'rl' => 'application/resource-lists+xml',
-                'rlc' => 'image/vnd.fujixerox.edmics-rlc',
-                'rld' => 'application/resource-lists-diff+xml',
-                'rm' => 'application/vnd.rn-realmedia',
-                'rmi' => 'audio/midi',
-                'rmp' => 'audio/x-pn-realaudio-plugin',
-                'rms' => 'application/vnd.jcp.javame.midlet-rms',
-                'rmvb' => 'application/vnd.rn-realmedia-vbr',
-                'rnc' => 'application/relax-ng-compact-syntax',
-                'roa' => 'application/rpki-roa',
-                'roff' => 'text/troff',
-                'rp9' => 'application/vnd.cloanto.rp9',
-                'rpss' => 'application/vnd.nokia.radio-presets',
-                'rpst' => 'application/vnd.nokia.radio-preset',
-                'rq' => 'application/sparql-query',
-                'rs' => 'application/rls-services+xml',
-                'rsd' => 'application/rsd+xml',
-                'rss' => 'application/rss+xml',
-                'rtf' => 'application/rtf',
-                'rtx' => 'text/richtext',
-                's' => 'text/x-asm',
-                's3m' => 'audio/s3m',
-                'saf' => 'application/vnd.yamaha.smaf-audio',
-                'sbml' => 'application/sbml+xml',
-                'sc' => 'application/vnd.ibm.secure-container',
-                'scd' => 'application/x-msschedule',
-                'scm' => 'application/vnd.lotus-screencam',
-                'scq' => 'application/scvp-cv-request',
-                'scs' => 'application/scvp-cv-response',
-                'scurl' => 'text/vnd.curl.scurl',
-                'sda' => 'application/vnd.stardivision.draw',
-                'sdc' => 'application/vnd.stardivision.calc',
-                'sdd' => 'application/vnd.stardivision.impress',
-                'sdkd' => 'application/vnd.solent.sdkm+xml',
-                'sdkm' => 'application/vnd.solent.sdkm+xml',
-                'sdp' => 'application/sdp',
-                'sdw' => 'application/vnd.stardivision.writer',
-                'see' => 'application/vnd.seemail',
-                'seed' => 'application/vnd.fdsn.seed',
-                'sema' => 'application/vnd.sema',
-                'semd' => 'application/vnd.semd',
-                'semf' => 'application/vnd.semf',
-                'ser' => 'application/java-serialized-object',
-                'setpay' => 'application/set-payment-initiation',
-                'setreg' => 'application/set-registration-initiation',
-                'sfd-hdstx' => 'application/vnd.hydrostatix.sof-data',
-                'sfs' => 'application/vnd.spotfire.sfs',
-                'sfv' => 'text/x-sfv',
-                'sgi' => 'image/sgi',
-                'sgl' => 'application/vnd.stardivision.writer-global',
-                'sgm' => 'text/sgml',
-                'sgml' => 'text/sgml',
-                'sh' => 'application/x-sh',
-                'shar' => 'application/x-shar',
-                'shf' => 'application/shf+xml',
-                'sid' => 'image/x-mrsid-image',
-                'sig' => 'application/pgp-signature',
-                'sil' => 'audio/silk',
-                'silo' => 'model/mesh',
-                'sis' => 'application/vnd.symbian.install',
-                'sisx' => 'application/vnd.symbian.install',
-                'sit' => 'application/x-stuffit',
-                'sitx' => 'application/x-stuffitx',
-                'skd' => 'application/vnd.koan',
-                'skm' => 'application/vnd.koan',
-                'skp' => 'application/vnd.koan',
-                'skt' => 'application/vnd.koan',
-                'sldm' => 'application/vnd.ms-powerpoint.slide.macroenabled.12',
-                'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',
-                'slt' => 'application/vnd.epson.salt',
-                'sm' => 'application/vnd.stepmania.stepchart',
-                'smf' => 'application/vnd.stardivision.math',
-                'smi' => 'application/smil+xml',
-                'smil' => 'application/smil+xml',
-                'smv' => 'video/x-smv',
-                'smzip' => 'application/vnd.stepmania.package',
-                'snd' => 'audio/basic',
-                'snf' => 'application/x-font-snf',
-                'so' => 'application/octet-stream',
-                'spc' => 'application/x-pkcs7-certificates',
-                'spf' => 'application/vnd.yamaha.smaf-phrase',
-                'spl' => 'application/x-futuresplash',
-                'spot' => 'text/vnd.in3d.spot',
-                'spp' => 'application/scvp-vp-response',
-                'spq' => 'application/scvp-vp-request',
-                'spx' => 'audio/ogg',
-                'sql' => 'application/x-sql',
-                'src' => 'application/x-wais-source',
-                'srt' => 'application/x-subrip',
-                'sru' => 'application/sru+xml',
-                'srx' => 'application/sparql-results+xml',
-                'ssdl' => 'application/ssdl+xml',
-                'sse' => 'application/vnd.kodak-descriptor',
-                'ssf' => 'application/vnd.epson.ssf',
-                'ssml' => 'application/ssml+xml',
-                'st' => 'application/vnd.sailingtracker.track',
-                'stc' => 'application/vnd.sun.xml.calc.template',
-                'std' => 'application/vnd.sun.xml.draw.template',
-                'stf' => 'application/vnd.wt.stf',
-                'sti' => 'application/vnd.sun.xml.impress.template',
-                'stk' => 'application/hyperstudio',
-                'stl' => 'application/vnd.ms-pki.stl',
-                'str' => 'application/vnd.pg.format',
-                'stw' => 'application/vnd.sun.xml.writer.template',
-                'sub' => 'text/vnd.dvb.subtitle',
-                'sus' => 'application/vnd.sus-calendar',
-                'susp' => 'application/vnd.sus-calendar',
-                'sv4cpio' => 'application/x-sv4cpio',
-                'sv4crc' => 'application/x-sv4crc',
-                'svc' => 'application/vnd.dvb.service',
-                'svd' => 'application/vnd.svd',
-                'svg' => 'image/svg+xml',
-                'svgz' => 'image/svg+xml',
-                'swa' => 'application/x-director',
-                'swf' => 'application/x-shockwave-flash',
-                'swi' => 'application/vnd.aristanetworks.swi',
-                'sxc' => 'application/vnd.sun.xml.calc',
-                'sxd' => 'application/vnd.sun.xml.draw',
-                'sxg' => 'application/vnd.sun.xml.writer.global',
-                'sxi' => 'application/vnd.sun.xml.impress',
-                'sxm' => 'application/vnd.sun.xml.math',
-                'sxw' => 'application/vnd.sun.xml.writer',
-                't' => 'text/troff',
-                't3' => 'application/x-t3vm-image',
-                'taglet' => 'application/vnd.mynfc',
-                'tao' => 'application/vnd.tao.intent-module-archive',
-                'tar' => 'application/x-tar',
-                'tcap' => 'application/vnd.3gpp2.tcap',
-                'tcl' => 'application/x-tcl',
-                'teacher' => 'application/vnd.smart.teacher',
-                'tei' => 'application/tei+xml',
-                'teicorpus' => 'application/tei+xml',
-                'tex' => 'application/x-tex',
-                'texi' => 'application/x-texinfo',
-                'texinfo' => 'application/x-texinfo',
-                'text' => 'text/plain',
-                'tfi' => 'application/thraud+xml',
-                'tfm' => 'application/x-tex-tfm',
-                'tga' => 'image/x-tga',
-                'thmx' => 'application/vnd.ms-officetheme',
-                'tif' => 'image/tiff',
-                'tiff' => 'image/tiff',
-                'tmo' => 'application/vnd.tmobile-livetv',
-                'torrent' => 'application/x-bittorrent',
-                'tpl' => 'application/vnd.groove-tool-template',
-                'tpt' => 'application/vnd.trid.tpt',
-                'tr' => 'text/troff',
-                'tra' => 'application/vnd.trueapp',
-                'trm' => 'application/x-msterminal',
-                'tsd' => 'application/timestamped-data',
-                'tsv' => 'text/tab-separated-values',
-                'ttc' => 'font/collection',
-                'ttf' => 'font/ttf',
-                'ttl' => 'text/turtle',
-                'twd' => 'application/vnd.simtech-mindmapper',
-                'twds' => 'application/vnd.simtech-mindmapper',
-                'txd' => 'application/vnd.genomatix.tuxedo',
-                'txf' => 'application/vnd.mobius.txf',
-                'txt' => 'text/plain',
-                'u32' => 'application/x-authorware-bin',
-                'udeb' => 'application/x-debian-package',
-                'ufd' => 'application/vnd.ufdl',
-                'ufdl' => 'application/vnd.ufdl',
-                'ulx' => 'application/x-glulx',
-                'umj' => 'application/vnd.umajin',
-                'unityweb' => 'application/vnd.unity',
-                'uoml' => 'application/vnd.uoml+xml',
-                'uri' => 'text/uri-list',
-                'uris' => 'text/uri-list',
-                'urls' => 'text/uri-list',
-                'ustar' => 'application/x-ustar',
-                'utz' => 'application/vnd.uiq.theme',
-                'uu' => 'text/x-uuencode',
-                'uva' => 'audio/vnd.dece.audio',
-                'uvd' => 'application/vnd.dece.data',
-                'uvf' => 'application/vnd.dece.data',
-                'uvg' => 'image/vnd.dece.graphic',
-                'uvh' => 'video/vnd.dece.hd',
-                'uvi' => 'image/vnd.dece.graphic',
-                'uvm' => 'video/vnd.dece.mobile',
-                'uvp' => 'video/vnd.dece.pd',
-                'uvs' => 'video/vnd.dece.sd',
-                'uvt' => 'application/vnd.dece.ttml+xml',
-                'uvu' => 'video/vnd.uvvu.mp4',
-                'uvv' => 'video/vnd.dece.video',
-                'uvva' => 'audio/vnd.dece.audio',
-                'uvvd' => 'application/vnd.dece.data',
-                'uvvf' => 'application/vnd.dece.data',
-                'uvvg' => 'image/vnd.dece.graphic',
-                'uvvh' => 'video/vnd.dece.hd',
-                'uvvi' => 'image/vnd.dece.graphic',
-                'uvvm' => 'video/vnd.dece.mobile',
-                'uvvp' => 'video/vnd.dece.pd',
-                'uvvs' => 'video/vnd.dece.sd',
-                'uvvt' => 'application/vnd.dece.ttml+xml',
-                'uvvu' => 'video/vnd.uvvu.mp4',
-                'uvvv' => 'video/vnd.dece.video',
-                'uvvx' => 'application/vnd.dece.unspecified',
-                'uvvz' => 'application/vnd.dece.zip',
-                'uvx' => 'application/vnd.dece.unspecified',
-                'uvz' => 'application/vnd.dece.zip',
-                'vcard' => 'text/vcard',
-                'vcd' => 'application/x-cdlink',
-                'vcf' => 'text/x-vcard',
-                'vcg' => 'application/vnd.groove-vcard',
-                'vcs' => 'text/x-vcalendar',
-                'vcx' => 'application/vnd.vcx',
-                'vis' => 'application/vnd.visionary',
-                'viv' => 'video/vnd.vivo',
-                'vob' => 'video/x-ms-vob',
-                'vor' => 'application/vnd.stardivision.writer',
-                'vox' => 'application/x-authorware-bin',
-                'vrml' => 'model/vrml',
-                'vsd' => 'application/vnd.visio',
-                'vsf' => 'application/vnd.vsf',
-                'vss' => 'application/vnd.visio',
-                'vst' => 'application/vnd.visio',
-                'vsw' => 'application/vnd.visio',
-                'vtu' => 'model/vnd.vtu',
-                'vxml' => 'application/voicexml+xml',
-                'w3d' => 'application/x-director',
-                'wad' => 'application/x-doom',
-                'wav' => 'audio/x-wav',
-                'wax' => 'audio/x-ms-wax',
-                'wbmp' => 'image/vnd.wap.wbmp',
-                'wbs' => 'application/vnd.criticaltools.wbs+xml',
-                'wbxml' => 'application/vnd.wap.wbxml',
-                'wcm' => 'application/vnd.ms-works',
-                'wdb' => 'application/vnd.ms-works',
-                'wdp' => 'image/vnd.ms-photo',
-                'weba' => 'audio/webm',
-                'webm' => 'video/webm',
-                'webp' => 'image/webp',
-                'wg' => 'application/vnd.pmi.widget',
-                'wgt' => 'application/widget',
-                'wks' => 'application/vnd.ms-works',
-                'wm' => 'video/x-ms-wm',
-                'wma' => 'audio/x-ms-wma',
-                'wmd' => 'application/x-ms-wmd',
-                'wmf' => 'application/x-msmetafile',
-                'wml' => 'text/vnd.wap.wml',
-                'wmlc' => 'application/vnd.wap.wmlc',
-                'wmls' => 'text/vnd.wap.wmlscript',
-                'wmlsc' => 'application/vnd.wap.wmlscriptc',
-                'wmv' => 'video/x-ms-wmv',
-                'wmx' => 'video/x-ms-wmx',
-                'wmz' => 'application/x-msmetafile',
-                'woff' => 'font/woff',
-                'woff2' => 'font/woff2',
-                'wpd' => 'application/vnd.wordperfect',
-                'wpl' => 'application/vnd.ms-wpl',
-                'wps' => 'application/vnd.ms-works',
-                'wqd' => 'application/vnd.wqd',
-                'wri' => 'application/x-mswrite',
-                'wrl' => 'model/vrml',
-                'wsdl' => 'application/wsdl+xml',
-                'wspolicy' => 'application/wspolicy+xml',
-                'wtb' => 'application/vnd.webturbo',
-                'wvx' => 'video/x-ms-wvx',
-                'x32' => 'application/x-authorware-bin',
-                'x3d' => 'model/x3d+xml',
-                'x3db' => 'model/x3d+binary',
-                'x3dbz' => 'model/x3d+binary',
-                'x3dv' => 'model/x3d+vrml',
-                'x3dvz' => 'model/x3d+vrml',
-                'x3dz' => 'model/x3d+xml',
-                'xaml' => 'application/xaml+xml',
-                'xap' => 'application/x-silverlight-app',
-                'xar' => 'application/vnd.xara',
-                'xbap' => 'application/x-ms-xbap',
-                'xbd' => 'application/vnd.fujixerox.docuworks.binder',
-                'xbm' => 'image/x-xbitmap',
-                'xdf' => 'application/xcap-diff+xml',
-                'xdm' => 'application/vnd.syncml.dm+xml',
-                'xdp' => 'application/vnd.adobe.xdp+xml',
-                'xdssc' => 'application/dssc+xml',
-                'xdw' => 'application/vnd.fujixerox.docuworks',
-                'xenc' => 'application/xenc+xml',
-                'xer' => 'application/patch-ops-error+xml',
-                'xfdf' => 'application/vnd.adobe.xfdf',
-                'xfdl' => 'application/vnd.xfdl',
-                'xht' => 'application/xhtml+xml',
-                'xhtml' => 'application/xhtml+xml',
-                'xhvml' => 'application/xv+xml',
-                'xif' => 'image/vnd.xiff',
-                'xla' => 'application/vnd.ms-excel',
-                'xlam' => 'application/vnd.ms-excel.addin.macroenabled.12',
-                'xlc' => 'application/vnd.ms-excel',
-                'xlf' => 'application/x-xliff+xml',
-                'xlm' => 'application/vnd.ms-excel',
-                'xls' => 'application/vnd.ms-excel',
-                'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
-                'xlsm' => 'application/vnd.ms-excel.sheet.macroenabled.12',
-                'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
-                'xlt' => 'application/vnd.ms-excel',
-                'xltm' => 'application/vnd.ms-excel.template.macroenabled.12',
-                'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
-                'xlw' => 'application/vnd.ms-excel',
-                'xm' => 'audio/xm',
-                'xml' => 'application/xml',
-                'xo' => 'application/vnd.olpc-sugar',
-                'xop' => 'application/xop+xml',
-                'xpi' => 'application/x-xpinstall',
-                'xpl' => 'application/xproc+xml',
-                'xpm' => 'image/x-xpixmap',
-                'xpr' => 'application/vnd.is-xpr',
-                'xps' => 'application/vnd.ms-xpsdocument',
-                'xpw' => 'application/vnd.intercon.formnet',
-                'xpx' => 'application/vnd.intercon.formnet',
-                'xsl' => 'application/xml',
-                'xslt' => 'application/xslt+xml',
-                'xsm' => 'application/vnd.syncml+xml',
-                'xspf' => 'application/xspf+xml',
-                'xul' => 'application/vnd.mozilla.xul+xml',
-                'xvm' => 'application/xv+xml',
-                'xvml' => 'application/xv+xml',
-                'xwd' => 'image/x-xwindowdump',
-                'xyz' => 'chemical/x-xyz',
-                'xz' => 'application/x-xz',
-                'yang' => 'application/yang',
-                'yin' => 'application/yin+xml',
-                'z1' => 'application/x-zmachine',
-                'z2' => 'application/x-zmachine',
-                'z3' => 'application/x-zmachine',
-                'z4' => 'application/x-zmachine',
-                'z5' => 'application/x-zmachine',
-                'z6' => 'application/x-zmachine',
-                'z7' => 'application/x-zmachine',
-                'z8' => 'application/x-zmachine',
-                'zaz' => 'application/vnd.zzazz.deck+xml',
-                'zip' => 'application/zip',
-                'zir' => 'application/vnd.zul',
-                'zirz' => 'application/vnd.zul',
-                'zmm' => 'application/vnd.handheld-entertainment+xml',
-            ];
-
-        if (PHP_VERSION_ID >= 80100) {
-            $coreMimeTypes = array_replace($coreMimeTypes, array('xz' => 'application/octet-stream'));
-        }
-
-        $this->assertSame($coreMimeTypes,
-            require __DIR__ . '/../../../framework/helpers/mimeTypes.php'
-        );
-    }
-}
diff --git a/tests/framework/helpers/StringHelperTest.php b/tests/framework/helpers/StringHelperTest.php
index 56acdb0c268..94efbf67137 100644
--- a/tests/framework/helpers/StringHelperTest.php
+++ b/tests/framework/helpers/StringHelperTest.php
@@ -474,4 +474,66 @@ public function dataProviderDirname()
             ['', ''],
         ];
     }
+
+    public function testMask()
+    {
+        // Standard masking
+        $this->assertSame('12******90', StringHelper::mask('1234567890', 2, 6));
+        $this->assertSame('a********j', StringHelper::mask('abcdefghij', 1, 8));
+        $this->assertSame('*************', StringHelper::mask('Hello, World!', 0, 13));
+        $this->assertSame('************!', StringHelper::mask('Hello, World!', 0, 12));
+        $this->assertSame('Hello, *orld!', StringHelper::mask('Hello, World!', 7, 1));
+        $this->assertSame('Saleh Hashemi', StringHelper::mask('Saleh Hashemi', 0, 0));
+
+        // Different Mask Character
+        $this->assertSame('12######90', StringHelper::mask('1234567890', 2, 6, '#'));
+
+        // Positions outside the string
+        $this->assertSame('1234567890', StringHelper::mask('1234567890', 20, 6));
+        $this->assertSame('1234567890', StringHelper::mask('1234567890', -20, 6));
+
+        // Negative values for start
+        $this->assertSame('1234****90', StringHelper::mask('1234567890', -6, 4));
+
+        // type-related edge case
+        $this->assertSame('1234****90', StringHelper::mask(1234567890, -6, 4));
+
+        // Multibyte characters
+        $this->assertSame('你**', StringHelper::mask('你好吗', 1, 2));
+        $this->assertSame('你好吗', StringHelper::mask('你好吗', 4, 2));
+
+        // Special characters
+        $this->assertSame('em**l@email.com', StringHelper::mask('email@email.com', 2, 2));
+        $this->assertSame('******email.com', StringHelper::mask('email@email.com', 0, 6));
+    }
+
+    /**
+     * @param string $string
+     * @param string $start
+     * @param string $end
+     * @param string $expectedResult
+     * @dataProvider dataProviderFindBetween
+     */
+    public function testFindBetween($string, $start, $end, $expectedResult)
+    {
+        $this->assertSame($expectedResult, StringHelper::findBetween($string, $start, $end));
+    }
+
+    public function dataProviderFindBetween()
+    {
+        return [
+            ['hello world hello', ' hello', ' world', null],  // end before start
+            ['This is a sample string', ' is ', ' string', 'a sample'],  // normal case
+            ['startendstart', 'start', 'end', ''],  // end before start
+            ['startmiddleend', 'start', 'end', 'middle'],  // normal case
+            ['startend', 'start', 'end', ''],  // end immediately follows start
+            ['multiple start start end end', 'start ', ' end', 'start end'],  // multiple starts and ends
+            ['', 'start', 'end', null],  // empty string
+            ['no delimiters here', 'start', 'end', null],  // no start and end
+            ['start only', 'start', 'end', null], // start found but no end
+            ['end only', 'start', 'end', null], // end found but no start
+            ['spécial !@#$%^&*()', 'spé', '&*()', 'cial !@#$%^'],  // Special characters
+            ['من صالح هاشمی هستم', 'من ', ' هستم', 'صالح هاشمی'], // other languages
+        ];
+    }
 }
diff --git a/tests/framework/i18n/FormatterDateTest.php b/tests/framework/i18n/FormatterDateTest.php
index 43fc1311cb9..ef488433572 100644
--- a/tests/framework/i18n/FormatterDateTest.php
+++ b/tests/framework/i18n/FormatterDateTest.php
@@ -143,23 +143,23 @@ public function testIntlAsTime()
     public function testAsTime()
     {
         $value = time();
-        $this->assertSame(date('g:i:s A', $value), $this->formatter->asTime($value));
+        $this->assertSameAnyWhitespace(date('g:i:s A', $value), $this->formatter->asTime($value));
         $this->assertSame(date('h:i:s A', $value), $this->formatter->asTime($value, 'php:h:i:s A'));
 
         $value = new DateTime();
-        $this->assertSame(date('g:i:s A', $value->getTimestamp()), $this->formatter->asTime($value));
+        $this->assertSameAnyWhitespace(date('g:i:s A', $value->getTimestamp()), $this->formatter->asTime($value));
         $this->assertSame(date('h:i:s A', $value->getTimestamp()), $this->formatter->asTime($value, 'php:h:i:s A'));
 
         if (version_compare(PHP_VERSION, '5.5.0', '>=')) {
             $value = new \DateTimeImmutable();
-            $this->assertSame(date('g:i:s A', $value->getTimestamp()), $this->formatter->asTime($value));
+            $this->assertSameAnyWhitespace(date('g:i:s A', $value->getTimestamp()), $this->formatter->asTime($value));
             $this->assertSame(date('h:i:s A', $value->getTimestamp()), $this->formatter->asTime($value, 'php:h:i:s A'));
         }
 
         // empty input
-        $this->assertSame('12:00:00 AM', $this->formatter->asTime(''));
-        $this->assertSame('12:00:00 AM', $this->formatter->asTime(0));
-        $this->assertSame('12:00:00 AM', $this->formatter->asTime(false));
+        $this->assertSameAnyWhitespace('12:00:00 AM', $this->formatter->asTime(''));
+        $this->assertSameAnyWhitespace('12:00:00 AM', $this->formatter->asTime(0));
+        $this->assertSameAnyWhitespace('12:00:00 AM', $this->formatter->asTime(false));
         // null display
         $this->assertSame($this->formatter->nullDisplay, $this->formatter->asTime(null));
     }
@@ -178,23 +178,35 @@ public function testIntlAsDatetime()
     public function testAsDatetime()
     {
         $value = time();
-        $this->assertRegExp(date('~M j, Y,? g:i:s A~', $value), $this->formatter->asDatetime($value));
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces(date('~M j, Y,? g:i:s A~', $value)),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime($value))
+        );
         $this->assertSame(date('Y/m/d h:i:s A', $value), $this->formatter->asDatetime($value, 'php:Y/m/d h:i:s A'));
 
         $value = new DateTime();
-        $this->assertRegExp(date('~M j, Y,? g:i:s A~', $value->getTimestamp()), $this->formatter->asDatetime($value));
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces(date('~M j, Y,? g:i:s A~', $value->getTimestamp())),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime($value))
+        );
         $this->assertSame(date('Y/m/d h:i:s A', $value->getTimestamp()), $this->formatter->asDatetime($value, 'php:Y/m/d h:i:s A'));
 
         // empty time
         $value = new DateTime();
         $date = $value->format('Y-m-d');
         $value = new DateTime($date);
-        $this->assertRegExp(date('~M j, Y,? g:i:s A~', $value->getTimestamp()), $this->formatter->asDatetime($date));
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces(date('~M j, Y,? g:i:s A~', $value->getTimestamp())),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime($date))
+        );
         $this->assertSame(date('Y/m/d h:i:s A', $value->getTimestamp()), $this->formatter->asDatetime($date, 'php:Y/m/d h:i:s A'));
 
         if (PHP_VERSION_ID >= 50500) {
             $value = new \DateTimeImmutable();
-            $this->assertRegExp(date('~M j, Y,? g:i:s A~', $value->getTimestamp()), $this->formatter->asDatetime($value));
+            $this->assertRegExp(
+                $this->sanitizeWhitespaces(date('~M j, Y,? g:i:s A~', $value->getTimestamp())),
+                $this->sanitizeWhitespaces($this->formatter->asDatetime($value))
+            );
             $this->assertSame(date('Y/m/d h:i:s A', $value->getTimestamp()), $this->formatter->asDatetime($value, 'php:Y/m/d h:i:s A'));
         }
 
@@ -205,9 +217,18 @@ public function testAsDatetime()
         }
 
         // empty input
-        $this->assertRegExp('~Jan 1, 1970,? 12:00:00 AM~', $this->formatter->asDatetime(''));
-        $this->assertRegExp('~Jan 1, 1970,? 12:00:00 AM~', $this->formatter->asDatetime(0));
-        $this->assertRegExp('~Jan 1, 1970,? 12:00:00 AM~', $this->formatter->asDatetime(false));
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces('~Jan 1, 1970,? 12:00:00 AM~'),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime(''))
+        );
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces('~Jan 1, 1970,? 12:00:00 AM~'),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime(0))
+        );
+        $this->assertRegExp(
+            $this->sanitizeWhitespaces('~Jan 1, 1970,? 12:00:00 AM~'),
+            $this->sanitizeWhitespaces($this->formatter->asDatetime(false))
+        );
         // null display
         $this->assertSame($this->formatter->nullDisplay, $this->formatter->asDatetime(null));
     }
diff --git a/tests/framework/log/FileTargetTest.php b/tests/framework/log/FileTargetTest.php
index 217a94af0f0..4f6eaf4ae75 100644
--- a/tests/framework/log/FileTargetTest.php
+++ b/tests/framework/log/FileTargetTest.php
@@ -12,6 +12,7 @@
 use yii\log\Dispatcher;
 use yii\log\FileTarget;
 use yii\log\Logger;
+use yiiunit\framework\log\mocks\CustomLogger;
 use yiiunit\TestCase;
 
 /**
@@ -110,4 +111,53 @@ public function testRotate()
         $this->assertFileNotExists($logFile . '.3');
         $this->assertFileNotExists($logFile . '.4');
     }
+
+    public function testLogEmptyStrings()
+    {
+        $logFile = Yii::getAlias('@yiiunit/runtime/log/filetargettest.log');
+        $this->clearLogFile($logFile);
+
+        $logger = new CustomLogger();
+        $logger->logFile = $logFile;
+        $logger->messages = array_fill(0, 1, 'xxx');
+        $logger->export();
+
+        $test = file($logFile);
+        $this->assertEquals("xxx\n", $test[0]);
+
+        $this->clearLogFile($logFile);
+
+        $logger = new CustomLogger();
+        $logger->logFile = $logFile;
+        $logger->messages = array_fill(0, 3, 'xxx');
+        $logger->export();
+
+        $test = file($logFile);
+        $this->assertEquals("xxx\n", $test[0]);
+        $this->assertEquals("xxx\n", $test[1]);
+        $this->assertEquals("xxx\n", $test[2]);
+
+        $this->clearLogFile($logFile);
+
+        $logger->messages = array_fill(0, 1, 'yyy');
+        $logger->export();
+
+        $this->assertFileNotExists($logFile);
+
+        $logger->messages = array_fill(0, 10, '');
+        $logger->export();
+
+        $this->assertFileNotExists($logFile);
+
+        $logger->messages = array_fill(0, 10, null);
+        $logger->export();
+
+        $this->assertFileNotExists($logFile);
+    }
+
+    private function clearLogFile($logFile)
+    {
+        FileHelper::removeDirectory(dirname($logFile));
+        mkdir(dirname($logFile), 0777, true);
+    }
 }
diff --git a/tests/framework/log/mocks/CustomLogger.php b/tests/framework/log/mocks/CustomLogger.php
new file mode 100644
index 00000000000..5dae134b7ed
--- /dev/null
+++ b/tests/framework/log/mocks/CustomLogger.php
@@ -0,0 +1,22 @@
+<?php
+
+namespace yiiunit\framework\log\mocks;
+
+use yii\log\FileTarget;
+
+class CustomLogger extends FileTarget
+{
+    /**
+     * @param array $message
+     *
+     * @return null|string|array
+     */
+    public function formatMessage($message)
+    {
+        if ($message == 'yyy') {
+            return null;
+        }
+
+        return $message;
+    }
+}
diff --git a/tests/framework/mutex/MysqlMutexTest.php b/tests/framework/mutex/MysqlMutexTest.php
index e3dfbfefbdd..b90e92e51fc 100644
--- a/tests/framework/mutex/MysqlMutexTest.php
+++ b/tests/framework/mutex/MysqlMutexTest.php
@@ -84,4 +84,27 @@ public function testThatMutexLocksWithKeyPrefixesExpression($mutexName)
         $this->assertTrue($mutexOne->release($mutexName));
         $this->assertTrue($mutexTwo->release($mutexName));
     }
+
+    /**
+     * @dataProvider mutexDataProvider()
+     *
+     * @param string $mutexName
+     */
+    public function testThatMutexLocksWithKeyPrefixesExpressionCalculatedValue($mutexName)
+    {
+        $mutexOne = $this->createMutex(['keyPrefix' => new Expression('1+1')]);
+        $mutexTwo = $this->createMutex(['keyPrefix' => new Expression('1*2')]);
+
+        $this->assertTrue($mutexOne->acquire($mutexName));
+        $this->assertFalse($mutexTwo->acquire($mutexName));
+        $this->assertTrue($mutexOne->release($mutexName));
+    }
+
+    public function testCreateMutex()
+    {
+        $mutex = $this->createMutex(['keyPrefix' => new Expression('1+1')]);
+        $this->assertInstanceOf(MysqlMutex::classname(), $mutex);
+        $this->assertInstanceOf(Expression::classname(), $mutex->keyPrefix);
+        $this->assertSame("1+1", $mutex->keyPrefix->expression);
+    }
 }
diff --git a/tests/framework/rbac/DbManagerTestCase.php b/tests/framework/rbac/DbManagerTestCase.php
index b2828871ba7..bb5debaddc8 100644
--- a/tests/framework/rbac/DbManagerTestCase.php
+++ b/tests/framework/rbac/DbManagerTestCase.php
@@ -7,7 +7,6 @@
 
 namespace yiiunit\framework\rbac;
 
-use app\models\User;
 use Yii;
 use yii\caching\ArrayCache;
 use yii\console\Application;
@@ -214,6 +213,38 @@ public function testGetRolesByUserWithEmptyValue($userId, $searchUserId, $isVali
         }
     }
 
+    public function testGetCachedRolesByUserId()
+    {
+        $this->auth->removeAll();
+        $this->auth->cache = new ArrayCache();
+
+        $admin = $this->auth->createRole('Admin');
+        $this->auth->add($admin);
+
+        $manager = $this->auth->createRole('Manager');
+        $this->auth->add($manager);
+
+        $adminUserRoles = $this->auth->getRolesByUser(1);
+        $this->assertArrayHasKey('myDefaultRole', $adminUserRoles);
+        $this->assertArrayNotHasKey('Admin', $adminUserRoles);
+        $this->auth->assign($admin, 1);
+
+        $managerUserRoles = $this->auth->getRolesByUser(2);
+        $this->assertArrayHasKey('myDefaultRole', $managerUserRoles);
+        $this->assertArrayNotHasKey('Manager', $managerUserRoles);
+        $this->auth->assign($manager, 2);
+
+        $adminUserRoles = $this->auth->getRolesByUser(1);
+        $this->assertArrayHasKey('myDefaultRole', $adminUserRoles);
+        $this->assertArrayHasKey('Admin', $adminUserRoles);
+        $this->assertEquals($admin->name, $adminUserRoles['Admin']->name);
+
+        $managerUserRoles = $this->auth->getRolesByUser(2);
+        $this->assertArrayHasKey('myDefaultRole', $managerUserRoles);
+        $this->assertArrayHasKey('Manager', $managerUserRoles);
+        $this->assertEquals($manager->name, $managerUserRoles['Manager']->name);
+    }
+
     /**
      * @dataProvider emptyValuesProvider
      * @param mixed $userId
@@ -329,7 +360,7 @@ public function testCheckAccessCache()
         }
         $this->assertSingleQueryToAssignmentsTable($logTarget);
 
-        // verify cache is flushed on unassign (createPost is now false again)
+        // verify cache is flushed on revoke (createPost is now false again)
         $this->auth->revoke($this->auth->getRole('admin'), 'reader A');
         foreach (['readPost' => true, 'createPost' => false] as $permission => $result) {
             $this->assertEquals($result, $this->auth->checkAccess('reader A', $permission), "Checking $permission");
@@ -358,8 +389,11 @@ public function testCheckAccessCache()
 
     private function assertSingleQueryToAssignmentsTable($logTarget)
     {
-        $this->assertCount(1, $logTarget->messages, 'Only one query should have been performed, but there are the following logs: ' . print_r($logTarget->messages, true));
-        $this->assertContains('auth_assignment', $logTarget->messages[0][0], 'Log message should be a query to auth_assignment table');
+        $messages = array_filter($logTarget->messages, function ($message) {
+            return strpos($message[0], 'auth_assignment') !== false;
+        });
+        $this->assertCount(1, $messages, 'Only one query should have been performed, but there are the following logs: ' . print_r($logTarget->messages, true));
+        $this->assertContains('auth_assignment', $messages[0][0], 'Log message should be a query to auth_assignment table');
         $logTarget->messages = [];
     }
 }
diff --git a/tests/framework/rest/IndexActionTest.php b/tests/framework/rest/IndexActionTest.php
index ffbf6e98944..d6481aa10e2 100644
--- a/tests/framework/rest/IndexActionTest.php
+++ b/tests/framework/rest/IndexActionTest.php
@@ -174,7 +174,7 @@ public function dataProviderTestPrepareDataProviderWithPaginationAndSorting()
                 ]),
                 11, // page size set as param in test
                 992,
-                ['created_at_2' => SORT_DESC], // test sort set as param in test is ignored
+                [], // sort param is set so no default sorting anymore
                 ['created_at_2' => SORT_DESC]
             ],
             [ // Disable pagination and sort
diff --git a/tests/framework/rest/SerializerTest.php b/tests/framework/rest/SerializerTest.php
index 361aba38a91..217d7fbf7a9 100644
--- a/tests/framework/rest/SerializerTest.php
+++ b/tests/framework/rest/SerializerTest.php
@@ -10,6 +10,7 @@
 use yii\base\Model;
 use yii\data\ArrayDataProvider;
 use yii\rest\Serializer;
+use yii\web\Request;
 use yiiunit\TestCase;
 
 /**
@@ -415,6 +416,32 @@ public function testSerializeDataProvider($dataProvider, $expectedResult, $saveK
         $this->assertEquals($expectedResult, $serializer->serialize($dataProvider));
     }
 
+    /**
+     * @dataProvider dataProviderSerializeDataProvider
+     *
+     * @param \yii\data\DataProviderInterface $dataProvider
+     * @param array $expectedResult
+     * @param bool $saveKeys
+     */
+    public function testHeadSerializeDataProvider($dataProvider, $expectedResult, $saveKeys = false)
+    {
+        $serializer = new Serializer();
+        $serializer->preserveKeys = $saveKeys;
+        $serializer->collectionEnvelope = 'data';
+
+        $this->assertEquals($expectedResult, $serializer->serialize($dataProvider)['data']);
+
+        $_SERVER['REQUEST_METHOD'] = 'HEAD';
+        $request = new Request();
+        $_POST[$request->methodParam] = 'HEAD';
+        $serializer = new Serializer([
+            'request' => $request
+        ]);
+        $serializer->preserveKeys = $saveKeys;
+        $this->assertEmpty($serializer->serialize($dataProvider));
+        unset($_POST[$request->methodParam], $_SERVER['REQUEST_METHOD']);
+    }
+
     /**
      * @see https://github.com/yiisoft/yii2/issues/16334
      */
diff --git a/tests/framework/validators/FileValidatorTest.php b/tests/framework/validators/FileValidatorTest.php
index f6af4ec6816..157269e5d41 100644
--- a/tests/framework/validators/FileValidatorTest.php
+++ b/tests/framework/validators/FileValidatorTest.php
@@ -546,7 +546,8 @@ public function validMimeTypes()
             ['test.tar.xz', 'application/x-xz', 'tar.xz'],
         ]);
 
-        if (PHP_VERSION_ID >= 80100) {
+        # fix for bundled libmagic bug, see also https://github.com/yiisoft/yii2/issues/19925
+        if ((PHP_VERSION_ID >= 80100 && PHP_VERSION_ID < 80122) || (PHP_VERSION_ID >= 80200 && PHP_VERSION_ID < 80209)) {
             $v81_zx = ['test.tar.xz', 'application/octet-stream', 'tar.xz'];
             array_pop($validMimeTypes);
             $validMimeTypes[] = $v81_zx;
diff --git a/tests/framework/validators/NumberValidatorTest.php b/tests/framework/validators/NumberValidatorTest.php
index 82f643f83d5..826eb9cf915 100644
--- a/tests/framework/validators/NumberValidatorTest.php
+++ b/tests/framework/validators/NumberValidatorTest.php
@@ -61,12 +61,15 @@ protected function setUp()
     public function testEnsureMessageOnInit()
     {
         $val = new NumberValidator();
-        $this->assertInternalType('string', $val->message);
-        $this->assertTrue($val->max === null);
+        $this->assertSame('{attribute} must be a number.', $val->message);
+        $this->assertNull($val->max);
+        $this->assertNull($val->min);
+        $this->assertNull($val->tooSmall);
+        $this->assertNull($val->tooBig);
         $val = new NumberValidator(['min' => -1, 'max' => 20, 'integerOnly' => true]);
-        $this->assertInternalType('string', $val->message);
-        $this->assertInternalType('string', $val->tooSmall);
-        $this->assertInternalType('string', $val->tooBig);
+        $this->assertSame('{attribute} must be an integer.', $val->message);
+        $this->assertSame('{attribute} must be no less than {min}.', $val->tooSmall);
+        $this->assertSame('{attribute} must be no greater than {max}.', $val->tooBig);
     }
 
     public function testValidateValueSimple()
@@ -77,39 +80,69 @@ public function testValidateValueSimple()
         $this->assertTrue($val->validate(-20));
         $this->assertTrue($val->validate('20'));
         $this->assertTrue($val->validate(25.45));
-        $this->assertFalse($val->validate(false));
-        $this->assertFalse($val->validate(true));
+        $this->assertFalse($val->validate(false, $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate(true, $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate('0x14', $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertTrue($val->validate(0x14));
+        $this->assertTrue($val->validate('0123'));
+        $this->assertTrue($val->validate(0123));
+        $this->assertFalse($val->validate('0b111', $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertTrue($val->validate(0b111));
 
         $this->setPointDecimalLocale();
-        $this->assertFalse($val->validate('25,45'));
+        $this->assertFalse($val->validate('25,45', $error));
+        $this->assertSame('the input value must be a number.', $error);
         $this->setCommaDecimalLocale();
         $this->assertTrue($val->validate('25,45'));
         $this->restoreLocale();
 
-        $this->assertFalse($val->validate('12:45'));
+        $this->assertFalse($val->validate('12:45', $error));
+        $this->assertSame('the input value must be a number.', $error);
+
         $val = new NumberValidator(['integerOnly' => true]);
         $this->assertTrue($val->validate(20));
         $this->assertTrue($val->validate(0));
-        $this->assertFalse($val->validate(25.45));
+        $this->assertFalse($val->validate(25.45, $error));
+        $this->assertSame('the input value must be an integer.', $error);
         $this->assertTrue($val->validate('20'));
-        $this->assertFalse($val->validate('25,45'));
+        $this->assertFalse($val->validate('25,45', $error));
+        $this->assertSame('the input value must be an integer.', $error);
         $this->assertTrue($val->validate('020'));
+        $this->assertFalse($val->validate('0x14', $error));
+        $this->assertSame('the input value must be an integer.', $error);
         $this->assertTrue($val->validate(0x14));
-        $this->assertFalse($val->validate('0x14')); // todo check this
-        $this->assertFalse($val->validate(false));
-        $this->assertFalse($val->validate(true));
+        $this->assertTrue($val->validate('0123'));
+        $this->assertTrue($val->validate(0123));
+        $this->assertFalse($val->validate('0b111', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertTrue($val->validate(0b111));
+        $this->assertFalse($val->validate(false, $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate(true, $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateValueArraySimple()
     {
         $val = new NumberValidator();
-        $this->assertFalse($val->validate([20]));
-        $this->assertFalse($val->validate([0]));
-        $this->assertFalse($val->validate([-20]));
-        $this->assertFalse($val->validate(['20']));
-        $this->assertFalse($val->validate([25.45]));
-        $this->assertFalse($val->validate([false]));
-        $this->assertFalse($val->validate([true]));
+        $this->assertFalse($val->validate([20], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([0], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([-20], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate(['20'], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([25.45], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([false], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([true], $error));
+        $this->assertSame('the input value must be a number.', $error);
 
         $val = new NumberValidator();
         $val->allowArray = true;
@@ -118,28 +151,38 @@ public function testValidateValueArraySimple()
         $this->assertTrue($val->validate([-20]));
         $this->assertTrue($val->validate(['20']));
         $this->assertTrue($val->validate([25.45]));
-        $this->assertFalse($val->validate([false]));
-        $this->assertFalse($val->validate([true]));
+        $this->assertFalse($val->validate([false], $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate([true], $error));
+        $this->assertSame('the input value must be a number.', $error);
 
         $this->setPointDecimalLocale();
-        $this->assertFalse($val->validate(['25,45']));
+        $this->assertFalse($val->validate(['25,45'], $error));
+        $this->assertSame('the input value must be a number.', $error);
         $this->setCommaDecimalLocale();
         $this->assertTrue($val->validate(['25,45']));
         $this->restoreLocale();
 
-        $this->assertFalse($val->validate(['12:45']));
+        $this->assertFalse($val->validate(['12:45'], $error));
+        $this->assertSame('the input value must be a number.', $error);
+
         $val = new NumberValidator(['integerOnly' => true]);
         $val->allowArray = true;
         $this->assertTrue($val->validate([20]));
         $this->assertTrue($val->validate([0]));
-        $this->assertFalse($val->validate([25.45]));
+        $this->assertFalse($val->validate([25.45], $error));
+        $this->assertSame('the input value must be an integer.', $error);
         $this->assertTrue($val->validate(['20']));
-        $this->assertFalse($val->validate(['25,45']));
+        $this->assertFalse($val->validate(['25,45'], $error));
+        $this->assertSame('the input value must be an integer.', $error);
         $this->assertTrue($val->validate(['020']));
         $this->assertTrue($val->validate([0x14]));
-        $this->assertFalse($val->validate(['0x14'])); // todo check this
-        $this->assertFalse($val->validate([false]));
-        $this->assertFalse($val->validate([true]));
+        $this->assertFalse($val->validate(['0x14'], $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate([false], $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate([true], $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateValueAdvanced()
@@ -148,18 +191,30 @@ public function testValidateValueAdvanced()
         $this->assertTrue($val->validate('-1.23')); // signed float
         $this->assertTrue($val->validate('-4.423e-12')); // signed float + exponent
         $this->assertTrue($val->validate('12E3')); // integer + exponent
-        $this->assertFalse($val->validate('e12')); // just exponent
-        $this->assertFalse($val->validate('-e3'));
-        $this->assertFalse($val->validate('-4.534-e-12')); // 'signed' exponent
-        $this->assertFalse($val->validate('12.23^4')); // expression instead of value
+        $this->assertFalse($val->validate('e12', $error)); // just exponent
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate('-e3', $error));
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate('-4.534-e-12', $error)); // 'signed' exponent
+        $this->assertSame('the input value must be a number.', $error);
+        $this->assertFalse($val->validate('12.23^4', $error)); // expression instead of value
+        $this->assertSame('the input value must be a number.', $error);
+
         $val = new NumberValidator(['integerOnly' => true]);
-        $this->assertFalse($val->validate('-1.23'));
-        $this->assertFalse($val->validate('-4.423e-12'));
-        $this->assertFalse($val->validate('12E3'));
-        $this->assertFalse($val->validate('e12'));
-        $this->assertFalse($val->validate('-e3'));
-        $this->assertFalse($val->validate('-4.534-e-12'));
-        $this->assertFalse($val->validate('12.23^4'));
+        $this->assertFalse($val->validate('-1.23', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('-4.423e-12', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('12E3', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('e12', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('-e3', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('-4.534-e-12', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('12.23^4', $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateValueWithLocaleWhereDecimalPointIsComma()
@@ -180,28 +235,37 @@ public function testValidateValueMin()
         $val = new NumberValidator(['min' => 1]);
         $this->assertTrue($val->validate(1));
         $this->assertFalse($val->validate(-1, $error));
-        $this->assertContains('the input value must be no less than 1.', $error);
-        $this->assertFalse($val->validate('22e-12'));
+        $this->assertSame('the input value must be no less than 1.', $error);
+        $this->assertFalse($val->validate('22e-12', $error));
+        $this->assertSame('the input value must be no less than 1.', $error);
         $this->assertTrue($val->validate(PHP_INT_MAX + 1));
-        $val = new NumberValidator(['min' => 1], ['integerOnly' => true]);
+
+        $val = new NumberValidator(['min' => 1, 'integerOnly' => true]);
         $this->assertTrue($val->validate(1));
-        $this->assertFalse($val->validate(-1));
-        $this->assertFalse($val->validate('22e-12'));
-        $this->assertTrue($val->validate(PHP_INT_MAX + 1));
+        $this->assertFalse($val->validate(-1, $error));
+        $this->assertSame('the input value must be no less than 1.', $error);
+        $this->assertFalse($val->validate('22e-12', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate(PHP_INT_MAX + 1, $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateValueMax()
     {
         $val = new NumberValidator(['max' => 1.25]);
         $this->assertTrue($val->validate(1));
-        $this->assertFalse($val->validate(1.5));
+        $this->assertFalse($val->validate(1.5, $error));
+        $this->assertSame('the input value must be no greater than 1.25.', $error);
         $this->assertTrue($val->validate('22e-12'));
         $this->assertTrue($val->validate('125e-2'));
         $val = new NumberValidator(['max' => 1.25, 'integerOnly' => true]);
         $this->assertTrue($val->validate(1));
-        $this->assertFalse($val->validate(1.5));
-        $this->assertFalse($val->validate('22e-12'));
-        $this->assertFalse($val->validate('125e-2'));
+        $this->assertFalse($val->validate(1.5, $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('22e-12', $error));
+        $this->assertSame('the input value must be an integer.', $error);
+        $this->assertFalse($val->validate('125e-2', $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateValueRange()
@@ -209,13 +273,19 @@ public function testValidateValueRange()
         $val = new NumberValidator(['min' => -10, 'max' => 20]);
         $this->assertTrue($val->validate(0));
         $this->assertTrue($val->validate(-10));
-        $this->assertFalse($val->validate(-11));
-        $this->assertFalse($val->validate(21));
+        $this->assertFalse($val->validate(-11, $error));
+        $this->assertSame('the input value must be no less than -10.', $error);
+        $this->assertFalse($val->validate(21, $error));
+        $this->assertSame('the input value must be no greater than 20.', $error);
+
         $val = new NumberValidator(['min' => -10, 'max' => 20, 'integerOnly' => true]);
         $this->assertTrue($val->validate(0));
-        $this->assertFalse($val->validate(-11));
-        $this->assertFalse($val->validate(22));
-        $this->assertFalse($val->validate('20e-1'));
+        $this->assertFalse($val->validate(-11, $error));
+        $this->assertSame('the input value must be no less than -10.', $error);
+        $this->assertFalse($val->validate(22, $error));
+        $this->assertSame('the input value must be no greater than 20.', $error);
+        $this->assertFalse($val->validate('20e-1', $error));
+        $this->assertSame('the input value must be an integer.', $error);
     }
 
     public function testValidateAttribute()
@@ -228,6 +298,7 @@ public function testValidateAttribute()
         $model->attr_number = '43^32'; //expression
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 10]);
         $model = new FakedValidationModel();
         $model->attr_number = 10;
@@ -236,6 +307,7 @@ public function testValidateAttribute()
         $model->attr_number = 5;
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be no less than 10.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10]);
         $model = new FakedValidationModel();
         $model->attr_number = 10;
@@ -244,6 +316,7 @@ public function testValidateAttribute()
         $model->attr_number = 15;
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be no greater than 10.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10, 'integerOnly' => true]);
         $model = new FakedValidationModel();
         $model->attr_number = 10;
@@ -252,10 +325,12 @@ public function testValidateAttribute()
         $model->attr_number = 3.43;
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be an integer.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 1]);
         $model = FakedValidationModel::createWithAttributes(['attr_num' => [1, 2, 3]]);
         $val->validateAttribute($model, 'attr_num');
         $this->assertTrue($model->hasErrors('attr_num'));
+        $this->assertSame('attr_num must be a number.', $model->getFirstError('attr_num'));
 
         // @see https://github.com/yiisoft/yii2/issues/11672
         $model = new FakedValidationModel();
@@ -275,6 +350,7 @@ public function testValidateAttributeArray()
         $model->attr_number = ['43^32']; //expression
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 10]);
         $val->allowArray = true;
         $model = new FakedValidationModel();
@@ -284,6 +360,7 @@ public function testValidateAttributeArray()
         $model->attr_number = [5];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be no less than 10.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10]);
         $val->allowArray = true;
         $model = new FakedValidationModel();
@@ -293,6 +370,7 @@ public function testValidateAttributeArray()
         $model->attr_number = [15];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be no greater than 10.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10, 'integerOnly' => true]);
         $val->allowArray = true;
         $model = new FakedValidationModel();
@@ -302,61 +380,73 @@ public function testValidateAttributeArray()
         $model->attr_number = [3.43];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be an integer.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 1]);
         $val->allowArray = true;
         $model = FakedValidationModel::createWithAttributes(['attr_num' => [[1], [2], [3]]]);
         $val->validateAttribute($model, 'attr_num');
         $this->assertTrue($model->hasErrors('attr_num'));
+        $this->assertSame('attr_num must be a number.', $model->getFirstError('attr_num'));
 
         // @see https://github.com/yiisoft/yii2/issues/11672
         $model = new FakedValidationModel();
         $model->attr_number = new \stdClass();
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
-
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
 
         $val = new NumberValidator();
         $model = new FakedValidationModel();
         $model->attr_number = ['5.5e1'];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $model->attr_number = ['43^32']; //expression
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 10]);
         $model = new FakedValidationModel();
         $model->attr_number = [10];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $model->attr_number = [5];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10]);
         $model = new FakedValidationModel();
         $model->attr_number = [10];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $model->attr_number = [15];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['max' => 10, 'integerOnly' => true]);
         $model = new FakedValidationModel();
         $model->attr_number = [10];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be an integer.', $model->getFirstError('attr_number'));
         $model->attr_number = [3.43];
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be an integer.', $model->getFirstError('attr_number'));
         $val = new NumberValidator(['min' => 1]);
         $model = FakedValidationModel::createWithAttributes(['attr_num' => [[1], [2], [3]]]);
         $val->validateAttribute($model, 'attr_num');
         $this->assertTrue($model->hasErrors('attr_num'));
+        $this->assertSame('attr_num must be a number.', $model->getFirstError('attr_num'));
 
         // @see https://github.com/yiisoft/yii2/issues/11672
         $model = new FakedValidationModel();
         $model->attr_number = new \stdClass();
         $val->validateAttribute($model, 'attr_number');
         $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertSame('attr_number must be a number.', $model->getFirstError('attr_number'));
     }
 
     public function testValidateAttributeWithLocaleWhereDecimalPointIsComma()
@@ -376,10 +466,22 @@ public function testValidateAttributeWithLocaleWhereDecimalPointIsComma()
         $this->restoreLocale();
     }
 
-    public function testEnsureCustomMessageIsSetOnValidateAttribute()
+    public function testEnsureCustomMessageIsSetOnValidateAttributeGeneral()
+    {
+        $val = new NumberValidator(['message' => '{attribute} is not integer.']);
+        $model = new FakedValidationModel();
+        $model->attr_number = 'as';
+        $val->validateAttribute($model, 'attr_number');
+        $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertCount(1, $model->getErrors('attr_number'));
+        $msgs = $model->getErrors('attr_number');
+        $this->assertSame('attr_number is not integer.', $msgs[0]);
+    }
+
+    public function testEnsureCustomMessageIsSetOnValidateAttributeMin()
     {
         $val = new NumberValidator([
-            'tooSmall' => '{attribute} is to small.',
+            'tooSmall' => '{attribute} is too small.',
             'min' => 5,
         ]);
         $model = new FakedValidationModel();
@@ -388,7 +490,22 @@ public function testEnsureCustomMessageIsSetOnValidateAttribute()
         $this->assertTrue($model->hasErrors('attr_number'));
         $this->assertCount(1, $model->getErrors('attr_number'));
         $msgs = $model->getErrors('attr_number');
-        $this->assertSame('attr_number is to small.', $msgs[0]);
+        $this->assertSame('attr_number is too small.', $msgs[0]);
+    }
+
+    public function testEnsureCustomMessageIsSetOnValidateAttributeMax()
+    {
+        $val = new NumberValidator([
+            'tooBig' => '{attribute} is too big.',
+            'max' => 5,
+        ]);
+        $model = new FakedValidationModel();
+        $model->attr_number = 6;
+        $val->validateAttribute($model, 'attr_number');
+        $this->assertTrue($model->hasErrors('attr_number'));
+        $this->assertCount(1, $model->getErrors('attr_number'));
+        $msgs = $model->getErrors('attr_number');
+        $this->assertSame('attr_number is too big.', $msgs[0]);
     }
 
     /**
diff --git a/tests/framework/web/ControllerTest.php b/tests/framework/web/ControllerTest.php
index 21680f08cc6..1ce51eeb298 100644
--- a/tests/framework/web/ControllerTest.php
+++ b/tests/framework/web/ControllerTest.php
@@ -10,7 +10,6 @@
 use RuntimeException;
 use Yii;
 use yii\base\InlineAction;
-use yii\web\HttpException;
 use yii\web\NotFoundHttpException;
 use yii\web\Response;
 use yii\web\ServerErrorHttpException;
@@ -332,4 +331,34 @@ public function testRedirect()
         $this->assertEquals($this->controller->redirect(['//controller/index', 'id_1' => 3, 'id_2' => 4])->headers->get('location'), '/index.php?r=controller%2Findex&id_1=3&id_2=4');
         $this->assertEquals($this->controller->redirect(['//controller/index', 'slug' => 'äöüß!"§$%&/()'])->headers->get('location'), '/index.php?r=controller%2Findex&slug=%C3%A4%C3%B6%C3%BC%C3%9F%21%22%C2%A7%24%25%26%2F%28%29');
     }
+
+    public function testUnionBindingActionParams()
+    {
+        if (PHP_VERSION_ID < 80000) {
+            $this->markTestSkipped('Can not be tested on PHP < 8.0');
+            return;
+        }
+
+        // Use the PHP80 controller for this test
+        $this->controller = new FakePhp80Controller('fake', new \yii\web\Application([
+            'id' => 'app',
+            'basePath' => __DIR__,
+            'components' => [
+                'request' => [
+                    'cookieValidationKey' => 'wefJDF8sfdsfSDefwqdxj9oq',
+                    'scriptFile' => __DIR__ . '/index.php',
+                    'scriptUrl' => '/index.php',
+                ],
+            ],
+        ]));
+
+        $this->mockWebApplication(['controller' => $this->controller]);
+
+        $injectionAction = new InlineAction('injection', $this->controller, 'actionInjection');
+        $params = ['arg' => 'test', 'second' => 1];
+
+        $args = $this->controller->bindActionParams($injectionAction, $params);
+        $this->assertSame('test', $args[0]);
+        $this->assertSame(1, $args[1]);
+    }
 }
diff --git a/tests/framework/web/ErrorHandlerTest.php b/tests/framework/web/ErrorHandlerTest.php
index 1634c572d4a..4ea8b15e6c8 100644
--- a/tests/framework/web/ErrorHandlerTest.php
+++ b/tests/framework/web/ErrorHandlerTest.php
@@ -42,6 +42,49 @@ public function testCorrectResponseCodeInErrorView()
 Exception: yii\web\NotFoundHttpException', $out);
     }
 
+    public function testFormatRaw()
+    {
+        Yii::$app->response->format = yii\web\Response::FORMAT_RAW;
+
+        /** @var ErrorHandler $handler */
+        $handler = Yii::$app->getErrorHandler();
+
+        ob_start(); // suppress response output
+        $this->invokeMethod($handler, 'renderException', [new \Exception('Test Exception')]);
+        $out = ob_get_clean();
+
+        $this->assertcontains('Test Exception', $out);
+
+        $this->assertTrue(is_string(Yii::$app->response->data));
+        $this->assertcontains("Exception 'Exception' with message 'Test Exception'", Yii::$app->response->data);
+    }
+
+    public function testFormatXml()
+    {
+        Yii::$app->response->format = yii\web\Response::FORMAT_XML;
+
+        /** @var ErrorHandler $handler */
+        $handler = Yii::$app->getErrorHandler();
+
+        ob_start(); // suppress response output
+        $this->invokeMethod($handler, 'renderException', [new \Exception('Test Exception')]);
+        $out = ob_get_clean();
+
+        $this->assertcontains('Test Exception', $out);
+
+        $outArray = Yii::$app->response->data;
+
+        $this->assertTrue(is_array(Yii::$app->response->data));
+
+        $this->assertEquals('Exception', $outArray['name']);
+        $this->assertEquals('Test Exception', $outArray['message']);
+        $this->assertArrayHasKey('code', $outArray);
+        $this->assertEquals('Exception', $outArray['type']);
+        $this->assertContains('ErrorHandlerTest.php', $outArray['file']);
+        $this->assertArrayHasKey('stack-trace', $outArray);
+        $this->assertArrayHasKey('line', $outArray);
+    }
+
     public function testClearAssetFilesInErrorView()
     {
         Yii::$app->getView()->registerJsFile('somefile.js');
diff --git a/tests/framework/web/FakePhp80Controller.php b/tests/framework/web/FakePhp80Controller.php
new file mode 100644
index 00000000000..8f8fc20fe7b
--- /dev/null
+++ b/tests/framework/web/FakePhp80Controller.php
@@ -0,0 +1,20 @@
+<?php
+/**
+ * @link https://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license https://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\web;
+
+use yii\web\Controller;
+
+class FakePhp80Controller extends Controller
+{
+    public $enableCsrfValidation = false;
+
+    public function actionInjection(int|string $arg, int|string $second)
+    {
+
+    }
+}
diff --git a/tests/framework/web/ResponseTest.php b/tests/framework/web/ResponseTest.php
index 12ee7ef2d4e..2c49964fbcd 100644
--- a/tests/framework/web/ResponseTest.php
+++ b/tests/framework/web/ResponseTest.php
@@ -171,6 +171,16 @@ public function testRedirect()
         );
     }
 
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/19795
+     */
+    public function testRedirectNewLine()
+    {
+        $this->expectException('yii\base\InvalidRouteException');
+
+        $this->response->redirect(urldecode('http://test-domain.com/gql.json;%0aa.html'));
+    }
+
     /**
      * @dataProvider dataProviderAjaxRedirectInternetExplorer11
      */
@@ -370,21 +380,116 @@ public function testSendFileWithInvalidCharactersInFileName()
         );
     }
 
-    public function testSameSiteCookie()
+    /**
+     * @dataProvider cookiesTestProvider
+     */
+    public function testCookies($cookieConfig, $expected)
     {
         $response = new Response();
-        $response->cookies->add(new Cookie([
-            'name'     => 'test',
-            'value'    => 'testValue',
-            'sameSite' => Cookie::SAME_SITE_STRICT,
-        ]));
+        $response->cookies->add(new Cookie(array_merge(
+            [
+                'name'     => 'test',
+                'value'    => 'testValue',
+            ],
+            $cookieConfig
+        )));
 
         ob_start();
         $response->send();
         $content = ob_get_clean();
 
-        // Only way to test is that it doesn't create any errors
-        $this->assertEquals('', $content);
+        $cookies = $this->parseHeaderCookies();
+        if ($cookies === false) {
+            // Unable to resolve cookies, only way to test is that it doesn't create any errors
+            $this->assertEquals('', $content);
+        } else {
+            $testCookie = $cookies['test'];
+            $actual = array_intersect_key($testCookie, $expected);
+            ksort($actual);
+            ksort($expected);
+            $this->assertEquals($expected, $actual);
+        }
+    }
+
+    public function cookiesTestProvider()
+    {
+        $expireInt = time() + 3600;
+        $expireString = date('D, d-M-Y H:i:s', $expireInt) . ' GMT';
+
+        $testCases = [
+            'same-site' => [
+                ['sameSite' => Cookie::SAME_SITE_STRICT],
+                ['samesite' => Cookie::SAME_SITE_STRICT],
+            ],
+            'expire-as-int' => [
+                ['expire' => $expireInt],
+                ['expires' => $expireString],
+            ],
+            'expire-as-string' => [
+                ['expire' => $expireString],
+                ['expires' => $expireString],
+            ],
+        ];
+
+        if (version_compare(PHP_VERSION, '5.5.0', '>=')) {
+            $testCases = array_merge($testCases, [
+                'expire-as-date_time' => [
+                    ['expire' => new \DateTime('@' . $expireInt)],
+                    ['expires' => $expireString],
+                ],
+                'expire-as-date_time_immutable' => [
+                    ['expire' => new \DateTimeImmutable('@' . $expireInt)],
+                    ['expires' => $expireString],
+                ],
+            ]);
+        }
+
+        return $testCases;
+    }
+
+    /**
+     * Tries to parse cookies set in the response headers.
+     * When running PHP on the CLI headers are not available (the `headers_list()` function always returns an
+     * empty array). If possible use xDebug: http://xdebug.org/docs/all_functions#xdebug_get_headers
+     * @param $name
+     * @return array|false
+     */
+    protected function parseHeaderCookies() {
+
+        if (!function_exists('xdebug_get_headers')) {
+            return false;
+        }
+
+        $cookies = [];
+        foreach(xdebug_get_headers() as $header) {
+            if (strpos($header, 'Set-Cookie: ') !== 0) {
+                continue;
+            }
+
+            $name = null;
+            $params = [];
+            $pairs = explode(';', substr($header, 12));
+            foreach ($pairs as  $index => $pair) {
+                $pair = trim($pair);
+                if (strpos($pair, '=') === false) {
+                    $params[strtolower($pair)] = true;
+                } else {
+                    list($paramName, $paramValue) = explode('=', $pair, 2);
+                    if ($index === 0) {
+                        $name = $paramName;
+                        $params['value'] = urldecode($paramValue);
+                    } else {
+                        $params[strtolower($paramName)] = urldecode($paramValue);
+                    }
+                }
+            }
+            if ($name === null) {
+                throw new \Exception('Could not determine cookie name for header "' . $header . '".');
+            }
+            $cookies[$name] = $params;
+        }
+
+        return $cookies;
     }
 
     /**
diff --git a/tests/framework/widgets/LinkSorterTest.php b/tests/framework/widgets/LinkSorterTest.php
index 13d4311da73..49da1fce71e 100644
--- a/tests/framework/widgets/LinkSorterTest.php
+++ b/tests/framework/widgets/LinkSorterTest.php
@@ -8,7 +8,6 @@
 namespace yiiunit\framework\widgets;
 
 use yii\data\ActiveDataProvider;
-use yii\widgets\Breadcrumbs;
 use yii\widgets\LinkSorter;
 use yii\widgets\ListView;
 use yiiunit\data\ar\ActiveRecord;
@@ -28,7 +27,6 @@ protected function setUp()
         parent::setUp();
         ActiveRecord::$db = $this->getConnection();
         $this->mockWebApplication();
-        $this->breadcrumbs = new Breadcrumbs();
     }
 
     public function testLabelsSimple()
diff --git a/tests/framework/widgets/MenuTest.php b/tests/framework/widgets/MenuTest.php
index 192bb44131f..3de5f5efd83 100644
--- a/tests/framework/widgets/MenuTest.php
+++ b/tests/framework/widgets/MenuTest.php
@@ -18,7 +18,14 @@ class MenuTest extends \yiiunit\TestCase
     protected function setUp()
     {
         parent::setUp();
-        $this->mockApplication();
+        $this->mockWebApplication([
+            'components'=>[
+                'urlManager' => [
+                    'enablePrettyUrl' => true,
+                    'showScriptName' => false,
+                ],
+            ],
+        ]);
     }
 
     public function testEncodeLabel()
@@ -201,6 +208,149 @@ public function testActiveItemClosure()
         $this->assertEqualsWithoutLE($expected, $output);
     }
 
+    public function testActiveItemClosureWithLogic()
+    {
+        $output = Menu::widget([
+            'route' => 'test/logic',
+            'params' => [],
+            'linkTemplate' => '',
+            'labelTemplate' => '',
+            'items' => [
+                [
+                    'label' => 'logic item',
+                    'url' => 'test/logic',
+                    'template' => 'label: {label}; url: {url}',
+                    'active' => function ($item, $hasActiveChild, $isItemActive, $widget) {
+                        return $widget->route === 'test/logic';
+                    },
+                ],
+                [
+                    'label' => 'another item',
+                    'url' => 'test/another',
+                    'template' => 'label: {label}; url: {url}',
+                ]
+            ],
+        ]);
+
+        $expected = <<<'HTML'
+<ul><li class="active">label: logic item; url: test/logic</li>
+<li>label: another item; url: test/another</li></ul>
+HTML;
+
+        $this->assertEqualsWithoutLE($expected, $output);
+    }
+
+    public function testActiveItemClosureWithLogicParent()
+    {
+        $output = Menu::widget([
+            'route' => 'test/logic',
+            'params' => [],
+            'linkTemplate' => '',
+            'labelTemplate' => '',
+            'activateParents' => true,
+            'items' => [
+                [
+                    'label' => 'Home',
+                    'url' => 'test/home',
+                    'template' => 'label: {label}; url: {url}',
+                ],
+                [
+                    'label' => 'About',
+                    'url' => 'test/about',
+                    'template' => 'label: {label}; url: {url}',
+                ],
+                [
+                    'label' => 'Parent',
+                    'items' => [
+                        [
+                            'label' => 'logic item',
+                            'url' => 'test/logic',
+                            'template' => 'label: {label}; url: {url}',
+                            'active' => function ($item, $hasActiveChild, $isItemActive, $widget) {
+                                return $widget->route === 'test/logic';
+                            },
+                        ],
+                        [
+                            'label' => 'another item',
+                            'url' => 'test/another',
+                            'template' => 'label: {label}; url: {url}',
+                        ]
+                    ],
+                ],
+            ],
+        ]);
+
+        $expected = <<<'HTML'
+<ul><li>label: Home; url: test/home</li>
+<li>label: About; url: test/about</li>
+<li class="active">
+<ul>
+<li class="active">label: logic item; url: test/logic</li>
+<li>label: another item; url: test/another</li>
+</ul>
+</li></ul>
+HTML;
+
+        $this->assertEqualsWithoutLE($expected, $output);
+    }
+
+    public function testActiveItemClosureParentAnotherItem()
+    {
+        /** @see https://github.com/yiisoft/yii2/issues/19060 */
+        $output = Menu::widget([
+            'route' => 'test/another',
+            'params' => [],
+            'linkTemplate' => '',
+            'labelTemplate' => '',
+            'activateParents' => true,
+            'items' => [
+                [
+                    'label' => 'Home',
+                    'url' => 'test/home',
+                    'template' => 'label: {label}; url: {url}',
+                ],
+                [
+                    'label' => 'About',
+                    'url' => 'test/about',
+                    'template' => 'label: {label}; url: {url}',
+                ],
+                [
+                    'label' => 'Parent',
+                    'items' => [
+                        [
+                            'label' => 'another item',
+                            // use non relative route to avoid error in BaseUrl::normalizeRoute (missing controller)
+                            'url' => ['/test/another'], 
+                            'template' => 'label: {label}; url: {url}',
+                        ],
+                        [
+                            'label' => 'logic item',
+                            'url' => 'test/logic',
+                            'template' => 'label: {label}; url: {url}',
+                            'active' => function ($item, $hasActiveChild, $isItemActive, $widget) {
+                                return $widget->route === 'test/logic';
+                            },
+                        ],
+                        
+                    ],
+                ],
+            ],
+        ]);
+
+        $expected = <<<'HTML'
+<ul><li>label: Home; url: test/home</li>
+<li>label: About; url: test/about</li>
+<li class="active">
+<ul>
+<li class="active">label: another item; url: /test/another</li>
+<li>label: logic item; url: test/logic</li>
+</ul>
+</li></ul>
+HTML;
+
+        $this->assertEqualsWithoutLE($expected, $output);
+    }
+
     public function testItemClassAsArray()
     {
         $output = Menu::widget([
@@ -302,8 +452,31 @@ public function testItemClassAsString()
         $this->assertEqualsWithoutLE($expected, $output);
     }
 
-    /*public function testIsItemActive()
+    public function testIsItemActive()
     {
-        // TODO: implement test of protected method isItemActive()
-    }*/
+        $output = Menu::widget([
+            'route' => 'test/item2',
+            'params' => [
+                'page'=>'5',
+            ],
+            'items' => [
+                [
+                    'label' => 'item1',
+                    'url' => ['/test/item1'] 
+                ],
+                [
+                    'label' => 'item2',
+                    // use non relative route to avoid error in BaseUrl::normalizeRoute (missing controller)
+                    'url' => ['/test/item2','page'=>'5']
+                ],
+                
+            ],
+        ]);
+
+        $expected = <<<'HTML'
+<ul><li><a href="/test/item1">item1</a></li>
+<li class="active"><a href="/test/item2?page=5">item2</a></li></ul>
+HTML;
+        $this->assertEqualsWithoutLE($expected, $output);
+    }
 }
diff --git a/tests/js/data/yii.activeForm.html b/tests/js/data/yii.activeForm.html
index d44c9f1282b..d278be5b8b8 100644
--- a/tests/js/data/yii.activeForm.html
+++ b/tests/js/data/yii.activeForm.html
@@ -48,3 +48,15 @@
         <div class="help-block"></div>
     </div>
 </form>
+<form id="w3">
+    <div class="form-group field-test-text2 required">
+        <label class="control-label" for="test-text2">Test text</label>
+        <input type="text" id="test-text2" class="form-control" name="Test[text2]" aria-required="true">
+        <div class="help-block"></div>
+    </div>
+    <div class="form-group field-test-text3 required">
+        <label class="control-label" for="test-text3">Test text</label>
+        <input type="text" id="test-text3" class="form-control" name="Test[text3]" aria-required="true">
+        <div class="help-block"></div>
+    </div>
+</form>
diff --git a/tests/js/tests/yii.activeForm.test.js b/tests/js/tests/yii.activeForm.test.js
index 16671239ea3..f79599b0747 100644
--- a/tests/js/tests/yii.activeForm.test.js
+++ b/tests/js/tests/yii.activeForm.test.js
@@ -27,6 +27,21 @@ describe('yii.activeForm', function () {
         var script = new vm.Script(code);
         var context = new vm.createContext({window: window, document: window.document, yii: yii});
         script.runInContext(context);
+        /** This is a workaround for a jsdom issue, that prevents :hidden and :visible from working as expected.
+         * @see https://github.com/jsdom/jsdom/issues/1048 */
+        context.window.Element.prototype.getClientRects = function () {
+            var node = this;
+            while(node) {
+                if(node === document) {
+                    break;
+                }
+                if (!node.style || node.style.display === 'none' || node.style.visibility === 'hidden') {
+                    return [];
+                }
+                node = node.parentNode;
+            }
+            return [{width: 100, height: 100}];
+        };
     }
 
     var activeFormHtml = fs.readFileSync('tests/js/data/yii.activeForm.html', 'utf-8');
@@ -117,6 +132,60 @@ describe('yii.activeForm', function () {
                 assert.isFalse($activeForm.data('yiiActiveForm').validated);
             });
         });
+
+        describe('with ajax validation', function () {
+            describe('with rapid validation of multiple fields', function () {
+                it('should cancel overlapping ajax requests and not display outdated validation results', function () {
+                    $activeForm = $('#w3');
+                    $activeForm.yiiActiveForm([{
+                        id: 'test-text2',
+                        input: '#test-text2',
+                        container: '.field-test-text2',
+                        enableAjaxValidation: true
+                    }, {
+                        id: 'test-text3',
+                        input: '#test-text3',
+                        container: '.field-test-text3',
+                        enableAjaxValidation: true
+                    }], {
+                        validationUrl: ''
+                    });
+
+                    let requests = [];
+                    function fakeAjax(object) {
+                        const request = {
+                            jqXHR: {
+                                abort: function () {
+                                    request.aborted = true;
+                                }
+                            },
+                            aborted: false,
+                            respond: function (response) {
+                                if (this.aborted) {
+                                    return;
+                                }
+                                object.success(response);
+                                object.complete(this.jqXHR, '');
+                            }
+                        };
+                        requests.push(request);
+                        object.beforeSend(request.jqXHR, '');
+                    }
+
+                    const ajaxStub = sinon.stub($, 'ajax', fakeAjax);
+                    $activeForm.yiiActiveForm('validateAttribute', 'test-text2');
+                    assert.isTrue(requests.length === 1);
+                    $activeForm.yiiActiveForm('validateAttribute', 'test-text3');
+                    // When validateAttribute was called on text2, its value was valid.
+                    // The value of text3 wasn't.
+                    requests[0].respond({'test-text3': ['Field cannot be empty']});
+                    // When validateAttribute was called on text3, its value was valid.
+                    requests[1].respond([]);
+                    assert.isTrue($activeForm.find('.field-test-text3').hasClass('has-success'));
+                    ajaxStub.restore();
+                });
+            });
+        })
     });
 
     describe('resetForm method', function () {
diff --git a/tests/js/tests/yii.gridView.test.js b/tests/js/tests/yii.gridView.test.js
index bc1feb6ceee..85f5b56637e 100644
--- a/tests/js/tests/yii.gridView.test.js
+++ b/tests/js/tests/yii.gridView.test.js
@@ -658,8 +658,8 @@ describe('yii.gridView', function () {
                     click($checkAllCheckbox);
                     assert.lengthOf($checkRowCheckboxes.filter(':checked'), 3);
                     assert.isTrue($checkAllCheckbox.prop('checked'));
-                    // "change" should be called 3 times, 1 time per each row, no matter what state it has
-                    assert.equal(changedSpy.callCount, 3);
+                    // "change" should be called 2 more times for the remaining 2 unchecked rows
+                    assert.equal(changedSpy.callCount, 2);
 
                     // Uncheck first row
                     changedSpy.reset();
@@ -711,12 +711,12 @@ describe('yii.gridView', function () {
                     checkAll: 'selection_all'
                 });
 
-                // Check first row ("prop" should be called once)
+                // Click first row checkbox ("prop" on "check all" checkbox should not be called)
                 click($gridView.find('input[name="selection[]"][value="1"]'));
-                // Check all rows ("prop" should be called 2 times, 1 time for each row)
+                // Click "check all" checkbox ("prop" should be called once on the remaining unchecked row)
                 click($gridView.find('input[name="selection_all"]'));
 
-                assert.equal(jQueryPropStub.callCount, 3);
+                assert.equal(jQueryPropStub.callCount, 1);
             });
         });
     });
@@ -831,9 +831,9 @@ describe('yii.gridView', function () {
             click($gridView2.find('input[name="selection[]"][value="1"]'));
             assert.equal(jQueryPropStub.callCount, 0);
 
-            click($checkRowCheckboxes.filter('[value="1"]')); // Check first row ("prop" should be called once)
-            click($checkAllCheckbox); // Check all rows ("prop" should be called 3 times, 1 time for each row)
-            assert.equal(jQueryPropStub.callCount, 4);
+            click($checkRowCheckboxes.filter('[value="1"]')); // Click first row checkbox ("prop" on "check all" checkbox should not be called)
+            click($checkAllCheckbox); // Click "check all" checkbox ("prop" should be called 2 times on the remaining unchecked rows)
+            assert.equal(jQueryPropStub.callCount, 2);
         });
     });
 
