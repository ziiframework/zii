diff --git a/src/BaseYii.php b/src/BaseYii.php
index 002b0f61ed8..5561df9c450 100644
--- a/src/BaseYii.php
+++ b/src/BaseYii.php
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.44-dev';
+        return '2.0.46-dev';
     }
 
     /**
@@ -130,7 +130,7 @@ public static function getVersion()
      */
     public static function getAlias($alias, $throwException = true)
     {
-        if (strncmp($alias, '@', 1) !== 0) {
+        if (strncmp((string)$alias, '@', 1) !== 0) {
             // not an alias
             return $alias;
         }
@@ -203,7 +203,7 @@ public static function getRootAlias($alias)
      * @param string $alias the alias name (e.g. "@yii"). It must start with a '@' character.
      * It may contain the forward-slash '/' which serves as a boundary character when performing
      * alias translation by [[getAlias()]].
-     * @param string $path the path corresponding to the alias. If this is null, the alias will
+     * @param string|null $path the path corresponding to the alias. If this is null, the alias will
      * be removed. Trailing '/' and '\' characters will be trimmed. This can be
      *
      * - a directory or a file path (e.g. `/tmp`, `/tmp/main.txt`)
@@ -384,7 +384,7 @@ public static function getLogger()
 
     /**
      * Sets the logger object.
-     * @param Logger $logger the logger object.
+     * @param Logger|null $logger the logger object.
      */
     public static function setLogger($logger)
     {
@@ -502,7 +502,7 @@ public static function endProfile($token, $category = 'application')
     public static function powered()
     {
         return \Yii::t('yii', 'Powered by {yii}', [
-            'yii' => '<a href="http://www.yiiframework.com/" rel="external">' . \Yii::t('yii',
+            'yii' => '<a href="https://www.yiiframework.com/" rel="external">' . \Yii::t('yii',
                     'Yii Framework') . '</a>',
         ]);
     }
@@ -528,7 +528,7 @@ public static function powered()
      * @param string $category the message category.
      * @param string $message the message to be translated.
      * @param array $params the parameters that will be used to replace the corresponding placeholders in the message.
-     * @param string $language the language code (e.g. `en-US`, `en`). If this is null, the current
+     * @param string|null $language the language code (e.g. `en-US`, `en`). If this is null, the current
      * [[\yii\base\Application::language|application language]] will be used.
      * @return string the translated message.
      */
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index da783b578fe..31597a208e3 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -1,36 +1,105 @@
 Yii Framework 2 Change Log
 ==========================
 
-2.0.44 under development
+2.0.46 under development
 ------------------------
 
-- Enh #13105: Add yiiActiveForm validate_only property for skipping form auto-submission (ptolomaues)
-- Enh #18967: Use proper attribute names for tabular data in `yii\widgets\ActiveField::addAriaAttributes()` (AnkIF)
-- Bug #18798: Fix `StringHelper::dirname()` when passing string with a trailing slash (perlexed)
-- Enh #18328: Raise warning when trying to register a file after `View::endPage()` has been called (perlexed)
-- Enh #18812: Added error messages and optimized "error" methods in `yii\helpers\BaseJson` (WinterSilence, samdark)
-- Chg #18823: Rollback changes #18806 in `yii\validators\ExistValidator::checkTargetRelationExistence()` (WinterSilence)
-- Enh #18826: Add ability to turn the sorting off for a clicked column in GridView with multisort (ditibal)
+- Bug #19467: Revert changes in `Inflector::camel2words()` introduced in #19204 (samdark)
+- Bug #19471: Enable console commands on hostings with disabled `exec()` function (WinterSilence, lubosdz)
+- Bug #19469: Fix a virtual relation not working because of new isset checks in `\yii\db\ActiveRelationTrait` (wvanheumen)
+- Bug #19380: Fix PHP 8.1 passing non string to trim() in `yii\db\Query` (wa1kb0y)
+- Bug #19272: Fix bug in dirty attributes check on multidimensional array (speedplli)
+- Bug #19349: Fix PHP 8.1 error when attribute and label of `yii\grid\DataColumn` are empty (githubjeka)
+- Bug #19243: Handle `finfo_open` for tar.xz as `application/octet-stream` on PHP 8.1 (longthanhtran)
+- Bug #19235: Fix return type compatibility of `yii\web\SessionIterator` class methods for PHP 8.1 (virtual-designer)
+- Bug #19256: Pass missed `$view` to user's callback in `yii\validators\InlineValidator::clientValidateAttribute()` (WinterSilence)
+- Enh #19270: Replace deprecated `scss` converter in `yii\web\AssetConverter::$commands` (WinterSilence)
+- Enh #19254: Support specifying custom characters for `yii.validation.trim()` and replace deprecated `jQuery.trim()` (WinterSilence)
+- Bug #19291: Reset errors and validators in `yii\base\Model::__clone()` (WinterSilence)
+- Enh #19295: Added alias `text/rtf` for mime-type `application/rtf` (lesha724)
+- Enh #19308: Add `yii\web\UploadedFile::$fullPath` represents 'full_path' key added in PHP 8.1 (WinterSilence)
+- Bug #19303: Fix serialization in `yii\caching\Dependency::generateReusableHash()` (WinterSilence)
+- Enh #19304: Add filtering validator `yii\validators\TrimValidator` (WinterSilence)
+- Enh #19309: Optimize `yii\base\Model::attributes()` (WinterSilence)
+- Bug #19322: Revert force setting value to empty string in case it's `null` in `yii\validators\FilterValidator::validateAttribute()` (bizley)
+- Bug #19324: Fix `yii\helpers\BaseHtml::renderSelectOptions()` giving wrong selection for boolean attributes (adnandautovic)
+- Bug #19329: Fix `yii\web\GroupUrlRule` to properly normalize prefix (bizley)
+- Bug #19328: Passing null to parameter #1 ($string) of type string is deprecated in `yii\db\oci\Schema` (Arkeins)
+- Enh #19318: Add support for typecasting PHP 8.1 enums (EtienneBruines)
+- Bug #19237: Fix OCI PHP 8.1 passing `null` to trim() (longthanhtran)
+- Bug #19312: Fix PHP 8.1 error when passing null to `yii\helpers\BaseInflector` (WinterSilence)
+- Bug #19368: Fix PHP 8.1 error when `$fileMimeType` is `null` in `yii\validators\FileValidator::validateMimeType()` (bizley)
+- Enh #19384: Normalize `setBodyParams()` and `getBodyParam()` in `yii\web\Request` (WinterSilence, albertborsos)
+- Bug #19386: Fix recursive calling `yii\helpers\BaseArrayHelper::htmlDecode()` (WinterSilence)
+- Bug #19407: Fix `yii\validators\UniqueValidator` and `yii\validators\ExistValidator` to respect `skipOnError` option for target attributes (bizley)
+- Bug #19418: Fix `yii\filters\auth\CompositeAuth` ignoring `only` and `except` options (lesha724)
+- Enh #19401: Delay `exit(1)` in `yii\base\ErrorHandler::handleFatalError` (arrilot)
+- Bug #19402: Add shutdown event and fix working directory in `yii\base\ErrorHandler` (WinterSilence)
+- Enh #19416: Update and improve configurations for `yii\console\controllers\MessageController` (WinterSilence)
+- Bug #19403: Fix types in `yii\web\SessionIterator` (WinterSilence)
+- Enh #19420: Update list of JS callbacks in `yii\widgets\MaskedInput` (WinterSilence)
+- Bug #19400: Fix passing null in `yii\web\Response::redirect()` (bizley)
+- Enh #19437: Add support to specify request port by trusted proxies in `\yii\web\Request::getServerPort()` (rhertogh)
+- Bug #19445: Fix caching in `yii\i18n\Formatter::getUnitMessage()` (WinterSilence)
+- Bug #19454: Fix PDO exception code not properly passed to `yii\db\Exception` (Roguyt)
+- Bug #19477: cast shell_exec() output to string (schmunk42)
+- Bug #19481: Exception is always empty in ErrorHandler when handling fatal error (Renkas)
+- Bug #19462: Fix validator client options to encode HTML tags (bizley)
+
+2.0.45 February 11, 2022
+------------------------
+
+- Bug #19004: Container::resolveCallableDependencies() unable to handle union and intersection types (sartor)
+- Bug #19041: Fix PHP 8.1 issues (longthanhtran, samdark, pamparam83, sartor, githubjeka)
+- Bug #19047: Fix deprecated preg_match() passing null parameters #2 in db\mysql\Schema.php (longthanhtran)
+- Bug #19130: Fix DbSession breaks in some case (longthanhtran)
+- Bug #19138: Allow digits in language code (ntesic)
+- Bug #19148: Fix undefined array key errors in `yii\db\ActiveRelationTrait` (stevekr)
+- Bug #19182: RBAC Migration failed when use oracle with oci8 (Murolike)
+- Bug #19187: Fix `yii\filters\PageCache` to store original headers names instead of normalized ones (bizley)
+- Bug #19191: Change `\Exception` to `\Throwable` in `BadRequestHttpException` and `HttpException` (Dmitrijlin)
+- Bug #19204: Support numbers in Inflector::camel2words (longthanhtran)
+- Enh #18821: Allow `yii\db\ExpressionInterface` as column in `yii\db\conditions\InBuilder` (ntesic)
+- Enh #19171: Added `$pagination` and `$sort` to `\yii\rest\IndexAction` for easy configuration (rhertogh)
+
+
+2.0.44 December 30, 2021
+------------------------
+
+- Bug #17119: Fix `yii\caching\Cache::multiSet()` to use `yii\caching\Cache::$defaultDuration` when no duration is passed (OscarBarrett)
 - Bug #18646: Remove stale identity data from session if `IdentityInterface::findIdentity()` returns `null` (mikehaertl)
+- Bug #18660: Fix database migration template does not work with namespaced migrations when migration name does not include namespace (iridance)
+- Bug #18798: Fix `StringHelper::dirname()` when passing string with a trailing slash (perlexed)
 - Bug #18832: Fix `Inflector::camel2words()` adding extra spaces (brandonkelly)
-- Enh #18762: Added `yii\helpers\Json::$keepObjectType` and `yii\web\JsonResponseFormatter::$keepObjectType` in order to avoid changing zero-indexed objects to array in `yii\helpers\Json::encode()` (zebraf1)
-- Enh #18783: Add support for URI namespaced tags in `XmlResponseFormatter` (WinterSilence, samdark)
-- Enh #18783: Add `XmlResponseFormatter::$objectTagToLowercase` option to lowercase object tags (WinterSilence, samdark)
-- Bug #18845: Fix duplicating `id` in `MigrateController::addDefaultPrimaryKey()` (WinterSilence, samdark)
-- Bug #17119: Fix `yii\caching\Cache::multiSet()` to use `yii\caching\Cache::$defaultDuration` when no duration is passed (OscarBarrett)
 - Bug #18842: Fix `yii\base\Controller::bindInjectedParams()` to not throw error when argument of `ReflectionUnionType` type is passed (bizley)
-- Enh #18858: Reduce memory usage in `yii\base\View::afterRender` method (LeoOnTheEarth)
+- Bug #18845: Fix duplicating `id` in `MigrateController::addDefaultPrimaryKey()` (WinterSilence, samdark)
 - Bug #18880: Fix `yii\helpers\ArrayHelper::toArray()` for `DateTime` objects in PHP >= 7.4 (rhertogh)
 - Bug #18883: Fix `yii\web\HeaderCollection::fromArray()` now ensures lower case keys (rhertogh)
-- Enh #18899: Replace usages of `strpos` with `strncmp` and remove redundant usage of `array_merge` and `array_values` (AlexGx)
 - Bug #18898: Fix `yii\helpers\Inflector::camel2words()` to work with words ending with 0 (michaelarnauts)
-- Enh #18904: Improve Captcha client-side validation (hexkir)
-- Bug #18913: Add filename validation for `MessageSource::getMessageFilePath()` (uaoleg)
 - Bug #18909: Fix bug with binding default action parameters for controllers (bizley)
+- Bug #18913: Add filename validation for `MessageSource::getMessageFilePath()` (uaoleg)
 - Bug #18955: Check `yiisoft/yii2-swiftmailer` before using as default mailer in `yii\base\Application` (WinterSilence)
 - Bug #18988: Fix default value of `yii\console\controllers\MessageController::$translator` (WinterSilence)
 - Bug #18993: Load defaults by `attributes()` in `yii\db\ActiveRecord::loadDefaultValues()` (WinterSilence)
 - Bug #19021: Fix return type in PhpDoc `yii\db\Migration` functions `up()`, `down()`, `safeUp()` and `safeDown()` (WinterSilence, rhertogh)
+- Bug #19030: Add DI container usage to `yii\base\Widget::end()` (papppeter)
+- Bug #19031: Fix displaying console help for parameters with declared types (WinterSilence)
+- Bug #19096: Fix `Request::getIsConsoleRequest()` may return erroneously when testing a Web application in Codeception (WinterSilence)
+- Enh #13105: Add yiiActiveForm `validate_only` property for skipping form auto-submission (ptolomaues)
+- Enh #18328: Raise warning when trying to register a file after `View::endPage()` has been called (perlexed)
+- Enh #18762: Add `yii\helpers\Json::$keepObjectType` and `yii\web\JsonResponseFormatter::$keepObjectType` in order to avoid changing zero-indexed objects to array in `yii\helpers\Json::encode()` (zebraf1)
+- Enh #18783: Add support for URI namespaced tags in `XmlResponseFormatter` (WinterSilence, samdark)
+- Enh #18783: Add `XmlResponseFormatter::$objectTagToLowercase` option to lowercase object tags (WinterSilence, samdark)
+- Enh #18812: Add error messages and optimize "error" methods in `yii\helpers\BaseJson` (WinterSilence, samdark)
+- Enh #18826: Add ability to turn the sorting off for a clicked column in GridView with multisort (ditibal)
+- Enh #18858: Reduce memory usage in `yii\base\View::afterRender` method (LeoOnTheEarth)
+- Enh #18899: Replace usages of `strpos` with `strncmp` and remove redundant usage of `array_merge` and `array_values` (AlexGx)
+- Enh #18904: Improve Captcha client-side validation (hexkir)
+- Enh #18967: Use proper attribute names for tabular data in `yii\widgets\ActiveField::addAriaAttributes()` (AnkIF)
+- Enh #19005: Add `yii\base\Module::setControllerPath()` (WinterSilence)
+- Enh #19098: Add `yii\helper\BaseHtml::$normalizeClassAttribute` to fix duplicate classes (WinterSilence)
+- Enh #19108: Optimize `Component::hasEventHandlers()` and `Component::trigger()` (WinterSilence)
+- Chg #18823: Rollback changes from #18806 in `yii\validators\ExistValidator::checkTargetRelationExistence()` (WinterSilence)
 
 
 2.0.43 August 09, 2021
diff --git a/src/UPGRADE.md b/src/UPGRADE.md
index 8a9a20a4737..19a6a78160b 100644
--- a/src/UPGRADE.md
+++ b/src/UPGRADE.md
@@ -51,10 +51,24 @@ if you want to upgrade from version A to version C and there is
 version B between A and C, you need to follow the instructions
 for both A and B.
 
+Upgrade from Yii 2.0.45
+-----------------------
+
+* Changes in `Inflector::camel2words()` introduced in 2.0.45 were reverted so it works as in pre-2.0.45. If you need
+  2.0.45 behavior, [introduce your own method](https://github.com/yiisoft/yii2/pull/19495/files).
+
+Upgrade from Yii 2.0.44
+-----------------------
+
+* `yii\filters\PageCache::$cacheHeaders` now takes a case-sensitive list of header names since PageCache is no longer 
+  storing the normalized (lowercase) versions of them so make sure this list is properly updated and your page cache 
+  is recreated.
+
 Upgrade from Yii 2.0.43
 -----------------------
 
-* `Json::encode()` can now handle zero-indexed objects in same way as `json_encode()` and keep them as objects. In order to avoid breaking backwards compatibility this behavior could be enabled by a new option flag but is disabled by default.
+* `Json::encode()` can now handle zero-indexed objects in same way as `json_encode()` and keep them as objects. In order 
+  to avoid breaking backwards compatibility this behavior could be enabled by a new option flag but is disabled by default.
   * Set `yii/helpers/Json::$keepObjectType = true` anywhere in your application code
   * Or configure json response formatter to enable it for all JSON responses:
       ```php
@@ -68,7 +82,8 @@ Upgrade from Yii 2.0.43
         ],
       ],
       ```
-* `yii\caching\Cache::multiSet()` now uses the default cache duration (`yii\caching\Cache::$defaultDuration`) when no duration is provided. A duration of 0 should be explicitly passed if items should not expire.
+* `yii\caching\Cache::multiSet()` now uses the default cache duration (`yii\caching\Cache::$defaultDuration`) when no 
+  duration is provided. A duration of 0 should be explicitly passed if items should not expire.
 
 Upgrade from Yii 2.0.42
 -----------------------
diff --git a/src/assets/yii.validation.js b/src/assets/yii.validation.js
index 2f1e06039b1..c4185f91849 100644
--- a/src/assets/yii.validation.js
+++ b/src/assets/yii.validation.js
@@ -24,7 +24,7 @@ yii.validation = (function ($) {
             var valid = false;
             if (options.requiredValue === undefined) {
                 var isString = typeof value == 'string' || value instanceof String;
-                if (options.strict && value !== undefined || !options.strict && !pub.isEmpty(isString ? $.trim(value) : value)) {
+                if (options.strict && value !== undefined || !options.strict && !pub.isEmpty(isString ? trimString(value) : value)) {
                     valid = true;
                 }
             } else if (!options.strict && value == options.requiredValue || options.strict && value === options.requiredValue) {
@@ -243,8 +243,17 @@ yii.validation = (function ($) {
             }
 
             value = $input.val();
-            if (!options.skipOnEmpty || !pub.isEmpty(value)) {
-                value = $.trim(value);
+            if (
+                (!options.skipOnEmpty || !pub.isEmpty(value))
+                && (!options.skipOnArray || !Array.isArray(value))
+            ) {
+                if (Array.isArray(value)) {
+                    for (var i = 0; i < value.length; i++) {
+                        value[i] = trimString(value[i], options);
+                    }
+                } else {
+                    value = trimString(value, options);
+                }
                 $input.val(value);
             }
 
@@ -467,5 +476,25 @@ yii.validation = (function ($) {
         }
     }
 
+    /**
+     * PHP: `trim($path, ' /')`, JS: `yii.helpers.trim(path, {chars: ' /'})`
+     */
+    function trimString(value, options = {skipOnEmpty: true, chars: null}) {
+        if (options.skipOnEmpty !== false && pub.isEmpty(value)) {
+            return value;
+        }
+
+        value = new String(value);
+        if (options.chars || !String.prototype.trim) {
+            var chars = !options.chars
+                ? ' \\s\xA0'
+                : options.chars.replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, '\$1');
+
+            return value.replace(new RegExp('^[' + chars + ']+|[' + chars + ']+$', 'g'), '');
+        }
+
+        return value.trim();
+    }
+
     return pub;
 })(jQuery);
diff --git a/src/base/Action.php b/src/base/Action.php
index 5a9413cf296..0088f908d33 100644
--- a/src/base/Action.php
+++ b/src/base/Action.php
@@ -30,8 +30,7 @@
  *
  * For more details and usage information on Action, see the [guide article on actions](guide:structure-controllers).
  *
- * @property-read string $uniqueId The unique ID of this action among the whole application. This property is
- * read-only.
+ * @property-read string $uniqueId The unique ID of this action among the whole application.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/base/ActionFilter.php b/src/base/ActionFilter.php
index 10d745a3b2e..b39c75826d1 100644
--- a/src/base/ActionFilter.php
+++ b/src/base/ActionFilter.php
@@ -36,7 +36,7 @@ class ActionFilter extends Behavior
      *
      * @see except
      */
-    public $only;
+    public $only = [];
     /**
      * @var array list of action IDs that this filter should not apply to.
      * @see only
diff --git a/src/base/Application.php b/src/base/Application.php
index 3e095447c17..94910e1e3d5 100644
--- a/src/base/Application.php
+++ b/src/base/Application.php
@@ -14,40 +14,32 @@
  *
  * For more details and usage information on Application, see the [guide article on applications](guide:structure-applications).
  *
- * @property-read \yii\web\AssetManager $assetManager The asset manager application component. This property
- * is read-only.
- * @property-read \yii\rbac\ManagerInterface $authManager The auth manager application component. Null is
- * returned if auth manager is not configured. This property is read-only.
+ * @property-read \yii\web\AssetManager $assetManager The asset manager application component.
+ * @property-read \yii\rbac\ManagerInterface|null $authManager The auth manager application component or null
+ * if it's not configured.
  * @property string $basePath The root directory of the application.
  * @property-read \yii\caching\CacheInterface $cache The cache application component. Null if the component is
- * not enabled. This property is read-only.
- * @property-write array $container Values given in terms of name-value pairs. This property is write-only.
- * @property-read \yii\db\Connection $db The database connection. This property is read-only.
+ * not enabled.
+ * @property-write array $container Values given in terms of name-value pairs.
+ * @property-read \yii\db\Connection $db The database connection.
  * @property-read \yii\web\ErrorHandler|\yii\console\ErrorHandler $errorHandler The error handler application
- * component. This property is read-only.
- * @property-read \yii\i18n\Formatter $formatter The formatter application component. This property is
- * read-only.
- * @property-read \yii\i18n\I18N $i18n The internationalization application component. This property is
- * read-only.
- * @property-read \yii\log\Dispatcher $log The log dispatcher application component. This property is
- * read-only.
- * @property-read \yii\mail\MailerInterface $mailer The mailer application component. This property is
- * read-only.
- * @property-read \yii\web\Request|\yii\console\Request $request The request component. This property is
- * read-only.
- * @property-read \yii\web\Response|\yii\console\Response $response The response component. This property is
- * read-only.
+ * component.
+ * @property-read \yii\i18n\Formatter $formatter The formatter application component.
+ * @property-read \yii\i18n\I18N $i18n The internationalization application component.
+ * @property-read \yii\log\Dispatcher $log The log dispatcher application component.
+ * @property-read \yii\mail\MailerInterface $mailer The mailer application component.
+ * @property-read \yii\web\Request|\yii\console\Request $request The request component.
+ * @property-read \yii\web\Response|\yii\console\Response $response The response component.
  * @property string $runtimePath The directory that stores runtime files. Defaults to the "runtime"
  * subdirectory under [[basePath]].
- * @property-read \yii\base\Security $security The security application component. This property is read-only.
+ * @property-read \yii\base\Security $security The security application component.
  * @property string $timeZone The time zone used by this application.
- * @property-read string $uniqueId The unique ID of the module. This property is read-only.
- * @property-read \yii\web\UrlManager $urlManager The URL manager for this application. This property is
- * read-only.
+ * @property-read string $uniqueId The unique ID of the module.
+ * @property-read \yii\web\UrlManager $urlManager The URL manager for this application.
  * @property string $vendorPath The directory that stores vendor files. Defaults to "vendor" directory under
  * [[basePath]].
  * @property-read View|\yii\web\View $view The view application component that is used to render various view
- * files. This property is read-only.
+ * files.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -134,7 +126,7 @@ abstract class Application extends Module
      */
     public $requestedRoute;
     /**
-     * @var Action the requested Action. If null, it means the request cannot be resolved into an action.
+     * @var Action|null the requested Action. If null, it means the request cannot be resolved into an action.
      */
     public $requestedAction;
     /**
@@ -142,7 +134,7 @@ abstract class Application extends Module
      */
     public $requestedParams;
     /**
-     * @var array list of installed Yii extensions. Each array element represents a single extension
+     * @var array|null list of installed Yii extensions. Each array element represents a single extension
      * with the following structure:
      *
      * ```php
@@ -525,7 +517,7 @@ public function getErrorHandler()
 
     /**
      * Returns the cache component.
-     * @return \yii\caching\CacheInterface the cache application component. Null if the component is not enabled.
+     * @return \yii\caching\CacheInterface|null the cache application component. Null if the component is not enabled.
      */
     public function getCache()
     {
@@ -651,7 +643,7 @@ public function coreComponents()
      * This method replaces the `exit()` function by ensuring the application life cycle is completed
      * before terminating the application.
      * @param int $status the exit status (value 0 means normal exit while other values mean abnormal exit).
-     * @param Response $response the response to be sent. If not set, the default application [[response]] component will be used.
+     * @param Response|null $response the response to be sent. If not set, the default application [[response]] component will be used.
      * @throws ExitException if the application is in testing mode
      */
     public function end($status = 0, $response = null)
diff --git a/src/base/ArrayAccessTrait.php b/src/base/ArrayAccessTrait.php
index 87a1db1d61c..9c632bcd605 100644
--- a/src/base/ArrayAccessTrait.php
+++ b/src/base/ArrayAccessTrait.php
@@ -26,6 +26,7 @@ trait ArrayAccessTrait
      * It will be implicitly called when you use `foreach` to traverse the collection.
      * @return \ArrayIterator an iterator for traversing the cookies in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         return new \ArrayIterator($this->data);
@@ -36,6 +37,7 @@ public function getIterator()
      * This method is required by Countable interface.
      * @return int number of data elements.
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return count($this->data);
@@ -46,6 +48,7 @@ public function count()
      * @param mixed $offset the offset to check on
      * @return bool
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return isset($this->data[$offset]);
@@ -56,6 +59,7 @@ public function offsetExists($offset)
      * @param int $offset the offset to retrieve element.
      * @return mixed the element at the offset, null if no element is found at the offset
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return isset($this->data[$offset]) ? $this->data[$offset] : null;
@@ -66,6 +70,7 @@ public function offsetGet($offset)
      * @param int $offset the offset to set element
      * @param mixed $item the element value
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $item)
     {
         $this->data[$offset] = $item;
@@ -75,6 +80,7 @@ public function offsetSet($offset, $item)
      * This method is required by the interface [[\ArrayAccess]].
      * @param mixed $offset the offset to unset element
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         unset($this->data[$offset]);
diff --git a/src/base/Component.php b/src/base/Component.php
index 32f714cbcba..9884509ea52 100644
--- a/src/base/Component.php
+++ b/src/base/Component.php
@@ -93,8 +93,7 @@
  *
  * For more details and usage information on Component, see the [guide article on components](guide:concept-components).
  *
- * @property-read Behavior[] $behaviors List of behaviors attached to this component. This property is
- * read-only.
+ * @property-read Behavior[] $behaviors List of behaviors attached to this component.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -465,13 +464,17 @@ public function hasEventHandlers($name)
     {
         $this->ensureBehaviors();
 
+        if (!empty($this->_events[$name])) {
+            return true;
+        }
+
         foreach ($this->_eventWildcards as $wildcard => $handlers) {
             if (!empty($handlers) && StringHelper::matchWildcard($wildcard, $name)) {
                 return true;
             }
         }
 
-        return !empty($this->_events[$name]) || Event::hasHandlers($this, $name);
+        return Event::hasHandlers($this, $name);
     }
 
     /**
@@ -541,7 +544,7 @@ public function on($name, $handler, $data = null, $append = true)
      * wildcard will be removed, while handlers registered with plain names matching this wildcard will remain.
      *
      * @param string $name event name
-     * @param callable $handler the event handler to be removed.
+     * @param callable|null $handler the event handler to be removed.
      * If it is null, all handlers attached to the named event will be removed.
      * @return bool if a handler is found and detached
      * @see on()
@@ -594,10 +597,12 @@ public function off($name, $handler = null)
 
     /**
      * Triggers an event.
-     * This method represents the happening of an event. It invokes
-     * all attached handlers for the event including class-level handlers.
+     *
+     * This method represents the happening of an event. It invokes all attached handlers for the event
+     * including class-level handlers.
+     *
      * @param string $name the event name
-     * @param Event $event the event parameter. If not set, a default [[Event]] object will be created.
+     * @param Event|null $event the event instance. If not set, a default [[Event]] object will be created.
      */
     public function trigger($name, Event $event = null)
     {
@@ -606,15 +611,15 @@ public function trigger($name, Event $event = null)
         $eventHandlers = [];
         foreach ($this->_eventWildcards as $wildcard => $handlers) {
             if (StringHelper::matchWildcard($wildcard, $name)) {
-                $eventHandlers = array_merge($eventHandlers, $handlers);
+                $eventHandlers[] = $handlers;
             }
         }
-
         if (!empty($this->_events[$name])) {
-            $eventHandlers = array_merge($eventHandlers, $this->_events[$name]);
+            $eventHandlers[] = $this->_events[$name];
         }
 
         if (!empty($eventHandlers)) {
+            $eventHandlers = call_user_func_array('array_merge', $eventHandlers);
             if ($event === null) {
                 $event = new Event();
             }
@@ -640,7 +645,7 @@ public function trigger($name, Event $event = null)
     /**
      * Returns the named behavior object.
      * @param string $name the behavior name
-     * @return null|Behavior the behavior object, or null if the behavior does not exist
+     * @return Behavior|null the behavior object, or null if the behavior does not exist
      */
     public function getBehavior($name)
     {
@@ -698,7 +703,7 @@ public function attachBehaviors($behaviors)
      * Detaches a behavior from the component.
      * The behavior's [[Behavior::detach()]] method will be invoked.
      * @param string $name the behavior's name.
-     * @return null|Behavior the detached behavior. Null if the behavior does not exist.
+     * @return Behavior|null the detached behavior. Null if the behavior does not exist.
      */
     public function detachBehavior($name)
     {
diff --git a/src/base/Controller.php b/src/base/Controller.php
index 0c79060ceff..6bbe10b6dbd 100644
--- a/src/base/Controller.php
+++ b/src/base/Controller.php
@@ -16,12 +16,9 @@
  *
  * For more details and usage information on Controller, see the [guide article on controllers](guide:structure-controllers).
  *
- * @property-read Module[] $modules All ancestor modules that this controller is located within. This property
- * is read-only.
+ * @property-read Module[] $modules All ancestor modules that this controller is located within.
  * @property-read string $route The route (module ID, controller ID and action ID) of the current request.
- * This property is read-only.
- * @property-read string $uniqueId The controller ID that is prefixed with the module ID (if any). This
- * property is read-only.
+ * @property-read string $uniqueId The controller ID that is prefixed with the module ID (if any).
  * @property View|\yii\web\View $view The view object that can be used to render views or view files.
  * @property string $viewPath The directory containing the view files for this controller.
  *
@@ -54,7 +51,7 @@ class Controller extends Component implements ViewContextInterface
      */
     public $defaultAction = 'index';
     /**
-     * @var null|string|false the name of the layout to be applied to this controller's views.
+     * @var string|null|false the name of the layout to be applied to this controller's views.
      * This property mainly affects the behavior of [[render()]].
      * Defaults to null, meaning the actual layout value should inherit that from [[module]]'s layout value.
      * If false, no layout will be applied.
diff --git a/src/base/DynamicModel.php b/src/base/DynamicModel.php
index 4510596d95a..d9fadb0c03b 100644
--- a/src/base/DynamicModel.php
+++ b/src/base/DynamicModel.php
@@ -10,7 +10,9 @@
 use yii\validators\Validator;
 
 /**
- * DynamicModel is a model class primarily used to support ad hoc data validation.
+ * DynamicModel is a model class that supports defining attributes at run-time (the so-called
+ * "dynamic attributes") using its constructor or [[defineAttribute()]]. DynamicModel can be used
+ * to support ad hoc data validation.
  *
  * The typical usage of DynamicModel is as follows,
  *
@@ -33,7 +35,7 @@
  * The [[validateData()]] method creates an instance of DynamicModel, defines the attributes
  * using the given data (`name` and `email` in this example), and then calls [[Model::validate()]].
  *
- * You can check the validation result by [[hasErrors()]], like you do with a normal model.
+ * You can check the validation result using [[hasErrors()]], like you do with a normal model.
  * You may also access the dynamic attributes defined through the model instance, e.g.,
  * `$model->name` and `$model->email`.
  *
@@ -46,31 +48,26 @@
  *     ->validate();
  * ```
  *
- * DynamicModel implements the above ad-hoc data validation feature by supporting the so-called
- * "dynamic attributes". It basically allows an attribute to be defined dynamically through its constructor
- * or [[defineAttribute()]].
- *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
 class DynamicModel extends Model
 {
+    /**
+     * @var mixed[] dynamic attribute values (name => value).
+     */
     private $_attributes = [];
     /**
-     * Array of the dynamic attribute labels.
-     * Used to as form field labels and in validation errors.
-     *
-     * @see attributeLabels()
-     * @see setAttributeLabels()
-     * @see setAttributeLabel()
+     * @var string[] dynamic attribute labels (name => label).
+     * Used as form field labels and in validation error messages.
      * @since 2.0.35
      */
     private $_attributeLabels = [];
 
 
     /**
-     * Constructors.
-     * @param array $attributes the dynamic attributes (name-value pairs, or names) being defined
+     * Constructor.
+     * @param array $attributes the attributes (name-value pairs, or names) being defined.
      * @param array $config the configuration array to be applied to this object.
      */
     public function __construct(array $attributes = [], $config = [])
@@ -151,7 +148,7 @@ public function canSetProperty($name, $checkVars = true, $checkBehaviors = true)
 
     /**
      * Returns a value indicating whether the model has an attribute with the specified name.
-     * @param string $name the name of the attribute
+     * @param string $name the name of the attribute.
      * @return bool whether the model has an attribute with the specified name.
      * @since 2.0.16
      */
@@ -162,8 +159,8 @@ public function hasAttribute($name)
 
     /**
      * Defines an attribute.
-     * @param string $name the attribute name
-     * @param mixed $value the attribute value
+     * @param string $name the attribute name.
+     * @param mixed $value the attribute value.
      */
     public function defineAttribute($name, $value = null)
     {
@@ -172,7 +169,7 @@ public function defineAttribute($name, $value = null)
 
     /**
      * Undefines an attribute.
-     * @param string $name the attribute name
+     * @param string $name the attribute name.
      */
     public function undefineAttribute($name)
     {
@@ -183,15 +180,15 @@ public function undefineAttribute($name)
      * Adds a validation rule to this model.
      * You can also directly manipulate [[validators]] to add or remove validation rules.
      * This method provides a shortcut.
-     * @param string|array $attributes the attribute(s) to be validated by the rule
+     * @param string|array $attributes the attribute(s) to be validated by the rule.
      * @param string|Validator|\Closure $validator the validator. This can be either:
      *  * a built-in validator name listed in [[builtInValidators]];
      *  * a method name of the model class;
      *  * an anonymous function;
      *  * a validator class name.
      *  * a Validator.
-     * @param array $options the options (name-value pairs) to be applied to the validator
-     * @return $this the model itself
+     * @param array $options the options (name-value pairs) to be applied to the validator.
+     * @return $this
      */
     public function addRule($attributes, $validator, $options = [])
     {
@@ -212,9 +209,9 @@ public function addRule($attributes, $validator, $options = [])
      * Validates the given data with the specified validation rules.
      * This method will create a DynamicModel instance, populate it with the data to be validated,
      * create the specified validation rules, and then validate the data using these rules.
-     * @param array $data the data (name-value pairs) to be validated
+     * @param array $data the data (name-value pairs) to be validated.
      * @param array $rules the validation rules. Please refer to [[Model::rules()]] on the format of this parameter.
-     * @return static the model instance that contains the data being validated
+     * @return static the model instance that contains the data being validated.
      * @throws InvalidConfigException if a validation rule is not specified correctly.
      */
     public static function validateData(array $data, $rules = [])
@@ -249,13 +246,10 @@ public function attributes()
     }
 
     /**
-     * Sets the attribute labels in a massive way.
-     *
-     * @see attributeLabels()
-     * @since 2.0.35
-     *
-     * @param array $labels Array of attribute labels
+     * Sets the labels for all attributes.
+     * @param string[] $labels attribute labels.
      * @return $this
+     * @since 2.0.35
      */
     public function setAttributeLabels(array $labels = [])
     {
@@ -265,14 +259,11 @@ public function setAttributeLabels(array $labels = [])
     }
 
     /**
-     * Sets a label for an attribute.
-     *
-     * @see attributeLabels()
-     * @since 2.0.35
-     *
-     * @param string $attribute Attribute name
-     * @param string $label Attribute label value
+     * Sets a label for a single attribute.
+     * @param string $attribute attribute name.
+     * @param string $label attribute label value.
      * @return $this
+     * @since 2.0.35
      */
     public function setAttributeLabel($attribute, $label)
     {
@@ -282,10 +273,10 @@ public function setAttributeLabel($attribute, $label)
     }
 
     /**
-     * {@inheritDoc}
+     * {@inheritdoc}
      */
     public function attributeLabels()
     {
-        return array_merge(parent::attributeLabels(), $this->_attributeLabels);
+        return $this->_attributeLabels;
     }
 }
diff --git a/src/base/ErrorException.php b/src/base/ErrorException.php
index 657b8e390b8..24fdb6e8d7d 100644
--- a/src/base/ErrorException.php
+++ b/src/base/ErrorException.php
@@ -38,7 +38,7 @@ class ErrorException extends \ErrorException
      * @param int $severity [optional]
      * @param string $filename [optional]
      * @param int $lineno [optional]
-     * @param \Throwable|\Exception $previous [optional]
+     * @param \Throwable|null $previous [optional]
      */
     public function __construct($message = '', $code = 0, $severity = 1, $filename = __FILE__, $lineno = __LINE__, $previous = null)
     {
diff --git a/src/base/ErrorHandler.php b/src/base/ErrorHandler.php
index 4b36d481ec3..f74005d2c59 100644
--- a/src/base/ErrorHandler.php
+++ b/src/base/ErrorHandler.php
@@ -26,6 +26,12 @@
  */
 abstract class ErrorHandler extends Component
 {
+    /**
+     * @event Event an event that is triggered when the handler is called by shutdown function via [[handleFatalError()]].
+     * @since 2.0.46
+     */
+    const EVENT_SHUTDOWN = 'shutdown';
+
     /**
      * @var bool whether to discard any existing page output before error display. Defaults to true.
      */
@@ -38,7 +44,7 @@ abstract class ErrorHandler extends Component
      */
     public $memoryReserveSize = 262144;
     /**
-     * @var \Exception|null the exception that is being handled currently.
+     * @var \Throwable|null the exception that is being handled currently.
      */
     public $exception;
     /**
@@ -53,13 +59,17 @@ abstract class ErrorHandler extends Component
      */
     private $_memoryReserve;
     /**
-     * @var \Exception from HHVM error that stores backtrace
+     * @var \Throwable from HHVM error that stores backtrace
      */
     private $_hhvmException;
     /**
      * @var bool whether this instance has been registered using `register()`
      */
     private $_registered = false;
+    /**
+     * @var string the current working directory
+     */
+    private $_workingDirectory;
 
 
     public function init()
@@ -70,6 +80,7 @@ public function init()
 
     /**
      * Register this error handler.
+     *
      * @since 2.0.32 this will not do anything if the error handler was already registered
      */
     public function register()
@@ -83,7 +94,11 @@ public function register()
                 set_error_handler([$this, 'handleError']);
             }
             if ($this->memoryReserveSize > 0) {
-                $this->_memoryReserve = str_repeat('x', $this->memoryReserveSize);
+                $this->_memoryReserve = str_pad('', $this->memoryReserveSize, 'x');
+            }
+            // to restore working directory in shutdown handler
+            if (PHP_SAPI !== 'cli') {
+                $this->_workingDirectory = getcwd();
             }
             register_shutdown_function([$this, 'handleFatalError']);
             $this->_registered = true;
@@ -97,6 +112,8 @@ public function register()
     public function unregister()
     {
         if ($this->_registered) {
+            $this->_memoryReserve = null;
+            $this->_workingDirectory = null;
             restore_error_handler();
             restore_exception_handler();
             $this->_registered = false;
@@ -108,7 +125,7 @@ public function unregister()
      *
      * This method is implemented as a PHP exception handler.
      *
-     * @param \Exception $exception the exception that is not caught
+     * @param \Throwable $exception the exception that is not caught
      */
     public function handleException($exception)
     {
@@ -153,8 +170,8 @@ public function handleException($exception)
 
     /**
      * Handles exception thrown during exception processing in [[handleException()]].
-     * @param \Exception|\Throwable $exception Exception that was thrown during main exception processing.
-     * @param \Exception $previousException Main exception processed in [[handleException()]].
+     * @param \Throwable $exception Exception that was thrown during main exception processing.
+     * @param \Throwable $previousException Main exception processed in [[handleException()]].
      * @since 2.0.11
      */
     protected function handleFallbackExceptionMessage($exception, $previousException)
@@ -264,47 +281,70 @@ public function handleFatalError()
     {
         unset($this->_memoryReserve);
 
+        if (isset($this->_workingDirectory)) {
+            // fix working directory for some Web servers e.g. Apache
+            chdir($this->_workingDirectory);
+            // flush memory
+            unset($this->_workingDirectory);
+        }
+
+        $error = error_get_last();
+        if ($error === null) {
+            return;
+        }
+
         // load ErrorException manually here because autoloading them will not work
         // when error occurs while autoloading a class
         if (!class_exists('yii\\base\\ErrorException', false)) {
             require_once __DIR__ . '/ErrorException.php';
         }
+        if (!ErrorException::isFatalError($error)) {
+            return;
+        }
 
-        $error = error_get_last();
+        if (!empty($this->_hhvmException)) {
+            $this->exception = $this->_hhvmException;
+        } else {
+            $this->exception = new ErrorException(
+                $error['message'],
+                $error['type'],
+                $error['type'],
+                $error['file'],
+                $error['line']
+            );
+        }
+        unset($error);
 
-        if (ErrorException::isFatalError($error)) {
-            if (!empty($this->_hhvmException)) {
-                $exception = $this->_hhvmException;
-            } else {
-                $exception = new ErrorException($error['message'], $error['type'], $error['type'], $error['file'], $error['line']);
-            }
-            $this->exception = $exception;
+        $this->logException($this->exception);
 
-            $this->logException($exception);
+        if ($this->discardExistingOutput) {
+            $this->clearOutput();
+        }
+        $this->renderException($this->exception);
 
-            if ($this->discardExistingOutput) {
-                $this->clearOutput();
-            }
-            $this->renderException($exception);
+        // need to explicitly flush logs because exit() next will terminate the app immediately
+        Yii::getLogger()->flush(true);
+        if (defined('HHVM_VERSION')) {
+            flush();
+        }
 
-            // need to explicitly flush logs because exit() next will terminate the app immediately
-            Yii::getLogger()->flush(true);
-            if (defined('HHVM_VERSION')) {
-                flush();
-            }
+        $this->trigger(static::EVENT_SHUTDOWN);
+
+        // ensure it is called after user-defined shutdown functions
+        register_shutdown_function(function () {
             exit(1);
-        }
+        });
     }
 
     /**
      * Renders the exception.
-     * @param \Exception|\Error|\Throwable $exception the exception to be rendered.
+     * @param \Throwable $exception the exception to be rendered.
      */
     abstract protected function renderException($exception);
 
     /**
      * Logs the given exception.
-     * @param \Exception $exception the exception to be logged
+     * @param \Throwable $exception the exception to be logged
      * @since 2.0.3 this method is now public.
      */
     public function logException($exception)
@@ -336,7 +376,8 @@ public function clearOutput()
      *
      * This method can be used to convert exceptions inside of methods like `__toString()`
      * to PHP errors because exceptions cannot be thrown inside of them.
-     * @param \Exception|\Throwable $exception the exception to convert to a PHP error.
+     * @param \Throwable $exception the exception to convert to a PHP error.
+     * @return never
      */
     public static function convertExceptionToError($exception)
     {
@@ -345,7 +386,7 @@ public static function convertExceptionToError($exception)
 
     /**
      * Converts an exception into a simple string.
-     * @param \Exception|\Error|\Throwable $exception the exception being converted
+     * @param \Throwable $exception the exception being converted
      * @return string the string representation of the exception.
      */
     public static function convertExceptionToString($exception)
@@ -363,7 +404,7 @@ public static function convertExceptionToString($exception)
 
     /**
      * Converts an exception into a string that has verbose information about the exception and its trace.
-     * @param \Exception|\Error|\Throwable $exception the exception being converted
+     * @param \Throwable $exception the exception being converted
      * @return string the string representation of the exception.
      *
      * @since 2.0.14
diff --git a/src/base/Event.php b/src/base/Event.php
index 3cb85dce018..9fd94367d15 100644
--- a/src/base/Event.php
+++ b/src/base/Event.php
@@ -34,7 +34,7 @@ class Event extends BaseObject
      */
     public $name;
     /**
-     * @var object the sender of this event. If not set, this property will be
+     * @var object|null the sender of this event. If not set, this property will be
      * set as the object whose `trigger()` method is called.
      * This property may also be a `null` when this event is a
      * class-level event which is triggered in a static context.
@@ -130,7 +130,7 @@ public static function on($class, $name, $handler, $data = null, $append = true)
      *
      * @param string $class the fully qualified class name from which the event handler needs to be detached.
      * @param string $name the event name.
-     * @param callable $handler the event handler to be removed.
+     * @param callable|null $handler the event handler to be removed.
      * If it is `null`, all handlers attached to the named event will be removed.
      * @return bool whether a handler is found and detached.
      * @see on()
@@ -257,7 +257,7 @@ class_implements($class, true)
      * for the specified class and all its parent classes.
      * @param string|object $class the object or the fully qualified class name specifying the class-level event.
      * @param string $name the event name.
-     * @param Event $event the event parameter. If not set, a default [[Event]] object will be created.
+     * @param Event|null $event the event parameter. If not set, a default [[Event]] object will be created.
      */
     public static function trigger($class, $name, $event = null)
     {
diff --git a/src/base/ExitException.php b/src/base/ExitException.php
index 4fde6a8e800..a1111abea05 100644
--- a/src/base/ExitException.php
+++ b/src/base/ExitException.php
@@ -28,11 +28,15 @@ class ExitException extends \Exception
      * @param int $status the exit status code
      * @param string $message error message
      * @param int $code error code
-     * @param \Throwable|\Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
     public function __construct($status = 0, $message = null, $code = 0, $previous = null)
     {
         $this->statusCode = $status;
-        parent::__construct($message, $code, $previous);
+        if ($previous === null) {
+            parent::__construct((string)$message, $code);
+        } else {
+            parent::__construct((string)$message, $code, $previous);
+        }
     }
 }
diff --git a/src/base/Model.php b/src/base/Model.php
index 204242143c1..74f8da35aba 100644
--- a/src/base/Model.php
+++ b/src/base/Model.php
@@ -38,19 +38,18 @@
  * For more details and usage information on Model, see the [guide article on models](guide:structure-models).
  *
  * @property-read \yii\validators\Validator[] $activeValidators The validators applicable to the current
- * [[scenario]]. This property is read-only.
+ * [[scenario]].
  * @property array $attributes Attribute values (name => value).
- * @property-read array $errors An array of errors for all attributes. Empty array is returned if no error.
- * The result is a two-dimensional array. See [[getErrors()]] for detailed description. This property is
- * read-only.
+ * @property-read array $errors Errors for all attributes or the specified attribute. Empty array is returned
+ * if no error. See [[getErrors()]] for detailed description. Note that when returning errors for all attributes,
+ * the result is a two-dimensional array, like the following: ```php [ 'username' => [ 'Username is required.',
+ * 'Username must contain only word characters.', ], 'email' => [ 'Email address is invalid.', ] ] ``` .
  * @property-read array $firstErrors The first errors. The array keys are the attribute names, and the array
- * values are the corresponding error messages. An empty array will be returned if there is no error. This
- * property is read-only.
- * @property-read ArrayIterator $iterator An iterator for traversing the items in the list. This property is
- * read-only.
+ * values are the corresponding error messages. An empty array will be returned if there is no error.
+ * @property-read ArrayIterator $iterator An iterator for traversing the items in the list.
  * @property string $scenario The scenario that this model is in. Defaults to [[SCENARIO_DEFAULT]].
  * @property-read ArrayObject|\yii\validators\Validator[] $validators All the validators declared in the
- * model. This property is read-only.
+ * model.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -261,21 +260,15 @@ public function formName()
 
     /**
      * Returns the list of attribute names.
+     *
      * By default, this method returns all public non-static properties of the class.
      * You may override this method to change the default behavior.
-     * @return array list of attribute names.
+     *
+     * @return string[] list of attribute names.
      */
     public function attributes()
     {
-        $class = new ReflectionClass($this);
-        $names = [];
-        foreach ($class->getProperties(\ReflectionProperty::IS_PUBLIC) as $property) {
-            if (!$property->isStatic()) {
-                $names[] = $property->getName();
-            }
-        }
-
-        return $names;
+        return array_keys(Yii::getObjectVars($this));
     }
 
     /**
@@ -561,7 +554,7 @@ public function hasErrors($attribute = null)
 
     /**
      * Returns the errors for all attributes or a single attribute.
-     * @param string|null $attribute attribute name. Use null to retrieve errors for all attributes. 
+     * @param string|null $attribute attribute name. Use null to retrieve errors for all attributes.
      * @return array errors for all attributes or the specified attribute. Empty array is returned if no error.
      * See [[getErrors()]] for detailed description.
      * Note that when returning errors for all attributes, the result is a two-dimensional array, like the following:
@@ -996,6 +989,7 @@ public function fields()
      * This method is required by the interface [[\IteratorAggregate]].
      * @return ArrayIterator an iterator for traversing the items in the list.
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         $attributes = $this->getAttributes();
@@ -1009,6 +1003,7 @@ public function getIterator()
      * @param string $offset the offset to check on.
      * @return bool whether or not an offset exists.
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return isset($this->$offset);
@@ -1021,6 +1016,7 @@ public function offsetExists($offset)
      * @param string $offset the offset to retrieve element.
      * @return mixed the element at the offset, null if no element is found at the offset
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return $this->$offset;
@@ -1033,6 +1029,7 @@ public function offsetGet($offset)
      * @param string $offset the offset to set element
      * @param mixed $value the element value
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $value)
     {
         $this->$offset = $value;
@@ -1044,8 +1041,20 @@ public function offsetSet($offset, $value)
      * It is implicitly called when you use something like `unset($model[$offset])`.
      * @param string $offset the offset to unset element
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         $this->$offset = null;
     }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function __clone()
+    {
+        parent::__clone();
+
+        $this->_errors = null;
+        $this->_validators = null;
+    }
 }
diff --git a/src/base/Module.php b/src/base/Module.php
index 2562f0ca1fa..48e040ad560 100644
--- a/src/base/Module.php
+++ b/src/base/Module.php
@@ -25,13 +25,12 @@
  *
  * @property-write array $aliases List of path aliases to be defined. The array keys are alias names (must
  * start with `@`) and the array values are the corresponding paths or aliases. See [[setAliases()]] for an
- * example. This property is write-only.
+ * example.
  * @property string $basePath The root directory of the module.
- * @property-read string $controllerPath The directory that contains the controller classes. This property is
- * read-only.
+ * @property string $controllerPath The directory that contains the controller classes.
  * @property string $layoutPath The root directory of layout files. Defaults to "[[viewPath]]/layouts".
  * @property array $modules The modules (indexed by their IDs).
- * @property-read string $uniqueId The unique ID of the module. This property is read-only.
+ * @property-read string $uniqueId The unique ID of the module.
  * @property string $version The version of this module. Note that the type of this property differs in getter
  * and setter. See [[getVersion()]] and [[setVersion()]] for details.
  * @property string $viewPath The root directory of view files. Defaults to "[[basePath]]/views".
@@ -115,6 +114,10 @@ class Module extends ServiceLocator
      * @var string the root directory of the module.
      */
     private $_basePath;
+    /**
+     * @var string The root directory that contains the controller classes for this module.
+     */
+    private $_controllerPath;
     /**
      * @var string the root directory that contains view files for this module
      */
@@ -128,7 +131,7 @@ class Module extends ServiceLocator
      */
     private $_modules = [];
     /**
-     * @var string|callable the version of this module.
+     * @var string|callable|null the version of this module.
      * Version can be specified as a PHP callback, which can accept module instance as an argument and should
      * return the actual version. For example:
      *
@@ -148,7 +151,7 @@ class Module extends ServiceLocator
     /**
      * Constructor.
      * @param string $id the ID of this module.
-     * @param Module $parent the parent module (if any).
+     * @param Module|null $parent the parent module (if any).
      * @param array $config name-value pairs that will be used to initialize the object properties.
      */
     public function __construct($id, $parent = null, $config = [])
@@ -254,7 +257,22 @@ public function setBasePath($path)
      */
     public function getControllerPath()
     {
-        return Yii::getAlias('@' . str_replace('\\', '/', $this->controllerNamespace));
+        if ($this->_controllerPath === null) {
+            $this->_controllerPath = Yii::getAlias('@' . str_replace('\\', '/', $this->controllerNamespace));
+        }
+
+        return $this->_controllerPath;
+    }
+
+    /**
+     * Sets the directory that contains the controller classes.
+     * @param string $path the root directory that contains the controller classes.
+     * @throws InvalidArgumentException if the directory is invalid.
+     * @since 2.0.44
+     */
+    public function setControllerPath($path)
+    {
+        $this->_controllerPath = Yii::getAlias($path);
     }
 
     /**
@@ -324,7 +342,7 @@ public function getVersion()
 
     /**
      * Sets current module version.
-     * @param string|callable $version the version of this module.
+     * @param string|callable|null $version the version of this module.
      * Version can be specified as a PHP callback, which can accept module instance as an argument and should
      * return the actual version. For example:
      *
diff --git a/src/base/Security.php b/src/base/Security.php
index 6276bf5a584..6a90b6cd5d2 100644
--- a/src/base/Security.php
+++ b/src/base/Security.php
@@ -146,7 +146,7 @@ public function encryptByPassword($data, $password)
      * to hash input or output data.
      * @param string $data the data to encrypt
      * @param string $inputKey the input to use for encryption and authentication
-     * @param string $info optional context and application specific information, see [[hkdf()]]
+     * @param string|null $info optional context and application specific information, see [[hkdf()]]
      * @return string the encrypted data as byte string
      * @see decryptByKey()
      * @see encryptByPassword()
@@ -172,7 +172,7 @@ public function decryptByPassword($data, $password)
      * Verifies and decrypts data encrypted with [[encryptByKey()]].
      * @param string $data the encrypted data to decrypt
      * @param string $inputKey the input to use for encryption and authentication
-     * @param string $info optional context and application specific information, see [[hkdf()]]
+     * @param string|null $info optional context and application specific information, see [[hkdf()]]
      * @return bool|string the decrypted data or false on authentication failure
      * @see encryptByKey()
      */
@@ -286,8 +286,8 @@ protected function decrypt($data, $passwordBased, $secret, $info)
      * Recommend use one of the SHA-2 hash algorithms: sha224, sha256, sha384 or sha512.
      * @param string $algo a hash algorithm supported by `hash_hmac()`, e.g. 'SHA-256'
      * @param string $inputKey the source key
-     * @param string $salt the random salt
-     * @param string $info optional info to bind the derived key material to application-
+     * @param string|null $salt the random salt
+     * @param string|null $info optional info to bind the derived key material to application-
      * and context-specific information, e.g. a user ID or API version, see
      * [RFC 5869](https://tools.ietf.org/html/rfc5869)
      * @param int $length length of the output key in bytes. If 0, the output key is
@@ -298,7 +298,7 @@ protected function decrypt($data, $passwordBased, $secret, $info)
     public function hkdf($algo, $inputKey, $salt = null, $info = null, $length = 0)
     {
         if (function_exists('hash_hkdf')) {
-            $outputKey = hash_hkdf($algo, $inputKey, $length, $info, $salt);
+            $outputKey = hash_hkdf((string)$algo, (string)$inputKey, $length, (string)$info, (string)$salt);
             if ($outputKey === false) {
                 throw new InvalidArgumentException('Invalid parameters to hash_hkdf()');
             }
@@ -529,7 +529,7 @@ public function generateRandomString($length = 32)
      * ```
      *
      * @param string $password The password to be hashed.
-     * @param int $cost Cost parameter used by the Blowfish hash algorithm.
+     * @param int|null $cost Cost parameter used by the Blowfish hash algorithm.
      * The higher the value of cost,
      * the longer it takes to generate the hash and to verify a password against it. Higher cost
      * therefore slows down a brute-force attack. For best protection against brute-force attacks,
diff --git a/src/base/Theme.php b/src/base/Theme.php
index b50334426eb..011c8c239a4 100644
--- a/src/base/Theme.php
+++ b/src/base/Theme.php
@@ -74,7 +74,7 @@
 class Theme extends Component
 {
     /**
-     * @var array the mapping between view directories and their corresponding themed versions.
+     * @var array|null the mapping between view directories and their corresponding themed versions.
      * This property is used by [[applyTo()]] when a view is trying to apply the theme.
      * [Path aliases](guide:concept-aliases) can be used when specifying directories.
      * If this property is empty or not set, a mapping [[Application::basePath]] to [[basePath]] will be used.
diff --git a/src/base/View.php b/src/base/View.php
index 1cb79cfcf92..dce2a9b0a0d 100644
--- a/src/base/View.php
+++ b/src/base/View.php
@@ -21,7 +21,7 @@
  * For more details and usage information on View, see the [guide article on views](guide:structure-views).
  *
  * @property-read string|bool $viewFile The view file currently being rendered. False if no view file is being
- * rendered. This property is read-only.
+ * rendered.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -54,7 +54,7 @@ class View extends Component implements DynamicContentAwareInterface
      */
     public $params = [];
     /**
-     * @var array a list of available renderers indexed by their corresponding supported file extensions.
+     * @var array|null a list of available renderers indexed by their corresponding supported file extensions.
      * Each renderer may be a view renderer object or the configuration for creating the renderer object.
      * For example, the following configuration enables both Smarty and Twig view renderers:
      *
@@ -74,7 +74,7 @@ class View extends Component implements DynamicContentAwareInterface
      */
     public $defaultExtension = 'php';
     /**
-     * @var Theme|array|string the theme object or the configuration for creating the theme object.
+     * @var Theme|array|string|null the theme object or the configuration for creating the theme object.
      * If not set, it means theming is not enabled.
      */
     public $theme;
@@ -142,7 +142,7 @@ public function init()
      *
      * @param string $view the view name.
      * @param array $params the parameters (name-value pairs) that will be extracted and made available in the view file.
-     * @param object $context the context to be assigned to the view and can later be accessed via [[context]]
+     * @param object|null $context the context to be assigned to the view and can later be accessed via [[context]]
      * in the view. If the context implements [[ViewContextInterface]], it may also be used to locate
      * the view file corresponding to a relative view name.
      * @return string the rendering result
@@ -160,7 +160,7 @@ public function render($view, $params = [], $context = null)
      * Finds the view file based on the given view name.
      * @param string $view the view name or the [path alias](guide:concept-aliases) of the view file. Please refer to [[render()]]
      * on how to specify this parameter.
-     * @param object $context the context to be assigned to the view and can later be accessed via [[context]]
+     * @param object|null $context the context to be assigned to the view and can later be accessed via [[context]]
      * in the view. If the context implements [[ViewContextInterface]], it may also be used to locate
      * the view file corresponding to a relative view name.
      * @return string the view file path. Note that the file may not exist.
@@ -215,7 +215,7 @@ protected function findViewFile($view, $context = null)
      *
      * @param string $viewFile the view file. This can be either an absolute file path or an alias of it.
      * @param array $params the parameters (name-value pairs) that will be extracted and made available in the view file.
-     * @param object $context the context that the view should use for rendering the view. If null,
+     * @param object|null $context the context that the view should use for rendering the view. If null,
      * existing [[context]] will be used.
      * @return string the rendering result
      * @throws ViewNotFoundException if the view file does not exist
@@ -335,7 +335,7 @@ public function afterRender($viewFile, $params, &$output)
      * @param string $_file_ the view file.
      * @param array $_params_ the parameters (name-value pairs) that will be extracted and made available in the view file.
      * @return string the rendering result
-     * @throws \Exception
+     * @throws \Throwable
      */
     public function renderPhpFile($_file_, $_params_ = [])
     {
diff --git a/src/base/Widget.php b/src/base/Widget.php
index a43a5652bb6..ecd99ecdcd5 100644
--- a/src/base/Widget.php
+++ b/src/base/Widget.php
@@ -19,8 +19,7 @@
  * setter. See [[getId()]] and [[setId()]] for details.
  * @property \yii\web\View $view The view object that can be used to render views or view files. Note that the
  * type of this property differs in getter and setter. See [[getView()]] and [[setView()]] for details.
- * @property-read string $viewPath The directory containing the view files for this widget. This property is
- * read-only.
+ * @property-read string $viewPath The directory containing the view files for this widget.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -104,7 +103,13 @@ public static function end()
     {
         if (!empty(self::$stack)) {
             $widget = array_pop(self::$stack);
-            if (get_class($widget) === get_called_class()) {
+
+            $calledClass = get_called_class();
+            if (Yii::$container->has($calledClass) && isset(Yii::$container->getDefinitions()[$calledClass]['class'])) {
+                $calledClass = Yii::$container->getDefinitions()[$calledClass]['class'];
+            }
+
+            if (get_class($widget) === $calledClass) {
                 /* @var $widget Widget */
                 if ($widget->beforeRun()) {
                     $result = $widget->run();
@@ -126,7 +131,7 @@ public static function end()
      * The widget rendering result is returned by this method.
      * @param array $config name-value pairs that will be used to initialize the object properties
      * @return string the rendering result of the widget.
-     * @throws \Exception
+     * @throws \Throwable
      */
     public static function widget($config = [])
     {
@@ -147,6 +152,12 @@ public static function widget($config = [])
                 ob_end_clean();
             }
             throw $e;
+        } catch (\Throwable $e) {
+            // close the output buffer opened above if it has not been closed already
+            if (ob_get_level() > 0) {
+                ob_end_clean();
+            }
+            throw $e;
         }
 
         return ob_get_clean() . $out;
@@ -206,7 +217,8 @@ public function setView($view)
 
     /**
      * Executes the widget.
-     * @return string the result of widget execution to be outputted.
+     *
+     * @return string|void the rendering result may be directly "echoed" or returned as a string
      */
     public function run()
     {
diff --git a/src/behaviors/AttributeTypecastBehavior.php b/src/behaviors/AttributeTypecastBehavior.php
index 33520bde3bc..4c03e1f1d33 100644
--- a/src/behaviors/AttributeTypecastBehavior.php
+++ b/src/behaviors/AttributeTypecastBehavior.php
@@ -121,7 +121,7 @@ class AttributeTypecastBehavior extends Behavior
      */
     public $owner;
     /**
-     * @var array attribute typecast map in format: attributeName => type.
+     * @var array|null attribute typecast map in format: attributeName => type.
      * Type can be set via PHP callable, which accept raw value as an argument and should return
      * typecast result.
      * For example:
@@ -214,7 +214,7 @@ public function attach($owner)
 
     /**
      * Typecast owner attributes according to [[attributeTypes]].
-     * @param array $attributeNames list of attribute names that should be type-casted.
+     * @param array|null $attributeNames list of attribute names that should be type-casted.
      * If this parameter is empty, it means any attribute listed in the [[attributeTypes]]
      * should be type-casted.
      */
diff --git a/src/behaviors/SluggableBehavior.php b/src/behaviors/SluggableBehavior.php
index b62ade8ea2c..f095204e067 100644
--- a/src/behaviors/SluggableBehavior.php
+++ b/src/behaviors/SluggableBehavior.php
@@ -111,7 +111,7 @@ class SluggableBehavior extends AttributeBehavior
      */
     public $uniqueValidator = [];
     /**
-     * @var callable slug unique value generator. It is used in case [[ensureUnique]] enabled and generated
+     * @var callable|null slug unique value generator. It is used in case [[ensureUnique]] enabled and generated
      * slug is not unique. This should be a PHP callable with following signature:
      *
      * ```php
diff --git a/src/caching/Cache.php b/src/caching/Cache.php
index a4afaee5eb4..36a30dbd76e 100644
--- a/src/caching/Cache.php
+++ b/src/caching/Cache.php
@@ -62,7 +62,7 @@ abstract class Cache extends Component implements CacheInterface
      */
     public $keyPrefix;
     /**
-     * @var null|array|false the functions used to serialize and unserialize cached data. Defaults to null, meaning
+     * @var array|null|false the functions used to serialize and unserialize cached data. Defaults to null, meaning
      * using the default PHP `serialize()` and `unserialize()` functions. If you want to use some more efficient
      * serializer (e.g. [igbinary](https://pecl.php.net/package/igbinary)), you may configure this property with
      * a two-element array. The first element specifies the serialization function, and the second the deserialization
@@ -135,7 +135,7 @@ public function get($key)
         if ($value === false || $this->serializer === false) {
             return $value;
         } elseif ($this->serializer === null) {
-            $value = unserialize($value);
+            $value = unserialize((string)$value);
         } else {
             $value = call_user_func($this->serializer[1], $value);
         }
@@ -229,9 +229,9 @@ public function multiGet($keys)
      * @param mixed $key a key identifying the value to be cached. This can be a simple string or
      * a complex data structure consisting of factors representing the key.
      * @param mixed $value the value to be cached
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * default [[defaultDuration]] value is used.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return bool whether the value is successfully stored into cache
@@ -261,9 +261,9 @@ public function set($key, $value, $duration = null, $dependency = null)
      * expiration time will be replaced with the new ones, respectively.
      *
      * @param array $items the items to be cached, as key-value pairs.
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * default [[defaultDuration]] value is used.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -280,9 +280,9 @@ public function mset($items, $duration = null, $dependency = null)
      * expiration time will be replaced with the new ones, respectively.
      *
      * @param array $items the items to be cached, as key-value pairs.
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * default [[defaultDuration]] value is used.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -319,7 +319,7 @@ public function multiSet($items, $duration = null, $dependency = null)
      *
      * @param array $items the items to be cached, as key-value pairs.
      * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -336,7 +336,7 @@ public function madd($items, $duration = 0, $dependency = null)
      *
      * @param array $items the items to be cached, as key-value pairs.
      * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -370,7 +370,7 @@ public function multiAdd($items, $duration = 0, $dependency = null)
      * a complex data structure consisting of factors representing the key.
      * @param mixed $value the value to be cached
      * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return bool whether the value is successfully stored into cache
@@ -526,6 +526,7 @@ protected function addValues($data, $duration)
      * @param string $key a key identifying the cached value
      * @return bool
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($key)
     {
         return $this->get($key) !== false;
@@ -537,6 +538,7 @@ public function offsetExists($key)
      * @param string $key a key identifying the cached value
      * @return mixed the value stored in cache, false if the value is not in the cache or expired.
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($key)
     {
         return $this->get($key);
@@ -550,6 +552,7 @@ public function offsetGet($key)
      * @param string $key the key identifying the value to be cached
      * @param mixed $value the value to be cached
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($key, $value)
     {
         $this->set($key, $value);
@@ -560,6 +563,7 @@ public function offsetSet($key, $value)
      * This method is required by the interface [[\ArrayAccess]].
      * @param string $key the key of the value to be deleted
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($key)
     {
         $this->delete($key);
@@ -586,9 +590,9 @@ public function offsetUnset($key)
      * If you use $callable that can return `false`, then keep in mind that [[getOrSet()]] may work inefficiently
      * because the [[yii\caching\Cache::get()]] method uses `false` return value to indicate the data item is not found
      * in the cache. Thus, caching of `false` value will lead to unnecessary internal calls.
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * [[defaultDuration]] value will be used.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is `false`.
      * @return mixed result of $callable execution
diff --git a/src/caching/CacheInterface.php b/src/caching/CacheInterface.php
index 2b14c25e397..996dfe1b4ce 100644
--- a/src/caching/CacheInterface.php
+++ b/src/caching/CacheInterface.php
@@ -97,9 +97,9 @@ public function multiGet($keys);
      * @param mixed $key a key identifying the value to be cached. This can be a simple string or
      * a complex data structure consisting of factors representing the key.
      * @param mixed $value the value to be cached
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * default [[defaultDuration]] value is used.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return bool whether the value is successfully stored into cache
@@ -112,9 +112,9 @@ public function set($key, $value, $duration = null, $dependency = null);
      * expiration time will be replaced with the new ones, respectively.
      *
      * @param array $items the items to be cached, as key-value pairs.
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * default [[defaultDuration]] value is used.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -128,7 +128,7 @@ public function multiSet($items, $duration = null, $dependency = null);
      * a complex data structure consisting of factors representing the key.
      * @param mixed $value the value to be cached
      * @param int $duration the number of seconds in which the cached value will expire. 0 means never expire.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return bool whether the value is successfully stored into cache
@@ -141,7 +141,7 @@ public function add($key, $value, $duration = 0, $dependency = null);
      *
      * @param array $items the items to be cached, as key-value pairs.
      * @param int $duration default number of seconds in which the cached values will expire. 0 means never expire.
-     * @param Dependency $dependency dependency of the cached items. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached items. If the dependency changes,
      * the corresponding values in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is false.
      * @return array array of failed keys
@@ -182,9 +182,9 @@ public function flush();
      * a complex data structure consisting of factors representing the key.
      * @param callable|\Closure $callable the callable or closure that will be used to generate a value to be cached.
      * In case $callable returns `false`, the value will not be cached.
-     * @param int $duration default duration in seconds before the cache will expire. If not set,
+     * @param int|null $duration default duration in seconds before the cache will expire. If not set,
      * [[defaultDuration]] value will be used.
-     * @param Dependency $dependency dependency of the cached item. If the dependency changes,
+     * @param Dependency|null $dependency dependency of the cached item. If the dependency changes,
      * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
      * This parameter is ignored if [[serializer]] is `false`.
      * @return mixed result of $callable execution
diff --git a/src/caching/DbQueryDependency.php b/src/caching/DbQueryDependency.php
index 3aafd0f457e..90ffb0ff1ad 100644
--- a/src/caching/DbQueryDependency.php
+++ b/src/caching/DbQueryDependency.php
@@ -41,7 +41,7 @@ class DbQueryDependency extends Dependency
      */
     public $query;
     /**
-     * @var string|callable method which should be invoked in over the [[query]] object.
+     * @var string|callable|null method which should be invoked in over the [[query]] object.
      *
      * If specified as a string an own query method with such name will be invoked, passing [[db]] value as its
      * first argument. For example: `exists`, `all`.
diff --git a/src/caching/Dependency.php b/src/caching/Dependency.php
index 9093e8ef196..a0a02f16a86 100644
--- a/src/caching/Dependency.php
+++ b/src/caching/Dependency.php
@@ -99,16 +99,28 @@ public static function resetReusableData()
 
     /**
      * Generates a unique hash that can be used for retrieving reusable dependency data.
+     *
      * @return string a unique hash value for this cache dependency.
      * @see reusable
      */
     protected function generateReusableHash()
     {
-        $data = $this->data;
-        $this->data = null;  // https://github.com/yiisoft/yii2/issues/3052
-        $key = sha1(serialize($this));
-        $this->data = $data;
-        return $key;
+        $clone = clone $this;
+        $clone->data = null; // https://github.com/yiisoft/yii2/issues/3052
+
+        try {
+            $serialized = serialize($clone);
+        } catch (\Exception $e) {
+            // unserializable properties are nulled
+            foreach ($clone as $name => $value) {
+                if (is_object($value) && $value instanceof \Closure) {
+                    $clone->{$name} = null;
+                }
+            }
+            $serialized = serialize($clone);
+        }
+
+        return sha1($serialized);
     }
 
     /**
diff --git a/src/caching/FileCache.php b/src/caching/FileCache.php
index 52a80c67b35..33214209315 100644
--- a/src/caching/FileCache.php
+++ b/src/caching/FileCache.php
@@ -57,7 +57,7 @@ class FileCache extends Cache
      */
     public $gcProbability = 10;
     /**
-     * @var int the permission to be set for newly created cache files.
+     * @var int|null the permission to be set for newly created cache files.
      * This value will be used by PHP chmod() function. No umask will be applied.
      * If not set, the permission will be determined by the current environment.
      */
diff --git a/src/caching/MemCache.php b/src/caching/MemCache.php
index 9c1e1791a3f..c37e5b0e5ca 100644
--- a/src/caching/MemCache.php
+++ b/src/caching/MemCache.php
@@ -56,7 +56,7 @@
  * For more details and usage information on Cache, see the [guide article on caching](guide:caching-overview).
  *
  * @property-read \Memcache|\Memcached $memcache The memcache (or memcached) object used by this cache
- * component. This property is read-only.
+ * component.
  * @property MemCacheServer[] $servers List of memcache server configurations. Note that the type of this
  * property differs in getter and setter. See [[getServers()]] and [[setServers()]] for details.
  *
diff --git a/src/captcha/CaptchaAction.php b/src/captcha/CaptchaAction.php
index c3b9c420e27..06aa7023f5f 100644
--- a/src/captcha/CaptchaAction.php
+++ b/src/captcha/CaptchaAction.php
@@ -31,7 +31,7 @@
  *    to be validated by the 'captcha' validator.
  * 3. In the controller view, insert a [[Captcha]] widget in the form.
  *
- * @property-read string $verifyCode The verification code. This property is read-only.
+ * @property-read string $verifyCode The verification code.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -91,7 +91,7 @@ class CaptchaAction extends Action
      */
     public $fontFile = '@yii/captcha/SpicyRice.ttf';
     /**
-     * @var string the fixed verification code. When this property is set,
+     * @var string|null the fixed verification code. When this property is set,
      * [[getVerifyCode()]] will always return the value of this property.
      * This is mainly used in automated tests where we want to be able to reproduce
      * the same verification code each time we run the tests.
@@ -99,7 +99,7 @@ class CaptchaAction extends Action
      */
     public $fixedVerifyCode;
     /**
-     * @var string the rendering library to use. Currently supported only 'gd' and 'imagick'.
+     * @var string|null the rendering library to use. Currently supported only 'gd' and 'imagick'.
      * If not set, library will be determined automatically.
      * @since 2.0.7
      */
diff --git a/src/captcha/CaptchaValidator.php b/src/captcha/CaptchaValidator.php
index 9bcedca4497..1a725386e01 100644
--- a/src/captcha/CaptchaValidator.php
+++ b/src/captcha/CaptchaValidator.php
@@ -9,6 +9,7 @@
 
 use Yii;
 use yii\base\InvalidConfigException;
+use yii\helpers\Json;
 use yii\validators\ValidationAsset;
 use yii\validators\Validator;
 
@@ -89,7 +90,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.captcha(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ');';
+        return 'yii.validation.captcha(value, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
diff --git a/src/classes.php b/src/classes.php
index 028210c63d4..0dc5be01f01 100644
--- a/src/classes.php
+++ b/src/classes.php
@@ -347,6 +347,7 @@
   'yii\validators\StringValidator' => YII2_PATH . '/validators/StringValidator.php',
   'yii\validators\UniqueValidator' => YII2_PATH . '/validators/UniqueValidator.php',
   'yii\validators\UrlValidator' => YII2_PATH . '/validators/UrlValidator.php',
+  'yii\validators\TrimValidator' => YII2_PATH . '/validators/TrimValidator.php',
   'yii\validators\ValidationAsset' => YII2_PATH . '/validators/ValidationAsset.php',
   'yii\validators\Validator' => YII2_PATH . '/validators/Validator.php',
   'yii\web\Application' => YII2_PATH . '/web/Application.php',
diff --git a/src/composer.json b/src/composer.json
index 2875edb6657..aaafa056878 100644
--- a/src/composer.json
+++ b/src/composer.json
@@ -29,7 +29,7 @@
         {
             "name": "Carsten Brandt",
             "email": "mail@cebe.cc",
-            "homepage": "https://cebe.cc/",
+            "homepage": "https://www.cebe.cc/",
             "role": "Core framework development"
         },
         {
@@ -57,8 +57,8 @@
     ],
     "support": {
         "issues": "https://github.com/yiisoft/yii2/issues?state=open",
-        "forum": "http://www.yiiframework.com/forum/",
-        "wiki": "http://www.yiiframework.com/wiki/",
+        "forum": "https://forum.yiiframework.com/",
+        "wiki": "https://www.yiiframework.com/wiki",
         "irc": "ircs://irc.libera.chat:6697/yii",
         "source": "https://github.com/yiisoft/yii2"
     },
diff --git a/src/console/Application.php b/src/console/Application.php
index 4ee2535249d..d8058603f9e 100644
--- a/src/console/Application.php
+++ b/src/console/Application.php
@@ -50,10 +50,9 @@
  * yii help
  * ```
  *
- * @property-read ErrorHandler $errorHandler The error handler application component. This property is
- * read-only.
- * @property-read Request $request The request component. This property is read-only.
- * @property-read Response $response The response component. This property is read-only.
+ * @property-read ErrorHandler $errorHandler The error handler application component.
+ * @property-read Request $request The request component.
+ * @property-read Response $response The response component.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -171,7 +170,7 @@ public function handleRequest($request)
      *
      * @param string $route the route that specifies the action.
      * @param array $params the parameters to be passed to the action
-     * @return int|Response the result of the action. This can be either an exit code or Response object.
+     * @return int|Response|null the result of the action. This can be either an exit code or Response object.
      * Exit code 0 means normal, and other values mean abnormal. Exit code of `null` is treated as `0` as well.
      * @throws Exception if the route is invalid
      */
diff --git a/src/console/Controller.php b/src/console/Controller.php
index 6fb573db946..cc285f8dbce 100644
--- a/src/console/Controller.php
+++ b/src/console/Controller.php
@@ -28,12 +28,10 @@
  * where `<route>` is a route to a controller action and the params will be populated as properties of a command.
  * See [[options()]] for details.
  *
- * @property-read string $help This property is read-only.
- * @property-read string $helpSummary This property is read-only.
- * @property-read array $passedOptionValues The properties corresponding to the passed options. This property
- * is read-only.
- * @property-read array $passedOptions The names of the options passed during execution. This property is
- * read-only.
+ * @property-read string $help The help information for this controller.
+ * @property-read string $helpSummary The one-line short summary describing this controller.
+ * @property-read array $passedOptionValues The properties corresponding to the passed options.
+ * @property-read array $passedOptions The names of the options passed during execution.
  * @property Request $request
  * @property Response $response
  *
@@ -545,60 +543,69 @@ public function getActionHelp($action)
      * The returned value should be an array. The keys are the argument names, and the values are
      * the corresponding help information. Each value must be an array of the following structure:
      *
-     * - required: boolean, whether this argument is required.
-     * - type: string, the PHP type of this argument.
-     * - default: string, the default value of this argument
-     * - comment: string, the comment of this argument
+     * - required: bool, whether this argument is required
+     * - type: string|null, the PHP type(s) of this argument
+     * - default: mixed, the default value of this argument
+     * - comment: string, the description of this argument
      *
-     * The default implementation will return the help information extracted from the doc-comment of
-     * the parameters corresponding to the action method.
+     * The default implementation will return the help information extracted from the Reflection or
+     * DocBlock of the parameters corresponding to the action method.
      *
-     * @param Action $action
+     * @param Action $action the action instance
      * @return array the help information of the action arguments
      */
     public function getActionArgsHelp($action)
     {
         $method = $this->getActionMethodReflection($action);
+
         $tags = $this->parseDocCommentTags($method);
-        $params = isset($tags['param']) ? (array) $tags['param'] : [];
+        $tags['param'] = isset($tags['param']) ? (array) $tags['param'] : [];
+        $phpDocParams = [];
+        foreach ($tags['param'] as $i => $tag) {
+            if (preg_match('/^(?<type>\S+)(\s+\$(?<name>\w+))?(?<comment>.*)/us', $tag, $matches) === 1) {
+                $key = empty($matches['name']) ? $i : $matches['name'];
+                $phpDocParams[$key] = ['type' => $matches['type'], 'comment' => $matches['comment']];
+            }
+        }
+        unset($tags);
 
         $args = [];
 
-        /** @var \ReflectionParameter $reflection */
-        foreach ($method->getParameters() as $i => $reflection) {
-            if (PHP_VERSION_ID >= 80000) {
-                $class = $reflection->getType();
-            } else {
-                $class = $reflection->getClass();
-            }
-
-            if ($class !== null) {
-                continue;
+        /** @var \ReflectionParameter $parameter */
+        foreach ($method->getParameters() as $i => $parameter) {
+            $type = null;
+            $comment = '';
+            if (PHP_MAJOR_VERSION > 5 && $parameter->hasType()) {
+                $reflectionType = $parameter->getType();
+                if (PHP_VERSION_ID >= 70100) {
+                    $types = method_exists($reflectionType, 'getTypes') ? $reflectionType->getTypes() : [$reflectionType];
+                    foreach ($types as $key => $reflectionType) {
+                        $types[$key] = $reflectionType->getName();
+                    }
+                    $type = implode('|', $types);
+                } else {
+                    $type = (string) $reflectionType;
+                }
             }
-            $name = $reflection->getName();
-            $tag = isset($params[$i]) ? $params[$i] : '';
-            if (preg_match('/^(\S+)\s+(\$\w+\s+)?(.*)/s', $tag, $matches)) {
-                $type = $matches[1];
-                $comment = $matches[3];
-            } else {
-                $type = null;
-                $comment = $tag;
+            // find PhpDoc tag by property name or position
+            $key = isset($phpDocParams[$parameter->name]) ? $parameter->name : (isset($phpDocParams[$i]) ? $i : null);
+            if ($key !== null) {
+                $comment = $phpDocParams[$key]['comment'];
+                if ($type === null && !empty($phpDocParams[$key]['type'])) {
+                    $type = $phpDocParams[$key]['type'];
+                }
             }
-            if ($reflection->isDefaultValueAvailable()) {
-                $args[$name] = [
-                    'required' => false,
-                    'type' => $type,
-                    'default' => $reflection->getDefaultValue(),
-                    'comment' => $comment,
-                ];
-            } else {
-                $args[$name] = [
-                    'required' => true,
-                    'type' => $type,
-                    'default' => null,
-                    'comment' => $comment,
-                ];
+            // if type still not detected, then using type of default value
+            if ($type === null && $parameter->isDefaultValueAvailable() && $parameter->getDefaultValue() !== null) {
+                $type = gettype($parameter->getDefaultValue());
             }
+
+            $args[$parameter->name] = [
+                'required' => !$parameter->isOptional(),
+                'type' => $type,
+                'default' => $parameter->isDefaultValueAvailable() ? $parameter->getDefaultValue() : null,
+                'comment' => $comment,
+            ];
         }
 
         return $args;
@@ -673,7 +680,7 @@ public function getActionOptionsHelp($action)
 
     /**
      * @param Action $action
-     * @return \ReflectionMethod
+     * @return \ReflectionFunctionAbstract
      */
     protected function getActionMethodReflection($action)
     {
@@ -690,7 +697,7 @@ protected function getActionMethodReflection($action)
 
     /**
      * Parses the comment block into tags.
-     * @param \Reflector $reflection the comment block
+     * @param \ReflectionClass|\ReflectionProperty|\ReflectionFunctionAbstract $reflection the comment block
      * @return array the parsed tags
      */
     protected function parseDocCommentTags($reflection)
@@ -718,7 +725,7 @@ protected function parseDocCommentTags($reflection)
     /**
      * Returns the first line of docblock.
      *
-     * @param \Reflector $reflection
+     * @param \ReflectionClass|\ReflectionProperty|\ReflectionFunctionAbstract $reflection
      * @return string
      */
     protected function parseDocCommentSummary($reflection)
@@ -734,7 +741,7 @@ protected function parseDocCommentSummary($reflection)
     /**
      * Returns full description from the docblock.
      *
-     * @param \Reflector $reflection
+     * @param \ReflectionClass|\ReflectionProperty|\ReflectionFunctionAbstract $reflection
      * @return string
      */
     protected function parseDocCommentDetail($reflection)
diff --git a/src/console/ErrorHandler.php b/src/console/ErrorHandler.php
index 526de75dfac..f06b82f918f 100644
--- a/src/console/ErrorHandler.php
+++ b/src/console/ErrorHandler.php
@@ -25,7 +25,7 @@ class ErrorHandler extends \yii\base\ErrorHandler
 {
     /**
      * Renders an exception using ansi format for console output.
-     * @param \Exception $exception the exception to be rendered.
+     * @param \Throwable $exception the exception to be rendered.
      */
     protected function renderException($exception)
     {
diff --git a/src/console/UnknownCommandException.php b/src/console/UnknownCommandException.php
index 29d00799b42..180d1c9a72b 100644
--- a/src/console/UnknownCommandException.php
+++ b/src/console/UnknownCommandException.php
@@ -34,9 +34,9 @@ class UnknownCommandException extends Exception
      * @param string $route the route of the command that could not be found.
      * @param Application $application the console application instance involved.
      * @param int $code the Exception code.
-     * @param \Exception $previous the previous exception used for the exception chaining.
+     * @param \Throwable|null $previous the previous exception used for the exception chaining.
      */
-    public function __construct($route, $application, $code = 0, \Exception $previous = null)
+    public function __construct($route, $application, $code = 0, $previous = null)
     {
         $this->command = $route;
         $this->application = $application;
diff --git a/src/console/controllers/AssetController.php b/src/console/controllers/AssetController.php
index 4f2e492dcea..75b3cb6bb1c 100644
--- a/src/console/controllers/AssetController.php
+++ b/src/console/controllers/AssetController.php
@@ -544,7 +544,7 @@ protected function compressCssFiles($inputFiles, $outputFile)
         if (is_string($this->cssCompressor)) {
             $tmpFile = $outputFile . '.tmp';
             $this->combineCssFiles($inputFiles, $tmpFile);
-            $this->stdout(shell_exec(strtr($this->cssCompressor, [
+            $this->stdout((string)shell_exec(strtr($this->cssCompressor, [
                 '{from}' => escapeshellarg($tmpFile),
                 '{to}' => escapeshellarg($outputFile),
             ])));
diff --git a/src/console/controllers/BaseMigrateController.php b/src/console/controllers/BaseMigrateController.php
index 24280c36e7c..3cbfa91010e 100644
--- a/src/console/controllers/BaseMigrateController.php
+++ b/src/console/controllers/BaseMigrateController.php
@@ -85,14 +85,14 @@ abstract class BaseMigrateController extends Controller
      */
     public $templateFile;
     /**
-     * @var int the permission to be set for newly generated migration files.
+     * @var int|null the permission to be set for newly generated migration files.
      * This value will be used by PHP chmod() function. No umask will be applied.
      * If not set, the permission will be determined by the current environment.
      * @since 2.0.43
      */
     public $newFileMode;
     /**
-     * @var string|int the user and/or group ownership to be set for newly generated migration files.
+     * @var string|int|null the user and/or group ownership to be set for newly generated migration files.
      * If not set, the ownership will be determined by the current environment.
      * @since 2.0.43
      * @see FileHelper::changeOwnership()
@@ -992,7 +992,7 @@ protected function getMigrationNameLimit()
 
     /**
      * Returns the migration history.
-     * @param int $limit the maximum number of records in the history to be returned. `null` for "no limit".
+     * @param int|null $limit the maximum number of records in the history to be returned. `null` for "no limit".
      * @return array the migration history
      */
     abstract protected function getMigrationHistory($limit);
diff --git a/src/console/controllers/HelpController.php b/src/console/controllers/HelpController.php
index 712fa76028a..30e3d53e53c 100644
--- a/src/console/controllers/HelpController.php
+++ b/src/console/controllers/HelpController.php
@@ -30,7 +30,7 @@
  * In the above, if the command name is not provided, all
  * available commands will be displayed.
  *
- * @property-read array $commands All available command names. This property is read-only.
+ * @property-read array $commands All available command names.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -41,7 +41,7 @@ class HelpController extends Controller
      * Displays available commands or the detailed information
      * about a particular command.
      *
-     * @param string $command The name of the command to show help about.
+     * @param string|null $command The name of the command to show help about.
      * If not provided, all available commands will be displayed.
      * @return int the exit status
      * @throws Exception if the command for help is unknown
@@ -473,8 +473,8 @@ protected function getSubCommandHelp($controller, $actionID)
      */
     protected function formatOptionHelp($name, $required, $type, $defaultValue, $comment)
     {
-        $comment = trim($comment);
-        $type = trim($type);
+        $comment = trim((string)$comment);
+        $type = trim((string)$type);
         if (strncmp($type, 'bool', 4) === 0) {
             $type = 'boolean, 0 or 1';
         }
diff --git a/src/console/controllers/MessageController.php b/src/console/controllers/MessageController.php
index 5eb1e312a08..2e950b312b2 100644
--- a/src/console/controllers/MessageController.php
+++ b/src/console/controllers/MessageController.php
@@ -84,7 +84,7 @@ class MessageController extends \yii\console\Controller
      */
     public $markUnused = true;
     /**
-     * @var array list of patterns that specify which files/directories should NOT be processed.
+     * @var array|null list of patterns that specify which files/directories should NOT be processed.
      * If empty or not set, all files/directories will be processed.
      * See helpers/FileHelper::findFiles() description for pattern matching rules.
      * If a file/directory matches both a pattern in "only" and "except", it will NOT be processed.
@@ -99,7 +99,7 @@ class MessageController extends \yii\console\Controller
         '/BaseYii.php', // contains examples about Yii::t()
     ];
     /**
-     * @var array list of patterns that specify which files (not directories) should be processed.
+     * @var array|null list of patterns that specify which files (not directories) should be processed.
      * If empty or not set, all files will be processed.
      * See helpers/FileHelper::findFiles() description for pattern matching rules.
      * If a file/directory matches both a pattern in "only" and "except", it will NOT be processed.
@@ -286,7 +286,7 @@ public function actionConfigTemplate($filePath)
      * This command will search through source code files and extract
      * messages that need to be translated in different languages.
      *
-     * @param string $configFile the path or alias of the configuration file.
+     * @param string|null $configFile the path or alias of the configuration file.
      * You may use the "yii message/config" command to generate
      * this file and then customize it for your needs.
      * @throws Exception on failure.
diff --git a/src/console/controllers/MigrateController.php b/src/console/controllers/MigrateController.php
index 8bf011fe42a..9b82cc800c0 100644
--- a/src/console/controllers/MigrateController.php
+++ b/src/console/controllers/MigrateController.php
@@ -406,7 +406,7 @@ protected function generateMigrationSourceCode($params)
 
         $name = $params['name'];
         if ($params['namespace']) {
-            $name = substr($name, strrpos($name, '\\') + 1);
+            $name = substr($name, (strrpos($name, '\\') ?: -1) + 1);
         }
 
         $templateFile = $this->templateFile;
diff --git a/src/console/widgets/Table.php b/src/console/widgets/Table.php
index 99fd5d23234..537bd31fbcf 100644
--- a/src/console/widgets/Table.php
+++ b/src/console/widgets/Table.php
@@ -40,8 +40,8 @@
  *     ],
  * ]);
  *
- * @property-write string $listPrefix List prefix. This property is write-only.
- * @property-write int $screenWidth Screen width. This property is write-only.
+ * @property-write string $listPrefix List prefix.
+ * @property-write int $screenWidth Screen width.
  *
  * @author Daniel Gomez Pan <pana_1990@hotmail.com>
  * @since 2.0.13
diff --git a/src/data/ArrayDataProvider.php b/src/data/ArrayDataProvider.php
index 5e507800a07..17c90981757 100644
--- a/src/data/ArrayDataProvider.php
+++ b/src/data/ArrayDataProvider.php
@@ -53,7 +53,7 @@
 class ArrayDataProvider extends BaseDataProvider
 {
     /**
-     * @var string|callable the column that is used as the key of the data models.
+     * @var string|callable|null the column that is used as the key of the data models.
      * This can be either a column name, or a callable that returns the key value of a given data model.
      * If this is not set, the index of the [[models]] array will be used.
      * @see getKeys()
diff --git a/src/data/BaseDataProvider.php b/src/data/BaseDataProvider.php
index 5be48a17712..9169cfe8b42 100644
--- a/src/data/BaseDataProvider.php
+++ b/src/data/BaseDataProvider.php
@@ -16,7 +16,7 @@
  *
  * For more details and usage information on BaseDataProvider, see the [guide article on data providers](guide:output-data-providers).
  *
- * @property-read int $count The number of data models in the current page. This property is read-only.
+ * @property-read int $count The number of data models in the current page.
  * @property array $keys The list of key values corresponding to [[models]]. Each data model in [[models]] is
  * uniquely identified by the corresponding key value in this array.
  * @property array $models The list of data models in the current page.
@@ -37,7 +37,7 @@ abstract class BaseDataProvider extends Component implements DataProviderInterfa
      */
     private static $counter = 0;
     /**
-     * @var string an ID that uniquely identifies the data provider among all data providers.
+     * @var string|null an ID that uniquely identifies the data provider among all data providers.
      * Generated automatically the following way in case it is not set:
      *
      * - First data provider ID is empty.
diff --git a/src/data/DataFilter.php b/src/data/DataFilter.php
index c07e2a86407..eff67233ddc 100644
--- a/src/data/DataFilter.php
+++ b/src/data/DataFilter.php
@@ -613,7 +613,7 @@ protected function validateAttributeCondition($attribute, $condition)
      * Validates operator condition.
      * @param string $operator raw operator control keyword.
      * @param mixed $condition attribute condition.
-     * @param string $attribute attribute name.
+     * @param string|null $attribute attribute name.
      */
     protected function validateOperatorCondition($operator, $condition, $attribute = null)
     {
diff --git a/src/data/Pagination.php b/src/data/Pagination.php
index 247d907aa8a..7e9f7bb1eb0 100644
--- a/src/data/Pagination.php
+++ b/src/data/Pagination.php
@@ -60,13 +60,13 @@
  *
  * @property-read int $limit The limit of the data. This may be used to set the LIMIT value for a SQL
  * statement for fetching the current page of data. Note that if the page size is infinite, a value -1 will be
- * returned. This property is read-only.
+ * returned.
  * @property-read array $links The links for navigational purpose. The array keys specify the purpose of the
- * links (e.g. [[LINK_FIRST]]), and the array values are the corresponding URLs. This property is read-only.
+ * links (e.g. [[LINK_FIRST]]), and the array values are the corresponding URLs.
  * @property-read int $offset The offset of the data. This may be used to set the OFFSET value for a SQL
- * statement for fetching the current page of data. This property is read-only.
+ * statement for fetching the current page of data.
  * @property int $page The zero-based current page number.
- * @property-read int $pageCount Number of pages. This property is read-only.
+ * @property-read int $pageCount Number of pages.
  * @property int $pageSize The number of items per page. If it is less than 1, it means the page size is
  * infinite, and thus a single page contains all items.
  *
@@ -96,12 +96,12 @@ class Pagination extends BaseObject implements Linkable
      */
     public $forcePageParam = true;
     /**
-     * @var string the route of the controller action for displaying the paged contents.
+     * @var string|null the route of the controller action for displaying the paged contents.
      * If not set, it means using the currently requested route.
      */
     public $route;
     /**
-     * @var array parameters (name => value) that should be used to obtain the current page number
+     * @var array|null parameters (name => value) that should be used to obtain the current page number
      * and to create new pagination URLs. If not set, all parameters from $_GET will be used instead.
      *
      * In order to add hash to all links use `array_merge($_GET, ['#' => 'my-hash'])`.
@@ -111,7 +111,7 @@ class Pagination extends BaseObject implements Linkable
      */
     public $params;
     /**
-     * @var \yii\web\UrlManager the URL manager used for creating pagination URLs. If not set,
+     * @var \yii\web\UrlManager|null the URL manager used for creating pagination URLs. If not set,
      * the "urlManager" application component will be used.
      */
     public $urlManager;
@@ -250,7 +250,7 @@ public function setPageSize($value, $validatePageSize = false)
      * Creates the URL suitable for pagination with the specified page number.
      * This method is mainly called by pagers when creating URLs used to perform pagination.
      * @param int $page the zero-based page number that the URL should point to.
-     * @param int $pageSize the number of items on each page. If not set, the value of [[pageSize]] will be used.
+     * @param int|null $pageSize the number of items on each page. If not set, the value of [[pageSize]] will be used.
      * @param bool $absolute whether to create an absolute URL. Defaults to `false`.
      * @return string the created URL
      * @see params
@@ -339,7 +339,7 @@ public function getLinks($absolute = false)
      * Returns the value of the specified query parameter.
      * This method returns the named parameter value from [[params]]. Null is returned if the value does not exist.
      * @param string $name the parameter name
-     * @param string $defaultValue the value to be returned when the specified parameter does not exist in [[params]].
+     * @param string|null $defaultValue the value to be returned when the specified parameter does not exist in [[params]].
      * @return string|null the parameter value
      */
     protected function getQueryParam($name, $defaultValue = null)
diff --git a/src/data/Sort.php b/src/data/Sort.php
index bbb1ce9b336..cf08bb1e853 100644
--- a/src/data/Sort.php
+++ b/src/data/Sort.php
@@ -72,7 +72,7 @@
  * `SORT_ASC` for ascending order or `SORT_DESC` for descending order. Note that the type of this property
  * differs in getter and setter. See [[getAttributeOrders()]] and [[setAttributeOrders()]] for details.
  * @property-read array $orders The columns (keys) and their corresponding sort directions (values). This can
- * be passed to [[\yii\db\Query::orderBy()]] to construct a DB query. This property is read-only.
+ * be passed to [[\yii\db\Query::orderBy()]] to construct a DB query.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -159,7 +159,7 @@ class Sort extends BaseObject
      */
     public $defaultOrder;
     /**
-     * @var string the route of the controller action for displaying the sorted contents.
+     * @var string|null the route of the controller action for displaying the sorted contents.
      * If not set, it means using the currently requested route.
      */
     public $route;
@@ -168,7 +168,7 @@ class Sort extends BaseObject
      */
     public $separator = ',';
     /**
-     * @var array parameters (name => value) that should be used to obtain the current sort directions
+     * @var array|null parameters (name => value) that should be used to obtain the current sort directions
      * and to create new sort URLs. If not set, `$_GET` will be used instead.
      *
      * In order to add hash to all links use `array_merge($_GET, ['#' => 'my-hash'])`.
@@ -181,7 +181,7 @@ class Sort extends BaseObject
      */
     public $params;
     /**
-     * @var \yii\web\UrlManager the URL manager used for creating sort URLs. If not set,
+     * @var \yii\web\UrlManager|null the URL manager used for creating sort URLs. If not set,
      * the `urlManager` application component will be used.
      */
     public $urlManager;
diff --git a/src/data/SqlDataProvider.php b/src/data/SqlDataProvider.php
index cf851ef8f92..a179d9bca6d 100644
--- a/src/data/SqlDataProvider.php
+++ b/src/data/SqlDataProvider.php
@@ -80,7 +80,7 @@ class SqlDataProvider extends BaseDataProvider
      */
     public $params = [];
     /**
-     * @var string|callable the column that is used as the key of the data models.
+     * @var string|callable|null the column that is used as the key of the data models.
      * This can be either a column name, or a callable that returns the key value of a given data model.
      *
      * If this is not set, the keys of the [[models]] array will be used.
diff --git a/src/db/ActiveQuery.php b/src/db/ActiveQuery.php
index 434b59cd598..d6abab28832 100644
--- a/src/db/ActiveQuery.php
+++ b/src/db/ActiveQuery.php
@@ -81,12 +81,12 @@ class ActiveQuery extends Query implements ActiveQueryInterface
     const EVENT_INIT = 'init';
 
     /**
-     * @var string the SQL statement to be executed for retrieving AR records.
+     * @var string|null the SQL statement to be executed for retrieving AR records.
      * This is set by [[ActiveRecord::findBySql()]].
      */
     public $sql;
     /**
-     * @var string|array the join condition to be used when this query is used in a relational context.
+     * @var string|array|null the join condition to be used when this query is used in a relational context.
      * The condition will be used in the ON part when [[ActiveQuery::joinWith()]] is called.
      * Otherwise, the condition will be used in the WHERE part of a query.
      * Please refer to [[Query::where()]] on how to specify this parameter.
@@ -94,7 +94,7 @@ class ActiveQuery extends Query implements ActiveQueryInterface
      */
     public $on;
     /**
-     * @var array a list of relations that this query should be joined with
+     * @var array|null a list of relations that this query should be joined with
      */
     public $joinWith;
 
@@ -124,7 +124,7 @@ public function init()
 
     /**
      * Executes query and returns all results as an array.
-     * @param Connection $db the DB connection used to create the DB command.
+     * @param Connection|null $db the DB connection used to create the DB command.
      * If null, the DB connection returned by [[modelClass]] will be used.
      * @return array|ActiveRecord[] the query results. If the query results in nothing, an empty array will be returned.
      */
@@ -778,7 +778,7 @@ public function orOnCondition($condition, $params = [])
      * @param array $link the link between the junction table and the table associated with [[primaryModel]].
      * The keys of the array represent the columns in the junction table, and the values represent the columns
      * in the [[primaryModel]] table.
-     * @param callable $callable a PHP callback for customizing the relation associated with the junction table.
+     * @param callable|null $callable a PHP callback for customizing the relation associated with the junction table.
      * Its signature should be `function($query)`, where `$query` is the query to be customized.
      * @return $this the query object itself
      * @throws InvalidConfigException when query is not initialized properly
diff --git a/src/db/ActiveQueryInterface.php b/src/db/ActiveQueryInterface.php
index 9150e8bc2ec..3b6cdcd0374 100644
--- a/src/db/ActiveQueryInterface.php
+++ b/src/db/ActiveQueryInterface.php
@@ -31,7 +31,7 @@ public function asArray($value = true);
 
     /**
      * Executes query and returns a single row of result.
-     * @param Connection $db the DB connection used to create the DB command.
+     * @param Connection|null $db the DB connection used to create the DB command.
      * If `null`, the DB connection returned by [[ActiveQueryTrait::$modelClass|modelClass]] will be used.
      * @return ActiveRecordInterface|array|null a single row of query result. Depending on the setting of [[asArray]],
      * the query result may be either an array or an ActiveRecord object. `null` will be returned
@@ -92,7 +92,7 @@ public function with();
     /**
      * Specifies the relation associated with the junction table for use in relational query.
      * @param string $relationName the relation name. This refers to a relation declared in the [[ActiveRelationTrait::primaryModel|primaryModel]] of the relation.
-     * @param callable $callable a PHP callback for customizing the relation associated with the junction table.
+     * @param callable|null $callable a PHP callback for customizing the relation associated with the junction table.
      * Its signature should be `function($query)`, where `$query` is the query to be customized.
      * @return $this the relation object itself.
      */
diff --git a/src/db/ActiveRecord.php b/src/db/ActiveRecord.php
index face7132b76..fd7e9539ebd 100644
--- a/src/db/ActiveRecord.php
+++ b/src/db/ActiveRecord.php
@@ -70,8 +70,8 @@
  *
  * For more details and usage information on ActiveRecord, see the [guide article on ActiveRecord](guide:db-active-record).
  *
- * @method ActiveQuery hasMany($class, array $link) see [[BaseActiveRecord::hasMany()]] for more info
- * @method ActiveQuery hasOne($class, array $link) see [[BaseActiveRecord::hasOne()]] for more info
+ * @method ActiveQuery hasMany($class, array $link) See [[BaseActiveRecord::hasMany()]] for more info.
+ * @method ActiveQuery hasOne($class, array $link) See [[BaseActiveRecord::hasOne()]] for more info.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
@@ -392,7 +392,7 @@ public static function updateAllCounters($counters, $condition = '', $params = [
      *
      * For a large set of models you might consider using [[ActiveQuery::each()]] to keep memory usage within limits.
      *
-     * @param string|array $condition the conditions that will be put in the WHERE part of the DELETE SQL.
+     * @param string|array|null $condition the conditions that will be put in the WHERE part of the DELETE SQL.
      * Please refer to [[Query::where()]] on how to specify this parameter.
      * @param array $params the parameters (name => value) to be bound to the query.
      * @return int the number of rows deleted
@@ -470,7 +470,7 @@ public static function primaryKey()
      */
     public function attributes()
     {
-        return array_keys(static::getTableSchema()->columns);
+        return static::getTableSchema()->getColumnNames();
     }
 
     /**
@@ -554,10 +554,10 @@ public static function populateRecord($record, $row)
      * @param bool $runValidation whether to perform validation (calling [[validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributes list of attributes that need to be saved. Defaults to `null`,
+     * @param array|null $attributes list of attributes that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return bool whether the attributes are valid and the record is inserted successfully.
-     * @throws \Exception in case insert failed.
+     * @throws \Throwable in case insert failed.
      */
     public function insert($runValidation = true, $attributes = null)
     {
@@ -591,7 +591,7 @@ public function insert($runValidation = true, $attributes = null)
 
     /**
      * Inserts an ActiveRecord into DB without considering transaction.
-     * @param array $attributes list of attributes that need to be saved. Defaults to `null`,
+     * @param array|null $attributes list of attributes that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return bool whether the record is inserted successfully.
      */
@@ -661,13 +661,13 @@ protected function insertInternal($attributes = null)
      * @param bool $runValidation whether to perform validation (calling [[validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributeNames list of attributes that need to be saved. Defaults to `null`,
+     * @param array|null $attributeNames list of attributes that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return int|false the number of rows affected, or false if validation fails
      * or [[beforeSave()]] stops the updating process.
      * @throws StaleObjectException if [[optimisticLock|optimistic locking]] is enabled and the data
      * being updated is outdated.
-     * @throws \Exception in case update failed.
+     * @throws \Throwable in case update failed.
      */
     public function update($runValidation = true, $attributeNames = null)
     {
@@ -716,7 +716,7 @@ public function update($runValidation = true, $attributeNames = null)
      * Note that it is possible the number of rows deleted is 0, even though the deletion execution is successful.
      * @throws StaleObjectException if [[optimisticLock|optimistic locking]] is enabled and the data
      * being deleted is outdated.
-     * @throws \Exception in case delete failed.
+     * @throws \Throwable in case delete failed.
      */
     public function delete()
     {
diff --git a/src/db/ActiveRecordInterface.php b/src/db/ActiveRecordInterface.php
index dfa9ed3096e..9cc7dc7a40b 100644
--- a/src/db/ActiveRecordInterface.php
+++ b/src/db/ActiveRecordInterface.php
@@ -79,9 +79,6 @@ public function getPrimaryKey($asArray = false);
      * @param bool $asArray whether to return the primary key value as an array. If true,
      * the return value will be an array with column name as key and column value as value.
      * If this is `false` (default), a scalar value will be returned for non-composite primary key.
-     * @property mixed The old primary key value. An array (column name => column value) is
-     * returned if the primary key is composite. A string is returned otherwise (`null` will be
-     * returned if the key value is `null`).
      * @return mixed the old primary key value. An array (column name => column value) is returned if the primary key
      * is composite or `$asArray` is true. A string is returned otherwise (`null` will be returned if
      * the key value is `null`).
@@ -313,7 +310,7 @@ public static function updateAll($attributes, $condition = null);
      * Customer::deleteAll([status = 3]);
      * ```
      *
-     * @param array $condition the condition that matches the records that should get deleted.
+     * @param array|null $condition the condition that matches the records that should get deleted.
      * Please refer to [[QueryInterface::where()]] on how to specify this parameter.
      * An empty condition will match all records.
      * @return int the number of rows deleted
@@ -338,7 +335,7 @@ public static function deleteAll($condition = null);
      * @param bool $runValidation whether to perform validation (calling [[\yii\base\Model::validate()|validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributeNames list of attribute names that need to be saved. Defaults to `null`,
+     * @param array|null $attributeNames list of attribute names that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return bool whether the saving succeeded (i.e. no validation errors occurred).
      */
@@ -359,7 +356,7 @@ public function save($runValidation = true, $attributeNames = null);
      * @param bool $runValidation whether to perform validation (calling [[\yii\base\Model::validate()|validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributes list of attributes that need to be saved. Defaults to `null`,
+     * @param array|null $attributes list of attributes that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return bool whether the attributes are valid and the record is inserted successfully.
      */
@@ -380,7 +377,7 @@ public function insert($runValidation = true, $attributes = null);
      * @param bool $runValidation whether to perform validation (calling [[\yii\base\Model::validate()|validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributeNames list of attributes that need to be saved. Defaults to `null`,
+     * @param array|null $attributeNames list of attributes that need to be saved. Defaults to `null`,
      * meaning all attributes that are loaded from DB will be saved.
      * @return int|bool the number of rows affected, or `false` if validation fails
      * or updating process is stopped for other reasons.
diff --git a/src/db/ActiveRelationTrait.php b/src/db/ActiveRelationTrait.php
index 8f2a6e44289..487e8e55f6e 100644
--- a/src/db/ActiveRelationTrait.php
+++ b/src/db/ActiveRelationTrait.php
@@ -17,8 +17,8 @@
  * @author Carsten Brandt <mail@cebe.cc>
  * @since 2.0
  *
- * @method ActiveRecordInterface one($db = null)
- * @method ActiveRecordInterface[] all($db = null)
+ * @method ActiveRecordInterface|array|null one($db = null) See [[ActiveQueryInterface::one()]] for more info.
+ * @method ActiveRecordInterface[] all($db = null) See [[ActiveQueryInterface::all()]] for more info.
  * @property ActiveRecord $modelClass
  */
 trait ActiveRelationTrait
@@ -98,7 +98,7 @@ public function __clone()
      * ```
      *
      * @param string $relationName the relation name. This refers to a relation declared in [[primaryModel]].
-     * @param callable $callable a PHP callback for customizing the relation associated with the junction table.
+     * @param callable|null $callable a PHP callback for customizing the relation associated with the junction table.
      * Its signature should be `function($query)`, where `$query` is the query to be customized.
      * @return $this the relation object itself.
      */
@@ -289,7 +289,12 @@ public function populateRelation($name, &$primaryModels)
             $link = array_values($deepViaQuery->link);
         }
         foreach ($primaryModels as $i => $primaryModel) {
-            if ($this->multiple && count($link) === 1 && is_array($keys = $primaryModel[reset($link)])) {
+            $keys = null;
+            if ($this->multiple && count($link) === 1) {
+                $primaryModelKey = reset($link);
+                $keys = isset($primaryModel[$primaryModelKey]) ? $primaryModel[$primaryModelKey] : null;
+            }
+            if (is_array($keys)) {
                 $value = [];
                 foreach ($keys as $key) {
                     $key = $this->normalizeModelKey($key);
@@ -386,8 +391,8 @@ private function populateInverseRelation(&$primaryModels, $models, $primaryName,
     /**
      * @param array $models
      * @param array $link
-     * @param array $viaModels
-     * @param null|self $viaQuery
+     * @param array|null $viaModels
+     * @param self|null $viaQuery
      * @param bool $checkMultiple
      * @return array
      */
@@ -523,7 +528,8 @@ private function filterByModels($models)
             // single key
             $attribute = reset($this->link);
             foreach ($models as $model) {
-                if (($value = $model[$attribute]) !== null) {
+                $value = isset($model[$attribute]) || (is_object($model) && property_exists($model, $attribute)) ? $model[$attribute] : null;
+                if ($value !== null) {
                     if (is_array($value)) {
                         $values = array_merge($values, $value);
                     } elseif ($value instanceof ArrayExpression && $value->getDimension() === 1) {
@@ -574,13 +580,15 @@ private function filterByModels($models)
     /**
      * @param ActiveRecordInterface|array $model
      * @param array $attributes
-     * @return string
+     * @return string|false
      */
     private function getModelKey($model, $attributes)
     {
         $key = [];
         foreach ($attributes as $attribute) {
-            $key[] = $this->normalizeModelKey($model[$attribute]);
+            if (isset($model[$attribute]) || (is_object($model) && property_exists($model, $attribute))) {
+                $key[] = $this->normalizeModelKey($model[$attribute]);
+            }
         }
         if (count($key) > 1) {
             return serialize($key);
diff --git a/src/db/ArrayExpression.php b/src/db/ArrayExpression.php
index e473eb10ec2..5a935ac526c 100644
--- a/src/db/ArrayExpression.php
+++ b/src/db/ArrayExpression.php
@@ -28,7 +28,7 @@
 class ArrayExpression implements ExpressionInterface, \ArrayAccess, \Countable, \IteratorAggregate
 {
     /**
-     * @var null|string the type of the array elements. Defaults to `null` which means the type is
+     * @var string|null the type of the array elements. Defaults to `null` which means the type is
      * not explicitly specified.
      *
      * Note that in case when type is not specified explicitly and DBMS can not guess it from the context,
@@ -68,7 +68,7 @@ public function __construct($value, $type = null, $dimension = 1)
     }
 
     /**
-     * @return null|string
+     * @return string|null
      */
     public function getType()
     {
@@ -104,6 +104,7 @@ public function getDimension()
      * The return value will be casted to boolean if non-boolean was returned.
      * @since 2.0.14
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return isset($this->value[$offset]);
@@ -119,6 +120,7 @@ public function offsetExists($offset)
      * @return mixed Can return all value types.
      * @since 2.0.14
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return $this->value[$offset];
@@ -137,6 +139,7 @@ public function offsetGet($offset)
      * @return void
      * @since 2.0.14
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $value)
     {
         $this->value[$offset] = $value;
@@ -152,6 +155,7 @@ public function offsetSet($offset, $value)
      * @return void
      * @since 2.0.14
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         unset($this->value[$offset]);
@@ -167,6 +171,7 @@ public function offsetUnset($offset)
      * The return value is cast to an integer.
      * @since 2.0.14
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return count($this->value);
@@ -181,6 +186,7 @@ public function count()
      * @since 2.0.14.1
      * @throws InvalidConfigException when ArrayExpression contains QueryInterface object
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         $value = $this->getValue();
diff --git a/src/db/BaseActiveRecord.php b/src/db/BaseActiveRecord.php
index d5675479c10..a784d18e1ab 100644
--- a/src/db/BaseActiveRecord.php
+++ b/src/db/BaseActiveRecord.php
@@ -23,19 +23,17 @@
  *
  * See [[\yii\db\ActiveRecord]] for a concrete implementation.
  *
- * @property-read array $dirtyAttributes The changed attribute values (name-value pairs). This property is
- * read-only.
+ * @property-read array $dirtyAttributes The changed attribute values (name-value pairs).
  * @property bool $isNewRecord Whether the record is new and should be inserted when calling [[save()]].
  * @property array $oldAttributes The old attribute values (name-value pairs). Note that the type of this
  * property differs in getter and setter. See [[getOldAttributes()]] and [[setOldAttributes()]] for details.
  * @property-read mixed $oldPrimaryKey The old primary key value. An array (column name => column value) is
  * returned if the primary key is composite. A string is returned otherwise (null will be returned if the key
- * value is null). This property is read-only.
+ * value is null).
  * @property-read mixed $primaryKey The primary key value. An array (column name => column value) is returned
  * if the primary key is composite. A string is returned otherwise (null will be returned if the key value is
- * null). This property is read-only.
- * @property-read array $relatedRecords An array of related records indexed by relation names. This property
- * is read-only.
+ * null).
+ * @property-read array $relatedRecords An array of related records indexed by relation names.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
@@ -198,7 +196,7 @@ public static function updateAllCounters($counters, $condition = '')
      * Customer::deleteAll('status = 3');
      * ```
      *
-     * @param string|array $condition the conditions that will be put in the WHERE part of the DELETE SQL.
+     * @param string|array|null $condition the conditions that will be put in the WHERE part of the DELETE SQL.
      * Please refer to [[Query::where()]] on how to specify this parameter.
      * @return int the number of rows deleted
      * @throws NotSupportedException if not overridden.
@@ -231,7 +229,7 @@ public static function deleteAll($condition = null)
      *    and implement necessary business logic (e.g. merging the changes, prompting stated data)
      *    to resolve the conflict.
      *
-     * @return string the column name that stores the lock version of a table row.
+     * @return string|null the column name that stores the lock version of a table row.
      * If `null` is returned (default implemented), optimistic locking will not be supported.
      */
     public function optimisticLock()
@@ -641,7 +639,7 @@ public function getDirtyAttributes($names = null)
             }
         } else {
             foreach ($this->_attributes as $name => $value) {
-                if (isset($names[$name]) && (!array_key_exists($name, $this->_oldAttributes) || $value !== $this->_oldAttributes[$name])) {
+                if (isset($names[$name]) && (!array_key_exists($name, $this->_oldAttributes) || $this->isAttributeDirty($name, $value))) {
                     $attributes[$name] = $value;
                 }
             }
@@ -668,7 +666,7 @@ public function getDirtyAttributes($names = null)
      * @param bool $runValidation whether to perform validation (calling [[validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributeNames list of attribute names that need to be saved. Defaults to null,
+     * @param array|null $attributeNames list of attribute names that need to be saved. Defaults to null,
      * meaning all attributes that are loaded from DB will be saved.
      * @return bool whether the saving succeeded (i.e. no validation errors occurred).
      */
@@ -725,7 +723,7 @@ public function save($runValidation = true, $attributeNames = null)
      * @param bool $runValidation whether to perform validation (calling [[validate()]])
      * before saving the record. Defaults to `true`. If the validation fails, the record
      * will not be saved to the database and this method will return `false`.
-     * @param array $attributeNames list of attribute names that need to be saved. Defaults to null,
+     * @param array|null $attributeNames list of attribute names that need to be saved. Defaults to null,
      * meaning all attributes that are loaded from DB will be saved.
      * @return int|false the number of rows affected, or `false` if validation fails
      * or [[beforeSave()]] stops the updating process.
@@ -785,7 +783,7 @@ public function updateAttributes($attributes)
 
     /**
      * @see update()
-     * @param array $attributes attributes to update
+     * @param array|null $attributes attributes to update
      * @return int|false the number of rows affected, or false if [[beforeSave()]] stops the updating process.
      * @throws StaleObjectException
      */
@@ -1112,9 +1110,6 @@ public function equals($record)
      * @param bool $asArray whether to return the primary key value as an array. If `true`,
      * the return value will be an array with column names as keys and column values as values.
      * Note that for composite primary keys, an array will always be returned regardless of this parameter value.
-     * @property mixed The primary key value. An array (column name => column value) is returned if
-     * the primary key is composite. A string is returned otherwise (null will be returned if
-     * the key value is null).
      * @return mixed the primary key value. An array (column name => column value) is returned if the primary key
      * is composite or `$asArray` is `true`. A string is returned otherwise (null will be returned if
      * the key value is null).
@@ -1142,9 +1137,6 @@ public function getPrimaryKey($asArray = false)
      * @param bool $asArray whether to return the primary key value as an array. If `true`,
      * the return value will be an array with column name as key and column value as value.
      * If this is `false` (default), a scalar value will be returned for non-composite primary key.
-     * @property mixed The old primary key value. An array (column name => column value) is
-     * returned if the primary key is composite. A string is returned otherwise (null will be
-     * returned if the key value is null).
      * @return mixed the old primary key value. An array (column name => column value) is returned if the primary key
      * is composite or `$asArray` is `true`. A string is returned otherwise (null will be returned if
      * the key value is null).
@@ -1221,6 +1213,7 @@ public static function instantiate($row)
      * @param mixed $offset the offset to check on
      * @return bool whether there is an element at the specified offset.
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return $this->__isset($offset);
@@ -1232,7 +1225,7 @@ public function offsetExists($offset)
      * It can be declared in either the Active Record class itself or one of its behaviors.
      * @param string $name the relation name, e.g. `orders` for a relation defined via `getOrders()` method (case-sensitive).
      * @param bool $throwException whether to throw exception if the relation does not exist.
-     * @return ActiveQueryInterface|ActiveQuery the relational query object. If the relation does not exist
+     * @return ActiveQueryInterface|ActiveQuery|null the relational query object. If the relation does not exist
      * and `$throwException` is `false`, `null` will be returned.
      * @throws InvalidArgumentException if the named relation does not exist.
      */
@@ -1761,4 +1754,20 @@ private function setRelationDependencies($name, $relation, $viaRelationName = nu
             $this->setRelationDependencies($name, $viaQuery, $viaRelationName);
         }
     }
+
+    /**
+     * @param string $attribute
+     * @param mixed  $value
+     * @return bool
+     */
+    private function isAttributeDirty($attribute, $value)
+    {
+        $old_attribute = $this->oldAttributes[$attribute];
+        if (is_array($value) && is_array($this->oldAttributes[$attribute])) {
+            $value = ArrayHelper::recursiveSort($value);
+            $old_attribute = ArrayHelper::recursiveSort($old_attribute);
+        }
+
+        return $value !== $old_attribute;
+    }
 }
diff --git a/src/db/BatchQueryResult.php b/src/db/BatchQueryResult.php
index c473d0ecd23..c45d3f1afb5 100644
--- a/src/db/BatchQueryResult.php
+++ b/src/db/BatchQueryResult.php
@@ -43,7 +43,7 @@ class BatchQueryResult extends Component implements \Iterator
     const EVENT_FINISH = 'finish';
 
     /**
-     * @var Connection the DB connection to be used when performing batch query.
+     * @var Connection|null the DB connection to be used when performing batch query.
      * If null, the "db" application component will be used.
      */
     public $db;
@@ -114,6 +114,7 @@ public function reset()
      * Resets the iterator to the initial state.
      * This method is required by the interface [[\Iterator]].
      */
+    #[\ReturnTypeWillChange]
     public function rewind()
     {
         $this->reset();
@@ -124,6 +125,7 @@ public function rewind()
      * Moves the internal pointer to the next dataset.
      * This method is required by the interface [[\Iterator]].
      */
+    #[\ReturnTypeWillChange]
     public function next()
     {
         if ($this->_batch === null || !$this->each || $this->each && next($this->_batch) === false) {
@@ -197,6 +199,7 @@ protected function getRows()
      * This method is required by the interface [[\Iterator]].
      * @return int the index of the current row.
      */
+    #[\ReturnTypeWillChange]
     public function key()
     {
         return $this->_key;
@@ -207,6 +210,7 @@ public function key()
      * This method is required by the interface [[\Iterator]].
      * @return mixed the current dataset.
      */
+    #[\ReturnTypeWillChange]
     public function current()
     {
         return $this->_value;
@@ -217,6 +221,7 @@ public function current()
      * This method is required by the interface [[\Iterator]].
      * @return bool whether there is a valid dataset at the current position.
      */
+    #[\ReturnTypeWillChange]
     public function valid()
     {
         return !empty($this->_batch);
diff --git a/src/db/ColumnSchema.php b/src/db/ColumnSchema.php
index 5eb6b7b891b..23bd2285a46 100644
--- a/src/db/ColumnSchema.php
+++ b/src/db/ColumnSchema.php
@@ -160,9 +160,16 @@ protected function typecast($value)
                     // https://github.com/yiisoft/yii2/issues/14663
                     return $value;
                 }
+                
+                if (PHP_VERSION_ID >= 80100 && is_object($value) && $value instanceof \BackedEnum) {
+                    return (string) $value->value;
+                }
 
                 return (string) $value;
             case 'integer':
+                if (PHP_VERSION_ID >= 80100 && is_object($value) && $value instanceof \BackedEnum) {
+                    return (int) $value->value;
+                }
                 return (int) $value;
             case 'boolean':
                 // treating a 0 bit value as false too
diff --git a/src/db/ColumnSchemaBuilder.php b/src/db/ColumnSchemaBuilder.php
index b9616148da2..b049c4b456d 100644
--- a/src/db/ColumnSchemaBuilder.php
+++ b/src/db/ColumnSchemaBuilder.php
@@ -124,8 +124,8 @@ class ColumnSchemaBuilder extends BaseObject
      * Create a column schema builder instance giving the type and value precision.
      *
      * @param string $type type of the column. See [[$type]].
-     * @param int|string|array $length length or precision of the column. See [[$length]].
-     * @param \yii\db\Connection $db the current database connection. See [[$db]].
+     * @param int|string|array|null $length length or precision of the column. See [[$length]].
+     * @param \yii\db\Connection|null $db the current database connection. See [[$db]].
      * @param array $config name-value pairs that will be used to initialize the object properties
      */
     public function __construct($type, $length = null, $db = null, $config = [])
diff --git a/src/db/Command.php b/src/db/Command.php
index 53be1470dec..ac9b1cb4422 100644
--- a/src/db/Command.php
+++ b/src/db/Command.php
@@ -103,7 +103,7 @@ class Command extends Component
      */
     private $_refreshTableName;
     /**
-     * @var string|false|null the isolation level to use for this transaction.
+     * @var string|null|false the isolation level to use for this transaction.
      * See [[Transaction::begin()]] for details.
      */
     private $_isolationLevel = false;
@@ -116,10 +116,10 @@ class Command extends Component
 
     /**
      * Enables query cache for this command.
-     * @param int $duration the number of seconds that query result of this command can remain valid in the cache.
+     * @param int|null $duration the number of seconds that query result of this command can remain valid in the cache.
      * If this is not set, the value of [[Connection::queryCacheDuration]] will be used instead.
      * Use 0 to indicate that the cached data will never expire.
-     * @param \yii\caching\Dependency $dependency the cache dependency associated with the cached query result.
+     * @param \yii\caching\Dependency|null $dependency the cache dependency associated with the cached query result.
      * @return $this the command object itself
      */
     public function cache($duration = null, $dependency = null)
@@ -237,7 +237,7 @@ public function getRawSql()
      * this may improve performance.
      * For SQL statement with binding parameters, this method is invoked
      * automatically.
-     * @param bool $forRead whether this method is called for a read query. If null, it means
+     * @param bool|null $forRead whether this method is called for a read query. If null, it means
      * the SQL statement should be used to determine whether it is for read or write.
      * @throws Exception if there is any DB error
      */
@@ -269,10 +269,10 @@ public function prepare($forRead = null)
         } catch (\Exception $e) {
             $message = $e->getMessage() . "\nFailed to prepare SQL: $sql";
             $errorInfo = $e instanceof \PDOException ? $e->errorInfo : null;
-            throw new Exception($message, $errorInfo, (int) $e->getCode(), $e);
+            throw new Exception($message, $errorInfo, $e->getCode(), $e);
         } catch (\Throwable $e) {
             $message = $e->getMessage() . "\nFailed to prepare SQL: $sql";
-            throw new Exception($message, null, (int) $e->getCode(), $e);
+            throw new Exception($message, null, $e->getCode(), $e);
         }
     }
 
@@ -292,8 +292,8 @@ public function cancel()
      * the form `:name`. For a prepared statement using question mark
      * placeholders, this will be the 1-indexed position of the parameter.
      * @param mixed $value the PHP variable to bind to the SQL statement parameter (passed by reference)
-     * @param int $dataType SQL data type of the parameter. If null, the type is determined by the PHP type of the value.
-     * @param int $length length of the data type
+     * @param int|null $dataType SQL data type of the parameter. If null, the type is determined by the PHP type of the value.
+     * @param int|null $length length of the data type
      * @param mixed $driverOptions the driver-specific options
      * @return $this the current command being executed
      * @see https://www.php.net/manual/en/function.PDOStatement-bindParam.php
@@ -336,7 +336,7 @@ protected function bindPendingParams()
      * the form `:name`. For a prepared statement using question mark
      * placeholders, this will be the 1-indexed position of the parameter.
      * @param mixed $value The value to bind to the parameter
-     * @param int $dataType SQL data type of the parameter. If null, the type is determined by the PHP type of the value.
+     * @param int|null $dataType SQL data type of the parameter. If null, the type is determined by the PHP type of the value.
      * @return $this the current command being executed
      * @see https://www.php.net/manual/en/function.PDOStatement-bindValue.php
      */
@@ -399,7 +399,7 @@ public function query()
 
     /**
      * Executes the SQL statement and returns ALL rows at once.
-     * @param int $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
+     * @param int|null $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
      * for valid fetch modes. If this parameter is null, the value set in [[fetchMode]] will be used.
      * @return array all rows of the query result. Each array element is an array representing a row of data.
      * An empty array is returned if the query results in nothing.
@@ -413,7 +413,7 @@ public function queryAll($fetchMode = null)
     /**
      * Executes the SQL statement and returns the first row of the result.
      * This method is best used when only the first row of result is needed for a query.
-     * @param int $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/pdostatement.setfetchmode.php)
+     * @param int|null $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/pdostatement.setfetchmode.php)
      * for valid fetch modes. If this parameter is null, the value set in [[fetchMode]] will be used.
      * @return array|false the first row (in terms of an array) of the query result. False is returned if the query
      * results in nothing.
@@ -641,7 +641,7 @@ public function delete($table, $condition = '', $params = [])
      *
      * @param string $table the name of the table to be created. The name will be properly quoted by the method.
      * @param array $columns the columns (name => definition) in the new table.
-     * @param string $options additional SQL fragment that will be appended to the generated SQL.
+     * @param string|null $options additional SQL fragment that will be appended to the generated SQL.
      * @return $this the command object itself
      */
     public function createTable($table, $columns, $options = null)
@@ -693,7 +693,7 @@ public function truncateTable($table)
      * @param string $table the table that the new column will be added to. The table name will be properly quoted by the method.
      * @param string $column the name of the new column. The name will be properly quoted by the method.
      * @param string $type the column type. [[\yii\db\QueryBuilder::getColumnType()]] will be called
-     * to convert the give column type to the physical one. For example, `string` will be converted
+     * to convert the given column type to the physical one. For example, `string` will be converted
      * as `varchar(255)`, and `string not null` becomes `varchar(255) not null`.
      * @return $this the command object itself
      */
@@ -783,8 +783,8 @@ public function dropPrimaryKey($name, $table)
      * @param string|array $columns the name of the column to that the constraint will be added on. If there are multiple columns, separate them with commas.
      * @param string $refTable the table that the foreign key references to.
      * @param string|array $refColumns the name of the column that the foreign key references to. If there are multiple columns, separate them with commas.
-     * @param string $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
-     * @param string $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
      * @return $this the command object itself
      */
     public function addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete = null, $update = null)
@@ -1136,7 +1136,7 @@ protected function logQuery($category)
     /**
      * Performs the actual DB query of a SQL statement.
      * @param string $method method of PDOStatement to be called
-     * @param int $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
+     * @param int|null $fetchMode the result fetch mode. Please refer to [PHP manual](https://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
      * for valid fetch modes. If this parameter is null, the value set in [[fetchMode]] will be used.
      * @return mixed the method execution result
      * @throws Exception if the query causes any problem
diff --git a/src/db/Connection.php b/src/db/Connection.php
index 74b954ffa43..660e441516c 100644
--- a/src/db/Connection.php
+++ b/src/db/Connection.php
@@ -111,24 +111,22 @@
  * ```
  *
  * @property string $driverName Name of the DB driver.
- * @property-read bool $isActive Whether the DB connection is established. This property is read-only.
+ * @property-read bool $isActive Whether the DB connection is established.
  * @property-read string $lastInsertID The row ID of the last row inserted, or the last value retrieved from
- * the sequence object. This property is read-only.
+ * the sequence object.
  * @property-read Connection $master The currently active master connection. `null` is returned if there is no
- * master available. This property is read-only.
- * @property-read PDO $masterPdo The PDO instance for the currently active master connection. This property is
- * read-only.
+ * master available.
+ * @property-read PDO $masterPdo The PDO instance for the currently active master connection.
  * @property QueryBuilder $queryBuilder The query builder for the current DB connection. Note that the type of
  * this property differs in getter and setter. See [[getQueryBuilder()]] and [[setQueryBuilder()]] for details.
- * @property-read Schema $schema The schema information for the database opened by this connection. This
- * property is read-only.
- * @property-read string $serverVersion Server version as a string. This property is read-only.
+ * @property-read Schema $schema The schema information for the database opened by this connection.
+ * @property-read string $serverVersion Server version as a string.
  * @property-read Connection $slave The currently active slave connection. `null` is returned if there is no
- * slave available and `$fallbackToMaster` is false. This property is read-only.
+ * slave available and `$fallbackToMaster` is false.
  * @property-read PDO $slavePdo The PDO instance for the currently active slave connection. `null` is returned
- * if no slave connection is available and `$fallbackToMaster` is false. This property is read-only.
+ * if no slave connection is available and `$fallbackToMaster` is false.
  * @property-read Transaction|null $transaction The currently active transaction. Null if no active
- * transaction. This property is read-only.
+ * transaction.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -164,11 +162,11 @@ class Connection extends Component
      */
     public $dsn;
     /**
-     * @var string the username for establishing DB connection. Defaults to `null` meaning no username to use.
+     * @var string|null the username for establishing DB connection. Defaults to `null` meaning no username to use.
      */
     public $username;
     /**
-     * @var string the password for establishing DB connection. Defaults to `null` meaning no password to use.
+     * @var string|null the password for establishing DB connection. Defaults to `null` meaning no password to use.
      */
     public $password;
     /**
@@ -179,7 +177,7 @@ class Connection extends Component
      */
     public $attributes;
     /**
-     * @var PDO the PHP PDO instance associated with this DB connection.
+     * @var PDO|null the PHP PDO instance associated with this DB connection.
      * This property is mainly managed by [[open()]] and [[close()]] methods.
      * When a DB connection is active, this property will represent a PDO instance;
      * otherwise, it will be null.
@@ -238,7 +236,7 @@ class Connection extends Component
      */
     public $queryCache = 'cache';
     /**
-     * @var string the charset used for database connection. The property is only used
+     * @var string|null the charset used for database connection. The property is only used
      * for MySQL, PostgreSQL and CUBRID databases. Defaults to null, meaning using default charset
      * as configured by the database.
      *
@@ -250,7 +248,7 @@ class Connection extends Component
      */
     public $charset;
     /**
-     * @var bool whether to turn on prepare emulation. Defaults to false, meaning PDO
+     * @var bool|null whether to turn on prepare emulation. Defaults to false, meaning PDO
      * will use the native prepare support if available. For some databases (such as MySQL),
      * this may need to be set true so that PDO can emulate the prepare support to bypass
      * the buggy native prepare support.
@@ -286,7 +284,7 @@ class Connection extends Component
         'cubrid' => 'yii\db\cubrid\Schema', // CUBRID
     ];
     /**
-     * @var string Custom PDO wrapper class. If not set, it will use [[PDO]] or [[\yii\db\mssql\PDO]] when MSSQL is used.
+     * @var string|null Custom PDO wrapper class. If not set, it will use [[PDO]] or [[\yii\db\mssql\PDO]] when MSSQL is used.
      * @see pdo
      */
     public $pdoClass;
@@ -494,12 +492,12 @@ public function getIsActive()
      *
      * @param callable $callable a PHP callable that contains DB queries which will make use of query cache.
      * The signature of the callable is `function (Connection $db)`.
-     * @param int $duration the number of seconds that query results can remain valid in the cache. If this is
+     * @param int|null $duration the number of seconds that query results can remain valid in the cache. If this is
      * not set, the value of [[queryCacheDuration]] will be used instead.
      * Use 0 to indicate that the cached data will never expire.
-     * @param \yii\caching\Dependency $dependency the cache dependency associated with the cached query results.
+     * @param \yii\caching\Dependency|null $dependency the cache dependency associated with the cached query results.
      * @return mixed the return result of the callable
-     * @throws \Exception if there is any exception during query
+     * @throws \Throwable if there is any exception during query
      * @see enableQueryCache
      * @see queryCache
      * @see noCache()
@@ -540,7 +538,7 @@ public function cache(callable $callable, $duration = null, $dependency = null)
      * @param callable $callable a PHP callable that contains DB queries which should not use query cache.
      * The signature of the callable is `function (Connection $db)`.
      * @return mixed the return result of the callable
-     * @throws \Exception if there is any exception during query
+     * @throws \Throwable if there is any exception during query
      * @see enableQueryCache
      * @see queryCache
      * @see cache()
@@ -564,9 +562,9 @@ public function noCache(callable $callable)
     /**
      * Returns the current query cache information.
      * This method is used internally by [[Command]].
-     * @param int $duration the preferred caching duration. If null, it will be ignored.
-     * @param \yii\caching\Dependency $dependency the preferred caching dependency. If null, it will be ignored.
-     * @return array the current query cache information, or null if query cache is not enabled.
+     * @param int|null $duration the preferred caching duration. If null, it will be ignored.
+     * @param \yii\caching\Dependency|null $dependency the preferred caching dependency. If null, it will be ignored.
+     * @return array|null the current query cache information, or null if query cache is not enabled.
      * @internal
      */
     public function getQueryCacheInfo($duration, $dependency)
@@ -646,7 +644,7 @@ public function open()
                 Yii::endProfile($token, __METHOD__);
             }
 
-            throw new Exception($e->getMessage(), $e->errorInfo, (int) $e->getCode(), $e);
+            throw new Exception($e->getMessage(), $e->errorInfo, $e->getCode(), $e);
         }
     }
 
@@ -738,6 +736,11 @@ protected function initConnection()
                 $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, $this->emulatePrepare);
             }
         }
+
+        if (PHP_VERSION_ID >= 80100 && $this->getDriverName() === 'sqlite') {
+            $this->pdo->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);
+        }
+
         if (!$this->isSybase && in_array($this->getDriverName(), ['mssql', 'dblib'], true)) {
             $this->pdo->exec('SET ANSI_NULL_DFLT_ON ON');
         }
@@ -749,7 +752,7 @@ protected function initConnection()
 
     /**
      * Creates a command for execution.
-     * @param string $sql the SQL statement to be executed
+     * @param string|null $sql the SQL statement to be executed
      * @param array $params the parameters to be bound to the SQL statement
      * @return Command the DB command
      */
@@ -802,7 +805,7 @@ public function beginTransaction($isolationLevel = null)
      * @param callable $callback a valid PHP callback that performs the job. Accepts connection instance as parameter.
      * @param string|null $isolationLevel The isolation level to use for this transaction.
      * See [[Transaction::begin()]] for details.
-     * @throws \Exception if there is any exception during query. In this case the transaction will be rolled back.
+     * @throws \Throwable if there is any exception during query. In this case the transaction will be rolled back.
      * @return mixed result of callback function
      */
     public function transaction(callable $callback, $isolationLevel = null)
@@ -1001,12 +1004,12 @@ function ($matches) {
     /**
      * Returns the name of the DB driver. Based on the the current [[dsn]], in case it was not set explicitly
      * by an end user.
-     * @return string name of the DB driver
+     * @return string|null name of the DB driver
      */
     public function getDriverName()
     {
         if ($this->_driverName === null) {
-            if (($pos = strpos($this->dsn, ':')) !== false) {
+            if (($pos = strpos((string)$this->dsn, ':')) !== false) {
                 $this->_driverName = strtolower(substr($this->dsn, 0, $pos));
             } else {
                 $this->_driverName = strtolower($this->getSlavePdo()->getAttribute(PDO::ATTR_DRIVER_NAME));
@@ -1040,7 +1043,7 @@ public function getServerVersion()
      * When [[enableSlaves]] is true, one of the slaves will be used for read queries, and its PDO instance
      * will be returned by this method.
      * @param bool $fallbackToMaster whether to return a master PDO in case none of the slave connections is available.
-     * @return PDO the PDO instance for the currently active slave connection. `null` is returned if no slave connection
+     * @return PDO|null the PDO instance for the currently active slave connection. `null` is returned if no slave connection
      * is available and `$fallbackToMaster` is false.
      */
     public function getSlavePdo($fallbackToMaster = true)
@@ -1068,7 +1071,7 @@ public function getMasterPdo()
      * Returns the currently active slave connection.
      * If this method is called for the first time, it will try to open a slave connection when [[enableSlaves]] is true.
      * @param bool $fallbackToMaster whether to return a master connection in case there is no slave connection available.
-     * @return Connection the currently active slave connection. `null` is returned if there is no slave available and
+     * @return Connection|null the currently active slave connection. `null` is returned if there is no slave available and
      * `$fallbackToMaster` is false.
      */
     public function getSlave($fallbackToMaster = true)
@@ -1087,7 +1090,7 @@ public function getSlave($fallbackToMaster = true)
     /**
      * Returns the currently active master connection.
      * If this method is called for the first time, it will try to open a master connection.
-     * @return Connection the currently active master connection. `null` is returned if there is no master available.
+     * @return Connection|null the currently active master connection. `null` is returned if there is no master available.
      * @since 2.0.11
      */
     public function getMaster()
@@ -1116,7 +1119,7 @@ public function getMaster()
      * @param callable $callback a PHP callable to be executed by this method. Its signature is
      * `function (Connection $db)`. Its return value will be returned by this method.
      * @return mixed the return value of the callback
-     * @throws \Exception if there is any exception thrown from the callback
+     * @throws \Throwable if there is any exception thrown from the callback
      */
     public function useMaster(callable $callback)
     {
@@ -1149,7 +1152,7 @@ public function useMaster(callable $callback)
      *
      * @param array $pool the list of connection configurations in the server pool
      * @param array $sharedConfig the configuration common to those given in `$pool`.
-     * @return Connection the opened DB connection, or `null` if no server is available
+     * @return Connection|null the opened DB connection, or `null` if no server is available
      * @throws InvalidConfigException if a configuration does not specify "dsn"
      * @see openFromPoolSequentially
      */
@@ -1176,7 +1179,7 @@ protected function openFromPool(array $pool, array $sharedConfig)
      *
      * @param array $pool the list of connection configurations in the server pool
      * @param array $sharedConfig the configuration common to those given in `$pool`.
-     * @return Connection the opened DB connection, or `null` if no server is available
+     * @return Connection|null the opened DB connection, or `null` if no server is available
      * @throws InvalidConfigException if a configuration does not specify "dsn"
      * @since 2.0.11
      * @see openFromPool
diff --git a/src/db/DataReader.php b/src/db/DataReader.php
index a8c875606d1..35548c3bbc8 100644
--- a/src/db/DataReader.php
+++ b/src/db/DataReader.php
@@ -40,10 +40,10 @@
  * [[fetchMode]]. See the [PHP manual](https://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
  * for more details about possible fetch mode.
  *
- * @property-read int $columnCount The number of columns in the result set. This property is read-only.
- * @property-write int $fetchMode Fetch mode. This property is write-only.
- * @property-read bool $isClosed Whether the reader is closed or not. This property is read-only.
- * @property-read int $rowCount Number of rows contained in the result. This property is read-only.
+ * @property-read int $columnCount The number of columns in the result set.
+ * @property-write int $fetchMode Fetch mode.
+ * @property-read bool $isClosed Whether the reader is closed or not.
+ * @property-read int $rowCount Number of rows contained in the result.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -79,7 +79,7 @@ public function __construct(Command $command, $config = [])
      * in the result set. If using the column name, be aware that the name
      * should match the case of the column, as returned by the driver.
      * @param mixed $value Name of the PHP variable to which the column will be bound.
-     * @param int $dataType Data type of the parameter
+     * @param int|null $dataType Data type of the parameter
      * @see https://www.php.net/manual/en/function.PDOStatement-bindColumn.php
      */
     public function bindColumn($column, &$value, $dataType = null)
@@ -196,6 +196,7 @@ public function getRowCount()
      * In this case, use "SELECT COUNT(*) FROM tableName" to obtain the number of rows.
      * @return int number of rows contained in the result.
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return $this->getRowCount();
@@ -216,6 +217,7 @@ public function getColumnCount()
      * This method is required by the interface [[\Iterator]].
      * @throws InvalidCallException if this method is invoked twice
      */
+    #[\ReturnTypeWillChange]
     public function rewind()
     {
         if ($this->_index < 0) {
@@ -231,6 +233,7 @@ public function rewind()
      * This method is required by the interface [[\Iterator]].
      * @return int the index of the current row.
      */
+    #[\ReturnTypeWillChange]
     public function key()
     {
         return $this->_index;
@@ -241,6 +244,7 @@ public function key()
      * This method is required by the interface [[\Iterator]].
      * @return mixed the current row.
      */
+    #[\ReturnTypeWillChange]
     public function current()
     {
         return $this->_row;
@@ -250,6 +254,7 @@ public function current()
      * Moves the internal pointer to the next row.
      * This method is required by the interface [[\Iterator]].
      */
+    #[\ReturnTypeWillChange]
     public function next()
     {
         $this->_row = $this->_statement->fetch();
@@ -261,6 +266,7 @@ public function next()
      * This method is required by the interface [[\Iterator]].
      * @return bool whether there is a row of data at current position.
      */
+    #[\ReturnTypeWillChange]
     public function valid()
     {
         return $this->_row !== false;
diff --git a/src/db/Exception.php b/src/db/Exception.php
index 1fb68df43da..674e26b75c0 100644
--- a/src/db/Exception.php
+++ b/src/db/Exception.php
@@ -27,7 +27,7 @@ class Exception extends \yii\base\Exception
      * @param string $message PDO error message
      * @param array $errorInfo PDO error info
      * @param string $code PDO error code
-     * @param \Throwable|\Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
     public function __construct($message, $errorInfo = [], $code = '', $previous = null)
     {
diff --git a/src/db/JsonExpression.php b/src/db/JsonExpression.php
index 36b46030ae5..52366ae78ad 100644
--- a/src/db/JsonExpression.php
+++ b/src/db/JsonExpression.php
@@ -69,7 +69,7 @@ public function getValue()
     }
 
     /**
-     * @return null|string the type of JSON
+     * @return string|null the type of JSON
      * @see type
      */
     public function getType()
@@ -86,6 +86,7 @@ public function getType()
      * @since 2.0.14.2
      * @throws InvalidConfigException when JsonExpression contains QueryInterface object
      */
+    #[\ReturnTypeWillChange]
     public function jsonSerialize()
     {
         $value = $this->getValue();
diff --git a/src/db/Migration.php b/src/db/Migration.php
index a8e2264f2c7..2094800207d 100644
--- a/src/db/Migration.php
+++ b/src/db/Migration.php
@@ -159,7 +159,7 @@ public function down()
     }
 
     /**
-     * @param \Throwable|\Exception $e
+     * @param \Throwable $e
      */
     private function printException($e)
     {
@@ -261,7 +261,6 @@ public function batchInsert($table, $columns, $rows)
      * If `true` is passed, the column data will be updated to match the insert column data.
      * If `false` is passed, no update will be performed if the column data already exists.
      * @param array $params the parameters to be bound to the command.
-     * @return $this the command object itself.
      * @since 2.0.14
      */
     public function upsert($table, $insertColumns, $updateColumns = true, $params = [])
@@ -315,7 +314,7 @@ public function delete($table, $condition = '', $params = [])
      *
      * @param string $table the name of the table to be created. The name will be properly quoted by the method.
      * @param array $columns the columns (name => definition) in the new table.
-     * @param string $options additional SQL fragment that will be appended to the generated SQL.
+     * @param string|null $options additional SQL fragment that will be appended to the generated SQL.
      */
     public function createTable($table, $columns, $options = null)
     {
@@ -458,8 +457,8 @@ public function dropPrimaryKey($name, $table)
      * @param string|array $columns the name of the column to that the constraint will be added on. If there are multiple columns, separate them with commas or use an array.
      * @param string $refTable the table that the foreign key references to.
      * @param string|array $refColumns the name of the column that the foreign key references to. If there are multiple columns, separate them with commas or use an array.
-     * @param string $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
-     * @param string $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
      */
     public function addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete = null, $update = null)
     {
diff --git a/src/db/Query.php b/src/db/Query.php
index d23893b3bc7..913e601ec7d 100644
--- a/src/db/Query.php
+++ b/src/db/Query.php
@@ -42,7 +42,7 @@
  *
  * A more detailed usage guide on how to work with Query can be found in the [guide article on Query Builder](guide:db-query-builder).
  *
- * @property-read string[] $tablesUsedInFrom Table names indexed by aliases. This property is read-only.
+ * @property-read string[] $tablesUsedInFrom Table names indexed by aliases.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
@@ -53,13 +53,13 @@ class Query extends Component implements QueryInterface, ExpressionInterface
     use QueryTrait;
 
     /**
-     * @var array the columns being selected. For example, `['id', 'name']`.
+     * @var array|null the columns being selected. For example, `['id', 'name']`.
      * This is used to construct the SELECT clause in a SQL statement. If not set, it means selecting all columns.
      * @see select()
      */
     public $select;
     /**
-     * @var string additional option that should be appended to the 'SELECT' keyword. For example,
+     * @var string|null additional option that should be appended to the 'SELECT' keyword. For example,
      * in MySQL, the option 'SQL_CALC_FOUND_ROWS' can be used.
      */
     public $selectOption;
@@ -67,20 +67,20 @@ class Query extends Component implements QueryInterface, ExpressionInterface
      * @var bool whether to select distinct rows of data only. If this is set true,
      * the SELECT clause would be changed to SELECT DISTINCT.
      */
-    public $distinct;
+    public $distinct = false;
     /**
-     * @var array the table(s) to be selected from. For example, `['user', 'post']`.
+     * @var array|null the table(s) to be selected from. For example, `['user', 'post']`.
      * This is used to construct the FROM clause in a SQL statement.
      * @see from()
      */
     public $from;
     /**
-     * @var array how to group the query results. For example, `['company', 'department']`.
+     * @var array|null how to group the query results. For example, `['company', 'department']`.
      * This is used to construct the GROUP BY clause in a SQL statement.
      */
     public $groupBy;
     /**
-     * @var array how to join with other tables. Each array element represents the specification
+     * @var array|null how to join with other tables. Each array element represents the specification
      * of one join which has the following structure:
      *
      * ```php
@@ -98,12 +98,12 @@ class Query extends Component implements QueryInterface, ExpressionInterface
      */
     public $join;
     /**
-     * @var string|array|ExpressionInterface the condition to be applied in the GROUP BY clause.
+     * @var string|array|ExpressionInterface|null the condition to be applied in the GROUP BY clause.
      * It can be either a string or an array. Please refer to [[where()]] on how to specify the condition.
      */
     public $having;
     /**
-     * @var array this is used to construct the UNION clause(s) in a SQL statement.
+     * @var array|null this is used to construct the UNION clause(s) in a SQL statement.
      * Each array element is an array of the following structure:
      *
      * - `query`: either a string or a [[Query]] object representing a query
@@ -111,7 +111,7 @@ class Query extends Component implements QueryInterface, ExpressionInterface
      */
     public $union;
     /**
-     * @var array this is used to construct the WITH section in a SQL query.
+     * @var array|null this is used to construct the WITH section in a SQL query.
      * Each array element is an array of the following structure:
      *
      * - `query`: either a string or a [[Query]] object representing a query
@@ -122,12 +122,12 @@ class Query extends Component implements QueryInterface, ExpressionInterface
      */
     public $withQueries;
     /**
-     * @var array list of query parameter values indexed by parameter placeholders.
+     * @var array|null list of query parameter values indexed by parameter placeholders.
      * For example, `[':name' => 'Dan', ':age' => 31]`.
      */
     public $params = [];
     /**
-     * @var int|true the default number of seconds that query results can remain valid in cache.
+     * @var int|bool|null the default number of seconds that query results can remain valid in cache.
      * Use 0 to indicate that the cached data will never expire.
      * Use a negative number to indicate that query cache should not be used.
      * Use boolean `true` to indicate that [[Connection::queryCacheDuration]] should be used.
@@ -136,7 +136,7 @@ class Query extends Component implements QueryInterface, ExpressionInterface
      */
     public $queryCacheDuration;
     /**
-     * @var \yii\caching\Dependency the dependency to be associated with the cached query result for this query
+     * @var \yii\caching\Dependency|null the dependency to be associated with the cached query result for this query
      * @see cache()
      * @since 2.0.14
      */
@@ -191,7 +191,7 @@ public function prepare($builder)
      * ```
      *
      * @param int $batchSize the number of records to be fetched in each batch.
-     * @param Connection $db the database connection. If not set, the "db" application component will be used.
+     * @param Connection|null $db the database connection. If not set, the "db" application component will be used.
      * @return BatchQueryResult the batch query result. It implements the [[\Iterator]] interface
      * and can be traversed to retrieve the data in batches.
      */
@@ -219,7 +219,7 @@ public function batch($batchSize = 100, $db = null)
      * ```
      *
      * @param int $batchSize the number of records to be fetched in each batch.
-     * @param Connection $db the database connection. If not set, the "db" application component will be used.
+     * @param Connection|null $db the database connection. If not set, the "db" application component will be used.
      * @return BatchQueryResult the batch query result. It implements the [[\Iterator]] interface
      * and can be traversed to retrieve the data in batches.
      */
@@ -290,7 +290,7 @@ public function one($db = null)
     /**
      * Returns the query result as a scalar value.
      * The value returned will be the first column in the first row of the query results.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return string|int|null|false the value of the first column in the first row of the query result.
      * False is returned if the query result is empty.
@@ -372,7 +372,7 @@ public function count($q = '*', $db = null)
      * Returns the sum of the specified column values.
      * @param string $q the column name or expression.
      * Make sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return mixed the sum of the specified column values.
      */
@@ -389,7 +389,7 @@ public function sum($q, $db = null)
      * Returns the average of the specified column values.
      * @param string $q the column name or expression.
      * Make sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return mixed the average of the specified column values.
      */
@@ -452,7 +452,7 @@ public function exists($db = null)
      * @param string|ExpressionInterface $selectExpression
      * @param Connection|null $db the database connection used to execute the query.
      * @return bool|string|null
-     * @throws \Exception if can't create command
+     * @throws \Throwable if can't create command
      */
     protected function queryScalar($selectExpression, $db)
     {
@@ -633,7 +633,7 @@ private function ensureNameQuoted($name)
      * Starting from version 2.0.1, you may also select sub-queries as columns by specifying each such column
      * as a `Query` instance representing the sub-query.
      *
-     * @param string $option additional option that should be appended to the 'SELECT' keyword. For example,
+     * @param string|null $option additional option that should be appended to the 'SELECT' keyword. For example,
      * in MySQL, the option 'SQL_CALC_FOUND_ROWS' can be used.
      * @return $this the query object itself
      */
@@ -684,7 +684,7 @@ protected function normalizeSelect($columns)
         if ($columns instanceof ExpressionInterface) {
             $columns = [$columns];
         } elseif (!is_array($columns)) {
-            $columns = preg_split('/\s*,\s*/', trim($columns), -1, PREG_SPLIT_NO_EMPTY);
+            $columns = preg_split('/\s*,\s*/', trim((string)$columns), -1, PREG_SPLIT_NO_EMPTY);
         }
         $select = [];
         foreach ($columns as $columnAlias => $columnDefinition) {
@@ -921,7 +921,7 @@ public function orWhere($condition, $params = [])
      */
     public function andFilterCompare($name, $value, $defaultOperator = '=')
     {
-        if (preg_match('/^(<>|>=|>|<=|<|=)/', $value, $matches)) {
+        if (preg_match('/^(<>|>=|>|<=|<|=)/', (string)$value, $matches)) {
             $operator = $matches[1];
             $value = substr($value, strlen($operator));
         } else {
@@ -1324,7 +1324,7 @@ public function addParams($params)
      * Use a negative number to indicate that query cache should not be used.
      * Use boolean `true` to indicate that [[Connection::queryCacheDuration]] should be used.
      * Defaults to `true`.
-     * @param \yii\caching\Dependency $dependency the cache dependency associated with the cached result.
+     * @param \yii\caching\Dependency|null $dependency the cache dependency associated with the cached result.
      * @return $this the Query object itself
      * @since 2.0.14
      */
diff --git a/src/db/QueryBuilder.php b/src/db/QueryBuilder.php
index bb032d78830..3e8e8756105 100644
--- a/src/db/QueryBuilder.php
+++ b/src/db/QueryBuilder.php
@@ -23,9 +23,9 @@
  * For more details and usage information on QueryBuilder, see the [guide article on query builders](guide:db-query-builder).
  *
  * @property-write string[] $conditionClasses Map of condition aliases to condition classes. For example:
- * ```php ['LIKE' => yii\db\condition\LikeCondition::class] ``` . This property is write-only.
+ * ```php ['LIKE' => yii\db\condition\LikeCondition::class] ``` .
  * @property-write string[] $expressionBuilders Array of builders that should be merged with the pre-defined
- * ones in [[expressionBuilders]] property. This property is write-only.
+ * ones in [[expressionBuilders]] property.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -710,7 +710,7 @@ public function delete($table, $condition, &$params)
      *
      * @param string $table the name of the table to be created. The name will be properly quoted by the method.
      * @param array $columns the columns (name => definition) in the new table.
-     * @param string $options additional SQL fragment that will be appended to the generated SQL.
+     * @param string|null $options additional SQL fragment that will be appended to the generated SQL.
      * @return string the SQL statement for creating a new DB table.
      */
     public function createTable($table, $columns, $options = null)
@@ -863,8 +863,8 @@ public function alterColumn($table, $column, $type)
      * @param string $refTable the table that the foreign key references to.
      * @param string|array $refColumns the name of the column that the foreign key references to.
      * If there are multiple columns, separate them with commas or use an array to represent them.
-     * @param string $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
-     * @param string $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
      * @return string the SQL statement for adding a foreign key constraint to an existing table.
      */
     public function addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete = null, $update = null)
@@ -1035,7 +1035,7 @@ public function dropDefaultValue($name, $table)
      * The sequence will be reset such that the primary key of the next new row inserted
      * will have the specified value or the maximum existing value +1.
      * @param string $table the name of the table whose primary key sequence will be reset
-     * @param array|string $value the value for the primary key of the next new row inserted. If this is not set,
+     * @param array|string|null $value the value for the primary key of the next new row inserted. If this is not set,
      * the next new row's primary key will have the maximum existing value +1.
      * @return string the SQL statement for resetting sequence
      * @throws NotSupportedException if this is not supported by the underlying DBMS
@@ -1051,7 +1051,7 @@ public function resetSequence($table, $value = null)
      * The sequence is reset such that the primary key of the next new row inserted
      * will have the specified value or the maximum existing value +1.
      * @param string $table the name of the table whose primary key sequence is reset
-     * @param array|string $value the value for the primary key of the next new row inserted. If this is not set,
+     * @param array|string|null $value the value for the primary key of the next new row inserted. If this is not set,
      * the next new row's primary key will have the maximum existing value +1.
      * @throws NotSupportedException if this is not supported by the underlying DBMS
      * @since 2.0.16
@@ -1228,7 +1228,7 @@ public function getColumnType($type)
      * @param array $columns
      * @param array $params the binding parameters to be populated
      * @param bool $distinct
-     * @param string $selectOption
+     * @param string|null $selectOption
      * @return string the SELECT clause built from [[Query::$select]].
      */
     public function buildSelect($columns, &$params, $distinct = false, $selectOption = null)
diff --git a/src/db/QueryInterface.php b/src/db/QueryInterface.php
index 4f266f490a9..819fc67ac58 100644
--- a/src/db/QueryInterface.php
+++ b/src/db/QueryInterface.php
@@ -24,7 +24,7 @@ interface QueryInterface
 {
     /**
      * Executes the query and returns all results as an array.
-     * @param Connection $db the database connection used to execute the query.
+     * @param Connection|null $db the database connection used to execute the query.
      * If this parameter is not given, the `db` application component will be used.
      * @return array the query results. If the query results in nothing, an empty array will be returned.
      */
@@ -32,7 +32,7 @@ public function all($db = null);
 
     /**
      * Executes the query and returns a single row of result.
-     * @param Connection $db the database connection used to execute the query.
+     * @param Connection|null $db the database connection used to execute the query.
      * If this parameter is not given, the `db` application component will be used.
      * @return array|bool the first row (in terms of an array) of the query result. False is returned if the query
      * results in nothing.
diff --git a/src/db/Schema.php b/src/db/Schema.php
index 71a6ea57759..e29585e253f 100644
--- a/src/db/Schema.php
+++ b/src/db/Schema.php
@@ -22,19 +22,17 @@
  * Schema represents the database schema information that is DBMS specific.
  *
  * @property-read string $lastInsertID The row ID of the last row inserted, or the last value retrieved from
- * the sequence object. This property is read-only.
- * @property-read QueryBuilder $queryBuilder The query builder for this connection. This property is
- * read-only.
- * @property-read string[] $schemaNames All schema names in the database, except system schemas. This property
- * is read-only.
- * @property-read string $serverVersion Server version as a string. This property is read-only.
- * @property-read string[] $tableNames All table names in the database. This property is read-only.
+ * the sequence object.
+ * @property-read QueryBuilder $queryBuilder The query builder for this connection.
+ * @property-read string[] $schemaNames All schema names in the database, except system schemas.
+ * @property-read string $serverVersion Server version as a string.
+ * @property-read string[] $tableNames All table names in the database.
  * @property-read TableSchema[] $tableSchemas The metadata for all tables in the database. Each array element
- * is an instance of [[TableSchema]] or its child class. This property is read-only.
+ * is an instance of [[TableSchema]] or its child class.
  * @property-write string $transactionIsolationLevel The transaction isolation level to use for this
  * transaction. This can be one of [[Transaction::READ_UNCOMMITTED]], [[Transaction::READ_COMMITTED]],
  * [[Transaction::REPEATABLE_READ]] and [[Transaction::SERIALIZABLE]] but also a string containing DBMS specific
- * syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is write-only.
+ * syntax to be used after `SET TRANSACTION ISOLATION LEVEL`.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Sergey Makinen <sergey@makinen.ru>
@@ -324,7 +322,7 @@ public function createQueryBuilder()
      * This method may be overridden by child classes to create a DBMS-specific column schema builder.
      *
      * @param string $type type of the column. See [[ColumnSchemaBuilder::$type]].
-     * @param int|string|array $length length or precision of the column. See [[ColumnSchemaBuilder::$length]].
+     * @param int|string|array|null $length length or precision of the column. See [[ColumnSchemaBuilder::$length]].
      * @return ColumnSchemaBuilder column schema builder instance
      * @since 2.0.6
      */
diff --git a/src/db/SchemaBuilderTrait.php b/src/db/SchemaBuilderTrait.php
index e57c4b0b78f..6b273d7f3ce 100644
--- a/src/db/SchemaBuilderTrait.php
+++ b/src/db/SchemaBuilderTrait.php
@@ -41,7 +41,7 @@ abstract protected function getDb();
 
     /**
      * Creates a primary key column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -53,7 +53,7 @@ public function primaryKey($length = null)
 
     /**
      * Creates a big primary key column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -65,7 +65,7 @@ public function bigPrimaryKey($length = null)
 
     /**
      * Creates a char column.
-     * @param int $length column size definition i.e. the maximum string length.
+     * @param int|null $length column size definition i.e. the maximum string length.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.8
@@ -77,7 +77,7 @@ public function char($length = null)
 
     /**
      * Creates a string column.
-     * @param int $length column size definition i.e. the maximum string length.
+     * @param int|null $length column size definition i.e. the maximum string length.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -99,7 +99,7 @@ public function text()
 
     /**
      * Creates a tinyint column. If tinyint is not supported by the DBMS, smallint will be used.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.14
@@ -111,7 +111,7 @@ public function tinyInteger($length = null)
 
     /**
      * Creates a smallint column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -123,7 +123,7 @@ public function smallInteger($length = null)
 
     /**
      * Creates an integer column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -135,7 +135,7 @@ public function integer($length = null)
 
     /**
      * Creates a bigint column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -147,7 +147,7 @@ public function bigInteger($length = null)
 
     /**
      * Creates a float column.
-     * @param int $precision column value precision. First parameter passed to the column type, e.g. FLOAT(precision).
+     * @param int|null $precision column value precision. First parameter passed to the column type, e.g. FLOAT(precision).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -159,7 +159,7 @@ public function float($precision = null)
 
     /**
      * Creates a double column.
-     * @param int $precision column value precision. First parameter passed to the column type, e.g. DOUBLE(precision).
+     * @param int|null $precision column value precision. First parameter passed to the column type, e.g. DOUBLE(precision).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -171,10 +171,10 @@ public function double($precision = null)
 
     /**
      * Creates a decimal column.
-     * @param int $precision column value precision, which is usually the total number of digits.
+     * @param int|null $precision column value precision, which is usually the total number of digits.
      * First parameter passed to the column type, e.g. DECIMAL(precision, scale).
      * This parameter will be ignored if not supported by the DBMS.
-     * @param int $scale column value scale, which is usually the number of digits after the decimal point.
+     * @param int|null $scale column value scale, which is usually the number of digits after the decimal point.
      * Second parameter passed to the column type, e.g. DECIMAL(precision, scale).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
@@ -195,7 +195,7 @@ public function decimal($precision = null, $scale = null)
 
     /**
      * Creates a datetime column.
-     * @param int $precision column value precision. First parameter passed to the column type, e.g. DATETIME(precision).
+     * @param int|null $precision column value precision. First parameter passed to the column type, e.g. DATETIME(precision).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -207,7 +207,7 @@ public function dateTime($precision = null)
 
     /**
      * Creates a timestamp column.
-     * @param int $precision column value precision. First parameter passed to the column type, e.g. TIMESTAMP(precision).
+     * @param int|null $precision column value precision. First parameter passed to the column type, e.g. TIMESTAMP(precision).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -219,7 +219,7 @@ public function timestamp($precision = null)
 
     /**
      * Creates a time column.
-     * @param int $precision column value precision. First parameter passed to the column type, e.g. TIME(precision).
+     * @param int|null $precision column value precision. First parameter passed to the column type, e.g. TIME(precision).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -241,7 +241,7 @@ public function date()
 
     /**
      * Creates a binary column.
-     * @param int $length column size or precision definition.
+     * @param int|null $length column size or precision definition.
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
      * @since 2.0.6
@@ -263,10 +263,10 @@ public function boolean()
 
     /**
      * Creates a money column.
-     * @param int $precision column value precision, which is usually the total number of digits.
+     * @param int|null $precision column value precision, which is usually the total number of digits.
      * First parameter passed to the column type, e.g. DECIMAL(precision, scale).
      * This parameter will be ignored if not supported by the DBMS.
-     * @param int $scale column value scale, which is usually the number of digits after the decimal point.
+     * @param int|null $scale column value scale, which is usually the number of digits after the decimal point.
      * Second parameter passed to the column type, e.g. DECIMAL(precision, scale).
      * This parameter will be ignored if not supported by the DBMS.
      * @return ColumnSchemaBuilder the column instance which can be further customized.
diff --git a/src/db/SqlToken.php b/src/db/SqlToken.php
index fa570689cc3..be155255a58 100644
--- a/src/db/SqlToken.php
+++ b/src/db/SqlToken.php
@@ -13,10 +13,9 @@
  * SqlToken represents SQL tokens produced by [[SqlTokenizer]] or its child classes.
  *
  * @property SqlToken[] $children Child tokens.
- * @property-read bool $hasChildren Whether the token has children. This property is read-only.
- * @property-read bool $isCollection Whether the token represents a collection of tokens. This property is
- * read-only.
- * @property-read string $sql SQL code. This property is read-only.
+ * @property-read bool $hasChildren Whether the token has children.
+ * @property-read bool $isCollection Whether the token represents a collection of tokens.
+ * @property-read string $sql SQL code.
  *
  * @author Sergey Makinen <sergey@makinen.ru>
  * @since 2.0.13
@@ -84,6 +83,7 @@ public function __toString()
      * @param int $offset child token offset.
      * @return bool whether the token exists.
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return isset($this->_children[$this->calculateOffset($offset)]);
@@ -96,6 +96,7 @@ public function offsetExists($offset)
      * @param int $offset child token offset.
      * @return SqlToken|null the child token at the specified offset, `null` if there's no token.
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         $offset = $this->calculateOffset($offset);
@@ -109,6 +110,7 @@ public function offsetGet($offset)
      * @param int|null $offset child token offset.
      * @param SqlToken $token token to be added.
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $token)
     {
         $token->parent = $this;
@@ -126,6 +128,7 @@ public function offsetSet($offset, $token)
      * It is implicitly called when you use something like `unset($token[$offset])`.
      * @param int $offset child token offset.
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         $offset = $this->calculateOffset($offset);
diff --git a/src/db/TableSchema.php b/src/db/TableSchema.php
index 71a2350baec..1bae54b5ef1 100644
--- a/src/db/TableSchema.php
+++ b/src/db/TableSchema.php
@@ -13,7 +13,7 @@
 /**
  * TableSchema represents the metadata of a database table.
  *
- * @property-read array $columnNames List of column names. This property is read-only.
+ * @property-read array $columnNames List of column names.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -39,7 +39,7 @@ class TableSchema extends BaseObject
      */
     public $primaryKey = [];
     /**
-     * @var string sequence name for the primary key. Null if no sequence.
+     * @var string|null sequence name for the primary key. Null if no sequence.
      */
     public $sequenceName;
     /**
diff --git a/src/db/Transaction.php b/src/db/Transaction.php
index 87e72dd18d1..15186c09544 100644
--- a/src/db/Transaction.php
+++ b/src/db/Transaction.php
@@ -40,12 +40,11 @@
  * > since PHP 7.0, so you can skip the part with `\Exception` if your app uses only PHP 7.0 and higher.
  *
  * @property-read bool $isActive Whether this transaction is active. Only an active transaction can
- * [[commit()]] or [[rollBack()]]. This property is read-only.
+ * [[commit()]] or [[rollBack()]].
  * @property-write string $isolationLevel The transaction isolation level to use for this transaction. This
  * can be one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but also a
- * string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is
- * write-only.
- * @property-read int $level The current nesting level of the transaction. This property is read-only.
+ * string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`.
+ * @property-read int $level The current nesting level of the transaction.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/conditions/InConditionBuilder.php b/src/db/conditions/InConditionBuilder.php
index dd238b7a7ce..6c48d1fba33 100644
--- a/src/db/conditions/InConditionBuilder.php
+++ b/src/db/conditions/InConditionBuilder.php
@@ -7,6 +7,7 @@
 
 namespace yii\db\conditions;
 
+use yii\db\Expression;
 use yii\db\ExpressionBuilderInterface;
 use yii\db\ExpressionBuilderTrait;
 use yii\db\ExpressionInterface;
@@ -66,6 +67,10 @@ public function build(ExpressionInterface $expression, array &$params = [])
             $column = $column->current();
         }
 
+        if ($column instanceof Expression) {
+            $column = $column->expression;
+        }
+
         if (is_array($values)) {
             $rawValues = $values;
         } elseif ($values instanceof \Traversable) {
@@ -124,6 +129,10 @@ protected function buildValues(ConditionInterface $condition, $values, &$params)
             $column = $column->current();
         }
 
+        if ($column instanceof Expression) {
+            $column = $column->expression;
+        }
+
         foreach ($values as $i => $value) {
             if (is_array($value) || $value instanceof \ArrayAccess) {
                 $value = isset($value[$column]) ? $value[$column] : null;
@@ -155,6 +164,9 @@ protected function buildSubqueryInCondition($operator, $columns, $values, &$para
 
         if (is_array($columns)) {
             foreach ($columns as $i => $col) {
+                if ($col instanceof Expression) {
+                    $col = $col->expression;
+                }
                 if (strpos($col, '(') === false) {
                     $columns[$i] = $this->queryBuilder->db->quoteColumnName($col);
                 }
@@ -163,6 +175,9 @@ protected function buildSubqueryInCondition($operator, $columns, $values, &$para
             return '(' . implode(', ', $columns) . ") $operator $sql";
         }
 
+        if ($columns instanceof Expression) {
+            $columns = $columns->expression;
+        }
         if (strpos($columns, '(') === false) {
             $columns = $this->queryBuilder->db->quoteColumnName($columns);
         }
@@ -185,6 +200,9 @@ protected function buildCompositeInCondition($operator, $columns, $values, &$par
         foreach ($values as $value) {
             $vs = [];
             foreach ($columns as $column) {
+                if ($column instanceof Expression) {
+                    $column = $column->expression;
+                }
                 if (isset($value[$column])) {
                     $vs[] = $this->queryBuilder->bindParam($value[$column], $params);
                 } else {
@@ -200,6 +218,9 @@ protected function buildCompositeInCondition($operator, $columns, $values, &$par
 
         $sqlColumns = [];
         foreach ($columns as $i => $column) {
+            if ($column instanceof Expression) {
+                $column = $column->expression;
+            }
             $sqlColumns[] = strpos($column, '(') === false ? $this->queryBuilder->db->quoteColumnName($column) : $column;
         }
 
diff --git a/src/db/conditions/LikeCondition.php b/src/db/conditions/LikeCondition.php
index 3586adfff27..3566e83832a 100644
--- a/src/db/conditions/LikeCondition.php
+++ b/src/db/conditions/LikeCondition.php
@@ -18,7 +18,7 @@
 class LikeCondition extends SimpleCondition
 {
     /**
-     * @var array|false map of chars to their replacements, false if characters should not be escaped
+     * @var array|null|false map of chars to their replacements, false if characters should not be escaped
      * or either null or empty array if escaping is condition builder responsibility.
      * By default it's set to `null`.
      */
diff --git a/src/db/cubrid/QueryBuilder.php b/src/db/cubrid/QueryBuilder.php
index 6ebbc5845c2..3db57939306 100644
--- a/src/db/cubrid/QueryBuilder.php
+++ b/src/db/cubrid/QueryBuilder.php
@@ -156,7 +156,7 @@ public function buildLimit($limit, $offset)
     {
         $sql = '';
         // limit is not optional in CUBRID
-        // http://www.cubrid.org/manual/90/en/LIMIT%20Clause
+        // https://www.cubrid.org/manual/en/9.3.0/sql/query/select.html#limit-clause
         // "You can specify a very big integer for row_count to display to the last row, starting from a specific row."
         if ($this->hasLimit($limit)) {
             $sql = 'LIMIT ' . $limit;
@@ -181,7 +181,7 @@ public function selectExists($rawSql)
 
     /**
      * {@inheritdoc}
-     * @see http://www.cubrid.org/manual/93/en/sql/schema/table.html#drop-index-clause
+     * @see https://www.cubrid.org/manual/en/9.3.0/sql/schema/table.html#drop-index-clause
      */
     public function dropIndex($name, $table)
     {
@@ -263,7 +263,7 @@ public function dropCommentFromTable($table)
      *
      * @param string $table table name
      * @param string $column column name
-     * @return null|string the column definition
+     * @return string|null the column definition
      * @throws Exception in case when table does not contain column
      * @since 2.0.8
      */
diff --git a/src/db/cubrid/Schema.php b/src/db/cubrid/Schema.php
index 73a06c4d130..f049fca487b 100644
--- a/src/db/cubrid/Schema.php
+++ b/src/db/cubrid/Schema.php
@@ -30,7 +30,7 @@ class Schema extends \yii\db\Schema implements ConstraintFinderInterface
 
     /**
      * @var array mapping from physical column types (keys) to abstract column types (values)
-     * Please refer to [CUBRID manual](http://www.cubrid.org/manual/91/en/sql/datatype.html) for
+     * Please refer to [CUBRID manual](https://www.cubrid.org/manual/en/9.3.0/sql/datatype.html) for
      * details on data types.
      */
     public $typeMap = [
@@ -345,7 +345,7 @@ public function getPdoType($data)
 
     /**
      * {@inheritdoc}
-     * @see http://www.cubrid.org/manual/91/en/sql/transaction.html#database-concurrency
+     * @see https://www.cubrid.org/manual/en/9.3.0/sql/transaction.html#database-concurrency
      */
     public function setTransactionIsolationLevel($level)
     {
diff --git a/src/db/mssql/ColumnSchemaBuilder.php b/src/db/mssql/ColumnSchemaBuilder.php
index f95d9dd98eb..5543a7963c8 100644
--- a/src/db/mssql/ColumnSchemaBuilder.php
+++ b/src/db/mssql/ColumnSchemaBuilder.php
@@ -13,9 +13,8 @@
 /**
  * ColumnSchemaBuilder is the schema builder for MSSQL databases.
  *
- * @property-read string|null $checkValue The `CHECK` constraint for the column. This property is read-only.
- * @property-read string|Expression|null $defaultValue Default value of the column. This property is
- * read-only.
+ * @property-read string|null $checkValue The `CHECK` constraint for the column.
+ * @property-read string|Expression|null $defaultValue Default value of the column.
  *
  * @author Valerii Gorbachev <darkdef@gmail.com>
  * @since 2.0.42
diff --git a/src/db/mssql/DBLibPDO.php b/src/db/mssql/DBLibPDO.php
index 1500131f633..97bcf42ca13 100644
--- a/src/db/mssql/DBLibPDO.php
+++ b/src/db/mssql/DBLibPDO.php
@@ -21,6 +21,7 @@ class DBLibPDO extends \PDO
      * @param string|null $name the sequence name. Defaults to null.
      * @return int last inserted ID value.
      */
+    #[\ReturnTypeWillChange]
     public function lastInsertId($name = null)
     {
         return $this->query('SELECT CAST(COALESCE(SCOPE_IDENTITY(), @@IDENTITY) AS bigint)')->fetchColumn();
@@ -35,6 +36,7 @@ public function lastInsertId($name = null)
      * @return mixed A successful call returns the value of the requested PDO attribute.
      * An unsuccessful call returns null.
      */
+    #[\ReturnTypeWillChange]
     public function getAttribute($attribute)
     {
         try {
diff --git a/src/db/mssql/PDO.php b/src/db/mssql/PDO.php
index 005774c45cc..dfdb635ed2b 100644
--- a/src/db/mssql/PDO.php
+++ b/src/db/mssql/PDO.php
@@ -21,6 +21,7 @@ class PDO extends \PDO
      * @param string|null $sequence the sequence name. Defaults to null.
      * @return int last inserted ID value.
      */
+    #[\ReturnTypeWillChange]
     public function lastInsertId($sequence = null)
     {
         return $this->query('SELECT CAST(COALESCE(SCOPE_IDENTITY(), @@IDENTITY) AS bigint)')->fetchColumn();
@@ -31,6 +32,7 @@ public function lastInsertId($sequence = null)
      * natively support transactions.
      * @return bool the result of a transaction start.
      */
+    #[\ReturnTypeWillChange]
     public function beginTransaction()
     {
         $this->exec('BEGIN TRANSACTION');
@@ -43,6 +45,7 @@ public function beginTransaction()
      * natively support transactions.
      * @return bool the result of a transaction commit.
      */
+    #[\ReturnTypeWillChange]
     public function commit()
     {
         $this->exec('COMMIT TRANSACTION');
@@ -55,6 +58,7 @@ public function commit()
      * natively support transactions.
      * @return bool the result of a transaction roll back.
      */
+    #[\ReturnTypeWillChange]
     public function rollBack()
     {
         $this->exec('ROLLBACK TRANSACTION');
@@ -71,6 +75,7 @@ public function rollBack()
      * @return mixed A successful call returns the value of the requested PDO attribute.
      * An unsuccessful call returns null.
      */
+    #[\ReturnTypeWillChange]
     public function getAttribute($attribute)
     {
         try {
diff --git a/src/db/mssql/QueryBuilder.php b/src/db/mssql/QueryBuilder.php
index 79c5d3d180f..bec248dab17 100644
--- a/src/db/mssql/QueryBuilder.php
+++ b/src/db/mssql/QueryBuilder.php
@@ -293,7 +293,7 @@ public function checkIntegrity($check = true, $schema = '', $table = '')
       * @param string $comment the text of the comment to be added. The comment will be properly quoted by the method.
       * @param string $table the table to be commented or whose column is to be commented. The table name will be
       * properly quoted by the method.
-      * @param string $column optional. The name of the column to be commented. If empty, the command will add the
+      * @param string|null $column optional. The name of the column to be commented. If empty, the command will add the
       * comment to the table instead. The column name will be properly quoted by the method.
       * @return string the SQL statement for adding a comment.
       * @throws InvalidArgumentException if the table does not exist.
@@ -359,7 +359,7 @@ public function addCommentOnTable($table, $comment)
      *
      * @param string $table the table that will have the comment removed or whose column will have the comment removed.
      * The table name will be properly quoted by the method.
-     * @param string $column optional. The name of the column whose comment will be removed. If empty, the command
+     * @param string|null $column optional. The name of the column whose comment will be removed. If empty, the command
      * will remove the comment from the table instead. The column name will be properly quoted by the method.
      * @return string the SQL statement for removing the comment.
      * @throws InvalidArgumentException if the table does not exist.
@@ -415,7 +415,7 @@ public function dropCommentFromTable($table)
     /**
      * Returns an array of column names given model name.
      *
-     * @param string $modelClass name of the model class
+     * @param string|null $modelClass name of the model class
      * @return array|null array of column names
      */
     protected function getAllColumnNames($modelClass = null)
diff --git a/src/db/mssql/SqlsrvPDO.php b/src/db/mssql/SqlsrvPDO.php
index e248b1cc6ca..d7fe600d1d6 100644
--- a/src/db/mssql/SqlsrvPDO.php
+++ b/src/db/mssql/SqlsrvPDO.php
@@ -26,6 +26,7 @@ class SqlsrvPDO extends \PDO
      * @param string|null $sequence the sequence name. Defaults to null.
      * @return int last inserted ID value.
      */
+    #[\ReturnTypeWillChange]
     public function lastInsertId($sequence = null)
     {
         return !$sequence ? parent::lastInsertId() : parent::lastInsertId($sequence);
diff --git a/src/db/mssql/TableSchema.php b/src/db/mssql/TableSchema.php
index 05268ea31fa..037029e5456 100644
--- a/src/db/mssql/TableSchema.php
+++ b/src/db/mssql/TableSchema.php
@@ -16,7 +16,7 @@
 class TableSchema extends \yii\db\TableSchema
 {
     /**
-     * @var string name of the catalog (database) that this table belongs to.
+     * @var string|null name of the catalog (database) that this table belongs to.
      * Defaults to null, meaning no catalog (or the current database).
      */
     public $catalogName;
diff --git a/src/db/mssql/conditions/InConditionBuilder.php b/src/db/mssql/conditions/InConditionBuilder.php
index 7892b545569..1124d010246 100644
--- a/src/db/mssql/conditions/InConditionBuilder.php
+++ b/src/db/mssql/conditions/InConditionBuilder.php
@@ -8,6 +8,7 @@
 namespace yii\db\mssql\conditions;
 
 use yii\base\NotSupportedException;
+use yii\db\Expression;
 
 /**
  * {@inheritdoc}
@@ -37,12 +38,18 @@ protected function buildCompositeInCondition($operator, $columns, $values, &$par
     {
         $quotedColumns = [];
         foreach ($columns as $i => $column) {
+            if ($column instanceof Expression) {
+                $column = $column->expression;
+            }
             $quotedColumns[$i] = strpos($column, '(') === false ? $this->queryBuilder->db->quoteColumnName($column) : $column;
         }
         $vss = [];
         foreach ($values as $value) {
             $vs = [];
             foreach ($columns as $i => $column) {
+                if ($column instanceof Expression) {
+                    $column = $column->expression;
+                }
                 if (isset($value[$column])) {
                     $phName = $this->queryBuilder->bindParam($value[$column], $params);
                     $vs[] = $quotedColumns[$i] . ($operator === 'IN' ? ' = ' : ' != ') . $phName;
diff --git a/src/db/mysql/QueryBuilder.php b/src/db/mysql/QueryBuilder.php
index 6ef2f30dbfe..382f36c28fc 100644
--- a/src/db/mysql/QueryBuilder.php
+++ b/src/db/mysql/QueryBuilder.php
@@ -357,7 +357,7 @@ public function dropCommentFromTable($table)
      *
      * @param string $table table name
      * @param string $column column name
-     * @return null|string the column definition
+     * @return string|null the column definition
      * @throws Exception in case when table does not contain column
      */
     private function getColumnDefinition($table, $column)
diff --git a/src/db/mysql/Schema.php b/src/db/mysql/Schema.php
index 90ecd314290..babb7d2aa9a 100644
--- a/src/db/mysql/Schema.php
+++ b/src/db/mysql/Schema.php
@@ -294,10 +294,11 @@ protected function loadColumnSchema($info)
              * See details here: https://mariadb.com/kb/en/library/now/#description
              */
             if (($column->type === 'timestamp' || $column->type === 'datetime')
+                && isset($info['default'])
                 && preg_match('/^current_timestamp(?:\(([0-9]*)\))?$/i', $info['default'], $matches)) {
                 $column->defaultValue = new Expression('CURRENT_TIMESTAMP' . (!empty($matches[1]) ? '(' . $matches[1] . ')' : ''));
             } elseif (isset($type) && $type === 'bit') {
-                $column->defaultValue = bindec(trim($info['default'], 'b\''));
+                $column->defaultValue = bindec(trim(isset($info['default']) ? $info['default'] : '', 'b\''));
             } else {
                 $column->defaultValue = $column->phpTypecast($info['default']);
             }
diff --git a/src/db/oci/Schema.php b/src/db/oci/Schema.php
index cba0b206a76..f6866e09cc1 100644
--- a/src/db/oci/Schema.php
+++ b/src/db/oci/Schema.php
@@ -25,7 +25,7 @@
  * Schema is the class for retrieving metadata from an Oracle database.
  *
  * @property-read string $lastInsertID The row ID of the last row inserted, or the last value retrieved from
- * the sequence object. This property is read-only.
+ * the sequence object.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -411,10 +411,10 @@ protected function createColumn($column)
         $c->phpType = $this->getColumnPhpType($c);
 
         if (!$c->isPrimaryKey) {
-            if (stripos($column['DATA_DEFAULT'], 'timestamp') !== false) {
+            if (stripos((string) $column['DATA_DEFAULT'], 'timestamp') !== false) {
                 $c->defaultValue = null;
             } else {
-                $defaultValue = $column['DATA_DEFAULT'];
+                $defaultValue = (string) $column['DATA_DEFAULT'];
                 if ($c->type === 'timestamp' && $defaultValue === 'CURRENT_TIMESTAMP') {
                     $c->defaultValue = new Expression('CURRENT_TIMESTAMP');
                 } else {
@@ -594,9 +594,9 @@ protected function extractColumnType($column, $dbType, $precision, $scale, $leng
      */
     protected function extractColumnSize($column, $dbType, $precision, $scale, $length)
     {
-        $column->size = trim($length) === '' ? null : (int) $length;
-        $column->precision = trim($precision) === '' ? null : (int) $precision;
-        $column->scale = trim($scale) === '' ? null : (int) $scale;
+        $column->size = trim((string) $length) === '' ? null : (int) $length;
+        $column->precision = trim((string) $precision) === '' ? null : (int) $precision;
+        $column->scale = trim((string) $scale) === '' ? null : (int) $scale;
     }
 
     /**
diff --git a/src/db/oci/conditions/InConditionBuilder.php b/src/db/oci/conditions/InConditionBuilder.php
index 2a947759e94..e3f87a7b63f 100644
--- a/src/db/oci/conditions/InConditionBuilder.php
+++ b/src/db/oci/conditions/InConditionBuilder.php
@@ -39,7 +39,7 @@ public function build(ExpressionInterface $expression, array &$params = [])
      *
      * @param ExpressionInterface|InCondition $condition the expression to be built.
      * @param array $params the binding parameters.
-     * @return null|string null when split is not required. Otherwise - built SQL condition.
+     * @return string|null null when split is not required. Otherwise - built SQL condition.
      */
     protected function splitCondition(InCondition $condition, &$params)
     {
diff --git a/src/db/pgsql/ArrayParser.php b/src/db/pgsql/ArrayParser.php
index 8ce08b24f5a..6a8ca148214 100644
--- a/src/db/pgsql/ArrayParser.php
+++ b/src/db/pgsql/ArrayParser.php
@@ -80,7 +80,7 @@ private function parseArray($value, &$i = 0)
      *
      * @param string $value
      * @param int $i parse starting position
-     * @return null|string
+     * @return string|null
      */
     private function parseString($value, &$i)
     {
diff --git a/src/db/pgsql/QueryBuilder.php b/src/db/pgsql/QueryBuilder.php
index fa546c6d986..4d78c3c5d18 100644
--- a/src/db/pgsql/QueryBuilder.php
+++ b/src/db/pgsql/QueryBuilder.php
@@ -463,7 +463,7 @@ public function update($table, $columns, $condition, &$params)
      * @param array|Query $columns the column data (name => value) to be saved into the table or instance
      * of [[yii\db\Query|Query]] to perform INSERT INTO ... SELECT SQL statement.
      * Passing of [[yii\db\Query|Query]] is available since version 2.0.11.
-     * @return array normalized columns
+     * @return array|Query normalized columns
      * @since 2.0.9
      */
     private function normalizeTableRowData($table, $columns)
diff --git a/src/db/sqlite/QueryBuilder.php b/src/db/sqlite/QueryBuilder.php
index dcf3dfc267f..8670f1af407 100644
--- a/src/db/sqlite/QueryBuilder.php
+++ b/src/db/sqlite/QueryBuilder.php
@@ -290,8 +290,8 @@ public function renameColumn($table, $oldName, $newName)
      * @param string $refTable the table that the foreign key references to.
      * @param string|array $refColumns the name of the column that the foreign key references to.
      * If there are multiple columns, separate them with commas or use an array to represent them.
-     * @param string $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
-     * @param string $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $delete the ON DELETE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
+     * @param string|null $update the ON UPDATE option. Most DBMS support these options: RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
      * @return string the SQL statement for adding a foreign key constraint to an existing table.
      * @throws NotSupportedException this is not supported by SQLite
      */
diff --git a/src/db/sqlite/Schema.php b/src/db/sqlite/Schema.php
index 0b5a0cc8ec9..7f608399d0b 100644
--- a/src/db/sqlite/Schema.php
+++ b/src/db/sqlite/Schema.php
@@ -25,8 +25,7 @@
  * Schema is the class for retrieving metadata from a SQLite (2/3) database.
  *
  * @property-write string $transactionIsolationLevel The transaction isolation level to use for this
- * transaction. This can be either [[Transaction::READ_UNCOMMITTED]] or [[Transaction::SERIALIZABLE]]. This
- * property is write-only.
+ * transaction. This can be either [[Transaction::READ_UNCOMMITTED]] or [[Transaction::SERIALIZABLE]].
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/sqlite/conditions/InConditionBuilder.php b/src/db/sqlite/conditions/InConditionBuilder.php
index 9ad84558c50..db980c346d5 100644
--- a/src/db/sqlite/conditions/InConditionBuilder.php
+++ b/src/db/sqlite/conditions/InConditionBuilder.php
@@ -8,6 +8,7 @@
 namespace yii\db\sqlite\conditions;
 
 use yii\base\NotSupportedException;
+use yii\db\Expression;
 
 /**
  * {@inheritdoc}
@@ -37,12 +38,18 @@ protected function buildCompositeInCondition($operator, $columns, $values, &$par
     {
         $quotedColumns = [];
         foreach ($columns as $i => $column) {
+            if ($column instanceof Expression) {
+                $column = $column->expression;
+            }
             $quotedColumns[$i] = strpos($column, '(') === false ? $this->queryBuilder->db->quoteColumnName($column) : $column;
         }
         $vss = [];
         foreach ($values as $value) {
             $vs = [];
             foreach ($columns as $i => $column) {
+                if ($column instanceof Expression) {
+                    $column = $column->expression;
+                }
                 if (isset($value[$column])) {
                     $phName = $this->queryBuilder->bindParam($value[$column], $params);
                     $vs[] = $quotedColumns[$i] . ($operator === 'IN' ? ' = ' : ' != ') . $phName;
diff --git a/src/di/Container.php b/src/di/Container.php
index 8917754016b..bfed9e5d9d6 100644
--- a/src/di/Container.php
+++ b/src/di/Container.php
@@ -95,9 +95,8 @@
  * For more details and usage information on Container, see the [guide article on di-containers](guide:concept-di-container).
  *
  * @property-read array $definitions The list of the object definitions or the loaded shared objects (type or
- * ID => definition or instance). This property is read-only.
- * @property-write bool $resolveArrays Whether to attempt to resolve elements in array dependencies. This
- * property is write-only.
+ * ID => definition or instance).
+ * @property-write bool $resolveArrays Whether to attempt to resolve elements in array dependencies.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -580,7 +579,7 @@ private function isNulledParam($param)
     /**
      * Resolves dependencies by replacing them with the actual object instances.
      * @param array $dependencies the dependencies
-     * @param ReflectionClass $reflection the class reflection associated with the dependencies
+     * @param ReflectionClass|null $reflection the class reflection associated with the dependencies
      * @return array the resolved dependencies
      * @throws InvalidConfigException if a dependency cannot be resolved or if a dependency cannot be fulfilled.
      */
@@ -666,7 +665,19 @@ public function resolveCallableDependencies(callable $callback, $params = [])
 
             if (PHP_VERSION_ID >= 80000) {
                 $class = $param->getType();
-                $isClass = $class !== null && !$param->getType()->isBuiltin();
+                if ($class instanceof \ReflectionUnionType || (PHP_VERSION_ID >= 80100 && $class instanceof \ReflectionIntersectionType)) {
+                    $isClass = false;
+                    foreach ($class->getTypes() as $type) {
+                        if (!$type->isBuiltin()) {
+                            $class = $type;
+                            $isClass = true;
+                            break;
+                        }
+                    }
+                } else {
+                    $isClass = $class !== null && !$class->isBuiltin();
+                }
+
             } else {
                 $class = $param->getClass();
                 $isClass = $class !== null;
diff --git a/src/di/Instance.php b/src/di/Instance.php
index 62fb50e1d2e..41af21af910 100644
--- a/src/di/Instance.php
+++ b/src/di/Instance.php
@@ -7,7 +7,6 @@
 
 namespace yii\di;
 
-use Exception;
 use Yii;
 use yii\base\InvalidConfigException;
 
@@ -111,8 +110,8 @@ public static function of($id, $optional = false)
      * You may specify a reference in terms of a component ID or an Instance object.
      * Starting from version 2.0.2, you may also pass in a configuration array for creating the object.
      * If the "class" value is not specified in the configuration array, it will use the value of `$type`.
-     * @param string $type the class/interface name to be checked. If null, type check will not be performed.
-     * @param ServiceLocator|Container $container the container. This will be passed to [[get()]].
+     * @param string|null $type the class/interface name to be checked. If null, type check will not be performed.
+     * @param ServiceLocator|Container|null $container the container. This will be passed to [[get()]].
      * @return object the object referenced by the Instance, or `$reference` itself if it is an object.
      * @throws InvalidConfigException if the reference is invalid
      */
@@ -159,7 +158,7 @@ public static function ensure($reference, $type = null, $container = null)
 
     /**
      * Returns the actual object referenced by this Instance object.
-     * @param ServiceLocator|Container $container the container used to locate the referenced object.
+     * @param ServiceLocator|Container|null $container the container used to locate the referenced object.
      * If null, the method will first try `Yii::$app` then `Yii::$container`.
      * @return object the actual object referenced by this Instance object.
      */
@@ -174,7 +173,12 @@ public function get($container = null)
             }
 
             return Yii::$container->get($this->id);
-        } catch (Exception $e) {
+        } catch (\Exception $e) {
+            if ($this->optional) {
+                return null;
+            }
+            throw $e;
+        } catch (\Throwable $e) {
             if ($this->optional) {
                 return null;
             }
diff --git a/src/di/NotInstantiableException.php b/src/di/NotInstantiableException.php
index c80332ae08c..ccde5bf1c58 100644
--- a/src/di/NotInstantiableException.php
+++ b/src/di/NotInstantiableException.php
@@ -21,7 +21,7 @@ class NotInstantiableException extends InvalidConfigException
     /**
      * {@inheritdoc}
      */
-    public function __construct($class, $message = null, $code = 0, \Exception $previous = null)
+    public function __construct($class, $message = null, $code = 0, $previous = null)
     {
         if ($message === null) {
             $message = "Can not instantiate $class.";
diff --git a/src/filters/AccessControl.php b/src/filters/AccessControl.php
index 3e91b80a22e..d8a17d51469 100644
--- a/src/filters/AccessControl.php
+++ b/src/filters/AccessControl.php
@@ -63,7 +63,7 @@ class AccessControl extends ActionFilter
      */
     public $user = 'user';
     /**
-     * @var callable a callback that will be called if the access should be denied
+     * @var callable|null a callback that will be called if the access should be denied
      * to the current user. This is the case when either no rule matches, or a rule with
      * [[AccessRule::$allow|$allow]] set to `false` matches.
      * If not set, [[denyAccess()]] will be called.
diff --git a/src/filters/AccessRule.php b/src/filters/AccessRule.php
index 8cb4fca24b7..25251e5fc60 100644
--- a/src/filters/AccessRule.php
+++ b/src/filters/AccessRule.php
@@ -28,14 +28,14 @@ class AccessRule extends Component
     /**
      * @var bool whether this is an 'allow' rule or 'deny' rule.
      */
-    public $allow;
+    public $allow = false;
     /**
-     * @var array list of action IDs that this rule applies to. The comparison is case-sensitive.
+     * @var array|null list of action IDs that this rule applies to. The comparison is case-sensitive.
      * If not set or empty, it means this rule applies to all actions.
      */
     public $actions;
     /**
-     * @var array list of the controller IDs that this rule applies to.
+     * @var array|null list of the controller IDs that this rule applies to.
      *
      * The comparison uses [[\yii\base\Controller::uniqueId]], so each controller ID is prefixed
      * with the module ID (if any). For a `product` controller in the application, you would specify
@@ -50,7 +50,7 @@ class AccessRule extends Component
      */
     public $controllers;
     /**
-     * @var array list of roles that this rule applies to (requires properly configured User component).
+     * @var array|null list of roles that this rule applies to (requires properly configured User component).
      * Two special roles are recognized, and they are checked via [[User::isGuest]]:
      *
      * - `?`: matches a guest user (not authenticated yet)
@@ -67,7 +67,7 @@ class AccessRule extends Component
      */
     public $roles;
     /**
-     * @var array list of RBAC (Role-Based Access Control) permissions that this rules applies to.
+     * @var array|null list of RBAC (Role-Based Access Control) permissions that this rules applies to.
      * [[User::can()]] will be called to check access.
      *
      * If this property is not set or empty, it means this rule applies regardless of permissions.
@@ -111,7 +111,7 @@ class AccessRule extends Component
      */
     public $roleParams = [];
     /**
-     * @var array list of user IP addresses that this rule applies to. An IP address
+     * @var array|null list of user IP addresses that this rule applies to. An IP address
      * can contain the wildcard `*` at the end so that it matches IP addresses with the same prefix.
      * For example, '192.168.*' matches all IP addresses in the segment '192.168.'.
      * It may also contain a pattern/mask like '172.16.0.0/12' which would match all IPs from the
@@ -122,7 +122,7 @@ class AccessRule extends Component
      */
     public $ips;
     /**
-     * @var array list of request methods (e.g. `GET`, `POST`) that this rule applies to.
+     * @var array|null list of request methods (e.g. `GET`, `POST`) that this rule applies to.
      * If not set or empty, it means this rule applies to all request methods.
      * @see \yii\web\Request::method
      */
@@ -140,7 +140,7 @@ class AccessRule extends Component
      */
     public $matchCallback;
     /**
-     * @var callable a callback that will be called if this rule determines the access to
+     * @var callable|null a callback that will be called if this rule determines the access to
      * the current action should be denied. This is the case when this rule matches
      * and [[$allow]] is set to `false`.
      *
diff --git a/src/filters/AjaxFilter.php b/src/filters/AjaxFilter.php
index 265f01a5705..65becc8b506 100644
--- a/src/filters/AjaxFilter.php
+++ b/src/filters/AjaxFilter.php
@@ -37,7 +37,7 @@ class AjaxFilter extends ActionFilter
      */
     public $errorMessage = 'Request must be XMLHttpRequest.';
     /**
-     * @var Request the current request. If not set, the `request` application component will be used.
+     * @var Request|null the current request. If not set, the `request` application component will be used.
      */
     public $request;
 
diff --git a/src/filters/ContentNegotiator.php b/src/filters/ContentNegotiator.php
index 760c4a0fab2..8414f702445 100644
--- a/src/filters/ContentNegotiator.php
+++ b/src/filters/ContentNegotiator.php
@@ -102,7 +102,7 @@ class ContentNegotiator extends ActionFilter implements BootstrapInterface
      */
     public $languageParam = '_lang';
     /**
-     * @var array list of supported response formats. The keys are MIME types (e.g. `application/json`)
+     * @var array|null list of supported response formats. The keys are MIME types (e.g. `application/json`)
      * while the values are the corresponding formats (e.g. `html`, `json`) which must be supported
      * as declared in [[\yii\web\Response::$formatters]].
      *
@@ -110,7 +110,7 @@ class ContentNegotiator extends ActionFilter implements BootstrapInterface
      */
     public $formats;
     /**
-     * @var array a list of supported languages. The array keys are the supported language variants (e.g. `en-GB`, `en-US`),
+     * @var array|null a list of supported languages. The array keys are the supported language variants (e.g. `en-GB`, `en-US`),
      * while the array values are the corresponding language codes (e.g. `en`, `de`) recognized by the application.
      *
      * Array keys are not always required. When an array value does not have a key, the matching of the requested language
@@ -124,7 +124,7 @@ class ContentNegotiator extends ActionFilter implements BootstrapInterface
      */
     public $request;
     /**
-     * @var Response the response to be sent. If not set, the `response` application component will be used.
+     * @var Response|null the response to be sent. If not set, the `response` application component will be used.
      */
     public $response;
 
diff --git a/src/filters/Cors.php b/src/filters/Cors.php
index 356053f514b..34cc5435649 100644
--- a/src/filters/Cors.php
+++ b/src/filters/Cors.php
@@ -70,11 +70,11 @@
 class Cors extends ActionFilter
 {
     /**
-     * @var Request the current request. If not set, the `request` application component will be used.
+     * @var Request|null the current request. If not set, the `request` application component will be used.
      */
     public $request;
     /**
-     * @var Response the response to be sent. If not set, the `response` application component will be used.
+     * @var Response|null the response to be sent. If not set, the `response` application component will be used.
      */
     public $response;
     /**
diff --git a/src/filters/HostControl.php b/src/filters/HostControl.php
index 51aa5bee24a..b2f76fdb515 100644
--- a/src/filters/HostControl.php
+++ b/src/filters/HostControl.php
@@ -91,7 +91,7 @@ class HostControl extends ActionFilter
      */
     public $allowedHosts;
     /**
-     * @var callable a callback that will be called if the current host does not match [[allowedHosts]].
+     * @var callable|null a callback that will be called if the current host does not match [[allowedHosts]].
      * If not set, [[denyAccess()]] will be called.
      *
      * The signature of the callback should be as follows:
diff --git a/src/filters/HttpCache.php b/src/filters/HttpCache.php
index 2a6f6e32a4c..cfc9c152aa7 100644
--- a/src/filters/HttpCache.php
+++ b/src/filters/HttpCache.php
@@ -86,12 +86,12 @@ class HttpCache extends ActionFilter
      */
     public $params;
     /**
-     * @var string the value of the `Cache-Control` HTTP header. If null, the header will not be sent.
+     * @var string|null the value of the `Cache-Control` HTTP header. If null, the header will not be sent.
      * @see http://tools.ietf.org/html/rfc2616#section-14.9
      */
     public $cacheControlHeader = 'public, max-age=3600';
     /**
-     * @var string the name of the cache limiter to be set when [session_cache_limiter()](https://www.php.net/manual/en/function.session-cache-limiter.php)
+     * @var string|null the name of the cache limiter to be set when [session_cache_limiter()](https://www.php.net/manual/en/function.session-cache-limiter.php)
      * is called. The default value is an empty string, meaning turning off automatic sending of cache headers entirely.
      * You may set this property to be `public`, `private`, `private_no_expire`, and `nocache`.
      * Please refer to [session_cache_limiter()](https://www.php.net/manual/en/function.session-cache-limiter.php)
@@ -158,9 +158,9 @@ public function beforeAction($action)
     /**
      * Validates if the HTTP cache contains valid content.
      * If both Last-Modified and ETag are null, returns false.
-     * @param int $lastModified the calculated Last-Modified value in terms of a UNIX timestamp.
+     * @param int|null $lastModified the calculated Last-Modified value in terms of a UNIX timestamp.
      * If null, the Last-Modified header will not be validated.
-     * @param string $etag the calculated ETag value. If null, the ETag header will not be validated.
+     * @param string|null $etag the calculated ETag value. If null, the ETag header will not be validated.
      * @return bool whether the HTTP cache is still valid.
      */
     protected function validateCache($lastModified, $etag)
diff --git a/src/filters/PageCache.php b/src/filters/PageCache.php
index 1930aa0873f..6fd7e9d8f4a 100644
--- a/src/filters/PageCache.php
+++ b/src/filters/PageCache.php
@@ -116,7 +116,7 @@ class PageCache extends ActionFilter implements DynamicContentAwareInterface
      */
     public $enabled = true;
     /**
-     * @var \yii\base\View the view component to use for caching. If not set, the default application view component
+     * @var \yii\base\View|null the view component to use for caching. If not set, the default application view component
      * [[\yii\web\Application::view]] will be used.
      */
     public $view;
@@ -129,7 +129,7 @@ class PageCache extends ActionFilter implements DynamicContentAwareInterface
     public $cacheCookies = false;
     /**
      * @var bool|array a boolean value indicating whether to cache all HTTP headers, or an array of
-     * HTTP header names (case-insensitive) indicating which HTTP headers can be cached.
+     * HTTP header names (case-sensitive) indicating which HTTP headers can be cached.
      * Note if your HTTP headers contain sensitive information, you should white-list which headers can be cached.
      * @since 2.0.4
      */
@@ -253,40 +253,59 @@ public function cacheResponse()
         foreach (['format', 'version', 'statusCode', 'statusText'] as $name) {
             $data[$name] = $response->{$name};
         }
-        $this->insertResponseCollectionIntoData($response, 'headers', $data);
-        $this->insertResponseCollectionIntoData($response, 'cookies', $data);
+        $this->insertResponseHeaderCollectionIntoData($response, $data);
+        $this->insertResponseCookieCollectionIntoData($response, $data);
         $this->cache->set($this->calculateCacheKey(), $data, $this->duration, $this->dependency);
         $data['content'] = $this->updateDynamicContent($data['content'], $this->getDynamicPlaceholders());
         echo $data['content'];
     }
 
     /**
-     * Inserts (or filters/ignores according to config) response headers/cookies into a cache data array.
+     * Inserts (or filters/ignores according to config) response cookies into a cache data array.
      * @param Response $response the response.
-     * @param string $collectionName currently it's `headers` or `cookies`.
      * @param array $data the cache data.
      */
-    private function insertResponseCollectionIntoData(Response $response, $collectionName, array &$data)
+    private function insertResponseCookieCollectionIntoData(Response $response, array &$data)
     {
-        $property = 'cache' . ucfirst($collectionName);
-        if ($this->{$property} === false) {
+        if ($this->cacheCookies === false) {
             return;
         }
 
-        $all = $response->{$collectionName}->toArray();
-        if (is_array($this->{$property})) {
+        $all = $response->cookies->toArray();
+        if (is_array($this->cacheCookies)) {
             $filtered = [];
-            foreach ($this->{$property} as $name) {
-                if ($collectionName === 'headers') {
-                    $name = strtolower($name);
+            foreach ($this->cacheCookies as $name) {
+                if (isset($all[$name])) {
+                    $filtered[$name] = $all[$name];
                 }
+            }
+            $all = $filtered;
+        }
+        $data['cookies'] = $all;
+    }
+
+    /**
+     * Inserts (or filters/ignores according to config) response headers into a cache data array.
+     * @param Response $response the response.
+     * @param array $data the cache data.
+     */
+    private function insertResponseHeaderCollectionIntoData(Response $response, array &$data)
+    {
+        if ($this->cacheHeaders === false) {
+            return;
+        }
+
+        $all = $response->headers->toOriginalArray();
+        if (is_array($this->cacheHeaders)) {
+            $filtered = [];
+            foreach ($this->cacheHeaders as $name) {
                 if (isset($all[$name])) {
                     $filtered[$name] = $all[$name];
                 }
             }
             $all = $filtered;
         }
-        $data[$collectionName] = $all;
+        $data['headers'] = $all;
     }
 
     /**
diff --git a/src/filters/RateLimiter.php b/src/filters/RateLimiter.php
index 5ffc1a69ff2..7ab7241539c 100644
--- a/src/filters/RateLimiter.php
+++ b/src/filters/RateLimiter.php
@@ -49,7 +49,7 @@ class RateLimiter extends ActionFilter
      */
     public $errorMessage = 'Rate limit exceeded.';
     /**
-     * @var RateLimitInterface|Closure the user object that implements the RateLimitInterface. If not set, it will take the value of `Yii::$app->user->getIdentity(false)`.
+     * @var RateLimitInterface|Closure|null the user object that implements the RateLimitInterface. If not set, it will take the value of `Yii::$app->user->getIdentity(false)`.
      * {@since 2.0.38} It's possible to provide a closure function in order to assign the user identity on runtime. Using a closure to assign the user identity is recommend
      * when you are **not** using the standard `Yii::$app->user` component. See the example below:
      * ```php
@@ -60,11 +60,11 @@ class RateLimiter extends ActionFilter
      */
     public $user;
     /**
-     * @var Request the current request. If not set, the `request` application component will be used.
+     * @var Request|null the current request. If not set, the `request` application component will be used.
      */
     public $request;
     /**
-     * @var Response the response to be sent. If not set, the `response` application component will be used.
+     * @var Response|null the response to be sent. If not set, the `response` application component will be used.
      */
     public $response;
 
diff --git a/src/filters/auth/AuthInterface.php b/src/filters/auth/AuthInterface.php
index 492d314ca3a..02d20cf2754 100644
--- a/src/filters/auth/AuthInterface.php
+++ b/src/filters/auth/AuthInterface.php
@@ -26,7 +26,7 @@ interface AuthInterface
      * @param User $user
      * @param Request $request
      * @param Response $response
-     * @return IdentityInterface the authenticated user identity. If authentication information is not provided, null will be returned.
+     * @return IdentityInterface|null the authenticated user identity. If authentication information is not provided, null will be returned.
      * @throws UnauthorizedHttpException if authentication information is provided but is invalid.
      */
     public function authenticate($user, $request, $response);
diff --git a/src/filters/auth/AuthMethod.php b/src/filters/auth/AuthMethod.php
index 9dcba078c30..6612e67fc4a 100644
--- a/src/filters/auth/AuthMethod.php
+++ b/src/filters/auth/AuthMethod.php
@@ -25,15 +25,15 @@
 abstract class AuthMethod extends ActionFilter implements AuthInterface
 {
     /**
-     * @var User the user object representing the user authentication status. If not set, the `user` application component will be used.
+     * @var User|null the user object representing the user authentication status. If not set, the `user` application component will be used.
      */
     public $user;
     /**
-     * @var Request the current request. If not set, the `request` application component will be used.
+     * @var Request|null the current request. If not set, the `request` application component will be used.
      */
     public $request;
     /**
-     * @var Response the response to be sent. If not set, the `response` application component will be used.
+     * @var Response|null the response to be sent. If not set, the `response` application component will be used.
      */
     public $response;
     /**
diff --git a/src/filters/auth/CompositeAuth.php b/src/filters/auth/CompositeAuth.php
index 37043d4235d..4212f5c3236 100644
--- a/src/filters/auth/CompositeAuth.php
+++ b/src/filters/auth/CompositeAuth.php
@@ -70,9 +70,11 @@ public function authenticate($user, $request, $response)
                 }
             }
 
-            $identity = $auth->authenticate($user, $request, $response);
-            if ($identity !== null) {
-                return $identity;
+            if (isset($this->owner->action) && $auth->isActive($this->owner->action)) {
+                $identity = $auth->authenticate($user, $request, $response);
+                if ($identity !== null) {
+                    return $identity;
+                }
             }
         }
 
diff --git a/src/filters/auth/HttpBasicAuth.php b/src/filters/auth/HttpBasicAuth.php
index 546d0e628e6..03420efd70c 100644
--- a/src/filters/auth/HttpBasicAuth.php
+++ b/src/filters/auth/HttpBasicAuth.php
@@ -64,7 +64,7 @@ class HttpBasicAuth extends AuthMethod
      */
     public $realm = 'api';
     /**
-     * @var callable a PHP callable that will authenticate the user with the HTTP basic auth information.
+     * @var callable|null a PHP callable that will authenticate the user with the HTTP basic auth information.
      * The callable receives a username and a password as its parameters. It should return an identity object
      * that matches the username and password. Null should be returned if there is no such identity.
      * The callable will be called only if current user is not authenticated.
diff --git a/src/grid/ActionColumn.php b/src/grid/ActionColumn.php
index d945e1ea1a0..e54ba3c3d2d 100644
--- a/src/grid/ActionColumn.php
+++ b/src/grid/ActionColumn.php
@@ -38,7 +38,7 @@ class ActionColumn extends Column
      */
     public $headerOptions = ['class' => 'action-column'];
     /**
-     * @var string the ID of the controller that should handle the actions specified here.
+     * @var string|null the ID of the controller that should handle the actions specified here.
      * If not set, it will use the currently active controller. This property is mainly used by
      * [[urlCreator]] to create URLs for different actions. The value of this property will be prefixed
      * to each action name to form the route of the action.
@@ -125,7 +125,7 @@ class ActionColumn extends Column
      */
     public $visibleButtons = [];
     /**
-     * @var callable a callback that creates a button URL using the specified model information.
+     * @var callable|null a callback that creates a button URL using the specified model information.
      * The signature of the callback should be the same as that of [[createUrl()]]
      * Since 2.0.10 it can accept additional parameter, which refers to the column instance itself:
      *
diff --git a/src/grid/Column.php b/src/grid/Column.php
index 465a8551044..4139440e2b2 100644
--- a/src/grid/Column.php
+++ b/src/grid/Column.php
@@ -26,7 +26,7 @@ class Column extends BaseObject
      */
     public $grid;
     /**
-     * @var string the header cell content. Note that it will not be HTML-encoded.
+     * @var string|null the header cell content. Note that it will not be HTML-encoded.
      */
     public $header;
     /**
@@ -127,7 +127,7 @@ public function renderFilterCell()
      */
     protected function renderHeaderCellContent()
     {
-        return trim($this->header) !== '' ? $this->header : $this->getHeaderCellLabel();
+        return $this->header !== null && trim($this->header) !== '' ? $this->header : $this->getHeaderCellLabel();
     }
 
     /**
@@ -149,7 +149,7 @@ protected function getHeaderCellLabel()
      */
     protected function renderFooterCellContent()
     {
-        return trim($this->footer) !== '' ? $this->footer : $this->grid->emptyCell;
+        return $this->footer !== null && trim($this->footer) !== '' ? $this->footer : $this->grid->emptyCell;
     }
 
     /**
diff --git a/src/grid/DataColumn.php b/src/grid/DataColumn.php
index 8760104aba6..98d70bd7c8b 100644
--- a/src/grid/DataColumn.php
+++ b/src/grid/DataColumn.php
@@ -46,7 +46,7 @@ class DataColumn extends Column
      */
     public $attribute;
     /**
-     * @var string label to be displayed in the [[header|header cell]] and also to be used as the sorting
+     * @var string|null label to be displayed in the [[header|header cell]] and also to be used as the sorting
      * link label when sorting is enabled for this column.
      * If it is not set and the models provided by the GridViews data provider are instances
      * of [[\yii\db\ActiveRecord]], the label will be determined using [[\yii\db\ActiveRecord::getAttributeLabel()]].
@@ -60,7 +60,7 @@ class DataColumn extends Column
      */
     public $encodeLabel = true;
     /**
-     * @var string|Closure an anonymous function or a string that is used to determine the value to display in the current column.
+     * @var string|Closure|null an anonymous function or a string that is used to determine the value to display in the current column.
      *
      * If this is an anonymous function, it will be called for each row and the return value will be used as the value to
      * display for every data model. The signature of this function should be: `function ($model, $key, $index, $column)`.
@@ -118,7 +118,7 @@ class DataColumn extends Column
      */
     public $filterInputOptions = ['class' => 'form-control', 'id' => null];
     /**
-     * @var string the attribute name of the [[GridView::filterModel]] associated with this column. If not set,
+     * @var string|null the attribute name of the [[GridView::filterModel]] associated with this column. If not set,
      * will have the same value as [[attribute]].
      * @since 2.0.41
      */
@@ -167,7 +167,9 @@ protected function getHeaderCellLabel()
         $provider = $this->grid->dataProvider;
 
         if ($this->label === null) {
-            if ($provider instanceof ActiveDataProvider && $provider->query instanceof ActiveQueryInterface) {
+            if ($this->attribute === null) {
+                $label = '';
+            } elseif ($provider instanceof ActiveDataProvider && $provider->query instanceof ActiveQueryInterface) {
                 /* @var $modelClass Model */
                 $modelClass = $provider->query->modelClass;
                 $model = $modelClass::instance();
diff --git a/src/grid/GridView.php b/src/grid/GridView.php
index 1fa783f9adb..c1b6a6b386f 100644
--- a/src/grid/GridView.php
+++ b/src/grid/GridView.php
@@ -137,7 +137,7 @@ class GridView extends BaseListView
      */
     public $showOnEmpty = true;
     /**
-     * @var array|Formatter the formatter used to format model attribute values into displayable texts.
+     * @var array|Formatter|null the formatter used to format model attribute values into displayable texts.
      * This can be either an instance of [[Formatter]] or an configuration array for creating the [[Formatter]]
      * instance. If this property is not set, the "formatter" application component will be used.
      */
@@ -202,7 +202,7 @@ class GridView extends BaseListView
      */
     public $emptyCell = '&nbsp;';
     /**
-     * @var \yii\base\Model the model that keeps the user-entered filter data. When this property is set,
+     * @var \yii\base\Model|null the model that keeps the user-entered filter data. When this property is set,
      * the grid view will enable column-based filtering. Each data column by default will display a text field
      * at the top that users can fill in to filter the data.
      *
@@ -214,7 +214,7 @@ class GridView extends BaseListView
      */
     public $filterModel;
     /**
-     * @var string|array the URL for returning the filtering result. [[Url::to()]] will be called to
+     * @var string|array|null the URL for returning the filtering result. [[Url::to()]] will be called to
      * normalize the URL. If not set, the current controller action will be used.
      * When the user makes change to any filter input, the current filtering inputs will be appended
      * as GET parameters to this URL.
diff --git a/src/helpers/BaseArrayHelper.php b/src/helpers/BaseArrayHelper.php
index dcd28657c9e..84e67f43b5d 100644
--- a/src/helpers/BaseArrayHelper.php
+++ b/src/helpers/BaseArrayHelper.php
@@ -7,9 +7,9 @@
 
 namespace yii\helpers;
 
+use Yii;
 use ArrayAccess;
 use Traversable;
-use Yii;
 use yii\base\Arrayable;
 use yii\base\InvalidArgumentException;
 
@@ -351,7 +351,7 @@ public static function remove(&$array, $key, $default = null)
      * ```
      *
      * @param array $array the array where to look the value from
-     * @param string $value the value to remove from the array
+     * @param mixed $value the value to remove from the array
      * @return array the items that were removed from the array
      * @since 2.0.11
      */
@@ -585,7 +585,7 @@ public static function getColumn($array, $name, $keepKeys = true)
      * @param array $array
      * @param string|\Closure $from
      * @param string|\Closure $to
-     * @param string|\Closure $group
+     * @param string|\Closure|null $group
      * @return array
      */
     public static function map($array, $from, $to, $group = null)
@@ -697,7 +697,7 @@ public static function multisort(&$array, $key, $direction = SORT_ASC, $sortFlag
      * @param array $data data to be encoded
      * @param bool $valuesOnly whether to encode array values only. If false,
      * both the array keys and array values will be encoded.
-     * @param string $charset the charset that the data is using. If not set,
+     * @param string|null $charset the charset that the data is using. If not set,
      * [[\yii\base\Application::charset]] will be used.
      * @return array the encoded data
      * @see https://www.php.net/manual/en/function.htmlspecialchars.php
@@ -726,12 +726,14 @@ public static function htmlEncode($data, $valuesOnly = true, $charset = null)
 
     /**
      * Decodes HTML entities into the corresponding characters in an array of strings.
+     *
      * Only array values will be decoded by default.
      * If a value is an array, this method will also decode it recursively.
      * Only string values will be decoded.
+     *
      * @param array $data data to be decoded
-     * @param bool $valuesOnly whether to decode array values only. If false,
-     * both the array keys and array values will be decoded.
+     * @param bool $valuesOnly whether to decode array values only. If `false`,
+     * then both the array keys and array values will be decoded.
      * @return array the decoded data
      * @see https://www.php.net/manual/en/function.htmlspecialchars-decode.php
      */
@@ -740,12 +742,12 @@ public static function htmlDecode($data, $valuesOnly = true)
         $d = [];
         foreach ($data as $key => $value) {
             if (!$valuesOnly && is_string($key)) {
-                $key = htmlspecialchars_decode($key, ENT_QUOTES);
+                $key = htmlspecialchars_decode($key, ENT_QUOTES | ENT_SUBSTITUTE);
             }
             if (is_string($value)) {
-                $d[$key] = htmlspecialchars_decode($value, ENT_QUOTES);
+                $d[$key] = htmlspecialchars_decode($value, ENT_QUOTES | ENT_SUBSTITUTE);
             } elseif (is_array($value)) {
-                $d[$key] = static::htmlDecode($value);
+                $d[$key] = static::htmlDecode($value, $valuesOnly);
             } else {
                 $d[$key] = $value;
             }
@@ -769,7 +771,7 @@ public static function htmlDecode($data, $valuesOnly = true)
      */
     public static function isAssociative($array, $allStrings = true)
     {
-        if (!is_array($array) || empty($array)) {
+        if (empty($array) || !is_array($array)) {
             return false;
         }
 
@@ -815,11 +817,13 @@ public static function isIndexed($array, $consecutive = false)
             return true;
         }
 
+        $keys = array_keys($array);
+
         if ($consecutive) {
-            return array_keys($array) === range(0, count($array) - 1);
+            return $keys === array_keys($keys);
         }
 
-        foreach ($array as $key => $value) {
+        foreach ($keys as $key) {
             if (!is_int($key)) {
                 return false;
             }
@@ -833,8 +837,9 @@ public static function isIndexed($array, $consecutive = false)
      *
      * This method does the same as the PHP function [in_array()](https://www.php.net/manual/en/function.in-array.php)
      * but additionally works for objects that implement the [[Traversable]] interface.
+     *
      * @param mixed $needle The value to look for.
-     * @param array|Traversable $haystack The set of values to search.
+     * @param iterable $haystack The set of values to search.
      * @param bool $strict Whether to enable strict (`===`) comparison.
      * @return bool `true` if `$needle` was found in `$haystack`, `false` otherwise.
      * @throws InvalidArgumentException if `$haystack` is neither traversable nor an array.
@@ -843,18 +848,20 @@ public static function isIndexed($array, $consecutive = false)
      */
     public static function isIn($needle, $haystack, $strict = false)
     {
-        if ($haystack instanceof Traversable) {
-            foreach ($haystack as $value) {
-                if ($needle == $value && (!$strict || $needle === $value)) {
-                    return true;
-                }
-            }
-        } elseif (is_array($haystack)) {
-            return in_array($needle, $haystack, $strict);
-        } else {
+        if (!static::isTraversable($haystack)) {
             throw new InvalidArgumentException('Argument $haystack must be an array or implement Traversable');
         }
 
+        if (is_array($haystack)) {
+            return in_array($needle, $haystack, $strict);
+        }
+   
+        foreach ($haystack as $value) {
+            if ($strict ? $needle === $value : $needle == $value) {
+                return true;
+            }
+        }
+
         return false;
     }
 
@@ -878,26 +885,27 @@ public static function isTraversable($var)
      *
      * This method will return `true`, if all elements of `$needles` are contained in
      * `$haystack`. If at least one element is missing, `false` will be returned.
-     * @param array|Traversable $needles The values that must **all** be in `$haystack`.
-     * @param array|Traversable $haystack The set of value to search.
+     *
+     * @param iterable $needles The values that must **all** be in `$haystack`.
+     * @param iterable $haystack The set of value to search.
      * @param bool $strict Whether to enable strict (`===`) comparison.
-     * @throws InvalidArgumentException if `$haystack` or `$needles` is neither traversable nor an array.
      * @return bool `true` if `$needles` is a subset of `$haystack`, `false` otherwise.
+     * @throws InvalidArgumentException if `$haystack` or `$needles` is neither traversable nor an array.
      * @since 2.0.7
      */
     public static function isSubset($needles, $haystack, $strict = false)
     {
-        if (is_array($needles) || $needles instanceof Traversable) {
-            foreach ($needles as $needle) {
-                if (!static::isIn($needle, $haystack, $strict)) {
-                    return false;
-                }
-            }
+        if (!static::isTraversable($needles)) {
+            throw new InvalidArgumentException('Argument $needles must be an array or implement Traversable');
+        }
 
-            return true;
+        foreach ($needles as $needle) {
+            if (!static::isIn($needle, $haystack, $strict)) {
+                return false;
+            }
         }
 
-        throw new InvalidArgumentException('Argument $needles must be an array or implement Traversable');
+        return true;
     }
 
     /**
@@ -936,7 +944,7 @@ public static function isSubset($needles, $haystack, $strict = false)
      * ```
      *
      * @param array $array Source array
-     * @param array $filters Rules that define array keys which should be left or removed from results.
+     * @param iterable $filters Rules that define array keys which should be left or removed from results.
      * Each rule is:
      * - `var` - `$array['var']` will be left in result.
      * - `var.key` = only `$array['var']['key'] will be left in result.
@@ -999,4 +1007,29 @@ public static function filter($array, $filters)
 
         return $result;
     }
+
+    /**
+     * Sorts array recursively.
+     *
+     * @param array $array An array passing by reference.
+     * @param callable|null $sorter The array sorter. If omitted, sort index array by values, sort assoc array by keys.
+     * @return array
+     */
+    public static function recursiveSort(array &$array, $sorter = null)
+    {
+        foreach ($array as &$value) {
+            if (is_array($value)) {
+                static::recursiveSort($value, $sorter);
+            }
+        }
+        unset($value);
+
+        if ($sorter === null) {
+            $sorter = static::isIndexed($array) ? 'sort' : 'ksort';
+        }
+
+        call_user_func_array($sorter, [&$array]);
+
+        return $array;
+    }
 }
diff --git a/src/helpers/BaseConsole.php b/src/helpers/BaseConsole.php
index 285276238cf..3a7aa66a172 100644
--- a/src/helpers/BaseConsole.php
+++ b/src/helpers/BaseConsole.php
@@ -331,7 +331,7 @@ public static function xtermBgColor($colorCode)
      */
     public static function stripAnsiFormat($string)
     {
-        return preg_replace(self::ansiCodesPattern(), '', $string);
+        return preg_replace(self::ansiCodesPattern(), '', (string)$string);
     }
 
     /**
@@ -370,9 +370,9 @@ public static function ansiColorizedSubstr($string, $start, $length)
             return '';
         }
 
-        $textItems = preg_split(self::ansiCodesPattern(), $string);
+        $textItems = preg_split(self::ansiCodesPattern(), (string)$string);
 
-        preg_match_all(self::ansiCodesPattern(), $string, $colors);
+        preg_match_all(self::ansiCodesPattern(), (string)$string, $colors);
         $colors = count($colors) ? $colors[0] : [];
         array_unshift($colors, '');
 
@@ -688,10 +688,19 @@ public static function isRunningOnWindows()
     public static function getScreenSize($refresh = false)
     {
         static $size;
-        if ($size !== null && !$refresh) {
+        static $execDisabled;
+
+        if ($size !== null && ($execDisabled || !$refresh)) {
             return $size;
         }
 
+        if ($execDisabled === null) {
+            $execDisabled = !function_exists('ini_get') || preg_match('/(\bexec\b)/i', ini_get('disable_functions'));
+            if ($execDisabled) {
+                return $size = false;
+            }
+        }
+
         if (static::isRunningOnWindows()) {
             $output = [];
             exec('mode con', $output);
@@ -807,7 +816,7 @@ public static function stderr($string)
      * Asks the user for input. Ends when the user types a carriage return (PHP_EOL). Optionally, It also provides a
      * prompt.
      *
-     * @param string $prompt the prompt to display before waiting for input (optional)
+     * @param string|null $prompt the prompt to display before waiting for input (optional)
      * @return string the user's input
      */
     public static function input($prompt = null)
@@ -822,7 +831,7 @@ public static function input($prompt = null)
     /**
      * Prints text to STDOUT appended with a carriage return (PHP_EOL).
      *
-     * @param string $string the text to print
+     * @param string|null $string the text to print
      * @return int|bool number of bytes printed or false on error.
      */
     public static function output($string = null)
@@ -833,7 +842,7 @@ public static function output($string = null)
     /**
      * Prints text to STDERR appended with a carriage return (PHP_EOL).
      *
-     * @param string $string the text to print
+     * @param string|null $string the text to print
      * @return int|bool number of bytes printed or false on error.
      */
     public static function error($string = null)
@@ -998,7 +1007,7 @@ public static function select($prompt, $options = [])
      * @param int $total the total value of items that are to be done.
      * @param string $prefix an optional string to display before the progress bar.
      * Default to empty string which results in no prefix to be displayed.
-     * @param int|bool $width optional width of the progressbar. This can be an integer representing
+     * @param int|float|bool|null $width optional width of the progressbar. This can be an integer representing
      * the number of characters to display for the progress bar or a float between 0 and 1 representing the
      * percentage of screen with the progress bar may take. It can also be set to false to disable the
      * bar and only show progress information like percent, number of items and ETA.
@@ -1024,7 +1033,7 @@ public static function startProgress($done, $total, $prefix = '', $width = null)
      *
      * @param int $done the number of items that are completed.
      * @param int $total the total value of items that are to be done.
-     * @param string $prefix an optional string to display before the progress bar.
+     * @param string|null $prefix an optional string to display before the progress bar.
      * Defaults to null meaning the prefix specified by [[startProgress()]] will be used.
      * If prefix is specified it will update the prefix that will be used by later calls.
      * @see startProgress
diff --git a/src/helpers/BaseFileHelper.php b/src/helpers/BaseFileHelper.php
index 8dd20649e76..dc2d965bbb7 100644
--- a/src/helpers/BaseFileHelper.php
+++ b/src/helpers/BaseFileHelper.php
@@ -161,6 +161,7 @@ public static function getMimeType($file, $magicFile = null, $checkExtension = t
 
             throw new InvalidConfigException('The fileinfo PHP extension is not installed.');
         }
+
         $info = finfo_open(FILEINFO_MIME_TYPE, $magicFile);
 
         if ($info) {
@@ -220,7 +221,7 @@ public static function getExtensionsByMimeType($mimeType, $magicFile = null)
 
     /**
      * Loads MIME types from the specified file.
-     * @param string $magicFile the path (or alias) of the file that contains all available MIME type information.
+     * @param string|null $magicFile the path (or alias) of the file that contains all available MIME type information.
      * If this is not set, the file specified by [[mimeMagicFile]] will be used.
      * @return array the mapping from file extensions to MIME types
      */
@@ -241,7 +242,7 @@ protected static function loadMimeTypes($magicFile)
 
     /**
      * Loads MIME aliases from the specified file.
-     * @param string $aliasesFile the path (or alias) of the file that contains MIME type aliases.
+     * @param string|null $aliasesFile the path (or alias) of the file that contains MIME type aliases.
      * If this is not set, the file specified by [[mimeAliasesFile]] will be used.
      * @return array the mapping from file extensions to MIME types
      * @since 2.0.14
@@ -509,7 +510,7 @@ public static function findFiles($dir, $options = [])
      *   * `false`: the directory will NOT be returned
      *
      * - `recursive`: boolean, whether the files under the subdirectories should also be looked for. Defaults to `true`.
-     * See [[findFiles()]] for more options.
+     *   See [[findFiles()]] for more options.
      * @return array directories found under the directory, in no particular order. Ordering depends on the files system used.
      * @throws InvalidArgumentException if the dir is invalid.
      * @since 2.0.14
@@ -900,8 +901,8 @@ protected static function normalizeOptions(array $options)
      */
     public static function changeOwnership($path, $ownership, $mode = null)
     {
-        if (!file_exists($path)) {
-            throw new InvalidArgumentException('Unable to change ownerhip, "' . $path . '" is not a file or directory.');
+        if (!file_exists((string)$path)) {
+            throw new InvalidArgumentException('Unable to change ownership, "' . $path . '" is not a file or directory.');
         }
 
         if (empty($ownership) && $ownership !== 0 && $mode === null) {
diff --git a/src/helpers/BaseFormatConverter.php b/src/helpers/BaseFormatConverter.php
index 84417bfee04..5e501fe390b 100644
--- a/src/helpers/BaseFormatConverter.php
+++ b/src/helpers/BaseFormatConverter.php
@@ -96,7 +96,7 @@ class BaseFormatConverter
      *
      * @param string $pattern date format pattern in ICU format.
      * @param string $type 'date', 'time', or 'datetime'.
-     * @param string $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
+     * @param string|null $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
      * If not given, `Yii::$app->language` will be used.
      * @return string The converted date format pattern.
      */
@@ -353,7 +353,7 @@ public static function convertDatePhpToIcu($pattern)
      *
      * @param string $pattern date format pattern in ICU format.
      * @param string $type 'date', 'time', or 'datetime'.
-     * @param string $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
+     * @param string|null $locale the locale to use for converting ICU short patterns `short`, `medium`, `long` and `full`.
      * If not given, `Yii::$app->language` will be used.
      * @return string The converted date format pattern.
      */
diff --git a/src/helpers/BaseHtml.php b/src/helpers/BaseHtml.php
index 5d89314971f..1e0d8702dd6 100644
--- a/src/helpers/BaseHtml.php
+++ b/src/helpers/BaseHtml.php
@@ -94,6 +94,13 @@ class BaseHtml
      * @since 2.0.3
      */
     public static $dataAttributes = ['aria', 'data', 'data-ng', 'ng'];
+    /**
+     * @var bool whether to removes duplicate class names in tag attribute `class`
+     * @see mergeCssClasses()
+     * @see renderTagAttributes()
+     * @since 2.0.44
+     */
+    public static $normalizeClassAttribute = false;
 
 
     /**
@@ -108,7 +115,7 @@ class BaseHtml
      */
     public static function encode($content, $doubleEncode = true)
     {
-        return htmlspecialchars($content, ENT_QUOTES | ENT_SUBSTITUTE, Yii::$app ? Yii::$app->charset : 'UTF-8', $doubleEncode);
+        return htmlspecialchars((string)$content, ENT_QUOTES | ENT_SUBSTITUTE, Yii::$app ? Yii::$app->charset : 'UTF-8', $doubleEncode);
     }
 
     /**
@@ -565,7 +572,7 @@ public static function input($type, $name = null, $value = null, $options = [])
 
     /**
      * Generates an input button.
-     * @param string $label the value attribute. If it is null, the value attribute will not be generated.
+     * @param string|null $label the value attribute. If it is null, the value attribute will not be generated.
      * @param array $options the tag options in terms of name-value pairs. These will be rendered as
      * the attributes of the resulting tag. The values will be HTML-encoded using [[encode()]].
      * If a value is null, the corresponding attribute will not be rendered.
@@ -585,7 +592,7 @@ public static function buttonInput($label = 'Button', $options = [])
      * Be careful when naming form elements such as submit buttons. According to the [jQuery documentation](https://api.jquery.com/submit/) there
      * are some reserved names that can cause conflicts, e.g. `submit`, `length`, or `method`.
      *
-     * @param string $label the value attribute. If it is null, the value attribute will not be generated.
+     * @param string|null $label the value attribute. If it is null, the value attribute will not be generated.
      * @param array $options the tag options in terms of name-value pairs. These will be rendered as
      * the attributes of the resulting tag. The values will be HTML-encoded using [[encode()]].
      * If a value is null, the corresponding attribute will not be rendered.
@@ -601,7 +608,7 @@ public static function submitInput($label = 'Submit', $options = [])
 
     /**
      * Generates a reset input button.
-     * @param string $label the value attribute. If it is null, the value attribute will not be generated.
+     * @param string|null $label the value attribute. If it is null, the value attribute will not be generated.
      * @param array $options the attributes of the button tag. The values will be HTML-encoded using [[encode()]].
      * Attributes whose value is null will be ignored and not put in the tag returned.
      * See [[renderTagAttributes()]] for details on how attributes are being rendered.
@@ -1907,7 +1914,7 @@ public static function renderSelectOptions($selection, $items, &$tagOptions = []
                 $attrs['value'] = (string) $key;
                 if (!array_key_exists('selected', $attrs)) {
                     $attrs['selected'] = $selection !== null &&
-                        (!ArrayHelper::isTraversable($selection) && !strcmp($key, $selection)
+                        (!ArrayHelper::isTraversable($selection) && ($strict ? !strcmp($key, $selection) : $selection == $key)
                         || ArrayHelper::isTraversable($selection) && ArrayHelper::isIn((string)$key, $selection, $strict));
                 }
                 $text = $encode ? static::encode($value) : $value;
@@ -1981,6 +1988,11 @@ public static function renderTagAttributes($attributes)
                     if (empty($value)) {
                         continue;
                     }
+                    if (static::$normalizeClassAttribute === true && count($value) > 1) {
+                        // removes duplicate classes
+                        $value = explode(' ', implode(' ', $value));
+                        $value = array_unique($value);
+                    }
                     $html .= " $name=\"" . static::encode(implode(' ', $value)) . '"';
                 } elseif ($name === 'style') {
                     if (empty($value)) {
@@ -2047,7 +2059,7 @@ private static function mergeCssClasses(array $existingClasses, array $additiona
             }
         }
 
-        return array_unique($existingClasses);
+        return static::$normalizeClassAttribute ? array_unique($existingClasses) : $existingClasses;
     }
 
     /**
diff --git a/src/helpers/BaseInflector.php b/src/helpers/BaseInflector.php
index 4cad3f92279..30c1464e857 100644
--- a/src/helpers/BaseInflector.php
+++ b/src/helpers/BaseInflector.php
@@ -301,6 +301,9 @@ class BaseInflector
      */
     public static function pluralize($word)
     {
+        if (empty($word)) {
+            return (string) $word;
+        }
         if (isset(static::$specials[$word])) {
             return static::$specials[$word];
         }
@@ -320,6 +323,9 @@ public static function pluralize($word)
      */
     public static function singularize($word)
     {
+        if (empty($word)) {
+            return (string) $word;
+        }
         $result = array_search($word, static::$specials, true);
         if ($result !== false) {
             return $result;
@@ -342,6 +348,9 @@ public static function singularize($word)
      */
     public static function titleize($words, $ucAll = false)
     {
+        if (empty($words)) {
+            return (string) $words;
+        }
         $words = static::humanize(static::underscore($words), $ucAll);
 
         return $ucAll ? StringHelper::mb_ucwords($words, self::encoding()) : StringHelper::mb_ucfirst($words, self::encoding());
@@ -359,6 +368,9 @@ public static function titleize($words, $ucAll = false)
      */
     public static function camelize($word)
     {
+        if (empty($word)) {
+            return (string) $word;
+        }
         return str_replace(' ', '', StringHelper::mb_ucwords(preg_replace('/[^\pL\pN]+/u', ' ', $word), self::encoding()));
     }
 
@@ -371,6 +383,9 @@ public static function camelize($word)
      */
     public static function camel2words($name, $ucwords = true)
     {
+        if (empty($name)) {
+            return (string) $name;
+        }
         // Add a space before any uppercase letter preceded by a lowercase letter (xY => x Y)
         // and any uppercase letter preceded by an uppercase letter and followed by a lowercase letter (XYz => X Yz)
         $label = preg_replace('/(?<=\p{Ll})\p{Lu}|(?<=\p{L})\p{Lu}(?=\p{Ll})/u', ' \0', $name);
@@ -391,6 +406,9 @@ public static function camel2words($name, $ucwords = true)
      */
     public static function camel2id($name, $separator = '-', $strict = false)
     {
+        if (empty($name)) {
+            return (string) $name;
+        }
         $regex = $strict ? '/\p{Lu}/u' : '/(?<!\p{Lu})\p{Lu}/u';
         if ($separator === '_') {
             return mb_strtolower(trim(preg_replace($regex, '_\0', $name), '_'), self::encoding());
@@ -409,6 +427,9 @@ public static function camel2id($name, $separator = '-', $strict = false)
      */
     public static function id2camel($id, $separator = '-')
     {
+        if (empty($id)) {
+            return (string) $id;
+        }
         return str_replace(' ', '', StringHelper::mb_ucwords(str_replace($separator, ' ', $id), self::encoding()));
     }
 
@@ -419,6 +440,9 @@ public static function id2camel($id, $separator = '-')
      */
     public static function underscore($words)
     {
+        if (empty($words)) {
+            return (string) $words;
+        }
         return mb_strtolower(preg_replace('/(?<=\\pL)(\\p{Lu})/u', '_\\1', $words), self::encoding());
     }
 
@@ -430,6 +454,9 @@ public static function underscore($words)
      */
     public static function humanize($word, $ucAll = false)
     {
+        if (empty($word)) {
+            return (string) $word;
+        }
         $word = str_replace('_', ' ', preg_replace('/_id$/', '', $word));
         $encoding = self::encoding();
 
@@ -447,6 +474,9 @@ public static function humanize($word, $ucAll = false)
      */
     public static function variablize($word)
     {
+        if (empty($word)) {
+            return (string) $word;
+        }
         $word = static::camelize($word);
 
         return mb_strtolower(mb_substr($word, 0, 1, self::encoding())) . mb_substr($word, 1, null, self::encoding());
@@ -461,6 +491,9 @@ public static function variablize($word)
      */
     public static function tableize($className)
     {
+        if (empty($className)) {
+            return (string) $className;
+        }
         return static::pluralize(static::underscore($className));
     }
 
@@ -479,6 +512,9 @@ public static function tableize($className)
      */
     public static function slug($string, $replacement = '-', $lowercase = true)
     {
+        if (empty($string)) {
+            return (string) $string;
+        }
         if ((string)$replacement !== '') {
             $parts = explode($replacement, static::transliterate($string));
         } else {
@@ -506,13 +542,16 @@ public static function slug($string, $replacement = '-', $lowercase = true)
      * of the helper.
      *
      * @param string $string input string
-     * @param string|\Transliterator $transliterator either a [[\Transliterator]] or a string
+     * @param string|\Transliterator|null $transliterator either a [[\Transliterator]] or a string
      * from which a [[\Transliterator]] can be built.
      * @return string
      * @since 2.0.7 this method is public.
      */
     public static function transliterate($string, $transliterator = null)
     {
+        if (empty($string)) {
+            return (string) $string;
+        }
         if (static::hasIntl()) {
             if ($transliterator === null) {
                 $transliterator = static::$transliterator;
@@ -541,6 +580,9 @@ protected static function hasIntl()
      */
     public static function classify($tableName)
     {
+        if (empty($tableName)) {
+            return (string) $tableName;
+        }
         return static::camelize(static::singularize($tableName));
     }
 
@@ -586,8 +628,8 @@ public static function ordinalize($number)
      * ```
      *
      * @param array $words the words to be converted into an string
-     * @param string $twoWordsConnector the string connecting words when there are only two
-     * @param string $lastWordConnector the string connecting the last two words. If this is null, it will
+     * @param string|null $twoWordsConnector the string connecting words when there are only two
+     * @param string|null $lastWordConnector the string connecting the last two words. If this is null, it will
      * take the value of `$twoWordsConnector`.
      * @param string $connector the string connecting words other than those connected by
      * $lastWordConnector and $twoWordsConnector
diff --git a/src/helpers/BaseJson.php b/src/helpers/BaseJson.php
index ad41de7f714..72dbcf12f16 100644
--- a/src/helpers/BaseJson.php
+++ b/src/helpers/BaseJson.php
@@ -30,7 +30,6 @@ class BaseJson
      * @since 2.0.43
      */
     public static $prettyPrint;
-
     /**
      * @var bool Avoids objects with zero-indexed keys to be encoded as array
      * `Json::encode((object)['test'])` will be encoded as an object not as an array. This matches the behaviour of `json_encode()`.
@@ -40,7 +39,6 @@ class BaseJson
      * @since 2.0.44
      */
     public static $keepObjectType = false;
-
     /**
      * @var array List of JSON Error messages assigned to constant names for better handling of PHP <= 5.5.
      * @since 2.0.7
diff --git a/src/helpers/BaseMarkdown.php b/src/helpers/BaseMarkdown.php
index 9b88c725018..8975c476396 100644
--- a/src/helpers/BaseMarkdown.php
+++ b/src/helpers/BaseMarkdown.php
@@ -54,7 +54,7 @@ class BaseMarkdown
      * Converts markdown into HTML.
      *
      * @param string $markdown the markdown text to parse
-     * @param string $flavor the markdown flavor to use. See [[$flavors]] for available values.
+     * @param string|null $flavor the markdown flavor to use. See [[$flavors]] for available values.
      * Defaults to [[$defaultFlavor]], if not set.
      * @return string the parsed HTML output
      * @throws InvalidArgumentException when an undefined flavor is given.
@@ -72,7 +72,7 @@ public static function process($markdown, $flavor = null)
      * This can be useful for parsing small comments or description lines.
      *
      * @param string $markdown the markdown text to parse
-     * @param string $flavor the markdown flavor to use. See [[$flavors]] for available values.
+     * @param string|null $flavor the markdown flavor to use. See [[$flavors]] for available values.
      * Defaults to [[$defaultFlavor]], if not set.
      * @return string the parsed HTML output
      * @throws InvalidArgumentException when an undefined flavor is given.
@@ -85,7 +85,7 @@ public static function processParagraph($markdown, $flavor = null)
     }
 
     /**
-     * @param string $flavor the markdown flavor to use. See [[$flavors]] for available values.
+     * @param string|null $flavor the markdown flavor to use. See [[$flavors]] for available values.
      * Defaults to [[$defaultFlavor]], if not set.
      * @return \cebe\markdown\Parser
      * @throws InvalidArgumentException when an undefined flavor is given.
diff --git a/src/helpers/BaseStringHelper.php b/src/helpers/BaseStringHelper.php
index 738147ea4c9..d3498c35173 100644
--- a/src/helpers/BaseStringHelper.php
+++ b/src/helpers/BaseStringHelper.php
@@ -29,7 +29,7 @@ class BaseStringHelper
      */
     public static function byteLength($string)
     {
-        return mb_strlen($string, '8bit');
+        return mb_strlen((string)$string, '8bit');
     }
 
     /**
@@ -38,7 +38,7 @@ public static function byteLength($string)
      *
      * @param string $string the input string. Must be one character or longer.
      * @param int $start the starting position
-     * @param int $length the desired portion length. If not specified or `null`, there will be
+     * @param int|null $length the desired portion length. If not specified or `null`, there will be
      * no limit on length i.e. the output will be until the end of the string.
      * @return string the extracted part of string, or FALSE on failure or an empty string.
      * @see https://www.php.net/manual/en/function.substr.php
@@ -108,10 +108,14 @@ public static function dirname($path)
     /**
      * Truncates a string to the number of characters specified.
      *
+     * In order to truncate for an exact length, the $suffix char length must be counted towards the $length. For example
+     * to have a string which is exactly 255 long with $suffix `...` of 3 chars, then `StringHelper::truncate($string, 252, '...')` 
+     * must be used to ensure you have 255 long string afterwards.
+     *
      * @param string $string The string to truncate.
      * @param int $length How many characters from original string to include into truncated string.
      * @param string $suffix String to append to the end of truncated string.
-     * @param string $encoding The charset to use, defaults to charset currently used by application.
+     * @param string|null $encoding The charset to use, defaults to charset currently used by application.
      * @param bool $asHtml Whether to treat the string being truncated as HTML and preserve proper HTML tags.
      * This parameter is available since version 2.0.1.
      * @return string the truncated string.
@@ -148,7 +152,7 @@ public static function truncateWords($string, $count, $suffix = '...', $asHtml =
             return static::truncateHtml($string, $count, $suffix);
         }
 
-        $words = preg_split('/(\s+)/u', trim($string), null, PREG_SPLIT_DELIM_CAPTURE);
+        $words = preg_split('/(\s+)/u', trim($string), 0, PREG_SPLIT_DELIM_CAPTURE);
         if (count($words) / 2 > $count) {
             return implode('', array_slice($words, 0, ($count * 2) - 1)) . $suffix;
         }
@@ -316,7 +320,7 @@ public static function explode($string, $delimiter = ',', $trim = true, $skipEmp
      */
     public static function countWords($string)
     {
-        return count(preg_split('/\s+/u', $string, null, PREG_SPLIT_NO_EMPTY));
+        return count(preg_split('/\s+/u', $string, 0, PREG_SPLIT_NO_EMPTY));
     }
 
     /**
@@ -436,7 +440,7 @@ public static function matchWildcard($pattern, $string, $options = [])
             $pattern .= 'i';
         }
 
-        return preg_match($pattern, $string) === 1;
+        return preg_match($pattern, (string)$string) === 1;
     }
 
     /**
@@ -450,8 +454,8 @@ public static function matchWildcard($pattern, $string, $options = [])
      */
     public static function mb_ucfirst($string, $encoding = 'UTF-8')
     {
-        $firstChar = mb_substr($string, 0, 1, $encoding);
-        $rest = mb_substr($string, 1, null, $encoding);
+        $firstChar = mb_substr((string)$string, 0, 1, $encoding);
+        $rest = mb_substr((string)$string, 1, null, $encoding);
 
         return mb_strtoupper($firstChar, $encoding) . $rest;
     }
diff --git a/src/helpers/BaseUrl.php b/src/helpers/BaseUrl.php
index fdf4f53d3d6..e65a52a754c 100644
--- a/src/helpers/BaseUrl.php
+++ b/src/helpers/BaseUrl.php
@@ -290,7 +290,7 @@ public static function base($scheme = false)
      *
      * @param string|array $url the URL to remember. Please refer to [[to()]] for acceptable formats.
      * If this parameter is not specified, the currently requested URL will be used.
-     * @param string $name the name associated with the URL to be remembered. This can be used
+     * @param string|null $name the name associated with the URL to be remembered. This can be used
      * later by [[previous()]]. If not set, [[\yii\web\User::setReturnUrl()]] will be used with passed URL.
      * @see previous()
      * @see \yii\web\User::setReturnUrl()
@@ -309,7 +309,7 @@ public static function remember($url = '', $name = null)
     /**
      * Returns the URL previously [[remember()|remembered]].
      *
-     * @param string $name the named associated with the URL that was remembered previously.
+     * @param string|null $name the named associated with the URL that was remembered previously.
      * If not set, [[\yii\web\User::getReturnUrl()]] will be used to obtain remembered URL.
      * @return string|null the URL previously remembered. Null is returned if no URL was remembered with the given name
      * and `$name` is not specified.
diff --git a/src/helpers/mimeAliases.php b/src/helpers/mimeAliases.php
index 97abc324fd1..4cd89888a77 100644
--- a/src/helpers/mimeAliases.php
+++ b/src/helpers/mimeAliases.php
@@ -5,6 +5,7 @@
  * This file contains aliases for MIME types.
  */
 return [
+    'text/rtf' => 'application/rtf',
     'text/xml' => 'application/xml',
     'image/svg' => 'image/svg+xml',
     'image/x-bmp' => 'image/bmp',
diff --git a/src/helpers/mimeTypes.php b/src/helpers/mimeTypes.php
index 3056874fd6c..1a63a105540 100644
--- a/src/helpers/mimeTypes.php
+++ b/src/helpers/mimeTypes.php
@@ -8,7 +8,7 @@
  * http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup
  * This file has been placed in the public domain for unlimited redistribution.
  */
-return [
+$mimeTypes = [
     '3dml' => 'text/vnd.in3d.3dml',
     '3ds' => 'image/x-3ds',
     '3g2' => 'video/3gpp2',
@@ -355,6 +355,7 @@
     'jam' => 'application/vnd.jam',
     'jar' => 'application/java-archive',
     'java' => 'text/x-java-source',
+    'jfif' => 'image/jpeg',
     'jisp' => 'application/vnd.jisp',
     'jlt' => 'application/vnd.hp-jlyt',
     'jnlp' => 'application/x-java-jnlp-file',
@@ -400,6 +401,7 @@
     'log' => 'text/plain',
     'lostxml' => 'application/lost+xml',
     'lrf' => 'application/octet-stream',
+    0 => 'application/vnd.lotus-1-2-3',
     'lrm' => 'application/vnd.ms-lrm',
     'ltf' => 'application/vnd.frogans.ltf',
     'lvp' => 'audio/vnd.lucent.voice',
@@ -491,7 +493,6 @@
     'mseed' => 'application/vnd.fdsn.mseed',
     'mseq' => 'application/vnd.mseq',
     'msf' => 'application/vnd.epson.msf',
-    0 => 'application/vnd.lotus-1-2-3',
     'msh' => 'model/mesh',
     'msi' => 'application/x-msdownload',
     'msl' => 'application/vnd.mobius.msl',
@@ -995,3 +996,9 @@
     'zirz' => 'application/vnd.zul',
     'zmm' => 'application/vnd.handheld-entertainment+xml',
 ];
+
+if (PHP_VERSION_ID >= 80100) {
+    $mimeTypes = array_replace($mimeTypes, array('xz' => 'application/octet-stream'));
+}
+
+return $mimeTypes;
diff --git a/src/i18n/Formatter.php b/src/i18n/Formatter.php
index cf67ddfa0f0..82af552007b 100644
--- a/src/i18n/Formatter.php
+++ b/src/i18n/Formatter.php
@@ -79,7 +79,7 @@ class Formatter extends Component
     const UNIT_WEIGHT = 'mass';
 
     /**
-     * @var string the text to be displayed when formatting a `null` value.
+     * @var string|null the text to be displayed when formatting a `null` value.
      * Defaults to `'<span class="not-set">(not set)</span>'`, where `(not set)`
      * will be translated according to [[locale]].
      */
@@ -92,21 +92,21 @@ class Formatter extends Component
      */
     public $booleanFormat;
     /**
-     * @var string the locale ID that is used to localize the date and number formatting.
+     * @var string|null the locale ID that is used to localize the date and number formatting.
      * For number and date formatting this is only effective when the
      * [PHP intl extension](https://www.php.net/manual/en/book.intl.php) is installed.
      * If not set, [[\yii\base\Application::language]] will be used.
      */
     public $locale;
     /**
-     * @var string the language code (e.g. `en-US`, `en`) that is used to translate internal messages.
+     * @var string|null the language code (e.g. `en-US`, `en`) that is used to translate internal messages.
      * If not set, [[locale]] will be used (without the `@calendar` param, if included).
      *
      * @since 2.0.28
      */
     public $language;
     /**
-     * @var string the time zone to use for formatting time and date values.
+     * @var string|null the time zone to use for formatting time and date values.
      *
      * This can be any value that may be passed to [date_default_timezone_set()](https://www.php.net/manual/en/function.date-default-timezone-set.php)
      * e.g. `UTC`, `Europe/Berlin` or `America/Chicago`.
@@ -135,7 +135,7 @@ class Formatter extends Component
      * @var string the default format string to be used to format a [[asDate()|date]].
      * This can be "short", "medium", "long", or "full", which represents a preset format of different lengths.
      *
-     * It can also be a custom format as specified in the [ICU manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
+     * It can also be a custom format as specified in the [ICU manual](https://unicode-org.github.io/icu/userguide/format_parse/datetime/).
      * Alternatively this can be a string prefixed with `php:` representing a format that can be recognized by the
      * PHP [date()](https://www.php.net/manual/en/function.date.php)-function.
      *
@@ -151,7 +151,7 @@ class Formatter extends Component
      * @var string the default format string to be used to format a [[asTime()|time]].
      * This can be "short", "medium", "long", or "full", which represents a preset format of different lengths.
      *
-     * It can also be a custom format as specified in the [ICU manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
+     * It can also be a custom format as specified in the [ICU manual](https://unicode-org.github.io/icu/userguide/format_parse/datetime/).
      * Alternatively this can be a string prefixed with `php:` representing a format that can be recognized by the
      * PHP [date()](https://www.php.net/manual/en/function.date.php)-function.
      *
@@ -167,10 +167,10 @@ class Formatter extends Component
      * @var string the default format string to be used to format a [[asDatetime()|date and time]].
      * This can be "short", "medium", "long", or "full", which represents a preset format of different lengths.
      *
-     * It can also be a custom format as specified in the [ICU manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
+     * It can also be a custom format as specified in the [ICU manual](https://unicode-org.github.io/icu/userguide/format_parse/datetime/).
      *
      * Alternatively this can be a string prefixed with `php:` representing a format that can be recognized by the
-     * PHP [date()](https://www.php.net/manual/en/function.date.php)-function.
+     * PHP [date()](https://www.php.net/manual/en/function.date.php) function.
      *
      * For example:
      *
@@ -218,7 +218,7 @@ class Formatter extends Component
      */
     public $decimalSeparator;
     /**
-     * @var string the character displayed as the decimal point when formatting a currency.
+     * @var string|null the character displayed as the decimal point when formatting a currency.
      * If not set, the currency decimal separator corresponding to [[locale]] will be used.
      * If [PHP intl extension](https://www.php.net/manual/en/book.intl.php) is not available, setting this property will have no effect.
      * @since 2.0.35
@@ -622,7 +622,7 @@ public function asBoolean($value)
 
     /**
      * Formats the value as a date.
-     * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp. A UNIX timestamp is always in UTC by its definition.
@@ -660,7 +660,7 @@ public function asDate($value, $format = null)
 
     /**
      * Formats the value as a time.
-     * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp. A UNIX timestamp is always in UTC by its definition.
@@ -697,7 +697,7 @@ public function asTime($value, $format = null)
 
     /**
      * Formats the value as a datetime.
-     * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp. A UNIX timestamp is always in UTC by its definition.
@@ -944,7 +944,7 @@ public function asTimestamp($value)
      * 2. Using a timestamp that is relative to the `$referenceTime`.
      * 3. Using a `DateInterval` object.
      *
-     * @param int|string|DateTime|DateTimeInterface|DateInterval $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|DateInterval|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp
@@ -1636,15 +1636,15 @@ private function formatUnit($unitType, $unitFormat, $value, $decimals, $options,
     /**
      * @param string $unitType one of [[UNIT_WEIGHT]], [[UNIT_LENGTH]]
      * @param string $unitFormat one of [[FORMAT_WIDTH_SHORT]], [[FORMAT_WIDTH_LONG]]
-     * @param string $system either [[UNIT_SYSTEM_METRIC]] or [[UNIT_SYSTEM_IMPERIAL]]. When `null`, property [[systemOfUnits]] will be used.
+     * @param string|null $system either [[UNIT_SYSTEM_METRIC]] or [[UNIT_SYSTEM_IMPERIAL]]. When `null`, property [[systemOfUnits]] will be used.
      * @param int $position internal position of size unit
      * @return string
      * @throws InvalidConfigException when INTL is not installed or does not contain required information
      */
     private function getUnitMessage($unitType, $unitFormat, $system, $position)
     {
-        if (isset($this->_unitMessages[$unitType][$system][$position])) {
-            return $this->_unitMessages[$unitType][$system][$position];
+        if (isset($this->_unitMessages[$unitType][$unitFormat][$system][$position])) {
+            return $this->_unitMessages[$unitType][$unitFormat][$system][$position];
         }
         if (!$this->_intlLoaded) {
             throw new InvalidConfigException('Format of ' . $unitType . ' is only supported when PHP intl extension is installed.');
@@ -1676,7 +1676,7 @@ private function getUnitMessage($unitType, $unitFormat, $system, $position)
             $message[] = "$key{{$value}}";
         }
 
-        return $this->_unitMessages[$unitType][$system][$position] = '{n, plural, ' . implode(' ', $message) . '}';
+        return $this->_unitMessages[$unitType][$unitFormat][$system][$position] = '{n, plural, ' . implode(' ', $message) . '}';
     }
 
     /**
diff --git a/src/i18n/GettextMessageSource.php b/src/i18n/GettextMessageSource.php
index b3190ba4c63..2f68f1591f1 100644
--- a/src/i18n/GettextMessageSource.php
+++ b/src/i18n/GettextMessageSource.php
@@ -131,7 +131,7 @@ protected function loadFallbackMessages($category, $fallbackLanguage, $messages,
     protected function getMessageFilePath($language)
     {
         $language = (string) $language;
-        if ($language !== '' && !preg_match('/^[a-z_-]+$/i', $language)) {
+        if ($language !== '' && !preg_match('/^[a-z0-9_-]+$/i', $language)) {
             throw new InvalidArgumentException(sprintf('Invalid language code: "%s".', $language));
         }
         $messageFile = Yii::getAlias($this->basePath) . '/' . $language . '/' . $this->catalog;
diff --git a/src/i18n/GettextMoFile.php b/src/i18n/GettextMoFile.php
index 43b5afaf1f6..942a7287b84 100644
--- a/src/i18n/GettextMoFile.php
+++ b/src/i18n/GettextMoFile.php
@@ -106,7 +106,7 @@ public function load($filePath, $context)
         $messages = [];
         for ($i = 0; $i < $count; ++$i) {
             $id = $this->readString($fileHandle, $sourceLengths[$i], $sourceOffsets[$i]);
-            $separatorPosition = strpos($id, chr(4));
+            $separatorPosition = strpos((string)$id, chr(4));
 
 
             if ((!$context && $separatorPosition === false) || ($context && $separatorPosition !== false && strncmp($id, $context, $separatorPosition) === 0)) {
@@ -250,7 +250,7 @@ protected function writeInteger($fileHandle, $integer)
      * Reads a string.
      * @param resource $fileHandle file handle
      * @param int $length of the string
-     * @param int $offset of the string in the file. If null, it reads from the current position.
+     * @param int|null $offset of the string in the file. If null, it reads from the current position.
      * @return string the result
      */
     protected function readString($fileHandle, $length, $offset = null)
diff --git a/src/i18n/Locale.php b/src/i18n/Locale.php
index a0e1a1b48cf..f81907644aa 100644
--- a/src/i18n/Locale.php
+++ b/src/i18n/Locale.php
@@ -16,14 +16,14 @@
  *
  * The class requires [PHP intl extension](https://www.php.net/manual/en/book.intl.php) to be installed.
  *
- * @property-read string $currencySymbol This property is read-only.
+ * @property-read string $currencySymbol
  *
  * @since 2.0.14
  */
 class Locale extends Component
 {
     /**
-     * @var string the locale ID.
+     * @var string|null the locale ID.
      * If not set, [[\yii\base\Application::language]] will be used.
      */
     public $locale;
@@ -46,7 +46,7 @@ public function init()
     /**
      * Returns a currency symbol
      *
-     * @param string $currencyCode the 3-letter ISO 4217 currency code to get symbol for. If null,
+     * @param string|null $currencyCode the 3-letter ISO 4217 currency code to get symbol for. If null,
      * method will attempt using currency code from [[locale]].
      * @return string
      */
diff --git a/src/i18n/MessageFormatter.php b/src/i18n/MessageFormatter.php
index 47e4246fd21..e92696c0ee2 100644
--- a/src/i18n/MessageFormatter.php
+++ b/src/i18n/MessageFormatter.php
@@ -36,8 +36,8 @@
  *   Also messages that are working with the fallback implementation are not necessarily compatible with the
  *   PHP intl MessageFormatter so do not rely on the fallback if you are able to install intl extension somehow.
  *
- * @property-read string $errorCode Code of the last error. This property is read-only.
- * @property-read string $errorMessage Description of the last error. This property is read-only.
+ * @property-read string $errorCode Code of the last error.
+ * @property-read string $errorMessage Description of the last error.
  *
  * @author Alexander Makarov <sam@rmcreative.ru>
  * @author Carsten Brandt <mail@cebe.cc>
diff --git a/src/i18n/MessageSource.php b/src/i18n/MessageSource.php
index 24a4a74cd9d..6f33bed06bb 100644
--- a/src/i18n/MessageSource.php
+++ b/src/i18n/MessageSource.php
@@ -33,7 +33,7 @@ class MessageSource extends Component
      */
     public $forceTranslation = false;
     /**
-     * @var string the language that the original messages are in. If not set, it will use the value of
+     * @var string|null the language that the original messages are in. If not set, it will use the value of
      * [[\yii\base\Application::sourceLanguage]].
      */
     public $sourceLanguage;
diff --git a/src/i18n/MissingTranslationEvent.php b/src/i18n/MissingTranslationEvent.php
index cfed6093415..7f31f4f61f7 100644
--- a/src/i18n/MissingTranslationEvent.php
+++ b/src/i18n/MissingTranslationEvent.php
@@ -23,7 +23,7 @@ class MissingTranslationEvent extends Event
      */
     public $message;
     /**
-     * @var string the translated message. An event handler may overwrite this property
+     * @var string|null the translated message. An event handler may overwrite this property
      * with a translated version of [[message]] if possible. If not set (null), it means the message is not translated.
      */
     public $translatedMessage;
diff --git a/src/i18n/PhpMessageSource.php b/src/i18n/PhpMessageSource.php
index 4dd860a5ced..92dfa1bf55f 100644
--- a/src/i18n/PhpMessageSource.php
+++ b/src/i18n/PhpMessageSource.php
@@ -72,7 +72,7 @@ protected function loadMessages($category, $language)
         $messageFile = $this->getMessageFilePath($category, $language);
         $messages = $this->loadMessagesFromFile($messageFile);
 
-        $fallbackLanguage = substr($language, 0, 2);
+        $fallbackLanguage = substr((string)$language, 0, 2);
         $fallbackSourceLanguage = substr($this->sourceLanguage, 0, 2);
 
         if ($fallbackLanguage !== '' && $language !== $fallbackLanguage) {
@@ -134,7 +134,7 @@ protected function loadFallbackMessages($category, $fallbackLanguage, $messages,
     protected function getMessageFilePath($category, $language)
     {
         $language = (string) $language;
-        if ($language !== '' && !preg_match('/^[a-z_-]+$/i', $language)) {
+        if ($language !== '' && !preg_match('/^[a-z0-9_-]+$/i', $language)) {
             throw new InvalidArgumentException(sprintf('Invalid language code: "%s".', $language));
         }
         $messageFile = Yii::getAlias($this->basePath) . "/$language/";
diff --git a/src/log/Dispatcher.php b/src/log/Dispatcher.php
index 9b4136c04f3..26b0281a79a 100644
--- a/src/log/Dispatcher.php
+++ b/src/log/Dispatcher.php
@@ -52,7 +52,7 @@
  *
  * @property int $flushInterval How many messages should be logged before they are sent to targets. This
  * method returns the value of [[Logger::flushInterval]].
- * @property Logger $logger The logger. If not set, [[\Yii::getLogger()]] will be used. Note that the type of
+ * @property Logger $logger The logger. If not set, [[Yii::getLogger()]] will be used. Note that the type of
  * this property differs in getter and setter. See [[getLogger()]] and [[setLogger()]] for details.
  * @property int $traceLevel How many application call stacks should be logged together with each message.
  * This method returns the value of [[Logger::traceLevel]]. Defaults to 0.
@@ -69,7 +69,7 @@ class Dispatcher extends Component
     public $targets = [];
 
     /**
-     * @var Logger the logger.
+     * @var Logger|null the logger.
      */
     private $_logger;
 
@@ -123,7 +123,7 @@ public function getLogger()
      * Sets the connected logger.
      * @param Logger|string|array $value the logger to be used. This can either be a logger instance
      * or a configuration that will be used to create one using [[Yii::createObject()]].
-     * If you are providing custom logger configuration and would like it to be used for the whole application 
+     * If you are providing custom logger configuration and would like it to be used for the whole application
      * and not just for the dispatcher you should use [[Yii::setLogger()]] instead.
      */
     public function setLogger($value)
@@ -210,7 +210,7 @@ public function dispatch($messages, $final)
      * Generate target error message
      *
      * @param Target $target log target object
-     * @param \Throwable|\Exception $throwable catched exception
+     * @param \Throwable $throwable catched exception
      * @param string $method full method path
      * @return array generated error message data
      * @since 2.0.32
diff --git a/src/log/FileTarget.php b/src/log/FileTarget.php
index 157c0db50ed..3fa91c2371a 100644
--- a/src/log/FileTarget.php
+++ b/src/log/FileTarget.php
@@ -26,7 +26,7 @@
 class FileTarget extends Target
 {
     /**
-     * @var string log file path or [path alias](guide:concept-aliases). If not set, it will use the "@runtime/logs/app.log" file.
+     * @var string|null log file path or [path alias](guide:concept-aliases). If not set, it will use the "@runtime/logs/app.log" file.
      * The directory containing the log files will be automatically created if not existing.
      */
     public $logFile;
@@ -46,7 +46,7 @@ class FileTarget extends Target
      */
     public $maxLogFiles = 5;
     /**
-     * @var int the permission to be set for newly created log files.
+     * @var int|null the permission to be set for newly created log files.
      * This value will be used by PHP chmod() function. No umask will be applied.
      * If not set, the permission will be determined by the current environment.
      */
diff --git a/src/log/Logger.php b/src/log/Logger.php
index a4f21dd4aa7..a81f271abc4 100644
--- a/src/log/Logger.php
+++ b/src/log/Logger.php
@@ -31,12 +31,11 @@
  * or [[DbTarget|database]], with the help of the [[dispatcher]].
  *
  * @property-read array $dbProfiling The first element indicates the number of SQL statements executed, and
- * the second element the total time spent in SQL execution. This property is read-only.
- * @property-read float $elapsedTime The total elapsed time in seconds for current request. This property is
- * read-only.
+ * the second element the total time spent in SQL execution.
+ * @property-read float $elapsedTime The total elapsed time in seconds for current request.
  * @property-read array $profiling The profiling results. Each element is an array consisting of these
  * elements: `info`, `category`, `timestamp`, `trace`, `level`, `duration`, `memory`, `memoryDiff`. The `memory`
- * and `memoryDiff` values are available since version 2.0.11. This property is read-only.
+ * and `memoryDiff` values are available since version 2.0.11.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/log/SyslogTarget.php b/src/log/SyslogTarget.php
index 84bde8941f5..034f53a6787 100644
--- a/src/log/SyslogTarget.php
+++ b/src/log/SyslogTarget.php
@@ -27,7 +27,7 @@ class SyslogTarget extends Target
      */
     public $facility = LOG_USER;
     /**
-     * @var int openlog options. This is a bitfield passed as the `$option` parameter to [openlog()](https://www.php.net/openlog).
+     * @var int|null openlog options. This is a bitfield passed as the `$option` parameter to [openlog()](https://www.php.net/openlog).
      * Defaults to `null` which means to use the default options `LOG_ODELAY | LOG_PID`.
      * @see https://www.php.net/openlog for available options.
      * @since 2.0.11
diff --git a/src/log/Target.php b/src/log/Target.php
index d57c2614ec9..fa05f1751ea 100644
--- a/src/log/Target.php
+++ b/src/log/Target.php
@@ -99,7 +99,7 @@ abstract class Target extends Component
         '_SERVER.PHP_AUTH_PW',
     ];
     /**
-     * @var callable a PHP callable that returns a string to be prefixed to every exported message.
+     * @var callable|null a PHP callable that returns a string to be prefixed to every exported message.
      *
      * If not set, [[getMessagePrefix()]] will be used, which prefixes the message with context information
      * such as user IP, user ID and session ID.
diff --git a/src/mail/BaseMailer.php b/src/mail/BaseMailer.php
index 63b6904ee52..d564ae8708e 100644
--- a/src/mail/BaseMailer.php
+++ b/src/mail/BaseMailer.php
@@ -87,7 +87,7 @@ abstract class BaseMailer extends Component implements MailerInterface, ViewCont
      */
     public $fileTransportPath = '@runtime/mail';
     /**
-     * @var callable a PHP callback that will be called by [[send()]] when [[useFileTransport]] is true.
+     * @var callable|null a PHP callback that will be called by [[send()]] when [[useFileTransport]] is true.
      * The callback should return a file name which will be used to save the email message.
      * If not set, the file name will be generated based on the current timestamp.
      *
@@ -342,8 +342,9 @@ protected function saveMessage($message)
     public function generateMessageFileName()
     {
         $time = microtime(true);
+        $timeInt = (int) $time;
 
-        return date('Ymd-His-', $time) . sprintf('%04d', (int) (($time - (int) $time) * 10000)) . '-' . sprintf('%04d', random_int(0, 10000)) . '.eml';
+        return date('Ymd-His-', $timeInt) . sprintf('%04d', (int) (($time - $timeInt) * 10000)) . '-' . sprintf('%04d', random_int(0, 10000)) . '.eml';
     }
 
     /**
diff --git a/src/mail/BaseMessage.php b/src/mail/BaseMessage.php
index ec04d82f756..a223ce41088 100644
--- a/src/mail/BaseMessage.php
+++ b/src/mail/BaseMessage.php
@@ -25,7 +25,7 @@
 abstract class BaseMessage extends BaseObject implements MessageInterface
 {
     /**
-     * @var MailerInterface the mailer instance that created this message.
+     * @var MailerInterface|null the mailer instance that created this message.
      * For independently created messages this is `null`.
      */
     public $mailer;
@@ -33,7 +33,7 @@ abstract class BaseMessage extends BaseObject implements MessageInterface
 
     /**
      * Sends this email message.
-     * @param MailerInterface $mailer the mailer that should be used to send this message.
+     * @param MailerInterface|null $mailer the mailer that should be used to send this message.
      * If no mailer is given it will first check if [[mailer]] is set and if not,
      * the "mailer" application component will be used instead.
      * @return bool whether this message is sent successfully.
diff --git a/src/mail/MessageInterface.php b/src/mail/MessageInterface.php
index 414d3b778b3..aeb1d2d6867 100644
--- a/src/mail/MessageInterface.php
+++ b/src/mail/MessageInterface.php
@@ -204,7 +204,7 @@ public function embedContent($content, array $options = []);
 
     /**
      * Sends this email message.
-     * @param MailerInterface $mailer the mailer that should be used to send this message.
+     * @param MailerInterface|null $mailer the mailer that should be used to send this message.
      * If null, the "mailer" application component will be used instead.
      * @return bool whether this message is sent successfully.
      */
diff --git a/src/messages/config.php b/src/messages/config.php
index 7f8db2d41c1..98e8fe257d8 100644
--- a/src/messages/config.php
+++ b/src/messages/config.php
@@ -12,12 +12,17 @@
     'messagePath' => __DIR__,
     // array, required, list of language codes that the extracted messages
     // should be translated to. For example, ['zh-CN', 'de'].
-    'languages' => ['af', 'ar', 'az', 'be', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'el', 'es', 'et', 'fa', 'fi', 'fr', 'he', 'hi', 'hr', 'hu', 'hy', 'id', 'it', 'ja', 'ka', 'kk', 'ko', 'kz', 'lt', 'lv', 'ms', 'nb-NO', 'nl', 'pl', 'pt', 'pt-BR', 'ro', 'ru', 'sk', 'sl', 'sr', 'sr-Latn', 'sv', 'tg', 'th', 'tr', 'uk', 'uz', 'vi', 'zh-CN', 'zh-TW'],
+    'languages' => [
+        'af', 'ar', 'az', 'be', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'el', 'es', 'et', 'fa', 'fi', 'fr', 'he', 'hi',
+        'pt-BR', 'ro', 'hr', 'hu', 'hy', 'id', 'it', 'ja', 'ka', 'kk', 'ko', 'kz', 'lt', 'lv', 'ms', 'nb-NO', 'nl',
+        'pl', 'pt', 'ru', 'sk', 'sl', 'sr', 'sr-Latn', 'sv', 'tg', 'th', 'tr', 'uk', 'uz', 'uz-Cy', 'vi', 'zh-CN',
+        'zh-TW'
+    ],
     // string, the name of the function for translating messages.
     // Defaults to 'Yii::t'. This is used as a mark to find the messages to be
     // translated. You may use a string for single function name or an array for
     // multiple function names.
-    'translator' => 'Yii::t',
+    'translator' => ['\Yii::t', 'Yii::t'],
     // boolean, whether to sort messages by keys when merging new messages
     // with the existing ones. Defaults to false, which means the new (untranslated)
     // messages will be separated from the old (translated) ones.
@@ -39,13 +44,13 @@
     // Note, the '/' characters in a pattern matches both '/' and '\'.
     // See helpers/FileHelper::findFiles() description for more details on pattern matching rules.
     'except' => [
-        '.svn',
-        '.git',
-        '.gitignore',
-        '.gitkeep',
-        '.hgignore',
-        '.hgkeep',
+        '.*',
+        '/.*',
         '/messages',
+        '/tests',
+        '/runtime',
+        '/vendor',
+        '/BaseYii.php',
     ],
     // array, list of patterns that specify which files (not directories) should be processed.
     // If empty or not set, all files will be processed.
@@ -53,9 +58,9 @@
     // If a file/directory matches both a pattern in "only" and "except", it will NOT be processed.
     'only' => ['*.php'],
     'phpFileHeader' => '/**
- * @link http://www.yiiframework.com/
+ * @link https://www.yiiframework.com/
  * @copyright Copyright (c) 2008 Yii Software LLC
- * @license http://www.yiiframework.com/license/
+ * @license https://www.yiiframework.com/license/
  */
 
 ',
diff --git a/src/messages/uz-Cy/yii.php b/src/messages/uz-Cy/yii.php
new file mode 100644
index 00000000000..cc6321e4ede
--- /dev/null
+++ b/src/messages/uz-Cy/yii.php
@@ -0,0 +1,125 @@
+<?php
+    /**
+     * @link http://www.yiiframework.com/
+     * @copyright Copyright (c) 2008 Yii Software LLC
+     * @license http://www.yiiframework.com/license/
+     */
+
+    /**
+     * Message translations.
+     *
+     * This file is automatically generated by 'yii message/extract' command.
+     * It contains the localizable messages extracted from source code.
+     * You may modify this file by translating the extracted messages.
+     *
+     * Each array element represents the translation (value) of a message (key).
+     * If the value is empty, the message is considered as not translated.
+     * Messages that no longer need translation will have their translations
+     * enclosed between a pair of '@@' marks.
+     *
+     * Message string can be used with plural forms format. Check i18n section
+     * of the guide for details.
+     *
+     * NOTE: this file must be saved in UTF-8 encoding.
+     */
+    return [
+        '{nFormatted} B' => '{nFormatted} Б',
+        '{nFormatted} GB' => '{nFormatted} ГБ',
+        '{nFormatted} GiB' => '{nFormatted} ГиБ',
+        '{nFormatted} KB' => '{nFormatted} КБ',
+        '{nFormatted} KiB' => '{nFormatted} КиБ',
+        '{nFormatted} MB' => '{nFormatted} МБ',
+        '{nFormatted} MiB' => '{nFormatted} МиБ',
+        '{nFormatted} PB' => '{nFormatted} ПБ',
+        '{nFormatted} PiB' => '{nFormatted} ПиБ',
+        '{nFormatted} TB' => '{nFormatted} ТБ',
+        '{nFormatted} TiB' => '{nFormatted} ТиБ',
+        '{nFormatted} {n, plural, =1{byte} other{bytes}}' => '{nFormatted} {n, plural, one{байт} few{байт} many{байтлар} other{байт}}',
+        '{nFormatted} {n, plural, =1{gibibyte} other{gibibytes}}' => '{nFormatted} {n, plural, one{гибибайт} few{гибибайт} many{гибибайт} other{гибибайт}}',
+        '{nFormatted} {n, plural, =1{gigabyte} other{gigabytes}}' => '{nFormatted} {n, plural, one{гигабайт} few{гигабайт} many{гигабайт} other{гигабайт}}',
+        '{nFormatted} {n, plural, =1{kibibyte} other{kibibytes}}' => '{nFormatted} {n, plural, one{кибибайт} few{кибибайт} many{кибибайт} other{кибибайт}}',
+        '{nFormatted} {n, plural, =1{kilobyte} other{kilobytes}}' => '{nFormatted} {n, plural, one{килобайт} few{килобайт} many{килобайт} other{килобайт}}',
+        '{nFormatted} {n, plural, =1{mebibyte} other{mebibytes}}' => '{nFormatted} {n, plural, one{мебибайт} few{мебибайт} many{мебибайт} other{мебибайт}}',
+        '{nFormatted} {n, plural, =1{megabyte} other{megabytes}}' => '{nFormatted} {n, plural, one{мегабайт} few{мегабайт} many{мегабайт} other{мегабайт}}',
+        '{nFormatted} {n, plural, =1{pebibyte} other{pebibytes}}' => '{nFormatted} {n, plural, one{пебибайт} few{пебибайт} many{пебибайт} other{пебибайт}}',
+        '{nFormatted} {n, plural, =1{petabyte} other{petabytes}}' => '{nFormatted} {n, plural, one{петабайт} few{петабайт} many{петабайт} other{петабайт}}',
+        '{nFormatted} {n, plural, =1{tebibyte} other{tebibytes}}' => '{nFormatted} {n, plural, one{тебибайт} few{тебибайт} many{тебибайт} other{тебибайт}}',
+        '{nFormatted} {n, plural, =1{terabyte} other{terabytes}}' => '{nFormatted} {n, plural, one{терабайт} few{терабайт} many{терабайт} other{терабайт}}',
+        '(not set)' => '(қийматланмаган)',
+        'An internal server error occurred.' => 'Сервернинг ички хатолиги юз берди.',
+        'Are you sure you want to delete this item?' => 'Сиз ростдан ҳам ушбу элементни ўчирмоқчимисиз?',
+        'Delete' => 'Ўчириш',
+        'Error' => 'Хато',
+        'File upload failed.' => 'Файлни юклаб бўлмади.',
+        'Home' => 'Асосий',
+        'Invalid data received for parameter "{param}".' => '"{param}" параметр қиймати нотўғри.',
+        'Login Required' => 'Кириш талаб қилинади.',
+        'Missing required arguments: {params}' => 'Қуйидаги зарур аргументлар мавжуд эмас: {params}',
+        'Missing required parameters: {params}' => 'Қуйидаги зарур параметрлар мавжуд эмас: {params}',
+        'No' => 'Йўқ',
+        'No help for unknown command "{command}".' => '"{command}" ноаниқ команда учун маълумотнома мавжуд эмас.',
+        'No help for unknown sub-command "{command}".' => '"{command}" ноаниқ қисм команда учун маълумотнома мавжуд эмас.',
+        'No results found.' => 'Хеч нима топилмади.',
+        'Only files with these MIME types are allowed: {mimeTypes}.' => 'Фақат MIME-туридаги файлларни юклашга рухсат берилган: {mimeTypes}.',
+        'Only files with these extensions are allowed: {extensions}.' => 'Фақат қуйидаги кенгайтмали файлларни юклашга рухсат берилган: {extensions}.',
+        'Page not found.' => 'Саҳифа топилмади.',
+        'Please fix the following errors:' => 'Қуйидаги хатоликларни тўғриланг:',
+        'Please upload a file.' => 'Файлни юкланг.',
+        'Showing <b>{begin, number}-{end, number}</b> of <b>{totalCount, number}</b> {totalCount, plural, one{item} other{items}}.' => 'Намойиш этиляпти <b>{begin, number}-{end, number}</b> маълумот, жами: <b>{totalCount, number}</b> та',
+        'The file "{file}" is not an image.' => '«{file}» расм файл эмас.',
+        'The file "{file}" is too big. Its size cannot exceed {formattedLimit}.' => '«{file}» файл жуда катта. Ўлчам {formattedLimit} ошиши керак эмас.',
+        'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.' => '«{file}» файл жуда кичкина. Ўлчам {formattedLimit} кам бўлмаслиги керак.',
+        'The format of {attribute} is invalid.' => '«{attribute}» қийматнинг формати нотўғри.',
+        'The image "{file}" is too large. The height cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => '«{file}» файл жуда катта. Баландлик {limit, number} {limit, plural, one{пикселдан} few{пикселдан} many{пикселдан} other{пикселдан}} ошмаслиги керак.',
+        'The image "{file}" is too large. The width cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => '«{file}» файл жуда катта. Эни {limit, number} {limit, plural, one{пикселдан} few{пикселдан} many{пикселдан} other{пикселдан}} ошмаслиги керак.',
+        'The image "{file}" is too small. The height cannot be smaller than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => '«{file}» файл жуда кичкина. Баландлик {limit, number} {limit, plural, one{пикселдан} few{пикселдан} many{пикселдан} other{пикселдан}} кам бўлмаслиги керак.',
+        'The image "{file}" is too small. The width cannot be smaller than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => '«{file}» файл жуда кичкина. Эни {limit, number} {limit, plural, one{пикселдан} few{пикселдан} many{пикселдан} other{пикселдан}} кам бўлмаслиги керак.',
+        'The requested view "{name}" was not found.' => 'Сўралаётган "{name}" файли топилмади.',
+        'The verification code is incorrect.' => 'Текширув коди нотўғри.',
+        'Total <b>{count, number}</b> {count, plural, one{item} other{items}}.' => 'Жами <b>{count, number}</b> {count, plural, one{ёзув} few{ёзув} many{ёзув} other{ёзув}}.',
+        'Unable to verify your data submission.' => 'Юборилган маълумотларни текшириб бўлмади.',
+        'Unknown command "{command}".' => '"{command}" ноаниқ бўйриқ.',
+        'Unknown option: --{name}' => 'Ноаниқ танлов: --{name}',
+        'Update' => 'Таҳририлаш',
+        'View' => 'Кўриш',
+        'Yes' => 'Ҳа',
+        'You are not allowed to perform this action.' => 'Сизга ушбу амални бажаришга руҳсат берилмаган.',
+        'You can upload at most {limit, number} {limit, plural, one{file} other{files}}.' => 'Сиз {limit, number} {limit, plural, one{файлдан} few{файллардан} many{файллардан} other{файллардан}} кўпини юклаб ололмайсиз.',
+        'in {delta, plural, =1{a day} other{# days}}' => '{delta, plural, =1{кундан} one{# кундан} few{# кундан} many{# кунлардан} other{# кундан}} кейин',
+        'in {delta, plural, =1{a minute} other{# minutes}}' => '{delta, plural, =1{минутдан} one{# минутдан} few{# минутлардан} many{# минутдан} other{# минутлардан}} кейин',
+        'in {delta, plural, =1{a month} other{# months}}' => '{delta, plural, =1{ойдан} one{# ойдан} few{# ойдан} many{# ойлардан} other{# ойлардан}} кейин',
+        'in {delta, plural, =1{a second} other{# seconds}}' => '{delta, plural, =1{секунддан} one{# секунддан} few{# секундлардан} many{# секунддан} other{# секундлардан}} кейин',
+        'in {delta, plural, =1{a year} other{# years}}' => '{delta, plural, =1{йилдан} one{# йилдан} few{# йиллардан} many{# йиллардан} other{# йиллардан}} кейин',
+        'in {delta, plural, =1{an hour} other{# hours}}' => '{delta, plural, =1{соатдан} one{# соатдан} few{# соатлардан} many{# соатлардан} other{# соатлардан}} кейин',
+        'just now' => 'ҳозироқ',
+        'the input value' => 'киритилган қиймат',
+        '{attribute} "{value}" has already been taken.' => '{attribute} «{value}» аввалроқ банд қилинган.',
+        '{attribute} cannot be blank.' => '«{attribute}» тўлдириш шарт.',
+        '{attribute} is invalid.' => '«{attribute}» қиймати нотўғри',
+        '{attribute} is not a valid URL.' => '«{attribute}» тўғри URL эмас.',
+        '{attribute} is not a valid email address.' => '«{attribute}» тўғри электрон манзил эмас.',
+        '{attribute} must be "{requiredValue}".' => '«{attribute}» қиймати «{requiredValue}» га тенг бўлиши керак.',
+        '{attribute} must be a number.' => '«{attribute}» қиймати сон бўлиши керак.',
+        '{attribute} must be a string.' => '«{attribute}» қиймати матн бўлиши керак.',
+        '{attribute} must be an integer.' => '«{attribute}» қиймати бутун сон бўлиши керак.',
+        '{attribute} must be either "{true}" or "{false}".' => '«{attribute}» қиймати «{true}» ёки «{false}» бўлиши керак.',
+        '{attribute} must be greater than "{compareValue}".' => '«{attribute}» қиймати «{compareValue}» дан катта бўлиши керак.',
+        '{attribute} must be greater than or equal to "{compareValue}".' => '«{attribute}» қиймати «{compareValue}» дан катта ёки тенг бўлиши керак.',
+        '{attribute} must be less than "{compareValue}".' => '«{attribute}» қиймати «{compareValue}» дан кичкина бўлиши керак.',
+        '{attribute} must be less than or equal to "{compareValue}".' => '«{attribute}» қиймати «{compareValue}» дан кичик ёки тенг бўлиши керак.',
+        '{attribute} must be no greater than {max}.' => '«{attribute}» қиймати {max} дан ошмаслиги керак.',
+        '{attribute} must be no less than {min}.' => '«{attribute}» қиймати {min} дан кичкина бўлиши керак.',
+        '{attribute} must be repeated exactly.' => '«{attribute}» қиймати бир хил тарзда такрорланиши керак.',
+        '{attribute} must not be equal to "{compareValue}".' => '«{attribute}» қиймати «{compareValue}» га тенг бўлмаслиги керак.',
+        '{attribute} must not be equal to "{compareValueOrAttribute}".' => '«{attribute}» қиймати «{compareValueOrAttribute}» қийматига тенг бўлмаслиги лозим.',
+        '{attribute} should contain at least {min, number} {min, plural, one{character} other{characters}}.' => '«{attribute}» қиймати минимум {min, number} {min, plural, one{белгидан} few{белгидан} many{белгидан} other{белгидан}} ташкил топиши керак.',
+        '{attribute} should contain at most {max, number} {max, plural, one{character} other{characters}}.' => '«{attribute}» қиймати максимум {max, number} {max, plural, one{белгидан} few{белгидан} many{белгидан} other{белгидан}} ошмаслиги керак.',
+        '{attribute} should contain {length, number} {length, plural, one{character} other{characters}}.' => '«{attribute}» қиймати {length, number} {length, plural, one{белгидан} few{белгидан} many{белгидан} other{белгидан}} ташкил топиши керак.',
+        '{delta, plural, =1{a day} other{# days}} ago' => '{delta, plural, =1{кун} one{кун} few{# кун} many{# кун} other{# кун}} аввал',
+        '{delta, plural, =1{a minute} other{# minutes}} ago' => '{delta, plural, =1{дақиқа} one{# дақиқа} few{# дақиқа} many{# дақиқа} other{# дақиқа}} аввал',
+        '{delta, plural, =1{a month} other{# months}} ago' => '{delta, plural, =1{ой} one{# ой} few{# ой} many{# ой} other{# ой}} аввал',
+        '{delta, plural, =1{a second} other{# seconds}} ago' => '{delta, plural, =1{сония} one{# сония} few{# сония} many{# сония} other{# сония}} аввал',
+        '{delta, plural, =1{a year} other{# years}} ago' => '{delta, plural, =1{йил} one{# йил} few{# йил} many{# йил} other{# йил}} аввал',
+        '{delta, plural, =1{an hour} other{# hours}} ago' => '{delta, plural, =1{соат} one{# соат} few{# соат} many{# соат} other{# соат}} аввал',
+    ];
+    
diff --git a/src/mutex/FileMutex.php b/src/mutex/FileMutex.php
index 5dc71a088cb..8d0c1385532 100644
--- a/src/mutex/FileMutex.php
+++ b/src/mutex/FileMutex.php
@@ -49,7 +49,7 @@ class FileMutex extends Mutex
      */
     public $mutexPath = '@runtime/mutex';
     /**
-     * @var int the permission to be set for newly created mutex files.
+     * @var int|null the permission to be set for newly created mutex files.
      * This value will be used by PHP chmod() function. No umask will be applied.
      * If not set, the permission will be determined by the current environment.
      */
@@ -62,7 +62,7 @@ class FileMutex extends Mutex
      */
     public $dirMode = 0775;
     /**
-     * @var bool whether file handling should assume a Windows file system.
+     * @var bool|null whether file handling should assume a Windows file system.
      * This value will determine how [[releaseLock()]] goes about deleting the lock file.
      * If not set, it will be determined by checking the DIRECTORY_SEPARATOR constant.
      * @since 2.0.16
diff --git a/src/rbac/BaseManager.php b/src/rbac/BaseManager.php
index 48d7b3f3182..4e475c8bcbf 100644
--- a/src/rbac/BaseManager.php
+++ b/src/rbac/BaseManager.php
@@ -17,8 +17,7 @@
  *
  * For more details and usage information on DbManager, see the [guide article on security authorization](guide:security-authorization).
  *
- * @property-read Role[] $defaultRoleInstances Default roles. The array is indexed by the role names. This
- * property is read-only.
+ * @property-read Role[] $defaultRoleInstances Default roles. The array is indexed by the role names.
  * @property string[] $defaultRoles Default roles. Note that the type of this property differs in getter and
  * setter. See [[getDefaultRoles()]] and [[setDefaultRoles()]] for details.
  *
diff --git a/src/rbac/DbManager.php b/src/rbac/DbManager.php
index 9aa29ae9453..4f909e34545 100644
--- a/src/rbac/DbManager.php
+++ b/src/rbac/DbManager.php
@@ -62,7 +62,7 @@ class DbManager extends BaseManager
      */
     public $ruleTable = '{{%auth_rule}}';
     /**
-     * @var CacheInterface|array|string the cache used to improve RBAC performance. This can be one of the following:
+     * @var CacheInterface|array|string|null the cache used to improve RBAC performance. This can be one of the following:
      *
      * - an application component ID (e.g. `cache`)
      * - a configuration array
diff --git a/src/rbac/ManagerInterface.php b/src/rbac/ManagerInterface.php
index 4d53d30712e..911ccbdc1d3 100644
--- a/src/rbac/ManagerInterface.php
+++ b/src/rbac/ManagerInterface.php
@@ -60,7 +60,7 @@ public function update($name, $object);
     /**
      * Returns the named role.
      * @param string $name the role name.
-     * @return null|Role the role corresponding to the specified name. Null is returned if no such role.
+     * @return Role|null the role corresponding to the specified name. Null is returned if no such role.
      */
     public function getRole($name);
 
@@ -91,7 +91,7 @@ public function getChildRoles($roleName);
     /**
      * Returns the named permission.
      * @param string $name the permission name.
-     * @return null|Permission the permission corresponding to the specified name. Null is returned if no such permission.
+     * @return Permission|null the permission corresponding to the specified name. Null is returned if no such permission.
      */
     public function getPermission($name);
 
@@ -118,7 +118,7 @@ public function getPermissionsByUser($userId);
     /**
      * Returns the rule of the specified name.
      * @param string $name the rule name
-     * @return null|Rule the rule object, or null if the specified name does not correspond to a rule.
+     * @return Rule|null the rule object, or null if the specified name does not correspond to a rule.
      */
     public function getRule($name);
 
@@ -208,7 +208,7 @@ public function revokeAll($userId);
      * Returns the assignment information regarding a role and a user.
      * @param string $roleName the role name
      * @param string|int $userId the user ID (see [[\yii\web\User::id]])
-     * @return null|Assignment the assignment information. Null is returned if
+     * @return Assignment|null the assignment information. Null is returned if
      * the role is not assigned to the user.
      */
     public function getAssignment($roleName, $userId);
diff --git a/src/rbac/migrations/m140506_102106_rbac_init.php b/src/rbac/migrations/m140506_102106_rbac_init.php
index 1429486a3b9..467fa8608f4 100644
--- a/src/rbac/migrations/m140506_102106_rbac_init.php
+++ b/src/rbac/migrations/m140506_102106_rbac_init.php
@@ -40,7 +40,7 @@ protected function isMSSQL()
 
     protected function isOracle()
     {
-        return $this->db->driverName === 'oci';
+        return $this->db->driverName === 'oci' || $this->db->driverName === 'oci8';
     }
 
     /**
diff --git a/src/requirements/YiiRequirementChecker.php b/src/requirements/YiiRequirementChecker.php
index bc214aa4ec8..612083684a0 100644
--- a/src/requirements/YiiRequirementChecker.php
+++ b/src/requirements/YiiRequirementChecker.php
@@ -295,9 +295,9 @@ function checkUploadMaxFileSize($min = null, $max = null)
      * This method includes the view file as a PHP script
      * and captures the display result if required.
      * @param string $_viewFile_ view file
-     * @param array $_data_ data to be extracted and made available to the view file
+     * @param array|null $_data_ data to be extracted and made available to the view file
      * @param bool $_return_ whether the rendering result should be returned as a string
-     * @return string the rendering result. Null if the rendering result is not required.
+     * @return string|null the rendering result. Null if the rendering result is not required.
      */
     function renderViewFile($_viewFile_, $_data_ = null, $_return_ = false)
     {
diff --git a/src/requirements/requirements.php b/src/requirements/requirements.php
index b6e3d80965c..f1c675bd0fc 100644
--- a/src/requirements/requirements.php
+++ b/src/requirements/requirements.php
@@ -16,32 +16,32 @@
         'name' => 'PHP version',
         'mandatory' => true,
         'condition' => version_compare(PHP_VERSION, '5.4.0', '>='),
-        'by' => '<a href="http://www.yiiframework.com">Yii Framework</a>',
+        'by' => '<a href="https://www.yiiframework.com">Yii Framework</a>',
         'memo' => 'PHP 5.4.0 or higher is required.',
     ),
     array(
         'name' => 'Reflection extension',
         'mandatory' => true,
         'condition' => class_exists('Reflection', false),
-        'by' => '<a href="http://www.yiiframework.com">Yii Framework</a>',
+        'by' => '<a href="https://www.yiiframework.com">Yii Framework</a>',
     ),
     array(
         'name' => 'PCRE extension',
         'mandatory' => true,
         'condition' => extension_loaded('pcre'),
-        'by' => '<a href="http://www.yiiframework.com">Yii Framework</a>',
+        'by' => '<a href="https://www.yiiframework.com">Yii Framework</a>',
     ),
     array(
         'name' => 'SPL extension',
         'mandatory' => true,
         'condition' => extension_loaded('SPL'),
-        'by' => '<a href="http://www.yiiframework.com">Yii Framework</a>',
+        'by' => '<a href="https://www.yiiframework.com">Yii Framework</a>',
     ),
     array(
         'name' => 'Ctype extension',
         'mandatory' => true,
         'condition' => extension_loaded('ctype'),
-        'by' => '<a href="http://www.yiiframework.com">Yii Framework</a>'
+        'by' => '<a href="https://www.yiiframework.com">Yii Framework</a>'
     ),
     array(
         'name' => 'MBString extension',
@@ -54,7 +54,7 @@
         'name' => 'OpenSSL extension',
         'mandatory' => false,
         'condition' => extension_loaded('openssl'),
-        'by' => '<a href="http://www.yiiframework.com/doc-2.0/yii-base-security.html">Security Component</a>',
+        'by' => '<a href="https://www.yiiframework.com/doc-2.0/yii-base-security.html">Security Component</a>',
         'memo' => 'Required by encrypt and decrypt methods.'
     ),
     array(
@@ -74,7 +74,7 @@
         'by' => '<a href="https://www.php.net/manual/en/book.intl.php">Internationalization</a> support',
         'memo' => 'ICU 49.0 or higher is required when you want to use <code>#</code> placeholder in plural rules
         (for example, plural in
-        <a href=\"http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html#asRelativeTime%28%29-detail\">
+        <a href=\"https://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html#asRelativeTime%28%29-detail\">
         Formatter::asRelativeTime()</a>) in the <code>yii\i18n\Formatter</code> class. Your current ICU version is ' .
         (defined('INTL_ICU_VERSION') ? INTL_ICU_VERSION : '(ICU is missing)') . '.'
     ),
@@ -85,7 +85,7 @@
         'by' => '<a href="https://www.php.net/manual/en/book.intl.php">Internationalization</a> support',
         'memo' => 'ICU Data 49.1 or higher is required when you want to use <code>#</code> placeholder in plural rules
         (for example, plural in
-        <a href=\"http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html#asRelativeTime%28%29-detail\">
+        <a href=\"https://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html#asRelativeTime%28%29-detail\">
         Formatter::asRelativeTime()</a>) in the <code>yii\i18n\Formatter</code> class. Your current ICU Data version is ' .
         (defined('INTL_ICU_DATA_VERSION') ? INTL_ICU_DATA_VERSION : '(ICU Data is missing)') . '.'
     ),
@@ -107,8 +107,8 @@
         'name' => 'IPv6 support',
         'mandatory' => false,
         'condition' => strlen(@inet_pton('2001:db8::1')) === 16,
-        'by' => 'IPv6 expansion in <a href="http://www.yiiframework.com/doc-2.0/yii-validators-ipvalidator.html">IpValidator</a>',
-        'memo' => 'When <a href="http://www.yiiframework.com/doc-2.0/yii-validators-ipvalidator.html#$expandIPv6-detail">IpValidator::expandIPv6</a>
+        'by' => 'IPv6 expansion in <a href="https://www.yiiframework.com/doc-2.0/yii-validators-ipvalidator.html">IpValidator</a>',
+        'memo' => 'When <a href="https://www.yiiframework.com/doc-2.0/yii-validators-ipvalidator.html#$expandIPv6-detail">IpValidator::expandIPv6</a>
         property is set to <code>true</code>, PHP must support IPv6 protocol stack. Currently PHP constant <code>AF_INET6</code> is not defined
         and IPv6 is probably unsupported.'
     )
diff --git a/src/rest/Action.php b/src/rest/Action.php
index 466acfc2f31..6afafca4502 100644
--- a/src/rest/Action.php
+++ b/src/rest/Action.php
@@ -29,7 +29,7 @@ class Action extends \yii\base\Action
      */
     public $modelClass;
     /**
-     * @var callable a PHP callable that will be called to return the model corresponding
+     * @var callable|null a PHP callable that will be called to return the model corresponding
      * to the specified primary key value. If not set, [[findModel()]] will be used instead.
      * The signature of the callable should be:
      *
@@ -45,7 +45,7 @@ class Action extends \yii\base\Action
      */
     public $findModel;
     /**
-     * @var callable a PHP callable that will be called when running an action to determine
+     * @var callable|null a PHP callable that will be called when running an action to determine
      * if the current user has the permission to execute the action. If not set, the access
      * check will not be performed. The signature of the callable should be as follows,
      *
diff --git a/src/rest/ActiveController.php b/src/rest/ActiveController.php
index 5e7df58fbe8..7a62f562695 100644
--- a/src/rest/ActiveController.php
+++ b/src/rest/ActiveController.php
@@ -127,7 +127,7 @@ protected function verbs()
      * If the user does not have access, a [[ForbiddenHttpException]] should be thrown.
      *
      * @param string $action the ID of the action to be executed
-     * @param object $model the model to be accessed. If null, it means no specific model is being accessed.
+     * @param object|null $model the model to be accessed. If null, it means no specific model is being accessed.
      * @param array $params additional parameters
      * @throws ForbiddenHttpException if the user does not have access
      */
diff --git a/src/rest/IndexAction.php b/src/rest/IndexAction.php
index b1df395c359..766ed2a6b6b 100644
--- a/src/rest/IndexAction.php
+++ b/src/rest/IndexAction.php
@@ -10,6 +10,9 @@
 use Yii;
 use yii\data\ActiveDataProvider;
 use yii\data\DataFilter;
+use yii\data\Pagination;
+use yii\data\Sort;
+use yii\helpers\ArrayHelper;
 
 /**
  * IndexAction implements the API endpoint for listing multiple models.
@@ -22,7 +25,7 @@
 class IndexAction extends Action
 {
     /**
-     * @var callable a PHP callable that will be called to prepare a data provider that
+     * @var callable|null a PHP callable that will be called to prepare a data provider that
      * should return a collection of the models. If not set, [[prepareDataProvider()]] will be used instead.
      * The signature of the callable should be:
      *
@@ -46,8 +49,8 @@ class IndexAction extends Action
      */
     public $prepareDataProvider;
     /**
-     * @var callable a PHP callable that will be called to prepare query in prepareDataProvider
-     * Should return $query
+     * @var callable a PHP callable that will be called to prepare query in prepareDataProvider.
+     * Should return $query.
      * For example:
      *
      * ```php
@@ -63,7 +66,7 @@ class IndexAction extends Action
     public $prepareSearchQuery;
     /**
      * @var DataFilter|null data filter to be used for the search filter composition.
-     * You must setup this field explicitly in order to enable filter processing.
+     * You must set up this field explicitly in order to enable filter processing.
      * For example:
      *
      * ```php
@@ -84,6 +87,22 @@ class IndexAction extends Action
      * @since 2.0.13
      */
     public $dataFilter;
+    /**
+     * @var array|Pagination|false The pagination to be used by [[prepareDataProvider()]].
+     * If this is `false`, it means pagination is disabled.
+     * Note: if a Pagination object is passed, it's `params` will be set to the request parameters.
+     * @see Pagination
+     * @since 2.0.45
+     */
+    public $pagination = [];
+    /**
+     * @var array|Sort|false The sorting to be used by [[prepareDataProvider()]].
+     * If this is `false`, it means sorting is disabled.
+     * Note: if a Sort object is passed, it's `params` will be set to the request parameters.
+     * @see Sort
+     * @since 2.0.45
+     */
+    public $sort = [];
 
 
     /**
@@ -135,15 +154,39 @@ protected function prepareDataProvider()
             $query = call_user_func($this->prepareSearchQuery, $query, $requestParams);
         }
 
+        if (is_array($this->pagination)) {
+            $pagination = ArrayHelper::merge(
+                [
+                    'params' => $requestParams,
+                ],
+                $this->pagination
+            );
+        } else {
+            $pagination = $this->pagination;
+            if ($this->pagination instanceof Pagination) {
+                $pagination->params = $requestParams;
+            }
+        }
+
+        if (is_array($this->sort)) {
+            $sort = ArrayHelper::merge(
+                [
+                    'params' => $requestParams,
+                ],
+                $this->sort
+            );
+        } else {
+            $sort = $this->sort;
+            if ($this->sort instanceof Sort) {
+                $sort->params = $requestParams;
+            }
+        }
+
         return Yii::createObject([
             'class' => ActiveDataProvider::className(),
             'query' => $query,
-            'pagination' => [
-                'params' => $requestParams,
-            ],
-            'sort' => [
-                'params' => $requestParams,
-            ],
+            'pagination' => $pagination,
+            'sort' => $sort,
         ]);
     }
 }
diff --git a/src/rest/OptionsAction.php b/src/rest/OptionsAction.php
index 2200bee2640..35c5645a5a0 100644
--- a/src/rest/OptionsAction.php
+++ b/src/rest/OptionsAction.php
@@ -31,7 +31,7 @@ class OptionsAction extends \yii\base\Action
 
     /**
      * Responds to the OPTIONS request.
-     * @param string $id
+     * @param string|null $id
      */
     public function run($id = null)
     {
diff --git a/src/rest/Serializer.php b/src/rest/Serializer.php
index 2a47511e7f0..4f889613ed5 100644
--- a/src/rest/Serializer.php
+++ b/src/rest/Serializer.php
@@ -64,7 +64,7 @@ class Serializer extends Component
      */
     public $perPageHeader = 'X-Pagination-Per-Page';
     /**
-     * @var string the name of the envelope (e.g. `items`) for returning the resource objects in a collection.
+     * @var string|null the name of the envelope (e.g. `items`) for returning the resource objects in a collection.
      * This is used when serving a resource collection. When this is set and pagination is enabled, the serializer
      * will return a collection in the following format:
      *
@@ -102,11 +102,11 @@ class Serializer extends Component
      */
     public $metaEnvelope = '_meta';
     /**
-     * @var Request the current request. If not set, the `request` application component will be used.
+     * @var Request|null the current request. If not set, the `request` application component will be used.
      */
     public $request;
     /**
-     * @var Response the response to be sent. If not set, the `response` application component will be used.
+     * @var Response|null the response to be sent. If not set, the `response` application component will be used.
      */
     public $response;
     /**
diff --git a/src/rest/UrlRule.php b/src/rest/UrlRule.php
index d90ccf5372e..e1a0e2f87c1 100644
--- a/src/rest/UrlRule.php
+++ b/src/rest/UrlRule.php
@@ -62,7 +62,7 @@
 class UrlRule extends CompositeUrlRule
 {
     /**
-     * @var string the common prefix string shared by all patterns.
+     * @var string|null the common prefix string shared by all patterns.
      */
     public $prefix;
     /**
@@ -158,7 +158,7 @@ public function init()
         }
         $this->controller = $controllers;
 
-        $this->prefix = trim($this->prefix, '/');
+        $this->prefix = trim((string)$this->prefix, '/');
 
         parent::init();
     }
diff --git a/src/test/ActiveFixture.php b/src/test/ActiveFixture.php
index 7021fc9509f..9fd5ce02d6b 100644
--- a/src/test/ActiveFixture.php
+++ b/src/test/ActiveFixture.php
@@ -26,7 +26,7 @@
  * For more details and usage information on ActiveFixture, see the [guide article on fixtures](guide:test-fixtures).
  *
  * @property-read TableSchema $tableSchema The schema information of the database table associated with this
- * fixture. This property is read-only.
+ * fixture.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -34,13 +34,13 @@
 class ActiveFixture extends BaseActiveFixture
 {
     /**
-     * @var string the name of the database table that this fixture is about. If this property is not set,
+     * @var string|null the name of the database table that this fixture is about. If this property is not set,
      * the table name will be determined via [[modelClass]].
      * @see modelClass
      */
     public $tableName;
     /**
-     * @var string|bool the file path or [path alias](guide:concept-aliases) of the data file that contains the fixture data
+     * @var string|bool|null the file path or [path alias](guide:concept-aliases) of the data file that contains the fixture data
      * to be returned by [[getData()]]. If this is not set, it will default to `FixturePath/data/TableName.php`,
      * where `FixturePath` stands for the directory containing this fixture class, and `TableName` stands for the
      * name of the table associated with this fixture. You can set this property to be false to prevent loading any data.
diff --git a/src/test/BaseActiveFixture.php b/src/test/BaseActiveFixture.php
index 54c30c99384..8262946d5ee 100644
--- a/src/test/BaseActiveFixture.php
+++ b/src/test/BaseActiveFixture.php
@@ -42,7 +42,7 @@ abstract class BaseActiveFixture extends DbFixture implements \IteratorAggregate
      * Returns the AR model by the specified model name.
      * A model name is the key of the corresponding data row in [[data]].
      * @param string $name the model name.
-     * @return null|\yii\db\ActiveRecord the AR model, or null if the model cannot be found in the database
+     * @return \yii\db\ActiveRecord|null the AR model, or null if the model cannot be found in the database
      * @throws \yii\base\InvalidConfigException if [[modelClass]] is not set.
      */
     public function getModel($name)
diff --git a/src/test/FixtureTrait.php b/src/test/FixtureTrait.php
index 7a72610da55..7be29165617 100644
--- a/src/test/FixtureTrait.php
+++ b/src/test/FixtureTrait.php
@@ -79,7 +79,7 @@ public function globalFixtures()
     /**
      * Loads the specified fixtures.
      * This method will call [[Fixture::load()]] for every fixture object.
-     * @param Fixture[] $fixtures the fixtures to be loaded. If this parameter is not specified,
+     * @param Fixture[]|null $fixtures the fixtures to be loaded. If this parameter is not specified,
      * the return value of [[getFixtures()]] will be used.
      */
     public function loadFixtures($fixtures = null)
@@ -103,7 +103,7 @@ public function loadFixtures($fixtures = null)
     /**
      * Unloads the specified fixtures.
      * This method will call [[Fixture::unload()]] for every fixture object.
-     * @param Fixture[] $fixtures the fixtures to be loaded. If this parameter is not specified,
+     * @param Fixture[]|null $fixtures the fixtures to be loaded. If this parameter is not specified,
      * the return value of [[getFixtures()]] will be used.
      */
     public function unloadFixtures($fixtures = null)
@@ -151,7 +151,7 @@ public function getFixtures()
     /**
      * Returns the named fixture.
      * @param string $name the fixture name. This can be either the fixture alias name, or the class name if the alias is not used.
-     * @return Fixture the fixture object, or null if the named fixture does not exist.
+     * @return Fixture|null the fixture object, or null if the named fixture does not exist.
      */
     public function getFixture($name)
     {
diff --git a/src/validators/BooleanValidator.php b/src/validators/BooleanValidator.php
index ac8e334ea6a..aea5a11db49 100644
--- a/src/validators/BooleanValidator.php
+++ b/src/validators/BooleanValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use Yii;
+use yii\helpers\Json;
 
 /**
  * BooleanValidator checks if the attribute value is a boolean value.
@@ -76,7 +77,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.boolean(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ');';
+        return 'yii.validation.boolean(value, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
diff --git a/src/validators/CompareValidator.php b/src/validators/CompareValidator.php
index fbe4d2cbe2b..b94d498c6a1 100644
--- a/src/validators/CompareValidator.php
+++ b/src/validators/CompareValidator.php
@@ -10,6 +10,7 @@
 use Yii;
 use yii\base\InvalidConfigException;
 use yii\helpers\Html;
+use yii\helpers\Json;
 
 /**
  * CompareValidator compares the specified attribute value with another value.
@@ -234,7 +235,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.compare(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ', $form);';
+        return 'yii.validation.compare(value, messages, ' . Json::htmlEncode($options) . ', $form);';
     }
 
     /**
diff --git a/src/validators/DateValidator.php b/src/validators/DateValidator.php
index 7d920108ab7..3df5018b321 100644
--- a/src/validators/DateValidator.php
+++ b/src/validators/DateValidator.php
@@ -72,7 +72,7 @@ class DateValidator extends Validator
      */
     public $type = self::TYPE_DATE;
     /**
-     * @var string the date format that the value being validated should follow.
+     * @var string|null the date format that the value being validated should follow.
      * This can be a date time pattern as described in the [ICU manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
      *
      * Alternatively this can be a string prefixed with `php:` representing a format that can be recognized by the PHP Datetime class.
@@ -104,14 +104,14 @@ class DateValidator extends Validator
      */
     public $format;
     /**
-     * @var string the locale ID that is used to localize the date parsing.
+     * @var string|null the locale ID that is used to localize the date parsing.
      * This is only effective when the [PHP intl extension](https://www.php.net/manual/en/book.intl.php) is installed.
      * If not set, the locale of the [[\yii\base\Application::formatter|formatter]] will be used.
      * See also [[\yii\i18n\Formatter::locale]].
      */
     public $locale;
     /**
-     * @var string the timezone to use for parsing date and time values.
+     * @var string|null the timezone to use for parsing date and time values.
      * This can be any value that may be passed to [date_default_timezone_set()](https://www.php.net/manual/en/function.date-default-timezone-set.php)
      * e.g. `UTC`, `Europe/Berlin` or `America/Chicago`.
      * Refer to the [php manual](https://www.php.net/manual/en/timezones.php) for available timezones.
@@ -119,7 +119,7 @@ class DateValidator extends Validator
      */
     public $timeZone;
     /**
-     * @var string the name of the attribute to receive the parsing result.
+     * @var string|null the name of the attribute to receive the parsing result.
      * When this property is not null and the validation is successful, the named attribute will
      * receive the parsing result.
      *
@@ -137,7 +137,7 @@ class DateValidator extends Validator
      */
     public $timestampAttribute;
     /**
-     * @var string the format to use when populating the [[timestampAttribute]].
+     * @var string|null the format to use when populating the [[timestampAttribute]].
      * The format can be specified in the same way as for [[format]].
      *
      * If not set, [[timestampAttribute]] will receive a UNIX timestamp.
@@ -160,7 +160,7 @@ class DateValidator extends Validator
      */
     public $timestampAttributeTimeZone = 'UTC';
     /**
-     * @var int|string upper limit of the date. Defaults to null, meaning no upper limit.
+     * @var int|string|null upper limit of the date. Defaults to null, meaning no upper limit.
      * This can be a unix timestamp or a string representing a date time value.
      * If this property is a string, [[format]] will be used to parse it.
      * @see tooBig for the customized message used when the date is too big.
@@ -168,7 +168,7 @@ class DateValidator extends Validator
      */
     public $max;
     /**
-     * @var int|string lower limit of the date. Defaults to null, meaning no lower limit.
+     * @var int|string|null lower limit of the date. Defaults to null, meaning no lower limit.
      * This can be a unix timestamp or a string representing a date time value.
      * If this property is a string, [[format]] will be used to parse it.
      * @see tooSmall for the customized message used when the date is too small.
@@ -186,13 +186,13 @@ class DateValidator extends Validator
      */
     public $tooSmall;
     /**
-     * @var string user friendly value of upper limit to display in the error message.
+     * @var string|null user friendly value of upper limit to display in the error message.
      * If this property is null, the value of [[max]] will be used (before parsing).
      * @since 2.0.4
      */
     public $maxString;
     /**
-     * @var string user friendly value of lower limit to display in the error message.
+     * @var string|null user friendly value of lower limit to display in the error message.
      * If this property is null, the value of [[min]] will be used (before parsing).
      * @since 2.0.4
      */
diff --git a/src/validators/ExistValidator.php b/src/validators/ExistValidator.php
index 4b7d94f3861..55c86094b86 100644
--- a/src/validators/ExistValidator.php
+++ b/src/validators/ExistValidator.php
@@ -49,13 +49,13 @@
 class ExistValidator extends Validator
 {
     /**
-     * @var string the name of the ActiveRecord class that should be used to validate the existence
+     * @var string|null the name of the ActiveRecord class that should be used to validate the existence
      * of the current attribute value. If not set, it will use the ActiveRecord class of the attribute being validated.
      * @see targetAttribute
      */
     public $targetClass;
     /**
-     * @var string|array the name of the ActiveRecord attribute that should be used to
+     * @var string|array|null the name of the ActiveRecord attribute that should be used to
      * validate the existence of the current attribute value. If not set, it will use the name
      * of the attribute currently being validated. You may use an array to validate the existence
      * of multiple columns at the same time. The array key is the name of the attribute with the value to validate,
@@ -153,6 +153,14 @@ private function checkTargetRelationExistence($model, $attribute)
     private function checkTargetAttributeExistence($model, $attribute)
     {
         $targetAttribute = $this->targetAttribute === null ? $attribute : $this->targetAttribute;
+        if ($this->skipOnError) {
+            foreach ((array)$targetAttribute as $k => $v) {
+                if ($model->hasErrors(is_int($k) ? $v : $k)) {
+                    return;
+                }
+            }
+        }
+
         $params = $this->prepareConditions($targetAttribute, $model, $attribute);
         $conditions = [$this->targetAttributeJunction == 'or' ? 'or' : 'and'];
 
@@ -181,7 +189,7 @@ private function checkTargetAttributeExistence($model, $attribute)
      * Processes attributes' relations described in $targetAttribute parameter into conditions, compatible with
      * [[\yii\db\Query::where()|Query::where()]] key-value format.
      *
-     * @param $targetAttribute array|string $attribute the name of the ActiveRecord attribute that should be used to
+     * @param $targetAttribute array|string|null $attribute the name of the ActiveRecord attribute that should be used to
      * validate the existence of the current attribute value. If not set, it will use the name
      * of the attribute currently being validated. You may use an array to validate the existence
      * of multiple columns at the same time. The array key is the name of the attribute with the value to validate,
@@ -308,7 +316,7 @@ protected function createQuery($targetClass, $condition)
      * Returns conditions with alias.
      * @param ActiveQuery $query
      * @param array $conditions array of condition, keys to be modified
-     * @param null|string $alias set empty string for no apply alias. Set null for apply primary table alias
+     * @param string|null $alias set empty string for no apply alias. Set null for apply primary table alias
      * @return array
      */
     private function applyTableAlias($query, $conditions, $alias = null)
diff --git a/src/validators/FileValidator.php b/src/validators/FileValidator.php
index 7a7f5c5c42b..65f8897cadb 100644
--- a/src/validators/FileValidator.php
+++ b/src/validators/FileValidator.php
@@ -20,7 +20,7 @@
  *
  * Note that you should enable `fileinfo` PHP extension.
  *
- * @property-read int $sizeLimit The size limit for uploaded files. This property is read-only.
+ * @property-read int $sizeLimit The size limit for uploaded files.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -28,7 +28,7 @@
 class FileValidator extends Validator
 {
     /**
-     * @var array|string a list of file name extensions that are allowed to be uploaded.
+     * @var array|string|null a list of file name extensions that are allowed to be uploaded.
      * This can be either an array or a string consisting of file extension names
      * separated by space or comma (e.g. "gif, jpg").
      * Extension names are case-insensitive. Defaults to null, meaning all file name
@@ -42,7 +42,7 @@ class FileValidator extends Validator
      */
     public $checkExtensionByMimeType = true;
     /**
-     * @var array|string a list of file MIME types that are allowed to be uploaded.
+     * @var array|string|null a list of file MIME types that are allowed to be uploaded.
      * This can be either an array or a string consisting of file MIME types
      * separated by space or comma (e.g. "text/plain, image/png").
      * The mask with the special character `*` can be used to match groups of mime types.
@@ -52,13 +52,13 @@ class FileValidator extends Validator
      */
     public $mimeTypes;
     /**
-     * @var int the minimum number of bytes required for the uploaded file.
+     * @var int|null the minimum number of bytes required for the uploaded file.
      * Defaults to null, meaning no limit.
      * @see tooSmall for the customized message for a file that is too small.
      */
     public $minSize;
     /**
-     * @var int the maximum number of bytes required for the uploaded file.
+     * @var int|null the maximum number of bytes required for the uploaded file.
      * Defaults to null, meaning no limit.
      * Note, the size limit is also affected by `upload_max_filesize` and `post_max_size` INI setting
      * and the 'MAX_FILE_SIZE' hidden field value. See [[getSizeLimit()]] for details.
@@ -188,7 +188,7 @@ public function init()
             $this->tooSmall = Yii::t('yii', 'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.');
         }
         if (!is_array($this->extensions)) {
-            $this->extensions = preg_split('/[\s,]+/', strtolower($this->extensions), -1, PREG_SPLIT_NO_EMPTY);
+            $this->extensions = preg_split('/[\s,]+/', strtolower((string)$this->extensions), -1, PREG_SPLIT_NO_EMPTY);
         } else {
             $this->extensions = array_map('strtolower', $this->extensions);
         }
@@ -196,7 +196,7 @@ public function init()
             $this->wrongMimeType = Yii::t('yii', 'Only files with these MIME types are allowed: {mimeTypes}.');
         }
         if (!is_array($this->mimeTypes)) {
-            $this->mimeTypes = preg_split('/[\s,]+/', strtolower($this->mimeTypes), -1, PREG_SPLIT_NO_EMPTY);
+            $this->mimeTypes = preg_split('/[\s,]+/', strtolower((string)$this->mimeTypes), -1, PREG_SPLIT_NO_EMPTY);
         } else {
             $this->mimeTypes = array_map('strtolower', $this->mimeTypes);
         }
@@ -432,7 +432,7 @@ public function clientValidateAttribute($model, $attribute, $view)
     {
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
-        return 'yii.validation.file(attribute, messages, ' . Json::encode($options) . ');';
+        return 'yii.validation.file(attribute, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
@@ -530,6 +530,9 @@ private function buildMimeTypeRegexp($mask)
     protected function validateMimeType($file)
     {
         $fileMimeType = $this->getMimeTypeByFile($file->tempName);
+        if ($fileMimeType === null) {
+            return false;
+        }
 
         foreach ($this->mimeTypes as $mimeType) {
             if (strcasecmp($mimeType, $fileMimeType) === 0) {
@@ -548,11 +551,12 @@ protected function validateMimeType($file)
      * Get MIME type by file path
      *
      * @param string $filePath
-     * @return string
+     * @return string|null
      * @throws \yii\base\InvalidConfigException
      * @since 2.0.26
      */
-    protected function getMimeTypeByFile($filePath) {
+    protected function getMimeTypeByFile($filePath)
+    {
         return FileHelper::getMimeType($filePath);
     }
 }
diff --git a/src/validators/FilterValidator.php b/src/validators/FilterValidator.php
index 873e1b197e7..0a0ec5ba9a7 100644
--- a/src/validators/FilterValidator.php
+++ b/src/validators/FilterValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use yii\base\InvalidConfigException;
+use yii\helpers\Json;
 
 /**
  * FilterValidator converts the attribute value according to a filter.
@@ -25,6 +26,8 @@
  * ```
  *
  * Many PHP functions qualify this signature (e.g. `trim()`).
+ * If the callback function requires non-null argument (important since PHP 8.1)
+ * remember to set [[skipOnEmpty]] to `true` otherwise you may trigger an error.
  *
  * To specify the filter, set [[filter]] property to be the callback.
  *
@@ -91,7 +94,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'value = yii.validation.trim($form, attribute, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ', value);';
+        return 'value = yii.validation.trim($form, attribute, ' . Json::htmlEncode($options) . ', value);';
     }
 
     /**
diff --git a/src/validators/ImageValidator.php b/src/validators/ImageValidator.php
index 6edfb97dbb7..d7121f5b6ce 100644
--- a/src/validators/ImageValidator.php
+++ b/src/validators/ImageValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use Yii;
+use yii\helpers\Json;
 use yii\web\UploadedFile;
 
 /**
@@ -27,25 +28,25 @@ class ImageValidator extends FileValidator
      */
     public $notImage;
     /**
-     * @var int the minimum width in pixels.
+     * @var int|null the minimum width in pixels.
      * Defaults to null, meaning no limit.
      * @see underWidth for the customized message used when image width is too small.
      */
     public $minWidth;
     /**
-     * @var int the maximum width in pixels.
+     * @var int|null the maximum width in pixels.
      * Defaults to null, meaning no limit.
      * @see overWidth for the customized message used when image width is too big.
      */
     public $maxWidth;
     /**
-     * @var int the minimum height in pixels.
+     * @var int|null the minimum height in pixels.
      * Defaults to null, meaning no limit.
      * @see underHeight for the customized message used when image height is too small.
      */
     public $minHeight;
     /**
-     * @var int the maximum width in pixels.
+     * @var int|null the maximum width in pixels.
      * Defaults to null, meaning no limit.
      * @see overHeight for the customized message used when image height is too big.
      */
@@ -166,7 +167,7 @@ public function clientValidateAttribute($model, $attribute, $view)
     {
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
-        return 'yii.validation.image(attribute, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ', deferred);';
+        return 'yii.validation.image(attribute, messages, ' . Json::htmlEncode($options) . ', deferred);';
     }
 
     /**
diff --git a/src/validators/InlineValidator.php b/src/validators/InlineValidator.php
index a8dcd0040d4..86924826415 100644
--- a/src/validators/InlineValidator.php
+++ b/src/validators/InlineValidator.php
@@ -10,15 +10,6 @@
 /**
  * InlineValidator represents a validator which is defined as a method in the object being validated.
  *
- * The validation method must have the following signature:
- *
- * ```php
- * function foo($attribute, $params, $validator)
- * ```
- *
- * where `$attribute` refers to the name of the attribute being validated, while `$params` is an array representing the
- * additional parameters supplied in the validation rule. Parameter `$validator` refers to the related
- * [[InlineValidator]] object and is available since version 2.0.11.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -26,16 +17,18 @@
 class InlineValidator extends Validator
 {
     /**
-     * @var string|\Closure an anonymous function or the name of a model class method that will be
+     * @var string|callable an anonymous function or the name of a model class method that will be
      * called to perform the actual validation. The signature of the method should be like the following:
      *
      * ```php
-     * function foo($attribute, $params, $validator)
+     * function (string $attribute, mixed $params, InlineValidator $validator, mixed $current): bool {
+     * }
      * ```
      *
-     * - `$attribute` is the name of the attribute to be validated;
-     * - `$params` contains the value of [[params]] that you specify when declaring the inline validation rule;
-     * - `$validator` is a reference to related [[InlineValidator]] object. This parameter is available since version 2.0.11.
+     * - `$attribute` is the name of the attribute to be validated
+     * - `$params` contains the value of [[params]] that you specify when declaring the inline validation rule
+     * - `$validator` is a reference to related [[InlineValidator]] object. This parameter is available since version 2.0.11
+     * - `$current` is the attribute value. This parameter is available since version 2.0.36
      */
     public $method;
     /**
@@ -47,15 +40,16 @@ class InlineValidator extends Validator
      * The signature of the method should be like the following:
      *
      * ```php
-     * function foo($attribute, $params, $validator)
+     * function (string $attribute, mixed $params, InlineValidator $validator, mixed $current, View $view): string
      * {
-     *     return "javascript";
+     *     // $view->registerJs('JS validation function');
+     *     // or \app\assets\ValidationAsset::register($view);
+     *     return "calling JS validation function";
      * }
      * ```
      *
-     * where `$attribute` refers to the attribute name to be validated.
-     *
-     * Please refer to [[clientValidateAttribute()]] for details on how to return client validation code.
+     * Please refer to [[clientValidateAttribute()]] and [guide](guide:input-validation#client-side-validation) for details on how
+     * to return client validation code.
      */
     public $clientValidate;
     /**
@@ -100,7 +94,7 @@ public function clientValidateAttribute($model, $attribute, $view)
             if ($current === null) {
                 $current = $model->$attribute;
             }
-            return $method($attribute, $this->params, $this, $current);
+            return $method($attribute, $this->params, $this, $current, $view);
         }
 
         return null;
diff --git a/src/validators/IpValidator.php b/src/validators/IpValidator.php
index ea1e87718e3..02ac99eb0b7 100644
--- a/src/validators/IpValidator.php
+++ b/src/validators/IpValidator.php
@@ -86,7 +86,7 @@ class IpValidator extends Validator
      */
     public $ipv4 = true;
     /**
-     * @var bool whether the address can be an IP with CIDR subnet, like `192.168.10.0/24`.
+     * @var bool|null whether the address can be an IP with CIDR subnet, like `192.168.10.0/24`.
      * The following values are possible:
      *
      * - `false` - the address must not have a subnet (default).
@@ -163,7 +163,7 @@ class IpValidator extends Validator
      */
     public $wrongCidr;
     /**
-     * @var string user-defined error message is used when validation fails due to subnet [[subnet]] set to 'only',
+     * @var string|null user-defined error message is used when validation fails due to subnet [[subnet]] set to 'only',
      * but the CIDR prefix is not set.
      *
      * You may use the following placeholders in the message:
@@ -246,9 +246,7 @@ public function init()
      * - Recursively substitutes aliases (described in [[networks]]) with their values.
      * - Removes duplicates
      *
-     * @property array the IPv4 or IPv6 ranges that are allowed or forbidden.
-     * See [[setRanges()]] for detailed description.
-     * @param array|string $ranges the IPv4 or IPv6 ranges that are allowed or forbidden.
+     * @param array|string|null $ranges the IPv4 or IPv6 ranges that are allowed or forbidden.
      *
      * When the array is empty, or the option not set, all IP addresses are allowed.
      *
diff --git a/src/validators/NumberValidator.php b/src/validators/NumberValidator.php
index 56c9d1403e9..99972cefaa2 100644
--- a/src/validators/NumberValidator.php
+++ b/src/validators/NumberValidator.php
@@ -34,12 +34,12 @@ class NumberValidator extends Validator
      */
     public $integerOnly = false;
     /**
-     * @var int|float upper limit of the number. Defaults to null, meaning no upper limit.
+     * @var int|float|null upper limit of the number. Defaults to null, meaning no upper limit.
      * @see tooBig for the customized message used when the number is too big.
      */
     public $max;
     /**
-     * @var int|float lower limit of the number. Defaults to null, meaning no lower limit.
+     * @var int|float|null lower limit of the number. Defaults to null, meaning no lower limit.
      * @see tooSmall for the customized message used when the number is too small.
      */
     public $min;
diff --git a/src/validators/RangeValidator.php b/src/validators/RangeValidator.php
index bcde4a1309d..9d11fdc20ea 100644
--- a/src/validators/RangeValidator.php
+++ b/src/validators/RangeValidator.php
@@ -10,6 +10,7 @@
 use Yii;
 use yii\base\InvalidConfigException;
 use yii\helpers\ArrayHelper;
+use yii\helpers\Json;
 
 /**
  * RangeValidator validates that the attribute value is among a list of values.
@@ -111,7 +112,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.range(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ');';
+        return 'yii.validation.range(value, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
diff --git a/src/validators/RequiredValidator.php b/src/validators/RequiredValidator.php
index 646357ace35..03a7b1b4154 100644
--- a/src/validators/RequiredValidator.php
+++ b/src/validators/RequiredValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use Yii;
+use yii\helpers\Json;
 
 /**
  * RequiredValidator validates that the specified attribute does not have null or empty value.
@@ -93,7 +94,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.required(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ');';
+        return 'yii.validation.required(value, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
diff --git a/src/validators/StringValidator.php b/src/validators/StringValidator.php
index f06dbfc2208..4db6314e259 100644
--- a/src/validators/StringValidator.php
+++ b/src/validators/StringValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use Yii;
+use yii\helpers\Json;
 
 /**
  * StringValidator validates that the attribute value is of certain length.
@@ -34,12 +35,12 @@ class StringValidator extends Validator
      */
     public $length;
     /**
-     * @var int maximum length. If not set, it means no maximum length limit.
+     * @var int|null maximum length. If not set, it means no maximum length limit.
      * @see tooLong for the customized message for a too long string.
      */
     public $max;
     /**
-     * @var int minimum length. If not set, it means no minimum length limit.
+     * @var int|null minimum length. If not set, it means no minimum length limit.
      * @see tooShort for the customized message for a too short string.
      */
     public $min;
@@ -60,7 +61,7 @@ class StringValidator extends Validator
      */
     public $notEqual;
     /**
-     * @var string the encoding of the string value to be validated (e.g. 'UTF-8').
+     * @var string|null the encoding of the string value to be validated (e.g. 'UTF-8').
      * If this property is not set, [[\yii\base\Application::charset]] will be used.
      */
     public $encoding;
@@ -168,7 +169,7 @@ public function clientValidateAttribute($model, $attribute, $view)
         ValidationAsset::register($view);
         $options = $this->getClientOptions($model, $attribute);
 
-        return 'yii.validation.string(value, messages, ' . json_encode($options, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . ');';
+        return 'yii.validation.string(value, messages, ' . Json::htmlEncode($options) . ');';
     }
 
     /**
diff --git a/src/validators/TrimValidator.php b/src/validators/TrimValidator.php
new file mode 100644
index 00000000000..7426d195bd6
--- /dev/null
+++ b/src/validators/TrimValidator.php
@@ -0,0 +1,84 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yii\validators;
+
+use yii\helpers\Json;
+
+/**
+ * This class converts the attribute value(s) to string(s) and strip characters.
+ *
+ * @since 2.0.46
+ */
+class TrimValidator extends Validator
+{
+    /**
+     * @var string The list of characters to strip, with `..` can specify a range of characters.
+     * For example, set '\/ ' to normalize path or namespace.
+     */
+    public $chars;
+    /**
+     * @var bool Whether the filter should be skipped if an array input is given.
+     * If true and an array input is given, the filter will not be applied.
+     */
+    public $skipOnArray = false;
+    /**
+     * @inheritDoc
+     */
+    public $skipOnEmpty = false;
+
+    /**
+     * @inheritDoc
+     */
+    public function validateAttribute($model, $attribute)
+    {
+        $value = $model->$attribute;
+        if (!$this->skipOnArray || !is_array($value)) {
+            $model->$attribute = is_array($value)
+                ? array_map([$this, 'trimValue'], $value)
+                : $this->trimValue($value);
+        }
+    }
+
+    /**
+     * Converts given value to string and strips declared characters.
+     *
+     * @param mixed $value the value to strip
+     * @return string
+     */
+    protected function trimValue($value)
+    {
+        return $this->isEmpty($value) ? '' : trim((string) $value, $this->chars ?: " \n\r\t\v\x00");
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function clientValidateAttribute($model, $attribute, $view)
+    {
+        if ($this->skipOnArray && is_array($model->$attribute)) {
+            return null;
+        }
+
+        ValidationAsset::register($view);
+        $options = $this->getClientOptions($model, $attribute);
+
+        return 'value = yii.validation.trim($form, attribute, ' . Json::htmlEncode($options) . ', value);';
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function getClientOptions($model, $attribute)
+    {
+        return [
+            'skipOnArray' => (bool) $this->skipOnArray,
+            'skipOnEmpty' => (bool) $this->skipOnEmpty,
+            'chars' => $this->chars ?: false,
+        ];
+    }
+}
diff --git a/src/validators/UniqueValidator.php b/src/validators/UniqueValidator.php
index f383ec9afc3..1f82d44f52f 100644
--- a/src/validators/UniqueValidator.php
+++ b/src/validators/UniqueValidator.php
@@ -42,13 +42,13 @@
 class UniqueValidator extends Validator
 {
     /**
-     * @var string the name of the ActiveRecord class that should be used to validate the uniqueness
+     * @var string|null the name of the ActiveRecord class that should be used to validate the uniqueness
      * of the current attribute value. If not set, it will use the ActiveRecord class of the attribute being validated.
      * @see targetAttribute
      */
     public $targetClass;
     /**
-     * @var string|array the name of the [[\yii\db\ActiveRecord|ActiveRecord]] attribute that should be used to
+     * @var string|array|null the name of the [[\yii\db\ActiveRecord|ActiveRecord]] attribute that should be used to
      * validate the uniqueness of the current attribute value. If not set, it will use the name
      * of the attribute currently being validated. You may use an array to validate the uniqueness
      * of multiple columns at the same time. The array values are the attributes that will be
@@ -122,9 +122,15 @@ public function init()
      */
     public function validateAttribute($model, $attribute)
     {
-        /* @var $targetClass ActiveRecordInterface */
-        $targetClass = $this->getTargetClass($model);
         $targetAttribute = $this->targetAttribute === null ? $attribute : $this->targetAttribute;
+        if ($this->skipOnError) {
+            foreach ((array)$targetAttribute as $k => $v) {
+                if ($model->hasErrors(is_int($k) ? $v : $k)) {
+                    return;
+                }
+            }
+        }
+
         $rawConditions = $this->prepareConditions($targetAttribute, $model, $attribute);
         $conditions = [$this->targetAttributeJunction === 'or' ? 'or' : 'and'];
 
@@ -136,6 +142,8 @@ public function validateAttribute($model, $attribute)
             $conditions[] = [$key => $value];
         }
 
+        /* @var $targetClass ActiveRecordInterface */
+        $targetClass = $this->getTargetClass($model);
         $db = $targetClass::getDb();
 
         $modelExists = false;
@@ -309,7 +317,7 @@ private function addComboNotUniqueError($model, $attribute)
      * Returns conditions with alias.
      * @param ActiveQuery $query
      * @param array $conditions array of condition, keys to be modified
-     * @param null|string $alias set empty string for no apply alias. Set null for apply primary table alias
+     * @param string|null $alias set empty string for no apply alias. Set null for apply primary table alias
      * @return array
      */
     private function applyTableAlias($query, $conditions, $alias = null)
diff --git a/src/validators/UrlValidator.php b/src/validators/UrlValidator.php
index 812a218b506..b4fae1f7f8a 100644
--- a/src/validators/UrlValidator.php
+++ b/src/validators/UrlValidator.php
@@ -35,7 +35,7 @@ class UrlValidator extends Validator
      */
     public $validSchemes = ['http', 'https'];
     /**
-     * @var string the default URI scheme. If the input doesn't contain the scheme part, the default
+     * @var string|null the default URI scheme. If the input doesn't contain the scheme part, the default
      * scheme will be prepended to it (thus changing the input). Defaults to null, meaning a URL must
      * contain the scheme part.
      */
diff --git a/src/validators/Validator.php b/src/validators/Validator.php
index 5b808acd271..9e232ef8e9b 100644
--- a/src/validators/Validator.php
+++ b/src/validators/Validator.php
@@ -41,15 +41,15 @@
  * - `required`: [[RequiredValidator]]
  * - `safe`: [[SafeValidator]]
  * - `string`: [[StringValidator]]
- * - `trim`: [[FilterValidator]]
+ * - `trim`: [[TrimValidator]]
  * - `unique`: [[UniqueValidator]]
  * - `url`: [[UrlValidator]]
  * - `ip`: [[IpValidator]]
  *
  * For more details and usage information on Validator, see the [guide article on validators](guide:input-validation).
  *
- * @property-read array $attributeNames Attribute names. This property is read-only.
- * @property-read array $validationAttributes List of attribute names. This property is read-only.
+ * @property-read array $attributeNames Attribute names.
+ * @property-read array $validationAttributes List of attribute names.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -91,8 +91,7 @@ class Validator extends Component
         'safe' => 'yii\validators\SafeValidator',
         'string' => 'yii\validators\StringValidator',
         'trim' => [
-            'class' => 'yii\validators\FilterValidator',
-            'filter' => 'trim',
+            'class' => 'yii\validators\TrimValidator',
             'skipOnArray' => true,
         ],
         'unique' => 'yii\validators\UniqueValidator',
@@ -105,7 +104,7 @@ class Validator extends Component
      */
     public $attributes = [];
     /**
-     * @var string the user-defined error message. It may contain the following placeholders which
+     * @var string|null the user-defined error message. It may contain the following placeholders which
      * will be replaced accordingly by the validator:
      *
      * - `{attribute}`: the label of the attribute being validated
@@ -145,14 +144,14 @@ class Validator extends Component
      */
     public $enableClientValidation = true;
     /**
-     * @var callable a PHP callable that replaces the default implementation of [[isEmpty()]].
+     * @var callable|null a PHP callable that replaces the default implementation of [[isEmpty()]].
      * If not set, [[isEmpty()]] will be used to check if a value is empty. The signature
      * of the callable should be `function ($value)` which returns a boolean indicating
      * whether the value is empty.
      */
     public $isEmpty;
     /**
-     * @var callable a PHP callable whose return value determines whether this validator should be applied.
+     * @var callable|null a PHP callable whose return value determines whether this validator should be applied.
      * The signature of the callable should be `function ($model, $attribute)`, where `$model` and `$attribute`
      * refer to the model and the attribute currently being validated. The callable should return a boolean value.
      *
@@ -171,7 +170,7 @@ class Validator extends Component
      */
     public $when;
     /**
-     * @var string a JavaScript function name whose return value determines whether this validator should be applied
+     * @var string|null a JavaScript function name whose return value determines whether this validator should be applied
      * on the client-side. The signature of the function should be `function (attribute, value)`, where
      * `attribute` is an object describing the attribute being validated (see [[clientValidateAttribute()]])
      * and `value` the current value of the attribute.
@@ -272,7 +271,7 @@ public function validateAttributes($model, $attributes = null)
      * - If this is a string or an array, the intersection of [[getAttributeNames()]]
      *   and the specified attributes will be returned.
      *
-     * @return array list of attribute names.
+     * @return array|null list of attribute names.
      * @since 2.0.16
      */
     public function getValidationAttributes($attributes = null)
@@ -314,7 +313,7 @@ public function validateAttribute($model, $attribute)
      * Validates a given value.
      * You may use this method to validate a value out of the context of a data model.
      * @param mixed $value the data value to be validated.
-     * @param string $error the error message to be returned, if the validation fails.
+     * @param string|null $error the error message to be returned, if the validation fails.
      * @return bool whether the data is valid.
      */
     public function validate($value, &$error = null)
diff --git a/src/views/errorHandler/error.php b/src/views/errorHandler/error.php
index 9ef6dc7f13d..630bbec034f 100644
--- a/src/views/errorHandler/error.php
+++ b/src/views/errorHandler/error.php
@@ -1,5 +1,5 @@
 <?php
-/* @var $exception \yii\web\HttpException|\Exception */
+/* @var $exception \Throwable */
 /* @var $handler \yii\web\ErrorHandler */
 if ($exception instanceof \yii\web\HttpException) {
     $code = $exception->statusCode;
diff --git a/src/views/errorHandler/exception.php b/src/views/errorHandler/exception.php
index d097a1c92fd..4601e7c42bd 100644
--- a/src/views/errorHandler/exception.php
+++ b/src/views/errorHandler/exception.php
@@ -1,6 +1,6 @@
 <?php
 /* @var $this \yii\web\View */
-/* @var $exception \Exception */
+/* @var $exception \Throwable */
 /* @var $handler \yii\web\ErrorHandler */
 ?>
 <?php if (method_exists($this, 'beginPage')): ?>
diff --git a/src/views/messageConfig.php b/src/views/messageConfig.php
index 2495aed76ad..dc041d2a41a 100644
--- a/src/views/messageConfig.php
+++ b/src/views/messageConfig.php
@@ -5,12 +5,17 @@
     'sourcePath' => __DIR__ . DIRECTORY_SEPARATOR . '..',
     // array, required, list of language codes that the extracted messages
     // should be translated to. For example, ['zh-CN', 'de'].
-    'languages' => ['de'],
+    'languages' => [
+        'af', 'ar', 'az', 'be', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'el', 'es', 'et', 'fa', 'fi', 'fr', 'he', 'hi',
+        'pt-BR', 'ro', 'hr', 'hu', 'hy', 'id', 'it', 'ja', 'ka', 'kk', 'ko', 'kz', 'lt', 'lv', 'ms', 'nb-NO', 'nl',
+        'pl', 'pt', 'ru', 'sk', 'sl', 'sr', 'sr-Latn', 'sv', 'tg', 'th', 'tr', 'uk', 'uz', 'uz-Cy', 'vi', 'zh-CN',
+        'zh-TW'
+    ],
     // string, the name of the function for translating messages.
     // Defaults to 'Yii::t'. This is used as a mark to find the messages to be
     // translated. You may use a string for single function name or an array for
     // multiple function names.
-    'translator' => 'Yii::t',
+    'translator' => ['\Yii::t', 'Yii::t'],
     // boolean, whether to sort messages by keys when merging new messages
     // with the existing ones. Defaults to false, which means the new (untranslated)
     // messages will be separated from the old (translated) ones.
@@ -31,15 +36,14 @@
     // See helpers/FileHelper::findFiles() for pattern matching rules.
     // If a file/directory matches both a pattern in "only" and "except", it will NOT be processed.
     'except' => [
-        '.svn',
-        '.git',
-        '.gitignore',
-        '.gitkeep',
-        '.hgignore',
-        '.hgkeep',
+        '.*',
+        '/.*',
         '/messages',
+        '/tests',
+        '/runtime',
+        '/vendor',
+        '/BaseYii.php',
     ],
-
     // 'php' output format is for saving messages to php files.
     'format' => 'php',
     // Root directory containing message translations.
diff --git a/src/web/Application.php b/src/web/Application.php
index 6a052f19d3d..616bec622ba 100644
--- a/src/web/Application.php
+++ b/src/web/Application.php
@@ -16,13 +16,12 @@
  *
  * For more details and usage information on Application, see the [guide article on applications](guide:structure-applications).
  *
- * @property-read ErrorHandler $errorHandler The error handler application component. This property is
- * read-only.
+ * @property-read ErrorHandler $errorHandler The error handler application component.
  * @property string $homeUrl The homepage URL.
- * @property-read Request $request The request component. This property is read-only.
- * @property-read Response $response The response component. This property is read-only.
- * @property-read Session $session The session component. This property is read-only.
- * @property-read User $user The user component. This property is read-only.
+ * @property-read Request $request The request component.
+ * @property-read Response $response The response component.
+ * @property-read Session $session The session component.
+ * @property-read User $user The user component.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -34,7 +33,7 @@ class Application extends \yii\base\Application
      */
     public $defaultRoute = 'site';
     /**
-     * @var array the configuration specifying a controller action which should handle
+     * @var array|null the configuration specifying a controller action which should handle
      * all user requests. This is mainly used when the application is in maintenance mode
      * and needs to handle all incoming requests via a single action.
      * The configuration is an array whose first element specifies the route of the action.
diff --git a/src/web/AssetBundle.php b/src/web/AssetBundle.php
index aca626cd4d9..4f7f2904e98 100644
--- a/src/web/AssetBundle.php
+++ b/src/web/AssetBundle.php
@@ -30,7 +30,7 @@
 class AssetBundle extends BaseObject
 {
     /**
-     * @var string the directory that contains the source asset files for this asset bundle.
+     * @var string|null the directory that contains the source asset files for this asset bundle.
      * A source asset file is a file that is part of your source code repository of your Web application.
      *
      * You must set this property if the directory containing the source asset files is not Web accessible.
diff --git a/src/web/AssetConverter.php b/src/web/AssetConverter.php
index 0cfc0d86e52..c748018513a 100644
--- a/src/web/AssetConverter.php
+++ b/src/web/AssetConverter.php
@@ -12,7 +12,7 @@
 use yii\base\Exception;
 
 /**
- * AssetConverter supports conversion of several popular script formats into JS or CSS scripts.
+ * AssetConverter supports conversion of several popular formats into JS or CSS files.
  *
  * It is used by [[AssetManager]] to convert files after they have been published.
  *
@@ -25,6 +25,8 @@ class AssetConverter extends Component implements AssetConverterInterface
      * @var array the commands that are used to perform the asset conversion.
      * The keys are the asset file extension names, and the values are the corresponding
      * target script types (either "css" or "js") and the commands used for the conversion.
+     * 
+     * The command placeholders: `{from}` - source file, `{to}` - converted file.
      *
      * You may also use a [path alias](guide:concept-aliases) to specify the location of the command:
      *
@@ -33,11 +35,15 @@ class AssetConverter extends Component implements AssetConverterInterface
      *     'styl' => ['css', '@app/node_modules/bin/stylus < {from} > {to}'],
      * ]
      * ```
+     *
+     * Note: `Yii::getAlias()` can replace alias at the begin of the command only.
+     *
+     * @see https://sass-lang.com/documentation/cli/ SASS/SCSS
      */
     public $commands = [
         'less' => ['css', 'lessc {from} {to} --no-color --source-map'],
-        'scss' => ['css', 'sass {from} {to} --sourcemap'],
-        'sass' => ['css', 'sass {from} {to} --sourcemap'],
+        'scss' => ['css', 'sass --style=compressed {from} {to}'],
+        'sass' => ['css', 'sass --style=compressed {from} {to}'],
         'styl' => ['css', 'stylus < {from} > {to}'],
         'coffee' => ['js', 'coffee -p {from} > {to}'],
         'ts' => ['js', 'tsc --out {to} {from}'],
diff --git a/src/web/AssetManager.php b/src/web/AssetManager.php
index 2d28d9246ed..f4b41b3cf2c 100644
--- a/src/web/AssetManager.php
+++ b/src/web/AssetManager.php
@@ -42,7 +42,7 @@
 class AssetManager extends Component
 {
     /**
-     * @var array|bool list of asset bundle configurations. This property is provided to customize asset bundles.
+     * @var array|false list of asset bundle configurations. This property is provided to customize asset bundles.
      * When a bundle is being loaded by [[getBundle()]], if it has a corresponding configuration specified here,
      * the configuration will be applied to the bundle.
      *
@@ -74,7 +74,7 @@ class AssetManager extends Component
      */
     public $baseUrl = '@web/assets';
     /**
-     * @var array mapping from source asset files (keys) to target asset files (values).
+     * @var string[] mapping from source asset files (keys) to target asset files (values).
      *
      * This property is provided to support fixing incorrect asset file paths in some asset bundles.
      * When an asset bundle is registered with a view, each relative asset file in its [[AssetBundle::css|css]]
@@ -123,7 +123,7 @@ class AssetManager extends Component
      */
     public $linkAssets = false;
     /**
-     * @var int the permission to be set for newly published asset files.
+     * @var int|null the permission to be set for newly published asset files.
      * This value will be used by PHP chmod() function. No umask will be applied.
      * If not set, the permission will be determined by the current environment.
      */
@@ -136,7 +136,7 @@ class AssetManager extends Component
      */
     public $dirMode = 0775;
     /**
-     * @var callback a PHP callback that is called before copying each sub-directory or file.
+     * @var callable|null a PHP callback that is called before copying each sub-directory or file.
      * This option is used only when publishing a directory. If the callback returns false, the copy
      * operation for the sub-directory or file will be cancelled.
      *
@@ -147,7 +147,7 @@ class AssetManager extends Component
      */
     public $beforeCopy;
     /**
-     * @var callback a PHP callback that is called after a sub-directory or file is successfully copied.
+     * @var callable|null a PHP callback that is called after a sub-directory or file is successfully copied.
      * This option is used only when publishing a directory. The signature of the callback is the same as
      * for [[beforeCopy]].
      * This is passed as a parameter `afterCopy` to [[\yii\helpers\FileHelper::copyDirectory()]].
@@ -171,7 +171,7 @@ class AssetManager extends Component
      */
     public $appendTimestamp = false;
     /**
-     * @var callable a callback that will be called to produce hash for asset directory generation.
+     * @var callable|null a callback that will be called to produce hash for asset directory generation.
      * The signature of the callback should be as follows:
      *
      * ```
@@ -198,6 +198,9 @@ class AssetManager extends Component
      */
     public $hashCallback;
 
+    /**
+     * @var array
+     */
     private $_dummyBundles = [];
 
 
@@ -214,6 +217,9 @@ public function init()
         $this->baseUrl = rtrim(Yii::getAlias($this->baseUrl), '/');
     }
 
+    /**
+     * @var bool|null
+     */
     private $_isBasePathPermissionChecked;
 
     /**
@@ -354,7 +360,7 @@ public function getAssetPath($bundle, $asset)
     /**
      * @param AssetBundle $bundle
      * @param string $asset
-     * @return string|bool
+     * @return string|false
      */
     protected function resolveAsset($bundle, $asset)
     {
@@ -376,6 +382,9 @@ protected function resolveAsset($bundle, $asset)
         return false;
     }
 
+    /**
+     * @var AssetConverterInterface
+     */
     private $_converter;
 
     /**
diff --git a/src/web/BadRequestHttpException.php b/src/web/BadRequestHttpException.php
index 08f73826808..7b0c601b77c 100644
--- a/src/web/BadRequestHttpException.php
+++ b/src/web/BadRequestHttpException.php
@@ -23,11 +23,11 @@ class BadRequestHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(400, $message, $code, $previous);
     }
diff --git a/src/web/CacheSession.php b/src/web/CacheSession.php
index ecb14b782a1..1fc83c8570c 100644
--- a/src/web/CacheSession.php
+++ b/src/web/CacheSession.php
@@ -31,7 +31,7 @@
  * ]
  * ```
  *
- * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/CompositeUrlRule.php b/src/web/CompositeUrlRule.php
index 550a6d7e738..541e95daa4c 100644
--- a/src/web/CompositeUrlRule.php
+++ b/src/web/CompositeUrlRule.php
@@ -14,7 +14,7 @@
  * CompositeUrlRule is the base class for URL rule classes that consist of multiple simpler rules.
  *
  * @property-read null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call.
- * `null` if rule does not provide info about create status. This property is read-only.
+ * `null` if rule does not provide info about create status.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -130,7 +130,7 @@ protected function iterateRules($rules, $manager, $route, $params)
      * For multiple rules statuses will be combined by bitwise `or` operator
      * (e.g. `UrlRule::CREATE_STATUS_PARSING_ONLY | UrlRule::CREATE_STATUS_PARAMS_MISMATCH`).
      *
-     * @return null|int Status of the URL creation after the last [[createUrl()]] call. `null` if rule does not provide
+     * @return int|null Status of the URL creation after the last [[createUrl()]] call. `null` if rule does not provide
      * info about create status.
      * @see createStatus
      * @see https://www.php.net/manual/en/language.operators.bitwise.php
diff --git a/src/web/ConflictHttpException.php b/src/web/ConflictHttpException.php
index 2e5c99da140..d3fd07c8e71 100644
--- a/src/web/ConflictHttpException.php
+++ b/src/web/ConflictHttpException.php
@@ -18,11 +18,11 @@ class ConflictHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(409, $message, $code, $previous);
     }
diff --git a/src/web/Controller.php b/src/web/Controller.php
index 2913e1993e4..bce99aafb3e 100644
--- a/src/web/Controller.php
+++ b/src/web/Controller.php
@@ -290,7 +290,7 @@ public function goHome()
      *
      * For this function to work you have to [[User::setReturnUrl()|set the return URL]] in appropriate places before.
      *
-     * @param string|array $defaultUrl the default return URL in case it was not set previously.
+     * @param string|array|null $defaultUrl the default return URL in case it was not set previously.
      * If this is null and the return URL was not set previously, [[Application::homeUrl]] will be redirected to.
      * Please refer to [[User::setReturnUrl()]] on accepted format of the URL.
      * @return Response the current response object
diff --git a/src/web/CookieCollection.php b/src/web/CookieCollection.php
index aaedd9b8393..7ec65d68cb4 100644
--- a/src/web/CookieCollection.php
+++ b/src/web/CookieCollection.php
@@ -17,9 +17,8 @@
  *
  * For more details and usage information on CookieCollection, see the [guide article on handling cookies](guide:runtime-sessions-cookies).
  *
- * @property-read int $count The number of cookies in the collection. This property is read-only.
- * @property-read ArrayIterator $iterator An iterator for traversing the cookies in the collection. This
- * property is read-only.
+ * @property-read int $count The number of cookies in the collection.
+ * @property-read ArrayIterator $iterator An iterator for traversing the cookies in the collection.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -55,6 +54,7 @@ public function __construct($cookies = [], $config = [])
      * It will be implicitly called when you use `foreach` to traverse the collection.
      * @return ArrayIterator an iterator for traversing the cookies in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         return new ArrayIterator($this->_cookies);
@@ -66,6 +66,7 @@ public function getIterator()
      * It will be implicitly called when you use `count($collection)`.
      * @return int the number of cookies in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return $this->getCount();
@@ -105,7 +106,7 @@ public function getValue($name, $defaultValue = null)
 
     /**
      * Returns whether there is a cookie with the specified name.
-     * Note that if a cookie is marked for deletion from browser, this method will return false.
+     * Note that if a cookie is marked for deletion from browser or its value is an empty string, this method will return false.
      * @param string $name the cookie name
      * @return bool whether the named cookie exists
      * @see remove()
@@ -199,6 +200,7 @@ public function fromArray(array $array)
      * @param string $name the cookie name
      * @return bool whether the named cookie exists
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($name)
     {
         return $this->has($name);
@@ -210,8 +212,9 @@ public function offsetExists($name)
      * It is implicitly called when you use something like `$cookie = $collection[$name];`.
      * This is equivalent to [[get()]].
      * @param string $name the cookie name
-     * @return Cookie the cookie with the specified name, null if the named cookie does not exist.
+     * @return Cookie|null the cookie with the specified name, null if the named cookie does not exist.
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($name)
     {
         return $this->get($name);
@@ -225,6 +228,7 @@ public function offsetGet($name)
      * @param string $name the cookie name
      * @param Cookie $cookie the cookie to be added
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($name, $cookie)
     {
         $this->add($cookie);
@@ -237,6 +241,7 @@ public function offsetSet($name, $cookie)
      * This is equivalent to [[remove()]].
      * @param string $name the cookie name
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($name)
     {
         $this->remove($name);
diff --git a/src/web/DbSession.php b/src/web/DbSession.php
index d82484a4435..73a29bf3bd5 100644
--- a/src/web/DbSession.php
+++ b/src/web/DbSession.php
@@ -140,7 +140,7 @@ public function regenerateID($deleteOldSession = false)
                ->queryOne();
         });
 
-        if ($row !== false) {
+        if ($row !== false && $this->getIsActive()) {
             if ($deleteOldSession) {
                 $this->db->createCommand()
                     ->update($this->sessionTable, ['id' => $newID], ['id' => $oldID])
@@ -151,11 +151,6 @@ public function regenerateID($deleteOldSession = false)
                     ->insert($this->sessionTable, $row)
                     ->execute();
             }
-        } else {
-            // shouldn't reach here normally
-            $this->db->createCommand()
-                ->insert($this->sessionTable, $this->composeFields($newID, ''))
-                ->execute();
         }
     }
 
diff --git a/src/web/ErrorAction.php b/src/web/ErrorAction.php
index 67bd8a6d413..dde5611b5c3 100644
--- a/src/web/ErrorAction.php
+++ b/src/web/ErrorAction.php
@@ -51,7 +51,7 @@
 class ErrorAction extends Action
 {
     /**
-     * @var string the view file to be rendered. If not set, it will take the value of [[id]].
+     * @var string|null the view file to be rendered. If not set, it will take the value of [[id]].
      * That means, if you name the action as "error" in "SiteController", then the view name
      * would be "error", and the corresponding view file would be "views/site/error.php".
      */
@@ -67,7 +67,7 @@ class ErrorAction extends Action
      */
     public $defaultMessage;
     /**
-     * @var string|false|null the name of the layout to be applied to this error action view.
+     * @var string|null|false the name of the layout to be applied to this error action view.
      * If not set, the layout configured in the controller will be used.
      * @see \yii\base\Controller::$layout
      * @since 2.0.14
@@ -75,7 +75,7 @@ class ErrorAction extends Action
     public $layout;
 
     /**
-     * @var \Exception the exception object, normally is filled on [[init()]] method call.
+     * @var \Throwable the exception object, normally is filled on [[init()]] method call.
      * @see findException() to know default way of obtaining exception.
      * @since 2.0.11
      */
@@ -157,7 +157,7 @@ protected function getViewRenderParams()
      * Gets exception from the [[yii\web\ErrorHandler|ErrorHandler]] component.
      * In case there is no exception in the component, treat as the action has been invoked
      * not from error handler, but by direct route, so '404 Not Found' error will be displayed.
-     * @return \Exception
+     * @return \Throwable
      * @since 2.0.11
      */
     protected function findException()
diff --git a/src/web/ErrorHandler.php b/src/web/ErrorHandler.php
index 5bb28dec3ee..2600a8b51a0 100644
--- a/src/web/ErrorHandler.php
+++ b/src/web/ErrorHandler.php
@@ -39,7 +39,7 @@ class ErrorHandler extends \yii\base\ErrorHandler
      */
     public $maxTraceSourceLines = 13;
     /**
-     * @var string the route (e.g. `site/error`) to the controller action that will be used
+     * @var string|null the route (e.g. `site/error`) to the controller action that will be used
      * to display external errors. Inside the action, it can retrieve the error information
      * using `Yii::$app->errorHandler->exception`. This property defaults to null, meaning ErrorHandler
      * will handle the error display.
@@ -84,7 +84,7 @@ class ErrorHandler extends \yii\base\ErrorHandler
 
     /**
      * Renders the exception.
-     * @param \Exception|\Error $exception the exception to be rendered.
+     * @param \Throwable $exception the exception to be rendered.
      */
     protected function renderException($exception)
     {
@@ -138,7 +138,7 @@ protected function renderException($exception)
 
     /**
      * Converts an exception into an array.
-     * @param \Exception|\Error $exception the exception being converted
+     * @param \Throwable $exception the exception being converted
      * @return array the array representation of the exception.
      */
     protected function convertExceptionToArray($exception)
@@ -272,7 +272,7 @@ public function renderFile($_file_, $_params_)
 
     /**
      * Renders the previous exception stack for a given Exception.
-     * @param \Exception $exception the exception whose precursors should be rendered.
+     * @param \Throwable $exception the exception whose precursors should be rendered.
      * @return string HTML content of the rendered previous exceptions.
      * Empty string if there are none.
      */
@@ -326,7 +326,7 @@ public function renderCallStackItem($file, $line, $class, $method, $args, $index
 
     /**
      * Renders call stack.
-     * @param \Exception|\ParseError $exception exception to get call stack from
+     * @param \Throwable $exception exception to get call stack from
      * @return string HTML content of the rendered call stack.
      * @since 2.0.12
      */
@@ -482,7 +482,7 @@ public function argumentsToString($args)
 
     /**
      * Returns human-readable exception name.
-     * @param \Exception $exception
+     * @param \Throwable $exception
      * @return string|null human-readable exception name or null if it cannot be determined
      */
     public function getExceptionName($exception)
diff --git a/src/web/ForbiddenHttpException.php b/src/web/ForbiddenHttpException.php
index 51e0ff71aac..81e1cf02060 100644
--- a/src/web/ForbiddenHttpException.php
+++ b/src/web/ForbiddenHttpException.php
@@ -23,11 +23,11 @@ class ForbiddenHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(403, $message, $code, $previous);
     }
diff --git a/src/web/GoneHttpException.php b/src/web/GoneHttpException.php
index ad736ac50ea..a03a1bb0dcb 100644
--- a/src/web/GoneHttpException.php
+++ b/src/web/GoneHttpException.php
@@ -23,11 +23,11 @@ class GoneHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(410, $message, $code, $previous);
     }
diff --git a/src/web/GroupUrlRule.php b/src/web/GroupUrlRule.php
index 4ce3b19a141..e2f67da3120 100644
--- a/src/web/GroupUrlRule.php
+++ b/src/web/GroupUrlRule.php
@@ -60,7 +60,7 @@ class GroupUrlRule extends CompositeUrlRule
      */
     public $prefix;
     /**
-     * @var string the prefix for the route part of every rule declared in [[rules]].
+     * @var string|null the prefix for the route part of every rule declared in [[rules]].
      * The prefix and the route will be separated with a slash.
      * If this property is not set, it will take the value of [[prefix]].
      */
@@ -77,7 +77,7 @@ class GroupUrlRule extends CompositeUrlRule
      */
     public function init()
     {
-        $this->prefix = trim($this->prefix, '/');
+        $this->prefix = trim((string)$this->prefix, '/');
         $this->routePrefix = $this->routePrefix === null ? $this->prefix : trim($this->routePrefix, '/');
         parent::init();
     }
diff --git a/src/web/HeaderCollection.php b/src/web/HeaderCollection.php
index 0e03214511e..855d0240e3a 100644
--- a/src/web/HeaderCollection.php
+++ b/src/web/HeaderCollection.php
@@ -13,9 +13,8 @@
 /**
  * HeaderCollection is used by [[Response]] to maintain the currently registered HTTP headers.
  *
- * @property-read int $count The number of headers in the collection. This property is read-only.
- * @property-read \ArrayIterator $iterator An iterator for traversing the headers in the collection. This
- * property is read-only.
+ * @property-read int $count The number of headers in the collection.
+ * @property-read \ArrayIterator $iterator An iterator for traversing the headers in the collection.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -23,9 +22,13 @@
 class HeaderCollection extends BaseObject implements \IteratorAggregate, \ArrayAccess, \Countable
 {
     /**
-     * @var array the headers in this collection (indexed by the header names)
+     * @var array the headers in this collection (indexed by the normalized header names)
      */
     private $_headers = [];
+    /**
+     * @var array the original names of the headers (indexed by the normalized header names)
+     */
+    private $_originalHeaderNames = [];
 
 
     /**
@@ -34,6 +37,7 @@ class HeaderCollection extends BaseObject implements \IteratorAggregate, \ArrayA
      * It will be implicitly called when you use `foreach` to traverse the collection.
      * @return \ArrayIterator an iterator for traversing the headers in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         return new \ArrayIterator($this->_headers);
@@ -45,6 +49,7 @@ public function getIterator()
      * It will be implicitly called when you use `count($collection)`.
      * @return int the number of headers in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return $this->getCount();
@@ -54,6 +59,7 @@ public function count()
      * Returns the number of headers in the collection.
      * @return int the number of headers in the collection.
      */
+    #[\ReturnTypeWillChange]
     public function getCount()
     {
         return count($this->_headers);
@@ -65,14 +71,14 @@ public function getCount()
      * @param mixed $default the value to return in case the named header does not exist
      * @param bool $first whether to only return the first header of the specified name.
      * If false, all headers of the specified name will be returned.
-     * @return string|array the named header(s). If `$first` is true, a string will be returned;
+     * @return string|array|null the named header(s). If `$first` is true, a string will be returned;
      * If `$first` is false, an array will be returned.
      */
     public function get($name, $default = null, $first = true)
     {
-        $name = strtolower($name);
-        if (isset($this->_headers[$name])) {
-            return $first ? reset($this->_headers[$name]) : $this->_headers[$name];
+        $normalizedName = strtolower($name);
+        if (isset($this->_headers[$normalizedName])) {
+            return $first ? reset($this->_headers[$normalizedName]) : $this->_headers[$normalizedName];
         }
 
         return $default;
@@ -87,8 +93,9 @@ public function get($name, $default = null, $first = true)
      */
     public function set($name, $value = '')
     {
-        $name = strtolower($name);
-        $this->_headers[$name] = (array) $value;
+        $normalizedName = strtolower($name);
+        $this->_headers[$normalizedName] = (array) $value;
+        $this->_originalHeaderNames[$normalizedName] = $name;
 
         return $this;
     }
@@ -103,8 +110,11 @@ public function set($name, $value = '')
      */
     public function add($name, $value)
     {
-        $name = strtolower($name);
-        $this->_headers[$name][] = $value;
+        $normalizedName = strtolower($name);
+        $this->_headers[$normalizedName][] = $value;
+        if (!\array_key_exists($normalizedName, $this->_originalHeaderNames)) {
+            $this->_originalHeaderNames[$normalizedName] = $name;
+        }
 
         return $this;
     }
@@ -118,9 +128,10 @@ public function add($name, $value)
      */
     public function setDefault($name, $value)
     {
-        $name = strtolower($name);
-        if (empty($this->_headers[$name])) {
-            $this->_headers[$name][] = $value;
+        $normalizedName = strtolower($name);
+        if (empty($this->_headers[$normalizedName])) {
+            $this->_headers[$normalizedName][] = $value;
+            $this->_originalHeaderNames[$normalizedName] = $name;
         }
 
         return $this;
@@ -133,9 +144,7 @@ public function setDefault($name, $value)
      */
     public function has($name)
     {
-        $name = strtolower($name);
-
-        return isset($this->_headers[$name]);
+        return isset($this->_headers[strtolower($name)]);
     }
 
     /**
@@ -145,10 +154,10 @@ public function has($name)
      */
     public function remove($name)
     {
-        $name = strtolower($name);
-        if (isset($this->_headers[$name])) {
-            $value = $this->_headers[$name];
-            unset($this->_headers[$name]);
+        $normalizedName = strtolower($name);
+        if (isset($this->_headers[$normalizedName])) {
+            $value = $this->_headers[$normalizedName];
+            unset($this->_headers[$normalizedName], $this->_originalHeaderNames[$normalizedName]);
             return $value;
         }
 
@@ -161,6 +170,7 @@ public function remove($name)
     public function removeAll()
     {
         $this->_headers = [];
+        $this->_originalHeaderNames = [];
     }
 
     /**
@@ -173,6 +183,19 @@ public function toArray()
         return $this->_headers;
     }
 
+    /**
+     * Returns the collection as a PHP array but instead of using normalized header names as keys (like [[toArray()]])
+     * it uses original header names (case-sensitive).
+     * @return array the array representation of the collection.
+     * @since 2.0.45
+     */
+    public function toOriginalArray()
+    {
+        return \array_map(function ($normalizedName) {
+            return $this->_headers[$normalizedName];
+        }, \array_flip($this->_originalHeaderNames));
+    }
+
     /**
      * Populates the header collection from an array.
      * @param array $array the headers to populate from
@@ -180,7 +203,9 @@ public function toArray()
      */
     public function fromArray(array $array)
     {
-        $this->_headers = array_change_key_case($array, CASE_LOWER);
+        foreach ($array as $name => $value) {
+            $this->set($name, $value);
+        }
     }
 
     /**
@@ -190,6 +215,7 @@ public function fromArray(array $array)
      * @param string $name the header name
      * @return bool whether the named header exists
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($name)
     {
         return $this->has($name);
@@ -201,8 +227,9 @@ public function offsetExists($name)
      * It is implicitly called when you use something like `$header = $collection[$name];`.
      * This is equivalent to [[get()]].
      * @param string $name the header name
-     * @return string the header value with the specified name, null if the named header does not exist.
+     * @return string|null the header value with the specified name, null if the named header does not exist.
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($name)
     {
         return $this->get($name);
@@ -216,6 +243,7 @@ public function offsetGet($name)
      * @param string $name the header name
      * @param string $value the header value to be added
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($name, $value)
     {
         $this->set($name, $value);
@@ -228,6 +256,7 @@ public function offsetSet($name, $value)
      * This is equivalent to [[remove()]].
      * @param string $name the header name
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($name)
     {
         $this->remove($name);
diff --git a/src/web/HttpException.php b/src/web/HttpException.php
index f7f6ac5a1c3..15d75e8544f 100644
--- a/src/web/HttpException.php
+++ b/src/web/HttpException.php
@@ -38,14 +38,14 @@ class HttpException extends UserException
     /**
      * Constructor.
      * @param int $status HTTP status code, such as 404, 500, etc.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($status, $message = null, $code = 0, \Exception $previous = null)
+    public function __construct($status, $message = null, $code = 0, $previous = null)
     {
         $this->statusCode = $status;
-        parent::__construct($message, $code, $previous);
+        parent::__construct((string)$message, $code, $previous);
     }
 
     /**
diff --git a/src/web/JsonResponseFormatter.php b/src/web/JsonResponseFormatter.php
index 2218ca0d9ab..2e64740990a 100644
--- a/src/web/JsonResponseFormatter.php
+++ b/src/web/JsonResponseFormatter.php
@@ -82,7 +82,6 @@ class JsonResponseFormatter extends Component implements ResponseFormatterInterf
      * @since 2.0.7
      */
     public $prettyPrint = false;
-
     /**
      * @var bool Avoids objects with zero-indexed keys to be encoded as array
      * Json::encode((object)['test']) will be encoded as an object not array. This matches the behaviour of json_encode().
@@ -91,6 +90,7 @@ class JsonResponseFormatter extends Component implements ResponseFormatterInterf
      */
     public $keepObjectType;
 
+
     /**
      * Formats the specified response.
      * @param Response $response the response to be formatted.
diff --git a/src/web/MethodNotAllowedHttpException.php b/src/web/MethodNotAllowedHttpException.php
index 4241e7618db..832641e31f1 100644
--- a/src/web/MethodNotAllowedHttpException.php
+++ b/src/web/MethodNotAllowedHttpException.php
@@ -18,11 +18,11 @@ class MethodNotAllowedHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(405, $message, $code, $previous);
     }
diff --git a/src/web/MultiFieldSession.php b/src/web/MultiFieldSession.php
index 1b73e6d583e..9b9f9a0a881 100644
--- a/src/web/MultiFieldSession.php
+++ b/src/web/MultiFieldSession.php
@@ -22,7 +22,7 @@
  * While extending this class you should use [[composeFields()]] method - while writing the session data into the storage and
  * [[extractData()]] - while reading session data from the storage.
  *
- * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage.
  *
  * @author Paul Klimov <klimov.paul@gmail.com>
  * @since 2.0.6
@@ -89,8 +89,8 @@ public function getUseCustomStorage()
 
     /**
      * Composes storage field set for session writing.
-     * @param string $id Optional session id
-     * @param string $data Optional session data
+     * @param string|null $id Optional session id
+     * @param string|null $data Optional session data
      * @return array storage fields
      */
     protected function composeFields($id = null, $data = null)
diff --git a/src/web/NotAcceptableHttpException.php b/src/web/NotAcceptableHttpException.php
index 65abdc42e93..a986195d828 100644
--- a/src/web/NotAcceptableHttpException.php
+++ b/src/web/NotAcceptableHttpException.php
@@ -22,11 +22,11 @@ class NotAcceptableHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(406, $message, $code, $previous);
     }
diff --git a/src/web/NotFoundHttpException.php b/src/web/NotFoundHttpException.php
index 03ce0266c96..ef064bab128 100644
--- a/src/web/NotFoundHttpException.php
+++ b/src/web/NotFoundHttpException.php
@@ -18,11 +18,11 @@ class NotFoundHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(404, $message, $code, $previous);
     }
diff --git a/src/web/RangeNotSatisfiableHttpException.php b/src/web/RangeNotSatisfiableHttpException.php
index 18c1ebb5500..253d8e24074 100644
--- a/src/web/RangeNotSatisfiableHttpException.php
+++ b/src/web/RangeNotSatisfiableHttpException.php
@@ -24,11 +24,11 @@ class RangeNotSatisfiableHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(416, $message, $code, $previous);
     }
diff --git a/src/web/Request.php b/src/web/Request.php
index bcaeb03af51..ecbb0dd9e8a 100644
--- a/src/web/Request.php
+++ b/src/web/Request.php
@@ -23,7 +23,7 @@
  *
  * For more details and usage information on Request, see the [guide article on requests](guide:runtime-requests).
  *
- * @property-read string $absoluteUrl The currently requested absolute URL. This property is read-only.
+ * @property-read string $absoluteUrl The currently requested absolute URL.
  * @property array $acceptableContentTypes The content types ordered by the quality score. Types with the
  * highest scores will be returned first. The array keys are the content types, while the array values are the
  * corresponding quality score and other parameters as given in the header.
@@ -31,65 +31,59 @@
  * represents the most preferred language.
  * @property-read array $authCredentials That contains exactly two elements: - 0: the username sent via HTTP
  * authentication, `null` if the username is not given - 1: the password sent via HTTP authentication, `null` if
- * the password is not given. This property is read-only.
+ * the password is not given.
  * @property-read string|null $authPassword The password sent via HTTP authentication, `null` if the password
- * is not given. This property is read-only.
+ * is not given.
  * @property-read string|null $authUser The username sent via HTTP authentication, `null` if the username is
- * not given. This property is read-only.
+ * not given.
  * @property string $baseUrl The relative URL for the application.
- * @property array $bodyParams The request parameters given in the request body.
- * @property-read string $contentType Request content-type. Null is returned if this information is not
- * available. This property is read-only.
- * @property-read CookieCollection $cookies The cookie collection. This property is read-only.
- * @property-read string $csrfToken The token used to perform CSRF validation. This property is read-only.
+ * @property array|object $bodyParams The request parameters given in the request body. Note that the type of
+ * this property differs in getter and setter. See [[getBodyParams()]] and [[setBodyParams()]] for details.
+ * @property-read string $contentType Request content-type. Empty string is returned if this information is
+ * not available.
+ * @property-read CookieCollection $cookies The cookie collection.
+ * @property-read string $csrfToken The token used to perform CSRF validation.
  * @property-read string $csrfTokenFromHeader The CSRF token sent via [[CSRF_HEADER]] by browser. Null is
- * returned if no such header is sent. This property is read-only.
- * @property-read array $eTags The entity tags. This property is read-only.
- * @property-read HeaderCollection $headers The header collection. This property is read-only.
+ * returned if no such header is sent.
+ * @property-read array $eTags The entity tags.
+ * @property-read HeaderCollection $headers The header collection.
  * @property string|null $hostInfo Schema and hostname part (with port number if needed) of the request URL
  * (e.g. `http://www.yiiframework.com`), null if can't be obtained from `$_SERVER` and wasn't set. See
  * [[getHostInfo()]] for security related notes on this property.
- * @property-read string|null $hostName Hostname part of the request URL (e.g. `www.yiiframework.com`). This
- * property is read-only.
- * @property-read bool $isAjax Whether this is an AJAX (XMLHttpRequest) request. This property is read-only.
- * @property-read bool $isDelete Whether this is a DELETE request. This property is read-only.
- * @property-read bool $isFlash Whether this is an Adobe Flash or Adobe Flex request. This property is
- * read-only.
- * @property-read bool $isGet Whether this is a GET request. This property is read-only.
- * @property-read bool $isHead Whether this is a HEAD request. This property is read-only.
- * @property-read bool $isOptions Whether this is a OPTIONS request. This property is read-only.
- * @property-read bool $isPatch Whether this is a PATCH request. This property is read-only.
- * @property-read bool $isPjax Whether this is a PJAX request. This property is read-only.
- * @property-read bool $isPost Whether this is a POST request. This property is read-only.
- * @property-read bool $isPut Whether this is a PUT request. This property is read-only.
- * @property-read bool $isSecureConnection If the request is sent via secure channel (https). This property is
- * read-only.
+ * @property-read string|null $hostName Hostname part of the request URL (e.g. `www.yiiframework.com`).
+ * @property-read bool $isAjax Whether this is an AJAX (XMLHttpRequest) request.
+ * @property-read bool $isDelete Whether this is a DELETE request.
+ * @property-read bool $isFlash Whether this is an Adobe Flash or Adobe Flex request.
+ * @property-read bool $isGet Whether this is a GET request.
+ * @property-read bool $isHead Whether this is a HEAD request.
+ * @property-read bool $isOptions Whether this is a OPTIONS request.
+ * @property-read bool $isPatch Whether this is a PATCH request.
+ * @property-read bool $isPjax Whether this is a PJAX request.
+ * @property-read bool $isPost Whether this is a POST request.
+ * @property-read bool $isPut Whether this is a PUT request.
+ * @property-read bool $isSecureConnection If the request is sent via secure channel (https).
  * @property-read string $method Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The value
- * returned is turned into upper case. This property is read-only.
- * @property-read string|null $origin URL origin of a CORS request, `null` if not available. This property is
- * read-only.
+ * returned is turned into upper case.
+ * @property-read string|null $origin URL origin of a CORS request, `null` if not available.
  * @property string $pathInfo Part of the request URL that is after the entry script and before the question
  * mark. Note, the returned path info is already URL-decoded.
  * @property int $port Port number for insecure requests.
  * @property array $queryParams The request GET parameter values.
- * @property-read string $queryString Part of the request URL that is after the question mark. This property
- * is read-only.
+ * @property-read string $queryString Part of the request URL that is after the question mark.
  * @property string $rawBody The request body.
- * @property-read string|null $referrer URL referrer, null if not available. This property is read-only.
- * @property-read string|null $remoteHost Remote host name, `null` if not available. This property is
- * read-only.
- * @property-read string|null $remoteIP Remote IP address, `null` if not available. This property is
- * read-only.
+ * @property-read string|null $referrer URL referrer, null if not available.
+ * @property-read string|null $remoteHost Remote host name, `null` if not available.
+ * @property-read string|null $remoteIP Remote IP address, `null` if not available.
  * @property string $scriptFile The entry script file path.
  * @property string $scriptUrl The relative URL of the entry script.
  * @property int $securePort Port number for secure requests.
- * @property-read string $serverName Server name, null if not available. This property is read-only.
- * @property-read int|null $serverPort Server port number, null if not available. This property is read-only.
+ * @property-read string $serverName Server name, null if not available.
+ * @property-read int|null $serverPort Server port number, null if not available.
  * @property string $url The currently requested relative URL. Note that the URI returned may be URL-encoded
  * depending on the client.
- * @property-read string|null $userAgent User agent, null if not available. This property is read-only.
- * @property-read string|null $userHost User host name, null if not available. This property is read-only.
- * @property-read string|null $userIP User IP address, null if not available. This property is read-only.
+ * @property-read string|null $userAgent User agent, null if not available.
+ * @property-read string|null $userHost User host name, null if not available.
+ * @property-read string|null $userIP User IP address, null if not available.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -227,6 +221,7 @@ class Request extends \yii\base\Request
         'X-Forwarded-For',
         'X-Forwarded-Host',
         'X-Forwarded-Proto',
+        'X-Forwarded-Port',
 
         // Microsoft:
         'Front-End-Https',
@@ -247,6 +242,18 @@ class Request extends \yii\base\Request
     public $ipHeaders = [
         'X-Forwarded-For', // Common
     ];
+    /**
+     * @var string[] List of headers where proxies store the real request port.
+     * It's not advisable to put insecure headers here.
+     * To use the `Forwarded Port`, the header must be added to [[secureHeaders]] list.
+     * The match of header names is case-insensitive.
+     * @see trustedHosts
+     * @see secureHeaders
+     * @since 2.0.46
+     */
+    public $portHeaders = [
+        'X-Forwarded-Port', // Common
+    ];
     /**
      * @var array list of headers to check for determining whether the connection is made via HTTPS.
      * The array keys are header names and the array value is a list of header values that indicate a secure connection.
@@ -570,7 +577,7 @@ public function getBodyParams()
             }
 
             $rawContentType = $this->getContentType();
-            if (($pos = strpos($rawContentType, ';')) !== false) {
+            if (($pos = strpos((string)$rawContentType, ';')) !== false) {
                 // e.g. text/html; charset=UTF-8
                 $contentType = substr($rawContentType, 0, $pos);
             } else {
@@ -603,8 +610,8 @@ public function getBodyParams()
 
     /**
      * Sets the request body parameters.
-     * @param array $values the request body parameters (name-value pairs)
-     * @see getBodyParam()
+     *
+     * @param array|object $values the request body parameters (name-value pairs)
      * @see getBodyParams()
      */
     public function setBodyParams($values)
@@ -614,7 +621,9 @@ public function setBodyParams($values)
 
     /**
      * Returns the named request body parameter value.
+     *
      * If the parameter does not exist, the second parameter passed to this method will be returned.
+     *
      * @param string $name the parameter name
      * @param mixed $defaultValue the default parameter value if the parameter does not exist.
      * @return mixed the parameter value
@@ -628,7 +637,7 @@ public function getBodyParam($name, $defaultValue = null)
         if (is_object($params)) {
             // unable to use `ArrayHelper::getValue()` due to different dots in key logic and lack of exception handling
             try {
-                return $params->{$name};
+                return isset($params->{$name}) ? $params->{$name} : $defaultValue;
             } catch (\Exception $e) {
                 return $defaultValue;
             }
@@ -796,7 +805,7 @@ public function setHostInfo($value)
     public function getHostName()
     {
         if ($this->_hostName === null) {
-            $this->_hostName = parse_url($this->getHostInfo(), PHP_URL_HOST);
+            $this->_hostName = parse_url((string)$this->getHostInfo(), PHP_URL_HOST);
         }
 
         return $this->_hostName;
@@ -1114,7 +1123,7 @@ public function getIsSecureConnection()
 
     /**
      * Returns the server name.
-     * @return string server name, null if not available
+     * @return string|null server name, null if not available
      */
     public function getServerName()
     {
@@ -1122,11 +1131,23 @@ public function getServerName()
     }
 
     /**
-     * Returns the server port number.
+     * Returns the server port number. If a port is specified via a forwarding header (e.g. 'X-Forwarded-Port')
+     * and the remote host is a "trusted host" the that port will be used (see [[portHeaders]]),
+     * otherwise the default server port will be returned.
      * @return int|null server port number, null if not available
+     * @see portHeaders
      */
     public function getServerPort()
     {
+        foreach ($this->portHeaders as $portHeader) {
+            if ($this->headers->has($portHeader)) {
+                $port = $this->headers->get($portHeader);
+                if ($port !== null) {
+                    return $port;
+                }
+            }
+        }
+
         return isset($_SERVER['SERVER_PORT']) ? (int) $_SERVER['SERVER_PORT'] : null;
     }
 
@@ -1473,7 +1494,7 @@ public function setAcceptableContentTypes($value)
      * contained in [[getRawBody()]] or, in the case of the HEAD method, the
      * media type that would have been sent had the request been a GET.
      * For the MIME-types the user expects in response, see [[acceptableContentTypes]].
-     * @return string request content-type. Null is returned if this information is not available.
+     * @return string request content-type. Empty string is returned if this information is not available.
      * @link https://tools.ietf.org/html/rfc2616#section-14.17
      * HTTP 1.1 header field definitions
      */
@@ -1484,7 +1505,7 @@ public function getContentType()
         }
 
         //fix bug https://bugs.php.net/bug.php?id=66606
-        return $this->headers->get('Content-Type');
+        return $this->headers->get('Content-Type') ?: '';
     }
 
     private $_languages;
@@ -1756,7 +1777,7 @@ public function getCsrfToken($regenerate = false)
 
     /**
      * Loads the CSRF token from cookie or session.
-     * @return string the CSRF token loaded from cookie or session. Null is returned if the cookie or session
+     * @return string|null the CSRF token loaded from cookie or session. Null is returned if the cookie or session
      * does not have CSRF token.
      */
     protected function loadCsrfToken()
@@ -1786,7 +1807,7 @@ protected function generateCsrfToken()
     }
 
     /**
-     * @return string the CSRF token sent via [[CSRF_HEADER]] by browser. Null is returned if no such header is sent.
+     * @return string|null the CSRF token sent via [[CSRF_HEADER]] by browser. Null is returned if no such header is sent.
      */
     public function getCsrfTokenFromHeader()
     {
@@ -1819,7 +1840,7 @@ protected function createCsrfCookie($token)
      * Note that the method will NOT perform CSRF validation if [[enableCsrfValidation]] is false or the HTTP method
      * is among GET, HEAD or OPTIONS.
      *
-     * @param string $clientSuppliedToken the user-provided CSRF token to be validated. If null, the token will be retrieved from
+     * @param string|null $clientSuppliedToken the user-provided CSRF token to be validated. If null, the token will be retrieved from
      * the [[csrfParam]] POST field or HTTP header.
      * This parameter is available since version 2.0.4.
      * @return bool whether CSRF token is valid. If [[enableCsrfValidation]] is false, this method will return true.
diff --git a/src/web/Response.php b/src/web/Response.php
index a08f764df1f..d2c64be8607 100644
--- a/src/web/Response.php
+++ b/src/web/Response.php
@@ -37,27 +37,22 @@
  *
  * For more details and usage information on Response, see the [guide article on responses](guide:runtime-responses).
  *
- * @property-read CookieCollection $cookies The cookie collection. This property is read-only.
- * @property-write string $downloadHeaders The attachment file name. This property is write-only.
- * @property-read HeaderCollection $headers The header collection. This property is read-only.
- * @property-read bool $isClientError Whether this response indicates a client error. This property is
- * read-only.
- * @property-read bool $isEmpty Whether this response is empty. This property is read-only.
- * @property-read bool $isForbidden Whether this response indicates the current request is forbidden. This
- * property is read-only.
- * @property-read bool $isInformational Whether this response is informational. This property is read-only.
- * @property-read bool $isInvalid Whether this response has a valid [[statusCode]]. This property is
- * read-only.
+ * @property-read CookieCollection $cookies The cookie collection.
+ * @property-write string $downloadHeaders The attachment file name.
+ * @property-read HeaderCollection $headers The header collection.
+ * @property-read bool $isClientError Whether this response indicates a client error.
+ * @property-read bool $isEmpty Whether this response is empty.
+ * @property-read bool $isForbidden Whether this response indicates the current request is forbidden.
+ * @property-read bool $isInformational Whether this response is informational.
+ * @property-read bool $isInvalid Whether this response has a valid [[statusCode]].
  * @property-read bool $isNotFound Whether this response indicates the currently requested resource is not
- * found. This property is read-only.
- * @property-read bool $isOk Whether this response is OK. This property is read-only.
- * @property-read bool $isRedirection Whether this response is a redirection. This property is read-only.
- * @property-read bool $isServerError Whether this response indicates a server error. This property is
- * read-only.
- * @property-read bool $isSuccessful Whether this response is successful. This property is read-only.
+ * found.
+ * @property-read bool $isOk Whether this response is OK.
+ * @property-read bool $isRedirection Whether this response is a redirection.
+ * @property-read bool $isServerError Whether this response indicates a server error.
+ * @property-read bool $isSuccessful Whether this response is successful.
  * @property int $statusCode The HTTP status code to send with the response.
- * @property-write \Exception|\Error|\Throwable $statusCodeByException The exception object. This property is
- * write-only.
+ * @property-write \Throwable $statusCodeByException The exception object.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
@@ -132,7 +127,7 @@ class Response extends \yii\base\Response
      */
     public $data;
     /**
-     * @var string the response content. When [[data]] is not null, it will be converted into [[content]]
+     * @var string|null the response content. When [[data]] is not null, it will be converted into [[content]]
      * according to [[format]] when the response is being sent out.
      * @see data
      */
@@ -147,7 +142,7 @@ class Response extends \yii\base\Response
      */
     public $stream;
     /**
-     * @var string the charset of the text response. If not set, it will use
+     * @var string|null the charset of the text response. If not set, it will use
      * the value of [[Application::charset]].
      */
     public $charset;
@@ -157,7 +152,7 @@ class Response extends \yii\base\Response
      */
     public $statusText = 'OK';
     /**
-     * @var string the version of the HTTP protocol to use. If not set, it will be determined via `$_SERVER['SERVER_PROTOCOL']`,
+     * @var string|null the version of the HTTP protocol to use. If not set, it will be determined via `$_SERVER['SERVER_PROTOCOL']`,
      * or '1.1' if that is not available.
      */
     public $version;
@@ -278,7 +273,7 @@ public function getStatusCode()
      * Sets the response status code.
      * This method will set the corresponding status text if `$text` is null.
      * @param int $value the status code
-     * @param string $text the status text. If not set, it will be set automatically based on the status code.
+     * @param string|null $text the status text. If not set, it will be set automatically based on the status code.
      * @throws InvalidArgumentException if the status code is invalid.
      * @return $this the response object itself
      */
@@ -302,7 +297,7 @@ public function setStatusCode($value, $text = null)
 
     /**
      * Sets the response status code based on the exception.
-     * @param \Exception|\Error|\Throwable $e the exception object.
+     * @param \Throwable $e the exception object.
      * @throws InvalidArgumentException if the status code is invalid.
      * @return $this the response object itself
      * @since 2.0.12
@@ -504,7 +499,7 @@ protected function sendContent()
      * ```
      *
      * @param string $filePath the path of the file to be sent.
-     * @param string $attachmentName the file name shown to the user. If null, it will be determined from `$filePath`.
+     * @param string|null $attachmentName the file name shown to the user. If null, it will be determined from `$filePath`.
      * @param array $options additional options for sending the file. The following options are supported:
      *
      *  - `mimeType`: the MIME type of the content. If not set, it will be guessed based on `$filePath`
@@ -639,10 +634,10 @@ public function sendStreamAsFile($handle, $attachmentName, $options = [])
     /**
      * Sets a default set of HTTP headers for file downloading purpose.
      * @param string $attachmentName the attachment file name
-     * @param string $mimeType the MIME type for the response. If null, `Content-Type` header will NOT be set.
+     * @param string|null $mimeType the MIME type for the response. If null, `Content-Type` header will NOT be set.
      * @param bool $inline whether the browser should open the file within the browser window. Defaults to false,
      * meaning a download dialog will pop up.
-     * @param int $contentLength the byte length of the file being downloaded. If null, `Content-Length` header will NOT be set.
+     * @param int|null $contentLength the byte length of the file being downloaded. If null, `Content-Length` header will NOT be set.
      * @return $this the response object itself
      */
     public function setDownloadHeaders($attachmentName, $mimeType = null, $inline = false, $contentLength = null)
@@ -748,7 +743,7 @@ protected function getHttpRange($fileSize)
      * ```
      *
      * @param string $filePath file name with full path
-     * @param string $attachmentName file name shown to the user. If null, it will be determined from `$filePath`.
+     * @param string|null $attachmentName file name shown to the user. If null, it will be determined from `$filePath`.
      * @param array $options additional options for sending the file. The following options are supported:
      *
      *  - `mimeType`: the MIME type of the content. If not set, it will be guessed based on `$filePath`
@@ -890,26 +885,29 @@ public function redirect($url, $statusCode = 302, $checkAjax = true)
             $url[0] = '/' . ltrim($url[0], '/');
         }
         $request = Yii::$app->getRequest();
-        $url = Url::to($url);
-        if (strncmp($url, '/', 1) === 0 && strncmp($url, '//', 2) !== 0) {
-            $url = $request->getHostInfo() . $url;
+        $normalizedUrl = Url::to($url);
+        if (
+            $normalizedUrl !== null
+            && strncmp($normalizedUrl, '/', 1) === 0
+            && strncmp($normalizedUrl, '//', 2) !== 0
+        ) {
+            $normalizedUrl = $request->getHostInfo() . $normalizedUrl;
         }
 
-        if ($checkAjax) {
-            if ($request->getIsAjax()) {
-                if (in_array($statusCode, [301, 302]) && preg_match('/Trident\/|MSIE[ ]/', $request->userAgent)) {
-                    $statusCode = 200;
-                }
-                if ($request->getIsPjax()) {
-                    $this->getHeaders()->set('X-Pjax-Url', $url);
-                } else {
-                    $this->getHeaders()->set('X-Redirect', $url);
-                }
+        if ($checkAjax && $request->getIsAjax()) {
+            if (
+                in_array($statusCode, [301, 302])
+                && preg_match('/Trident\/|MSIE[ ]/', (string)$request->userAgent)
+            ) {
+                $statusCode = 200;
+            }
+            if ($request->getIsPjax()) {
+                $this->getHeaders()->set('X-Pjax-Url', $normalizedUrl);
             } else {
-                $this->getHeaders()->set('Location', $url);
+                $this->getHeaders()->set('X-Redirect', $normalizedUrl);
             }
         } else {
-            $this->getHeaders()->set('Location', $url);
+            $this->getHeaders()->set('Location', $normalizedUrl);
         }
 
         $this->setStatusCode($statusCode);
diff --git a/src/web/ServerErrorHttpException.php b/src/web/ServerErrorHttpException.php
index 42e69c498bd..c9a6578b1eb 100644
--- a/src/web/ServerErrorHttpException.php
+++ b/src/web/ServerErrorHttpException.php
@@ -18,11 +18,11 @@ class ServerErrorHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(500, $message, $code, $previous);
     }
diff --git a/src/web/Session.php b/src/web/Session.php
index 5ac99277f50..118a7e823b1 100644
--- a/src/web/Session.php
+++ b/src/web/Session.php
@@ -45,28 +45,26 @@
  *
  * For more details and usage information on Session, see the [guide article on sessions](guide:runtime-sessions-cookies).
  *
- * @property-read array $allFlashes Flash messages (key => message or key => [message1, message2]). This
- * property is read-only.
- * @property-read string $cacheLimiter Current cache limiter. This property is read-only.
- * @property-read array $cookieParams The session cookie parameters. This property is read-only.
- * @property-read int $count The number of session variables. This property is read-only.
+ * @property-read array $allFlashes Flash messages (key => message or key => [message1, message2]).
+ * @property-read string $cacheLimiter Current cache limiter.
+ * @property-read array $cookieParams The session cookie parameters.
+ * @property-read int $count The number of session variables.
  * @property-write string $flash The key identifying the flash message. Note that flash messages and normal
  * session variables share the same name space. If you have a normal session variable using the same name, its
- * value will be overwritten by this method. This property is write-only.
+ * value will be overwritten by this method.
  * @property float $gCProbability The probability (percentage) that the GC (garbage collection) process is
  * started on every session initialization.
  * @property bool $hasSessionId Whether the current request has sent the session ID.
  * @property string $id The current session ID.
- * @property-read bool $isActive Whether the session has started. This property is read-only.
- * @property-read SessionIterator $iterator An iterator for traversing the session variables. This property is
- * read-only.
+ * @property-read bool $isActive Whether the session has started.
+ * @property-read SessionIterator $iterator An iterator for traversing the session variables.
  * @property string $name The current session name.
  * @property string $savePath The current session save path, defaults to '/tmp'.
  * @property int $timeout The number of seconds after which data will be seen as 'garbage' and cleaned up. The
  * default value is 1440 seconds (or the value of "session.gc_maxlifetime" set in php.ini).
  * @property bool|null $useCookies The value indicating whether cookies should be used to store session IDs.
- * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
- * @property-read bool $useStrictMode Whether strict mode is enabled or not. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage.
+ * @property bool $useStrictMode Whether strict mode is enabled or not.
  * @property bool $useTransparentSessionID Whether transparent sid support is enabled or not, defaults to
  * false.
  *
@@ -662,6 +660,7 @@ public function gcSession($maxLifetime)
      * This method is required by the interface [[\IteratorAggregate]].
      * @return SessionIterator an iterator for traversing the session variables.
      */
+    #[\ReturnTypeWillChange]
     public function getIterator()
     {
         $this->open();
@@ -683,6 +682,7 @@ public function getCount()
      * This method is required by [[\Countable]] interface.
      * @return int number of items in the session.
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         return $this->getCount();
@@ -964,6 +964,7 @@ public function hasFlash($key)
      * @param int|string $offset the offset to check on
      * @return bool
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         $this->open();
@@ -976,6 +977,7 @@ public function offsetExists($offset)
      * @param int|string $offset the offset to retrieve element.
      * @return mixed the element at the offset, null if no element is found at the offset
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         $this->open();
@@ -988,6 +990,7 @@ public function offsetGet($offset)
      * @param int|string $offset the offset to set element
      * @param mixed $item the element value
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $item)
     {
         $this->open();
@@ -998,6 +1001,7 @@ public function offsetSet($offset, $item)
      * This method is required by the interface [[\ArrayAccess]].
      * @param int|string $offset the offset to unset element
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         $this->open();
diff --git a/src/web/SessionIterator.php b/src/web/SessionIterator.php
index d8ccdf71ad0..1d1f0033246 100644
--- a/src/web/SessionIterator.php
+++ b/src/web/SessionIterator.php
@@ -20,7 +20,7 @@ class SessionIterator implements \Iterator
      */
     private $_keys;
     /**
-     * @var mixed current key
+     * @var string|int|false current key
      */
     private $_key;
 
@@ -30,13 +30,15 @@ class SessionIterator implements \Iterator
      */
     public function __construct()
     {
-        $this->_keys = array_keys($_SESSION);
+        $this->_keys = array_keys(isset($_SESSION) ? $_SESSION : []);
+        $this->rewind();
     }
 
     /**
      * Rewinds internal array pointer.
      * This method is required by the interface [[\Iterator]].
      */
+    #[\ReturnTypeWillChange]
     public function rewind()
     {
         $this->_key = reset($this->_keys);
@@ -45,11 +47,12 @@ public function rewind()
     /**
      * Returns the key of the current array element.
      * This method is required by the interface [[\Iterator]].
-     * @return mixed the key of the current array element
+     * @return string|int|null the key of the current array element
      */
+    #[\ReturnTypeWillChange]
     public function key()
     {
-        return $this->_key;
+        return $this->_key === false ? null : $this->_key;
     }
 
     /**
@@ -57,20 +60,22 @@ public function key()
      * This method is required by the interface [[\Iterator]].
      * @return mixed the current array element
      */
+    #[\ReturnTypeWillChange]
     public function current()
     {
-        return isset($_SESSION[$this->_key]) ? $_SESSION[$this->_key] : null;
+        return $this->_key !== false && isset($_SESSION[$this->_key]) ? $_SESSION[$this->_key] : null;
     }
 
     /**
      * Moves the internal pointer to the next array element.
      * This method is required by the interface [[\Iterator]].
      */
+    #[\ReturnTypeWillChange]
     public function next()
     {
         do {
             $this->_key = next($this->_keys);
-        } while (!isset($_SESSION[$this->_key]) && $this->_key !== false);
+        } while ($this->_key !== false && !isset($_SESSION[$this->_key]));
     }
 
     /**
@@ -78,6 +83,7 @@ public function next()
      * This method is required by the interface [[\Iterator]].
      * @return bool
      */
+    #[\ReturnTypeWillChange]
     public function valid()
     {
         return $this->_key !== false;
diff --git a/src/web/TooManyRequestsHttpException.php b/src/web/TooManyRequestsHttpException.php
index eb602112575..6549936fd99 100644
--- a/src/web/TooManyRequestsHttpException.php
+++ b/src/web/TooManyRequestsHttpException.php
@@ -22,11 +22,11 @@ class TooManyRequestsHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(429, $message, $code, $previous);
     }
diff --git a/src/web/UnauthorizedHttpException.php b/src/web/UnauthorizedHttpException.php
index 2f8350e7974..c261e9f00f1 100644
--- a/src/web/UnauthorizedHttpException.php
+++ b/src/web/UnauthorizedHttpException.php
@@ -25,11 +25,11 @@ class UnauthorizedHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(401, $message, $code, $previous);
     }
diff --git a/src/web/UnprocessableEntityHttpException.php b/src/web/UnprocessableEntityHttpException.php
index e32faac3a62..8fdc65aff6d 100644
--- a/src/web/UnprocessableEntityHttpException.php
+++ b/src/web/UnprocessableEntityHttpException.php
@@ -24,11 +24,11 @@ class UnprocessableEntityHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(422, $message, $code, $previous);
     }
diff --git a/src/web/UnsupportedMediaTypeHttpException.php b/src/web/UnsupportedMediaTypeHttpException.php
index 5942ea2661d..7d2c0f5661c 100644
--- a/src/web/UnsupportedMediaTypeHttpException.php
+++ b/src/web/UnsupportedMediaTypeHttpException.php
@@ -23,11 +23,11 @@ class UnsupportedMediaTypeHttpException extends HttpException
 {
     /**
      * Constructor.
-     * @param string $message error message
+     * @param string|null $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|null $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message = null, $code = 0, \Exception $previous = null)
+    public function __construct($message = null, $code = 0, $previous = null)
     {
         parent::__construct(415, $message, $code, $previous);
     }
diff --git a/src/web/UploadedFile.php b/src/web/UploadedFile.php
index a6609703cd5..e4b0620d1fb 100644
--- a/src/web/UploadedFile.php
+++ b/src/web/UploadedFile.php
@@ -18,14 +18,14 @@
  * You can call [[getInstance()]] to retrieve the instance of an uploaded file,
  * and then use [[saveAs()]] to save it on the server.
  * You may also query other information about the file, including [[name]],
- * [[tempName]], [[type]], [[size]] and [[error]].
+ * [[tempName]], [[type]], [[size]], [[error]] and [[fullPath]].
  *
  * For more details and usage information on UploadedFile, see the [guide article on handling uploads](guide:input-file-upload).
  *
- * @property-read string $baseName Original file base name. This property is read-only.
- * @property-read string $extension File extension. This property is read-only.
+ * @property-read string $baseName Original file base name.
+ * @property-read string $extension File extension.
  * @property-read bool $hasError Whether there is an error with the uploaded file. Check [[error]] for
- * detailed error code information. This property is read-only.
+ * detailed error code information.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -57,11 +57,21 @@ class UploadedFile extends BaseObject
      * @see https://www.php.net/manual/en/features.file-upload.errors.php
      */
     public $error;
+    /**
+     * @var string|null The full path as submitted by the browser. Note this value does not always
+     * contain a real directory structure, and cannot be trusted. Available as of PHP 8.1.
+     * @since 2.0.46
+     */
+    public $fullPath;
 
     /**
-     * @var resource a temporary uploaded stream resource used within PUT and PATCH request.
+     * @var resource|null a temporary uploaded stream resource used within PUT and PATCH request.
      */
     private $_tempResource;
+
+    /**
+     * @var array[]
+     */
     private static $_files;
 
 
@@ -93,7 +103,7 @@ public function __toString()
      * @param \yii\base\Model $model the data model
      * @param string $attribute the attribute name. The attribute name may contain array indexes.
      * For example, '[1]file' for tabular file uploading; and 'file[1]' for an element in a file array.
-     * @return null|UploadedFile the instance of the uploaded file.
+     * @return UploadedFile|null the instance of the uploaded file.
      * Null is returned if no file is uploaded for the specified model attribute.
      * @see getInstanceByName()
      */
@@ -121,7 +131,7 @@ public static function getInstances($model, $attribute)
      * Returns an uploaded file according to the given file input name.
      * The name can be a plain string or a string like an array element (e.g. 'Post[imageFile]', or 'Post[0][imageFile]').
      * @param string $name the name of the file input field.
-     * @return null|UploadedFile the instance of the uploaded file.
+     * @return UploadedFile|null the instance of the uploaded file.
      * Null is returned if no file is uploaded for the specified name.
      */
     public static function getInstanceByName($name)
@@ -192,7 +202,7 @@ public function saveAs($file, $deleteTempFile = true)
      * Copy temporary file into file specified
      *
      * @param string $targetFile path of the file to copy to
-     * @return bool|int the total count of bytes copied, or false on failure
+     * @return int|false the total count of bytes copied, or false on failure
      * @since 2.0.32
      */
     protected function copyTempFile($targetFile)
@@ -236,17 +246,26 @@ public function getHasError()
     }
 
     /**
-     * Creates UploadedFile instances from $_FILE.
-     * @return array the UploadedFile instances
+     * Returns reformated data of uplodaded files.
+     *
+     * @return array[]
      */
     private static function loadFiles()
     {
         if (self::$_files === null) {
             self::$_files = [];
             if (isset($_FILES) && is_array($_FILES)) {
-                foreach ($_FILES as $class => $info) {
-                    $resource = isset($info['tmp_resource']) ? $info['tmp_resource'] : [];
-                    self::loadFilesRecursive($class, $info['name'], $info['tmp_name'], $info['type'], $info['size'], $info['error'], $resource);
+                foreach ($_FILES as $key => $info) {
+                    self::loadFilesRecursive(
+                        $key,
+                        $info['name'],
+                        $info['tmp_name'],
+                        $info['type'],
+                        $info['size'],
+                        $info['error'],
+                        isset($info['full_path']) ? $info['full_path'] : [],
+                        isset($info['tmp_resource']) ? $info['tmp_resource'] : []
+                    );
                 }
             }
         }
@@ -255,29 +274,41 @@ private static function loadFiles()
     }
 
     /**
-     * Creates UploadedFile instances from $_FILE recursively.
-     * @param string $key key for identifying uploaded file: class name and sub-array indexes
-     * @param mixed $names file names provided by PHP
-     * @param mixed $tempNames temporary file names provided by PHP
-     * @param mixed $types file types provided by PHP
-     * @param mixed $sizes file sizes provided by PHP
-     * @param mixed $errors uploading issues provided by PHP
+     * Recursive reformats data of uplodaded file(s).
+     *
+     * @param string $key key for identifying uploaded file(sub-array index)
+     * @param string[]|string $names file name(s) provided by PHP
+     * @param string[]|string $tempNames temporary file name(s) provided by PHP
+     * @param string[]|string $types file type(s) provided by PHP
+     * @param int[]|int $sizes file size(s) provided by PHP
+     * @param int[]|int $errors uploading issue(s) provided by PHP
+     * @param array|string|null $fullPaths the full path(s) as submitted by the browser/PHP
+     * @param array|resource|null $tempResources the resource(s)
      */
-    private static function loadFilesRecursive($key, $names, $tempNames, $types, $sizes, $errors, $tempResources)
+    private static function loadFilesRecursive($key, $names, $tempNames, $types, $sizes, $errors, $fullPaths, $tempResources)
     {
         if (is_array($names)) {
             foreach ($names as $i => $name) {
-                $resource = isset($tempResources[$i]) ? $tempResources[$i] : [];
-                self::loadFilesRecursive($key . '[' . $i . ']', $name, $tempNames[$i], $types[$i], $sizes[$i], $errors[$i], $resource);
+                self::loadFilesRecursive(
+                    $key . '[' . $i . ']',
+                    $name,
+                    $tempNames[$i],
+                    $types[$i],
+                    $sizes[$i],
+                    $errors[$i],
+                    isset($fullPaths[$i]) ? $fullPaths[$i] : null,
+                    isset($tempResources[$i]) ? $tempResources[$i] : null
+                );
             }
-        } elseif ((int) $errors !== UPLOAD_ERR_NO_FILE) {
+        } elseif ($errors != UPLOAD_ERR_NO_FILE) {
             self::$_files[$key] = [
                 'name' => $names,
                 'tempName' => $tempNames,
-                'tempResource' => $tempResources,
+                'tempResource' => is_resource($tempResources) ? $tempResources : null,
                 'type' => $types,
                 'size' => $sizes,
                 'error' => $errors,
+                'fullPath' => is_string($fullPaths) ? $fullPaths : null,
             ];
         }
     }
diff --git a/src/web/UrlNormalizerRedirectException.php b/src/web/UrlNormalizerRedirectException.php
index 88147cf3a48..9d550221832 100644
--- a/src/web/UrlNormalizerRedirectException.php
+++ b/src/web/UrlNormalizerRedirectException.php
@@ -38,15 +38,15 @@ class UrlNormalizerRedirectException extends \yii\base\Exception
      * @param int $statusCode HTTP status code used for redirection
      * @param bool|string $scheme the URI scheme to use in the generated URL for redirection.
      * This will be used as second parameter for [[\yii\helpers\Url::to()]]
-     * @param string $message the error message
+     * @param string|null $message the error message
      * @param int $code the error code
-     * @param \Exception $previous the previous exception used for the exception chaining
+     * @param \Throwable|null $previous the previous exception used for the exception chaining
      */
-    public function __construct($url, $statusCode = 302, $scheme = false, $message = null, $code = 0, \Exception $previous = null)
+    public function __construct($url, $statusCode = 302, $scheme = false, $message = null, $code = 0, $previous = null)
     {
         $this->url = $url;
         $this->scheme = $scheme;
         $this->statusCode = $statusCode;
-        parent::__construct($message, $code, $previous);
+        parent::__construct((string)$message, $code, $previous);
     }
 }
diff --git a/src/web/UrlRule.php b/src/web/UrlRule.php
index 84719ecdad9..a9027b42a7f 100644
--- a/src/web/UrlRule.php
+++ b/src/web/UrlRule.php
@@ -25,7 +25,7 @@
  * ```
  *
  * @property-read null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call.
- * `null` if rule does not provide info about create status. This property is read-only.
+ * `null` if rule does not provide info about create status.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -68,7 +68,7 @@ class UrlRule extends BaseObject implements UrlRuleInterface
     const CREATE_STATUS_PARAMS_MISMATCH = 4;
 
     /**
-     * @var string the name of this rule. If not set, it will use [[pattern]] as the name.
+     * @var string|null the name of this rule. If not set, it will use [[pattern]] as the name.
      */
     public $name;
     /**
@@ -79,7 +79,7 @@ class UrlRule extends BaseObject implements UrlRuleInterface
      */
     public $pattern;
     /**
-     * @var string the pattern used to parse and create the host info part of a URL (e.g. `http://example.com`).
+     * @var string|null the pattern used to parse and create the host info part of a URL (e.g. `http://example.com`).
      * @see pattern
      */
     public $host;
@@ -94,20 +94,20 @@ class UrlRule extends BaseObject implements UrlRuleInterface
      */
     public $defaults = [];
     /**
-     * @var string the URL suffix used for this rule.
+     * @var string|null the URL suffix used for this rule.
      * For example, ".html" can be used so that the URL looks like pointing to a static HTML page.
      * If not set, the value of [[UrlManager::suffix]] will be used.
      */
     public $suffix;
     /**
-     * @var string|array the HTTP verb (e.g. GET, POST, DELETE) that this rule should match.
+     * @var string|array|null the HTTP verb (e.g. GET, POST, DELETE) that this rule should match.
      * Use array to represent multiple verbs that this rule may match.
      * If this property is not set, the rule can match any verb.
      * Note that this property is only used when parsing a request. It is ignored for URL creation.
      */
     public $verb;
     /**
-     * @var int a value indicating if this rule should be used for both request parsing and URL creation,
+     * @var int|null a value indicating if this rule should be used for both request parsing and URL creation,
      * parsing only, or creation only.
      * If not set or 0, it means the rule is both request parsing and URL creation.
      * If it is [[PARSING_ONLY]], the rule is for request parsing only.
@@ -336,7 +336,7 @@ private function translatePattern($allowAppendSlash)
         $this->pattern = '#^' . trim(strtr($this->_template, $tr), '/') . '$#u';
 
         // if host starts with relative scheme, then insert pattern to match any
-        if (strncmp($this->host, '//', 2) === 0) {
+        if ($this->host !== null && strncmp($this->host, '//', 2) === 0) {
             $this->pattern = substr_replace($this->pattern, '[\w]+://', 2, 0);
         }
 
@@ -541,7 +541,7 @@ public function createUrl($manager, $route, $params)
     /**
      * Returns status of the URL creation after the last [[createUrl()]] call.
      *
-     * @return null|int Status of the URL creation after the last [[createUrl()]] call. `null` if rule does not provide
+     * @return int|null Status of the URL creation after the last [[createUrl()]] call. `null` if rule does not provide
      * info about create status.
      * @see createStatus
      * @since 2.0.12
diff --git a/src/web/User.php b/src/web/User.php
index 863b6d4b428..81945a96abf 100644
--- a/src/web/User.php
+++ b/src/web/User.php
@@ -48,10 +48,9 @@
  * ```
  *
  * @property-read string|int $id The unique identifier for the user. If `null`, it means the user is a guest.
- * This property is read-only.
  * @property IdentityInterface|null $identity The identity object associated with the currently logged-in
  * user. `null` is returned if the user is not logged in (not authenticated).
- * @property-read bool $isGuest Whether the current user is a guest. This property is read-only.
+ * @property-read bool $isGuest Whether the current user is a guest.
  * @property string $returnUrl The URL that the user should be redirected to after login. Note that the type
  * of this property differs in getter and setter. See [[getReturnUrl()]] and [[setReturnUrl()]] for details.
  *
@@ -81,7 +80,7 @@ class User extends Component
      */
     public $enableSession = true;
     /**
-     * @var string|array the URL for login when [[loginRequired()]] is called.
+     * @var string|array|null the URL for login when [[loginRequired()]] is called.
      * If an array is given, [[UrlManager::createUrl()]] will be called to create the corresponding URL.
      * The first element of the array should be the route to the login action, and the rest of
      * the name-value pairs are GET parameters used to construct the login URL. For example,
@@ -99,21 +98,21 @@ class User extends Component
      */
     public $identityCookie = ['name' => '_identity', 'httpOnly' => true];
     /**
-     * @var int the number of seconds in which the user will be logged out automatically if the user
+     * @var int|null the number of seconds in which the user will be logged out automatically if the user
      * remains inactive. If this property is not set, the user will be logged out after
      * the current session expires (c.f. [[Session::timeout]]).
      * Note that this will not work if [[enableAutoLogin]] is `true`.
      */
     public $authTimeout;
     /**
-     * @var CheckAccessInterface|string|array The access checker object to use for checking access or the application
+     * @var CheckAccessInterface|string|array|null The access checker object to use for checking access or the application
      * component ID of the access checker.
      * If not set the application auth manager will be used.
      * @since 2.0.9
      */
     public $accessChecker;
     /**
-     * @var int the number of seconds in which the user will be logged out automatically
+     * @var int|null the number of seconds in which the user will be logged out automatically
      * regardless of activity.
      * Note that this will not work if [[enableAutoLogin]] is `true`.
      */
@@ -369,7 +368,7 @@ public function getIsGuest()
 
     /**
      * Returns a value that uniquely represents the user.
-     * @return string|int the unique identifier for the user. If `null`, it means the user is a guest.
+     * @return string|int|null the unique identifier for the user. If `null`, it means the user is a guest.
      * @see getIdentity()
      */
     public function getId()
@@ -385,7 +384,7 @@ public function getId()
      * This method reads the return URL from the session. It is usually used by the login action which
      * may call this method to redirect the browser to where it goes after successful authentication.
      *
-     * @param string|array $defaultUrl the default return URL in case it was not set previously.
+     * @param string|array|null $defaultUrl the default return URL in case it was not set previously.
      * If this is null and the return URL was not set previously, [[Application::homeUrl]] will be redirected to.
      * Please refer to [[setReturnUrl()]] on accepted format of the URL.
      * @return string the URL that the user should be redirected to after login.
@@ -655,9 +654,7 @@ public function switchIdentity($identity, $duration = 0)
         }
 
         $session = Yii::$app->getSession();
-        if (!YII_ENV_TEST) {
-            $session->regenerateID(true);
-        }
+        $session->regenerateID(true);
         $session->remove($this->idParam);
         $session->remove($this->authTimeoutParam);
         $session->remove($this->authKeyParam);
@@ -698,6 +695,9 @@ protected function renewAuthStatus()
             /* @var $class IdentityInterface */
             $class = $this->identityClass;
             $identity = $class::findIdentity($id);
+            if ($identity === null) {
+                $this->switchIdentity(null);
+            }
         }
 
         if ($identity !== null) {
@@ -728,10 +728,6 @@ protected function renewAuthStatus()
                 $this->renewIdentityCookie();
             }
         }
-
-        if ($this->getIdentity(false) === null) {
-            $this->switchIdentity(null);
-        }
     }
 
     /**
diff --git a/src/web/View.php b/src/web/View.php
index 15a8f7b12df..bf03b42d75e 100644
--- a/src/web/View.php
+++ b/src/web/View.php
@@ -132,7 +132,6 @@ class View extends \yii\base\View
     public $jsFiles = [];
 
     private $_assetManager;
-
     /**
      * Whether [[endPage()]] has been called and all files have been registered
      * @var bool
@@ -203,7 +202,7 @@ public function endPage($ajaxMode = false)
      *
      * @param string $view the view name. Please refer to [[render()]] on how to specify this parameter.
      * @param array $params the parameters (name-value pairs) that will be extracted and made available in the view file.
-     * @param object $context the context that the view should use for rendering the view. If null,
+     * @param object|null $context the context that the view should use for rendering the view. If null,
      * existing [[context]] will be used.
      * @return string the rendering result
      * @see render()
@@ -337,7 +336,7 @@ public function registerAssetBundle($name, $position = null)
      * will result in the meta tag `<meta name="description" content="This website is about funny raccoons.">`.
      *
      * @param array $options the HTML attributes for the meta tag.
-     * @param string $key the key that identifies the meta tag. If two meta tags are registered
+     * @param string|null $key the key that identifies the meta tag. If two meta tags are registered
      * with the same key, the latter will overwrite the former. If this is null, the new meta tag
      * will be appended to the existing ones.
      */
@@ -387,7 +386,7 @@ public function registerCsrfMetaTags()
      * has more options for this kind of link tag.
      *
      * @param array $options the HTML attributes for the link tag.
-     * @param string $key the key that identifies the link tag. If two link tags are registered
+     * @param string|null $key the key that identifies the link tag. If two link tags are registered
      * with the same key, the latter will overwrite the former. If this is null, the new link tag
      * will be appended to the existing ones.
      */
@@ -404,7 +403,7 @@ public function registerLinkTag($options, $key = null)
      * Registers a CSS code block.
      * @param string $css the content of the CSS code block to be registered
      * @param array $options the HTML attributes for the `<style>`-tag.
-     * @param string $key the key that identifies the CSS code block. If null, it will use
+     * @param string|null $key the key that identifies the CSS code block. If null, it will use
      * $css as the key. If two CSS code blocks are registered with the same key, the latter
      * will overwrite the former.
      */
@@ -428,7 +427,7 @@ public function registerCss($css, $options = [], $key = null)
      * - `depends`: array, specifies the names of the asset bundles that this CSS file depends on.
      * - `appendTimestamp`: bool whether to append a timestamp to the URL.
      *
-     * @param string $key the key that identifies the CSS script file. If null, it will use
+     * @param string|null $key the key that identifies the CSS script file. If null, it will use
      * $url as the key. If two CSS files are registered with the same key, the latter
      * will overwrite the former.
      * @throws InvalidConfigException
@@ -452,7 +451,7 @@ public function registerCssFile($url, $options = [], $key = null)
      * - [[POS_READY]]: enclosed within jQuery(document).ready(). This is the default value.
      *   Note that by using this position, the method will automatically register the jQuery js file.
      *
-     * @param string $key the key that identifies the JS code block. If null, it will use
+     * @param string|null $key the key that identifies the JS code block. If null, it will use
      * $js as the key. If two JS code blocks are registered with the same key, the latter
      * will overwrite the former.
      */
@@ -476,7 +475,7 @@ public function registerJs($js, $position = self::POS_READY, $key = null)
      * - `depends`: array, specifies the names of the asset bundles that this CSS file depends on.
      * - `appendTimestamp`: bool whether to append a timestamp to the URL.
      *
-     * @param string $key the key that identifies the JS script file. If null, it will use
+     * @param string|null $key the key that identifies the JS script file. If null, it will use
      * $url as the key. If two JS files are registered with the same key at the same position, the latter
      * will overwrite the former. Note that position option takes precedence, thus files registered with the same key,
      * but different position option will not override each other.
@@ -551,7 +550,7 @@ private function registerFile($type, $url, $options = [], $key = null)
      *
      * Please refer to [[Html::jsFile()]] for other supported options.
      *
-     * @param string $key the key that identifies the JS script file. If null, it will use
+     * @param string|null $key the key that identifies the JS script file. If null, it will use
      * $url as the key. If two JS files are registered with the same key at the same position, the latter
      * will overwrite the former. Note that position option takes precedence, thus files registered with the same key,
      * but different position option will not override each other.
diff --git a/src/web/XmlResponseFormatter.php b/src/web/XmlResponseFormatter.php
index e250cb4ab5e..346e5fd424b 100644
--- a/src/web/XmlResponseFormatter.php
+++ b/src/web/XmlResponseFormatter.php
@@ -33,11 +33,11 @@ class XmlResponseFormatter extends Component implements ResponseFormatterInterfa
      */
     public $version = '1.0';
     /**
-     * @var string the XML encoding. If not set, it will use the value of [[Response::charset]].
+     * @var string|null the XML encoding. If not set, it will use the value of [[Response::charset]].
      */
     public $encoding;
     /**
-     * @var string|string[]|false the name of the root element. If set to false, null or is empty then no root tag
+     * @var string|string[]|null|false the name of the root element. If set to false, null or is empty then no root tag
      * should be added.
      *
      * Since 2.0.44 URI namespace could be specified by passing `[namespace, tag name]` array.
diff --git a/src/widgets/ActiveField.php b/src/widgets/ActiveField.php
index 9d86aeebab0..f5dcea062bd 100644
--- a/src/widgets/ActiveField.php
+++ b/src/widgets/ActiveField.php
@@ -20,8 +20,6 @@
  *
  * For more details and usage information on ActiveField, see the [guide article on forms](guide:input-forms).
  *
- * @property-read string $inputId The attribute `id` of the input element
- *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
@@ -99,33 +97,33 @@ class ActiveField extends Component
      */
     public $hintOptions = ['class' => 'hint-block'];
     /**
-     * @var bool whether to enable client-side data validation.
+     * @var bool|null whether to enable client-side data validation.
      * If not set, it will take the value of [[ActiveForm::enableClientValidation]].
      */
     public $enableClientValidation;
     /**
-     * @var bool whether to enable AJAX-based data validation.
+     * @var bool|null whether to enable AJAX-based data validation.
      * If not set, it will take the value of [[ActiveForm::enableAjaxValidation]].
      */
     public $enableAjaxValidation;
     /**
-     * @var bool whether to perform validation when the value of the input field is changed.
+     * @var bool|null whether to perform validation when the value of the input field is changed.
      * If not set, it will take the value of [[ActiveForm::validateOnChange]].
      */
     public $validateOnChange;
     /**
-     * @var bool whether to perform validation when the input field loses focus.
+     * @var bool|null whether to perform validation when the input field loses focus.
      * If not set, it will take the value of [[ActiveForm::validateOnBlur]].
      */
     public $validateOnBlur;
     /**
-     * @var bool whether to perform validation while the user is typing in the input field.
+     * @var bool|null whether to perform validation while the user is typing in the input field.
      * If not set, it will take the value of [[ActiveForm::validateOnType]].
      * @see validationDelay
      */
     public $validateOnType;
     /**
-     * @var int number of milliseconds that the validation should be delayed when the user types in the field
+     * @var int|null number of milliseconds that the validation should be delayed when the user types in the field
      * and [[validateOnType]] is set `true`.
      * If not set, it will take the value of [[ActiveForm::validationDelay]].
      */
@@ -189,7 +187,7 @@ public function __toString()
      * Renders the whole field.
      * This method will generate the label, error tag, input tag and hint tag (if any), and
      * assemble them into HTML according to [[template]].
-     * @param string|callable $content the content within the field container.
+     * @param string|callable|null $content the content within the field container.
      * If `null` (not set), the default methods will be called to generate the label, error tag and input tag,
      * and use them as the content.
      * If a callable, it will be called to generate the content. The signature of the callable should be:
@@ -266,10 +264,10 @@ public function end()
 
     /**
      * Generates a label tag for [[attribute]].
-     * @param null|string|false $label the label to use. If `null`, the label will be generated via [[Model::getAttributeLabel()]].
+     * @param string|null|false $label the label to use. If `null`, the label will be generated via [[Model::getAttributeLabel()]].
      * If `false`, the generated field will not contain the label part.
      * Note that this will NOT be [[Html::encode()|encoded]].
-     * @param null|array $options the tag options in terms of name-value pairs. It will be merged with [[labelOptions]].
+     * @param array|null $options the tag options in terms of name-value pairs. It will be merged with [[labelOptions]].
      * The options will be rendered as the attributes of the resulting tag. The values will be HTML-encoded
      * using [[Html::encode()]]. If a value is `null`, the corresponding attribute will not be rendered.
      * @return $this the field object itself.
@@ -325,7 +323,7 @@ public function error($options = [])
 
     /**
      * Renders the hint tag.
-     * @param string|bool $content the hint content.
+     * @param string|bool|null $content the hint content.
      * If `null`, the hint will be generated via [[Model::getAttributeHint()]].
      * If `false`, the generated field will not contain the hint part.
      * Note that this will NOT be [[Html::encode()|encoded]].
diff --git a/src/widgets/ActiveForm.php b/src/widgets/ActiveForm.php
index 1d5fdc6dbe4..f2b2fbbe844 100644
--- a/src/widgets/ActiveForm.php
+++ b/src/widgets/ActiveForm.php
@@ -133,7 +133,7 @@ class ActiveForm extends Widget
      */
     public $enableClientScript = true;
     /**
-     * @var array|string the URL for performing AJAX-based validation. This property will be processed by
+     * @var array|string|null the URL for performing AJAX-based validation. This property will be processed by
      * [[Url::to()]]. Please refer to [[Url::to()]] for more details on how to configure this property.
      * If this property is not set, it will take the value of the form's action attribute.
      */
diff --git a/src/widgets/Breadcrumbs.php b/src/widgets/Breadcrumbs.php
index b56aa0fbdf8..f439521c023 100644
--- a/src/widgets/Breadcrumbs.php
+++ b/src/widgets/Breadcrumbs.php
@@ -68,7 +68,7 @@ class Breadcrumbs extends Widget
      */
     public $encodeLabels = true;
     /**
-     * @var array the first hyperlink in the breadcrumbs (called home link).
+     * @var array|null the first hyperlink in the breadcrumbs (called home link).
      * Please refer to [[links]] on the format of the link.
      * If this property is not set, it will default to a link pointing to [[\yii\web\Application::homeUrl]]
      * with the label 'Home'. If this property is false, the home link will not be rendered.
diff --git a/src/widgets/DetailView.php b/src/widgets/DetailView.php
index 62e0987fbd4..426281c3a6e 100644
--- a/src/widgets/DetailView.php
+++ b/src/widgets/DetailView.php
@@ -108,13 +108,13 @@ class DetailView extends Widget
      */
     public $template = '<tr><th{captionOptions}>{label}</th><td{contentOptions}>{value}</td></tr>';
     /**
-     * @var array the HTML attributes for the container tag of this widget. The `tag` option specifies
+     * @var array|null the HTML attributes for the container tag of this widget. The `tag` option specifies
      * what container tag should be used. It defaults to `table` if not set.
      * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
      */
     public $options = ['class' => 'table table-striped table-bordered detail-view'];
     /**
-     * @var array|Formatter the formatter used to format model attribute values into displayable texts.
+     * @var array|Formatter|null the formatter used to format model attribute values into displayable texts.
      * This can be either an instance of [[Formatter]] or an configuration array for creating the [[Formatter]]
      * instance. If this property is not set, the `formatter` application component will be used.
      */
diff --git a/src/widgets/FragmentCache.php b/src/widgets/FragmentCache.php
index e30e997218c..9cccd947820 100644
--- a/src/widgets/FragmentCache.php
+++ b/src/widgets/FragmentCache.php
@@ -19,7 +19,7 @@
  * FragmentCache is used by [[\yii\base\View]] to provide caching of page fragments.
  *
  * @property-read string|false $cachedContent The cached content. False is returned if valid content is not
- * found in the cache. This property is read-only.
+ * found in the cache.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/widgets/InputWidget.php b/src/widgets/InputWidget.php
index eed67443d07..e7aae1ce0d6 100644
--- a/src/widgets/InputWidget.php
+++ b/src/widgets/InputWidget.php
@@ -43,15 +43,15 @@ class InputWidget extends Widget
      */
     public $field;
     /**
-     * @var Model the data model that this widget is associated with.
+     * @var Model|null the data model that this widget is associated with.
      */
     public $model;
     /**
-     * @var string the model attribute that this widget is associated with.
+     * @var string|null the model attribute that this widget is associated with.
      */
     public $attribute;
     /**
-     * @var string the input name. This must be set if [[model]] and [[attribute]] are not set.
+     * @var string|null the input name. This must be set if [[model]] and [[attribute]] are not set.
      */
     public $name;
     /**
diff --git a/src/widgets/LinkSorter.php b/src/widgets/LinkSorter.php
index a0e95990e38..620cf0e9326 100644
--- a/src/widgets/LinkSorter.php
+++ b/src/widgets/LinkSorter.php
@@ -26,11 +26,11 @@
 class LinkSorter extends Widget
 {
     /**
-     * @var Sort the sort definition
+     * @var Sort|null the sort definition
      */
     public $sort;
     /**
-     * @var array list of the attributes that support sorting. If not set, it will be determined
+     * @var array|null list of the attributes that support sorting. If not set, it will be determined
      * using [[Sort::attributes]].
      */
     public $attributes;
diff --git a/src/widgets/MaskedInput.php b/src/widgets/MaskedInput.php
index 632af1f3daa..c037470017a 100644
--- a/src/widgets/MaskedInput.php
+++ b/src/widgets/MaskedInput.php
@@ -102,7 +102,26 @@ class MaskedInput extends InputWidget
      * @var string the hashed variable to store the pluginOptions
      */
     protected $_hashVar;
-
+    /**
+     * @var string[] the inputmask properties can be contained callbacks
+     */
+    protected $_jsCallbacks = [
+        'oncomplete',
+        'onincomplete',
+        'oncleared',
+        'onKeyDown',
+        'onBeforeMask',
+        'onBeforePaste',
+        'onBeforeWrite',
+        'onUnMask',
+        'onKeyValidation',
+        'isComplete',
+        // @deprecated removed in 5.0:
+        'preValidation',
+        'postValidation',
+        // @deprecated removed in 4.0:
+        'canClearPosition'
+    ];
 
     /**
      * Initializes the widget.
@@ -154,11 +173,9 @@ protected function initClientOptions()
         $options = $this->clientOptions;
         foreach ($options as $key => $value) {
             if (
-                !$value instanceof JsExpression
-                && in_array($key, [
-                    'oncomplete', 'onincomplete', 'oncleared', 'onKeyUp', 'onKeyDown', 'onBeforeMask',
-                    'onBeforePaste', 'onUnMask', 'isComplete', 'determineActiveMasksetIndex',
-                ], true)
+                !empty($value)
+                && !$value instanceof JsExpression
+                && in_array($key, $this->_jsCallbacks, true)
             ) {
                 $options[$key] = new JsExpression($value);
             }
@@ -178,10 +195,10 @@ public function registerClientScript()
             $this->clientOptions['mask'] = $this->mask;
         }
         $this->hashPluginOptions($view);
-        if (is_array($this->definitions) && !empty($this->definitions)) {
+        if (!empty($this->definitions) && is_array($this->definitions)) {
             $js .= ucfirst(self::PLUGIN_NAME) . '.extendDefinitions(' . Json::htmlEncode($this->definitions) . ');';
         }
-        if (is_array($this->aliases) && !empty($this->aliases)) {
+        if (!empty($this->aliases) && is_array($this->aliases)) {
             $js .= ucfirst(self::PLUGIN_NAME) . '.extendAliases(' . Json::htmlEncode($this->aliases) . ');';
         }
         $id = $this->options['id'];
diff --git a/src/widgets/Menu.php b/src/widgets/Menu.php
index 7e60700ccfd..859e092b058 100644
--- a/src/widgets/Menu.php
+++ b/src/widgets/Menu.php
@@ -141,24 +141,24 @@ class Menu extends Widget
      */
     public $options = [];
     /**
-     * @var string the CSS class that will be assigned to the first item in the main menu or each submenu.
+     * @var string|null the CSS class that will be assigned to the first item in the main menu or each submenu.
      * Defaults to null, meaning no such CSS class will be assigned.
      */
     public $firstItemCssClass;
     /**
-     * @var string the CSS class that will be assigned to the last item in the main menu or each submenu.
+     * @var string|null the CSS class that will be assigned to the last item in the main menu or each submenu.
      * Defaults to null, meaning no such CSS class will be assigned.
      */
     public $lastItemCssClass;
     /**
-     * @var string the route used to determine if a menu item is active or not.
+     * @var string|null the route used to determine if a menu item is active or not.
      * If not set, it will use the route of the current request.
      * @see params
      * @see isItemActive()
      */
     public $route;
     /**
-     * @var array the parameters used to determine if a menu item is active or not.
+     * @var array|null the parameters used to determine if a menu item is active or not.
      * If not set, it will use `$_GET`.
      * @see route
      * @see isItemActive()
diff --git a/src/widgets/Pjax.php b/src/widgets/Pjax.php
index 1e5d90104c1..69595e0d3b8 100644
--- a/src/widgets/Pjax.php
+++ b/src/widgets/Pjax.php
@@ -55,14 +55,14 @@ class Pjax extends Widget
      */
     public $options = [];
     /**
-     * @var string|false the jQuery selector of the links that should trigger pjax requests.
+     * @var string|null|false the jQuery selector of the links that should trigger pjax requests.
      * If not set, all links within the enclosed content of Pjax will trigger pjax requests.
      * If set to false, no code will be registered to handle links.
      * Note that if the response to the pjax request is a full page, a normal request will be sent again.
      */
     public $linkSelector;
     /**
-     * @var string|false the jQuery selector of the forms whose submissions should trigger pjax requests.
+     * @var string|null|false the jQuery selector of the forms whose submissions should trigger pjax requests.
      * If not set, all forms with `data-pjax` attribute within the enclosed content of Pjax will trigger pjax requests.
      * If set to false, no code will be registered to handle forms.
      * Note that if the response to the pjax request is a full page, a normal request will be sent again.
diff --git a/tests/TestCase.php b/tests/TestCase.php
index c03501fe906..7be21434ab0 100644
--- a/tests/TestCase.php
+++ b/tests/TestCase.php
@@ -82,6 +82,7 @@ protected function mockWebApplication($config = [], $appClass = '\yii\web\Applic
                     'cookieValidationKey' => 'wefJDF8sfdsfSDefwqdxj9oq',
                     'scriptFile' => __DIR__ . '/index.php',
                     'scriptUrl' => '/index.php',
+                    'isConsoleRequest' => false,
                 ],
             ],
         ], $config));
diff --git a/tests/data/ar/Order.php b/tests/data/ar/Order.php
index 6fbc5b0fde5..19a5b7a58cc 100644
--- a/tests/data/ar/Order.php
+++ b/tests/data/ar/Order.php
@@ -25,6 +25,8 @@ class Order extends ActiveRecord
 {
     public static $tableName;
 
+    public $virtualCustomerId = null;
+
     public static function tableName()
     {
         return static::$tableName ?: 'order';
@@ -238,4 +240,10 @@ public function getItemsFor8()
     {
         return $this->hasMany(Item::className(), ['id' => 'item_id'])->via('orderItemsFor8');
     }
+
+    public function getVirtualCustomer()
+    {
+        return $this->hasOne(Customer::className(), ['id' => 'virtualCustomerId']);
+    }
+
 }
diff --git a/tests/data/base/ArrayAccessObject.php b/tests/data/base/ArrayAccessObject.php
index bf62ef2b0e9..1fe0b34adb4 100644
--- a/tests/data/base/ArrayAccessObject.php
+++ b/tests/data/base/ArrayAccessObject.php
@@ -29,6 +29,7 @@ class ArrayAccessObject extends TraversableObject implements \ArrayAccess
      * The return value will be casted to boolean if non-boolean was returned.
      * @since 2.0.14.1
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return isset($this->data[$offset]);
@@ -44,6 +45,7 @@ public function offsetExists($offset)
      * @return mixed Can return all value types.
      * @since 2.0.14.1
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return $this->data[$offset];
@@ -62,6 +64,7 @@ public function offsetGet($offset)
      * @return void
      * @since 2.0.14.1
      */
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $value)
     {
         $this->data[$offset] = $value;
@@ -77,6 +80,7 @@ public function offsetSet($offset, $value)
      * @return void
      * @since 2.0.14.1
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         unset($this->data[$offset]);
diff --git a/tests/data/base/TraversableObject.php b/tests/data/base/TraversableObject.php
index c8686b1f7de..037fe736a87 100644
--- a/tests/data/base/TraversableObject.php
+++ b/tests/data/base/TraversableObject.php
@@ -28,6 +28,7 @@ public function __construct(array $array)
      * @throws \Exception
      * @since 5.1.0
      */
+    #[\ReturnTypeWillChange]
     public function count()
     {
         throw new \Exception('Count called on object that should only be traversed.');
@@ -36,6 +37,7 @@ public function count()
     /**
      * {@inheritdoc}
      */
+    #[\ReturnTypeWillChange]
     public function current()
     {
         return $this->data[$this->position];
@@ -44,6 +46,7 @@ public function current()
     /**
      * {@inheritdoc}
      */
+    #[\ReturnTypeWillChange]
     public function next()
     {
         $this->position++;
@@ -52,6 +55,7 @@ public function next()
     /**
      * {@inheritdoc}
      */
+    #[\ReturnTypeWillChange]
     public function key()
     {
         return $this->position;
@@ -60,6 +64,7 @@ public function key()
     /**
      * {@inheritdoc}
      */
+    #[\ReturnTypeWillChange]
     public function valid()
     {
         return array_key_exists($this->position, $this->data);
@@ -68,6 +73,7 @@ public function valid()
     /**
      * {@inheritdoc}
      */
+    #[\ReturnTypeWillChange]
     public function rewind()
     {
         $this->position = 0;
diff --git a/tests/data/i18n/messages/en-150/test.php b/tests/data/i18n/messages/en-150/test.php
new file mode 100644
index 00000000000..f9153009ac8
--- /dev/null
+++ b/tests/data/i18n/messages/en-150/test.php
@@ -0,0 +1,14 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+/**
+ * Messages are copy-pasted in \yiiunit\framework\i18n\DbMessageSourceTest::setUpBeforeClass()
+ * Do not forget to update it in after changing this file!
+ */
+return [
+    'The dog runs fast.' => 'The dog runs fast (en-150).',
+];
diff --git a/tests/data/validators/models/FakedValidationModel.php b/tests/data/validators/models/FakedValidationModel.php
index bb74d969e4d..e96efa958d6 100644
--- a/tests/data/validators/models/FakedValidationModel.php
+++ b/tests/data/validators/models/FakedValidationModel.php
@@ -51,7 +51,7 @@ public function inlineVal($attribute, $params, $validator, $current)
         return true;
     }
 
-    public function clientInlineVal($attribute, $params, $validator, $current)
+    public function clientInlineVal($attribute, $params, $validator, $current, $view = null)
     {
         return \func_get_args();
     }
diff --git a/tests/framework/base/ModelTest.php b/tests/framework/base/ModelTest.php
index 428f3fb1b91..dcd5e893f38 100644
--- a/tests/framework/base/ModelTest.php
+++ b/tests/framework/base/ModelTest.php
@@ -526,7 +526,7 @@ public function rules()
     {
         return [
             [['id'], 'required', 'except' => 'administration'],
-            [['name', 'description'], 'filter', 'filter' => 'trim'],
+            [['name', 'description'], 'filter', 'filter' => 'trim', 'skipOnEmpty' => true],
             [['is_disabled'], 'boolean', 'on' => 'administration'],
         ];
     }
diff --git a/tests/framework/base/ModuleTest.php b/tests/framework/base/ModuleTest.php
index c4b3ae43dce..2df5cc565e3 100644
--- a/tests/framework/base/ModuleTest.php
+++ b/tests/framework/base/ModuleTest.php
@@ -37,11 +37,22 @@ public function testTrueParentModule()
         $this->assertEquals('parent', $child2->module->id);
     }
 
-    public function testControllerPath()
+    public function testGetControllerPath()
     {
         $module = new TestModule('test');
+        $controllerPath = __DIR__ . DIRECTORY_SEPARATOR . 'controllers';
+
         $this->assertEquals('yiiunit\framework\base\controllers', $module->controllerNamespace);
-        $this->assertEquals(__DIR__ . DIRECTORY_SEPARATOR . 'controllers', str_replace(['/', '\\'], DIRECTORY_SEPARATOR, $module->controllerPath));
+        $this->assertEquals($controllerPath, str_replace(['/', '\\'], DIRECTORY_SEPARATOR, $module->getControllerPath()));
+    }
+
+    public function testSetControllerPath()
+    {
+        $module = new TestModule('test');
+        $controllerPath = __DIR__ . DIRECTORY_SEPARATOR . 'controllers';
+
+        $module->setControllerPath($controllerPath);
+        $this->assertEquals($controllerPath, $module->getControllerPath());
     }
 
     public function testSetupVersion()
diff --git a/tests/framework/base/SecurityTest.php b/tests/framework/base/SecurityTest.php
index 215999c12aa..70b958cc9c2 100644
--- a/tests/framework/base/SecurityTest.php
+++ b/tests/framework/base/SecurityTest.php
@@ -1046,7 +1046,12 @@ public function dataProviderDeriveKey()
      */
     public function testHkdf($hash, $ikm, $salt, $info, $l, $prk, $okm)
     {
-        $dk = $this->security->hkdf($hash, hex2bin($ikm), hex2bin($salt), hex2bin($info), $l);
+        $dk = $this->security->hkdf(
+            (string)$hash,
+            hex2bin((string)$ikm),
+            hex2bin((string)$salt),
+            hex2bin((string)$info),
+            $l);
         $this->assertEquals($okm, bin2hex($dk));
     }
 
diff --git a/tests/framework/base/WidgetTest.php b/tests/framework/base/WidgetTest.php
index 33542a18b32..6b21debc8b3 100644
--- a/tests/framework/base/WidgetTest.php
+++ b/tests/framework/base/WidgetTest.php
@@ -7,8 +7,10 @@
 
 namespace yiiunit\framework\base;
 
+use Yii;
 use yii\base\Widget;
 use yii\base\WidgetEvent;
+use yii\di\Container;
 use yiiunit\TestCase;
 
 /**
@@ -46,6 +48,30 @@ public function testBeginEnd()
         $this->assertSame('<run-test>', $output);
     }
 
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/19030
+     */
+    public function testDependencyInjection()
+    {
+        Yii::$container = new Container();
+        Yii::$container->setDefinitions([
+            TestWidgetB::className() => [
+                'class' => TestWidget::className()
+            ]
+        ]);
+
+        ob_start();
+        ob_implicit_flush(false);
+
+        $widget = TestWidgetB::begin(['id' => 'test']);
+        $this->assertTrue($widget instanceof TestWidget);
+        TestWidgetB::end();
+
+        $output = ob_get_clean();
+
+        $this->assertSame('<run-test>', $output);
+    }
+
     /**
      * @depends testBeginEnd
      */
diff --git a/tests/framework/caching/CacheTestCase.php b/tests/framework/caching/CacheTestCase.php
index cb9df3c5086..40b28a72c8f 100644
--- a/tests/framework/caching/CacheTestCase.php
+++ b/tests/framework/caching/CacheTestCase.php
@@ -156,6 +156,13 @@ public function testArrayAccess()
         $this->assertInstanceOf('stdClass', $cache['arrayaccess_test']);
     }
 
+    public function testGetValueNonExistent()
+    {
+        $cache = $this->getCacheInstance();
+
+        $this->assertFalse($this->invokeMethod($cache, 'getValue', ['non_existent_key']));
+    }
+
     public function testGetNonExistent()
     {
         $cache = $this->getCacheInstance();
diff --git a/tests/framework/caching/DbQueryDependencyTest.php b/tests/framework/caching/DbQueryDependencyTest.php
index 0d718544f77..f46c952f1f6 100644
--- a/tests/framework/caching/DbQueryDependencyTest.php
+++ b/tests/framework/caching/DbQueryDependencyTest.php
@@ -108,4 +108,30 @@ public function testCustomMethodCallback()
 
         $this->assertTrue($dependency->isChanged($cache));
     }
+
+    /**
+     * @depends testCustomMethod
+     */
+    public function testReusableAndCustomMethodCallback()
+    {
+        $db = $this->getConnection(false);
+        $cache = new ArrayCache();
+
+        $dependency = new DbQueryDependency();
+        $dependency->db = $db;
+        $dependency->query = (new Query())
+            ->from('dependency_item')
+            ->andWhere(['value' => 'not exist']);
+        $dependency->reusable = true;
+        $dependency->method = function (Query $query, $db) {
+            return $query->orWhere(['value' => 'initial'])->exists($db);
+        };
+
+        $dependency->evaluateDependency($cache);
+        $this->assertFalse($dependency->isChanged($cache));
+
+        $db->createCommand()->delete('dependency_item')->execute();
+
+        $this->assertTrue($dependency->isChanged($cache));
+    }
 }
diff --git a/tests/framework/caching/MemCachedTest.php b/tests/framework/caching/MemCachedTest.php
index 78f66789956..c71a019d2b7 100644
--- a/tests/framework/caching/MemCachedTest.php
+++ b/tests/framework/caching/MemCachedTest.php
@@ -27,6 +27,12 @@ protected function getCacheInstance()
             $this->markTestSkipped('memcached not installed. Skipping.');
         }
 
+        if (PHP_VERSION_ID >= 80100 && version_compare(phpversion('memcached'), '3.1.5', '<=')) {
+            $php_version = phpversion();
+            $memcached_version = phpversion('memcached');
+            $this->markTestSkipped("memcached version $memcached_version is not ready for PHP $php_version. Skipping.");
+        }
+
         // check whether memcached is running and skip tests if not.
         if (!@stream_socket_client('127.0.0.1:11211', $errorNumber, $errorDescription, 0.5)) {
             $this->markTestSkipped('No memcached server running at ' . '127.0.0.1:11211' . ' : ' . $errorNumber . ' - ' . $errorDescription);
diff --git a/tests/framework/console/ControllerTest.php b/tests/framework/console/ControllerTest.php
index d5ce60c0762..1a6dd743d7e 100644
--- a/tests/framework/console/ControllerTest.php
+++ b/tests/framework/console/ControllerTest.php
@@ -286,18 +286,24 @@ public function testHelpOptionWithModule()
         $this->assertEquals(FakeHelpController::getActionIndexLastCallParams(), ['news/posts/index']);
     }
 
-
     /**
-     * Tests if action help does not include (class) type hinted arguments.
-     * @see #10372
+     * @see https://github.com/yiisoft/yii2/issues/19028
      */
-    public function testHelpSkipsTypeHintedArguments()
+    public function testGetActionArgsHelp()
     {
         $controller = new FakeController('fake', Yii::$app);
-        $help = $controller->getActionArgsHelp($controller->createAction('with-complex-type-hint'));
-
-        $this->assertArrayNotHasKey('typedArgument', $help);
-        $this->assertArrayHasKey('simpleArgument', $help);
+        $help = $controller->getActionArgsHelp($controller->createAction('aksi2'));
+
+        $this->assertArrayHasKey('values', $help);
+        if (PHP_MAJOR_VERSION > 5) {
+            // declared type
+            $this->assertEquals('array', $help['values']['type']);
+        } else {
+            $this->markTestSkipped('Can not test declared type of parameter $values on PHP < 7.0');
+        }
+        $this->assertArrayHasKey('value', $help);
+        // PHPDoc type
+        $this->assertEquals('string', $help['value']['type']);
     }
 
     public function testGetActionHelpSummaryOnNull()
diff --git a/tests/framework/console/FakeController.php b/tests/framework/console/FakeController.php
index d3a39b27748..23b38fecbc8 100644
--- a/tests/framework/console/FakeController.php
+++ b/tests/framework/console/FakeController.php
@@ -57,9 +57,13 @@ public function actionIndex()
 
     public function actionAksi1($fromParam, $other = 'default')
     {
-        return[$fromParam, $other];
+        return [$fromParam, $other];
     }
 
+    /**
+     * @param string $value the string value
+     * @return array
+     */
     public function actionAksi2(array $values, $value)
     {
         return [$values, $value];
@@ -89,11 +93,6 @@ public function actionTrimargs($param1 = null)
         return func_get_args();
     }
 
-    public function actionWithComplexTypeHint(self $typedArgument, $simpleArgument)
-    {
-        return $simpleArgument;
-    }
-
     public function actionStatus($status = 0)
     {
         return $status;
diff --git a/tests/framework/console/controllers/HelpControllerTest.php b/tests/framework/console/controllers/HelpControllerTest.php
index c86d6ef40de..231accc0ed1 100644
--- a/tests/framework/console/controllers/HelpControllerTest.php
+++ b/tests/framework/console/controllers/HelpControllerTest.php
@@ -123,7 +123,7 @@ public function testActionListActionOptions()
         ]);
         $result = Console::stripAnsiFormat($this->runControllerAction('list-action-options', ['action' => 'help/list-action-options']));
         $this->assertEqualsWithoutLE(<<<'STRING'
-action:route to action
+action: route to action
 
 --interactive: whether to run the command interactively.
 --color: whether to enable ANSI color in the output.If not set, ANSI color will only be enabled for terminals that support it.
diff --git a/tests/framework/console/controllers/MigrateControllerTest.php b/tests/framework/console/controllers/MigrateControllerTest.php
index 31e235adaea..1a406b40b68 100644
--- a/tests/framework/console/controllers/MigrateControllerTest.php
+++ b/tests/framework/console/controllers/MigrateControllerTest.php
@@ -78,6 +78,22 @@ protected function assertCommandCreatedFile($expectedFile, $migrationName, $tabl
         $this->assertFileContent($expectedFile, $class, $table, $namespace);
     }
 
+    /**
+     * Check config namespace but without input namespace
+     * @param mixed $expectedFile 
+     * @param mixed $migrationName 
+     * @param mixed $table 
+     * @param array $params 
+     */
+    protected function assertCommandCreatedFileWithoutNamespaceInput($expectedFile, $migrationName, $table, $params = [])
+    {
+        $params[0] = $migrationName;
+        list($config, $namespace, $class) = $this->prepareMigrationNameData($this->migrationNamespace . '\\' . $migrationName);
+
+        $this->runMigrateControllerAction('create', $params, $config);
+        $this->assertFileContent($expectedFile, $class, $table, $namespace);
+    }
+
     public function assertFileContentJunction($expectedFile, $class, $junctionTable, $firstTable, $secondTable, $namespace = null)
     {
         if ($namespace) {
@@ -101,6 +117,23 @@ protected function assertCommandCreatedJunctionFile($expectedFile, $migrationNam
         $this->assertFileContentJunction($expectedFile, $class, $junctionTable, $firstTable, $secondTable, $namespace);
     }
 
+    /**
+     * Check config namespace but without input namespace
+     * @param mixed $expectedFile 
+     * @param mixed $migrationName 
+     * @param mixed $junctionTable 
+     * @param mixed $firstTable 
+     * @param mixed $secondTable 
+     */
+    protected function assertCommandCreatedJunctionFileWithoutNamespaceInput($expectedFile, $migrationName, $junctionTable, $firstTable, $secondTable)
+    {
+        list($config, $namespace, $class) = $this->prepareMigrationNameData($this->migrationNamespace . '\\' . $migrationName);
+
+        $this->runMigrateControllerAction('create', [$migrationName], $config);
+        $this->assertSame(ExitCode::OK, $this->getExitCode());
+        $this->assertFileContentJunction($expectedFile, $class, $junctionTable, $firstTable, $secondTable, $namespace);
+    }
+
     protected function prepareMigrationNameData($migrationName)
     {
         $config = [];
@@ -318,6 +351,7 @@ public function testGenerateMigration($expectedFile, $migrationName, $table, $pa
             $table,
             $params
         );
+        $this->assertCommandCreatedFileWithoutNamespaceInput($expectedFile, $migrationName, $table, $params);
     }
 
     /**
@@ -369,6 +403,13 @@ public function testGenerateJunctionMigration($migrationName, $junctionTable, $f
             $firstTable,
             $secondTable
         );
+        $this->assertCommandCreatedJunctionFileWithoutNamespaceInput(
+            'junction_test',
+            $migrationName,
+            $junctionTable,
+            $firstTable,
+            $secondTable
+        );
     }
 
     public function testUpdatingLongNamedMigration()
diff --git a/tests/framework/data/DataFilterTest.php b/tests/framework/data/DataFilterTest.php
index 24908539808..5408ca1d287 100644
--- a/tests/framework/data/DataFilterTest.php
+++ b/tests/framework/data/DataFilterTest.php
@@ -332,6 +332,18 @@ public function dataProviderNormalize()
                     ],
                 ],
             ],
+            [
+                [
+                    'name' => [
+                        'like' => 'foo',
+                    ],
+                ],
+                [
+                    'name' => [
+                        'LIKE' => 'foo',
+                    ],
+                ],
+            ],
             [
                 [
                     'and' => [
diff --git a/tests/framework/db/ActiveRecordTest.php b/tests/framework/db/ActiveRecordTest.php
index 0088a9091a0..03bdd0ef689 100644
--- a/tests/framework/db/ActiveRecordTest.php
+++ b/tests/framework/db/ActiveRecordTest.php
@@ -1361,7 +1361,7 @@ public function testDefaultValues()
         $model->char_col2 = 'not something';
         $model->loadDefaultValues(false);
         $this->assertEquals('something', $model->char_col2);
-        
+
         // Cropped model with 2 attributes/columns
         $model = new CroppedType();
         $model->loadDefaultValues();
@@ -1529,6 +1529,29 @@ public function testPopulateWithoutPk()
         ];
         $this->assertEquals($expected, $aggregation);
 
+        // tests with single pk asArray with eager loading
+        $aggregation = Customer::find()
+            ->select(['{{customer}}.[[status]]', 'SUM({{order}}.[[total]]) AS [[sumtotal]]'])
+            ->joinWith('ordersPlain')
+            ->groupBy('{{customer}}.[[status]]')
+            ->orderBy('status')
+            ->asArray()
+            ->all();
+
+        $expected = [
+            [
+                'status' => 1,
+                'sumtotal' => 183,
+                'ordersPlain' => [],
+            ],
+            [
+                'status' => 2,
+                'sumtotal' => 0,
+                'ordersPlain' => [],
+            ],
+        ];
+        $this->assertEquals($expected, $aggregation);
+
         // tests with single pk with Models
         $aggregation = Customer::find()
             ->select(['{{customer}}.[[status]]', 'SUM({{order}}.[[total]]) AS [[sumTotal]]'])
@@ -2136,4 +2159,15 @@ public function testUnlinkWithViaOnCondition($delete, $count)
             'item_id' => null,
         ]));
     }
+
+    public function testVirtualRelation()
+    {
+        /* @var $orderClass ActiveRecordInterface */
+        $orderClass = $this->getOrderClass();
+        $order = $orderClass::findOne(2);
+        $order->virtualCustomerId = $order->customer_id;
+
+        $this->assertNotNull($order->virtualCustomer);
+    }
+
 }
diff --git a/tests/framework/db/QueryBuilderTest.php b/tests/framework/db/QueryBuilderTest.php
index 3f0fd800e70..88c6319dc7a 100644
--- a/tests/framework/db/QueryBuilderTest.php
+++ b/tests/framework/db/QueryBuilderTest.php
@@ -1184,6 +1184,7 @@ public function conditionProvider()
             //in using array object containing only null value
             [['in', 'id', new TraversableObject([null])], '[[id]] IS NULL', []],
             [['not in', 'id', new TraversableObject([null])], '[[id]] IS NOT NULL', []],
+            [['not in', new Expression('id'), new TraversableObject([null])], '[[id]] IS NOT NULL', []],
 
             'composite in using array objects' => [
                 ['in', new TraversableObject(['id', 'name']), new TraversableObject([
@@ -1196,6 +1197,7 @@ public function conditionProvider()
 
             // in object conditions
             [new InCondition('id', 'in', 1), '[[id]]=:qp0', [':qp0' => 1]],
+            [new InCondition(new Expression('id'), 'in', 1), '[[id]]=:qp0', [':qp0' => 1]],
             [new InCondition('id', 'in', [1]), '[[id]]=:qp0', [':qp0' => 1]],
             [new InCondition('id', 'not in', 1), '[[id]]<>:qp0', [':qp0' => 1]],
             [new InCondition('id', 'not in', [1]), '[[id]]<>:qp0', [':qp0' => 1]],
@@ -1237,6 +1239,7 @@ public function conditionProvider()
             case 'sqlite':
                 $conditions = array_merge($conditions, [
                     [['in', ['id', 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '(([[id]] = :qp0 AND [[name]] = :qp1) OR ([[id]] = :qp2 AND [[name]] = :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
+                    [['in', [new Expression('id'), 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '(([[id]] = :qp0 AND [[name]] = :qp1) OR ([[id]] = :qp2 AND [[name]] = :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
                     [['not in', ['id', 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '(([[id]] != :qp0 OR [[name]] != :qp1) AND ([[id]] != :qp2 OR [[name]] != :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
                     //[ ['in', ['id', 'name'], (new Query())->select(['id', 'name'])->from('users')->where(['active' => 1])], 'EXISTS (SELECT 1 FROM (SELECT [[id]], [[name]] FROM [[users]] WHERE [[active]]=:qp0) AS a WHERE a.[[id]] = [[id AND a.]]name[[ = ]]name`)', [':qp0' => 1] ],
                     //[ ['not in', ['id', 'name'], (new Query())->select(['id', 'name'])->from('users')->where(['active' => 1])], 'NOT EXISTS (SELECT 1 FROM (SELECT [[id]], [[name]] FROM [[users]] WHERE [[active]]=:qp0) AS a WHERE a.[[id]] = [[id]] AND a.[[name = ]]name`)', [':qp0' => 1] ],
@@ -1246,6 +1249,7 @@ public function conditionProvider()
                 $conditions = array_merge($conditions, [
                     [['in', ['id', 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '([[id]], [[name]]) IN ((:qp0, :qp1), (:qp2, :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
                     [['not in', ['id', 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '([[id]], [[name]]) NOT IN ((:qp0, :qp1), (:qp2, :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
+                    [['not in', [new Expression('id'), 'name'], [['id' => 1, 'name' => 'foo'], ['id' => 2, 'name' => 'bar']]], '([[id]], [[name]]) NOT IN ((:qp0, :qp1), (:qp2, :qp3))', [':qp0' => 1, ':qp1' => 'foo', ':qp2' => 2, ':qp3' => 'bar']],
                     [['in', ['id', 'name'], (new Query())->select(['id', 'name'])->from('users')->where(['active' => 1])], '([[id]], [[name]]) IN (SELECT [[id]], [[name]] FROM [[users]] WHERE [[active]]=:qp0)', [':qp0' => 1]],
                     [['not in', ['id', 'name'], (new Query())->select(['id', 'name'])->from('users')->where(['active' => 1])], '([[id]], [[name]]) NOT IN (SELECT [[id]], [[name]] FROM [[users]] WHERE [[active]]=:qp0)', [':qp0' => 1]],
                 ]);
diff --git a/tests/framework/db/QueryTest.php b/tests/framework/db/QueryTest.php
index ac7df07ea39..24176ea0b4e 100644
--- a/tests/framework/db/QueryTest.php
+++ b/tests/framework/db/QueryTest.php
@@ -21,7 +21,7 @@ public function testSelect()
         $query = new Query();
         $query->select('*');
         $this->assertEquals(['*' => '*'], $query->select);
-        $this->assertNull($query->distinct);
+        $this->assertFalse($query->distinct);
         $this->assertNull($query->selectOption);
 
         $query = new Query();
diff --git a/tests/framework/db/mysql/SchemaTest.php b/tests/framework/db/mysql/SchemaTest.php
index b5419821e8e..4fd27951f25 100644
--- a/tests/framework/db/mysql/SchemaTest.php
+++ b/tests/framework/db/mysql/SchemaTest.php
@@ -8,6 +8,8 @@
 namespace yiiunit\framework\db\mysql;
 use yii\db\Expression;
 
+use yii\db\mysql\ColumnSchema;
+use yii\db\mysql\Schema;
 use yiiunit\framework\db\AnyCaseValue;
 
 /**
@@ -101,7 +103,7 @@ public function testAlternativeDisplayOfDefaultCurrentTimestampInMariaDB()
          * We do not have a real database MariaDB >= 10.2.3 for tests, so we emulate the information that database
          * returns in response to the query `SHOW FULL COLUMNS FROM ...`
          */
-        $schema = new \yii\db\mysql\Schema();
+        $schema = new Schema();
         $column = $this->invokeMethod($schema, 'loadColumnSchema', [[
             'field' => 'emulated_MariaDB_field',
             'type' => 'timestamp',
@@ -114,11 +116,36 @@ public function testAlternativeDisplayOfDefaultCurrentTimestampInMariaDB()
             'comment' => '',
         ]]);
 
-        $this->assertInstanceOf(\yii\db\mysql\ColumnSchema::className(), $column);
+        $this->assertInstanceOf(ColumnSchema::className(), $column);
         $this->assertInstanceOf(Expression::className(), $column->defaultValue);
         $this->assertEquals('CURRENT_TIMESTAMP', $column->defaultValue);
     }
 
+    /**
+     * When displayed in the INFORMATION_SCHEMA.COLUMNS table, a default CURRENT TIMESTAMP is provided
+     * as NULL.
+     *
+     * @see https://github.com/yiisoft/yii2/issues/19047
+     */
+    public function testAlternativeDisplayOfDefaultCurrentTimestampAsNullInMariaDB()
+    {
+        $schema = new Schema();
+        $column = $this->invokeMethod($schema, 'loadColumnSchema', [[
+            'field' => 'emulated_MariaDB_field',
+            'type' => 'timestamp',
+            'collation' => NULL,
+            'null' => 'NO',
+            'key' => '',
+            'default' => NULL,
+            'extra' => '',
+            'privileges' => 'select,insert,update,references',
+            'comment' => '',
+        ]]);
+
+        $this->assertInstanceOf(ColumnSchema::className(), $column);
+        $this->assertEquals(NULL, $column->defaultValue);
+    }
+
     public function getExpectedColumns()
     {
         $version = $this->getConnection()->getSchema()->getServerVersion();
diff --git a/tests/framework/db/mysql/connection/DeadLockTest.php b/tests/framework/db/mysql/connection/DeadLockTest.php
index 4e6dd8482a6..8c553f65e53 100644
--- a/tests/framework/db/mysql/connection/DeadLockTest.php
+++ b/tests/framework/db/mysql/connection/DeadLockTest.php
@@ -31,6 +31,9 @@ class DeadLockTest extends \yiiunit\framework\db\mysql\ConnectionTest
      */
     public function testDeadlockException()
     {
+        if (PHP_VERSION_ID >= 70400 && PHP_VERSION_ID < 70500) {
+            $this->markTestSkipped('Stable failed in PHP 7.4');
+        }
         if (!\function_exists('pcntl_fork')) {
             $this->markTestSkipped('pcntl_fork() is not available');
         }
diff --git a/tests/framework/di/ContainerTest.php b/tests/framework/di/ContainerTest.php
index 71c8e2f2691..f854fc63de5 100644
--- a/tests/framework/di/ContainerTest.php
+++ b/tests/framework/di/ContainerTest.php
@@ -24,6 +24,7 @@
 use yiiunit\framework\di\stubs\FooProperty;
 use yiiunit\framework\di\stubs\Kappa;
 use yiiunit\framework\di\stubs\Qux;
+use yiiunit\framework\di\stubs\QuxAnother;
 use yiiunit\framework\di\stubs\QuxInterface;
 use yiiunit\framework\di\stubs\QuxFactory;
 use yiiunit\framework\di\stubs\UnionTypeNotNull;
@@ -673,4 +674,56 @@ public function testUnionTypeWithClassConstructorParameters()
         $this->expectException('TypeError');
         (new Container())->get(UnionTypeNotNull::className());
     }
+
+    public function testResolveCallableDependenciesUnionTypes()
+    {
+        if (PHP_VERSION_ID < 80000) {
+            $this->markTestSkipped('Can not be tested on PHP < 8.0');
+            return;
+        }
+
+        $this->mockApplication([
+            'components' => [
+                Beta::className(),
+            ],
+        ]);
+
+        Yii::$container->set('yiiunit\framework\di\stubs\QuxInterface', [
+            'class' => Qux::className(),
+        ]);
+
+        $className = 'yiiunit\framework\di\stubs\StaticMethodsWithUnionTypes';
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withBetaUnion']);
+        $this->assertInstanceOf(Beta::classname(), $params[0]);
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withBetaUnionInverse']);
+        $this->assertInstanceOf(Beta::classname(), $params[0]);
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withBetaAndQuxUnion']);
+        $this->assertInstanceOf(Beta::classname(), $params[0]);
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withQuxAndBetaUnion']);
+        $this->assertInstanceOf(Qux::classname(), $params[0]);
+    }
+
+    public function testResolveCallableDependenciesIntersectionTypes()
+    {
+        if (PHP_VERSION_ID < 80100) {
+            $this->markTestSkipped('Can not be tested on PHP < 8.1');
+            return;
+        }
+
+        Yii::$container->set('yiiunit\framework\di\stubs\QuxInterface', [
+            'class' => Qux::className(),
+        ]);
+
+        $className = 'yiiunit\framework\di\stubs\StaticMethodsWithIntersectionTypes';
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withQuxInterfaceAndQuxAnotherIntersection']);
+        $this->assertInstanceOf(Qux::classname(), $params[0]);
+
+        $params = Yii::$container->resolveCallableDependencies([$className, 'withQuxAnotherAndQuxInterfaceIntersection']);
+        $this->assertInstanceOf(QuxAnother::classname(), $params[0]);
+    }
 }
diff --git a/tests/framework/di/stubs/QuxAnother.php b/tests/framework/di/stubs/QuxAnother.php
new file mode 100644
index 00000000000..65ca672b465
--- /dev/null
+++ b/tests/framework/di/stubs/QuxAnother.php
@@ -0,0 +1,17 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\di\stubs;
+
+use yii\base\BaseObject;
+
+class QuxAnother extends BaseObject implements QuxInterface
+{
+    public function quxMethod()
+    {
+    }
+}
diff --git a/tests/framework/di/stubs/StaticMethodsWithIntersectionTypes.php b/tests/framework/di/stubs/StaticMethodsWithIntersectionTypes.php
new file mode 100644
index 00000000000..1bb348fdd98
--- /dev/null
+++ b/tests/framework/di/stubs/StaticMethodsWithIntersectionTypes.php
@@ -0,0 +1,15 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+// Syntax valid only for PHP 8.1+
+class StaticMethodsWithIntersectionTypes
+{
+    public static function withQuxInterfaceAndQuxAnotherIntersection(QuxInterface & QuxAnother $Qux)
+    {
+    }
+
+    public static function withQuxAnotherAndQuxInterfaceIntersection(QuxAnother & QuxInterface $Qux)
+    {
+    }
+}
diff --git a/tests/framework/di/stubs/StaticMethodsWithUnionTypes.php b/tests/framework/di/stubs/StaticMethodsWithUnionTypes.php
new file mode 100644
index 00000000000..bc257ac48f2
--- /dev/null
+++ b/tests/framework/di/stubs/StaticMethodsWithUnionTypes.php
@@ -0,0 +1,23 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+// Syntax valid only for PHP 8.0+
+class StaticMethodsWithUnionTypes
+{
+    public static function withBetaUnion(string | Beta $beta)
+    {
+    }
+
+    public static function withBetaUnionInverse(Beta | string $beta)
+    {
+    }
+
+    public static function withBetaAndQuxUnion(Beta | QuxInterface $betaOrQux)
+    {
+    }
+
+    public static function withQuxAndBetaUnion(QuxInterface | Beta $betaOrQux)
+    {
+    }
+}
diff --git a/tests/framework/filters/PageCacheTest.php b/tests/framework/filters/PageCacheTest.php
index f13ce4890c0..3b06411f67c 100644
--- a/tests/framework/filters/PageCacheTest.php
+++ b/tests/framework/filters/PageCacheTest.php
@@ -116,6 +116,16 @@ public function cacheTestCaseProvider()
                     'test-header-2' => false,
                 ],
             ]],
+            [[
+                'name' => 'originalNameHeaders',
+                'properties' => [
+                    'cacheHeaders' => ['Test-Header-1'],
+                ],
+                'headers' => [
+                    'Test-Header-1' => true,
+                    'Test-Header-2' => false,
+                ],
+            ]],
 
             // All together
             [[
@@ -233,10 +243,12 @@ public function testCache($testCase)
         }
         // Headers
         if (isset($testCase['headers'])) {
+            $headersExpected = Yii::$app->response->headers->toOriginalArray();
             foreach ($testCase['headers'] as $name => $expected) {
                 $this->assertSame($expected, Yii::$app->response->headers->has($name), $testCase['name']);
                 if ($expected) {
                     $this->assertSame($headers[$name], Yii::$app->response->headers->get($name), $testCase['name']);
+                    $this->assertArrayHasKey($name, $headersExpected);
                 }
             }
         }
diff --git a/tests/framework/filters/auth/BasicAuthTest.php b/tests/framework/filters/auth/BasicAuthTest.php
index f5d552493e5..498f1456ca5 100644
--- a/tests/framework/filters/auth/BasicAuthTest.php
+++ b/tests/framework/filters/auth/BasicAuthTest.php
@@ -78,7 +78,7 @@ public function testHttpBasicAuthCustom($token, $login)
         $filter = [
             'class' => HttpBasicAuth::className(),
             'auth' => function ($username, $password) {
-                if (preg_match('/\d$/', $username)) {
+                if (preg_match('/\d$/', (string)$username)) {
                     return UserIdentity::findIdentity($username);
                 }
 
diff --git a/tests/framework/filters/auth/CompositeAuthTest.php b/tests/framework/filters/auth/CompositeAuthTest.php
index 77c43207664..a9fe7c73e69 100644
--- a/tests/framework/filters/auth/CompositeAuthTest.php
+++ b/tests/framework/filters/auth/CompositeAuthTest.php
@@ -8,20 +8,40 @@
 namespace yiiunit\framework\filters\auth;
 
 use Yii;
-use yii\filters\auth\AuthMethod;
 use yii\filters\auth\CompositeAuth;
 use yii\filters\auth\HttpBearerAuth;
+use yii\filters\auth\HttpHeaderAuth;
 use yii\rest\Controller;
 use yiiunit\framework\web\UserIdentity;
 
 /**
  * @author Ezekiel Fernandez <ezekiel_p_fernandez@yahoo.com>
  */
-class TestAuth extends AuthMethod
+class TestAuth extends HttpHeaderAuth
 {
     public function authenticate($user, $request, $response)
     {
-        return $user;
+        $authHeader = $request->getHeaders()->get($this->header);
+
+        if ($authHeader !== null) {
+            if ($this->pattern !== null) {
+                if (preg_match($this->pattern, $authHeader, $matches)) {
+                    $authHeader = $matches[1];
+                } else {
+                    return null;
+                }
+            }
+
+            $identity = \yiiunit\framework\filters\stubs\UserIdentity::findIdentity($authHeader);
+            if ($identity === null) {
+                $this->challenge($response);
+                $this->handleFailure($response);
+            }
+
+            return $identity;
+        }
+
+        return null;
     }
 }
 
@@ -29,6 +49,8 @@ class TestController extends Controller
 {
     public $authMethods = [];
 
+    public $optional = [];
+
     public function actionA()
     {
         return 'success';
@@ -72,6 +94,7 @@ public function behaviors()
                 'authMethods' => $this->authMethods ?: [
                     TestAuth::className(),
                 ],
+                'optional' => $this->optional
             ],
         ];
     }
@@ -106,6 +129,7 @@ protected function setUp()
     public function testCallingRunWithCompleteRoute()
     {
         /** @var TestController $controller */
+        Yii::$app->request->headers->set('X-Api-Key', 'user1');
         $controller = Yii::$app->createController('test')[0];
         $this->assertEquals('success', $controller->run('test/d'));
     }
@@ -116,6 +140,7 @@ public function testCallingRunWithCompleteRoute()
     public function testRunAction()
     {
         /** @var TestController $controller */
+        Yii::$app->request->headers->set('X-Api-Key', 'user1');
         $controller = Yii::$app->createController('test')[0];
         $this->assertEquals('success', $controller->run('b'));
     }
@@ -123,22 +148,123 @@ public function testRunAction()
     public function testRunButWithActionIdOnly()
     {
         /** @var TestController $controller */
+        Yii::$app->request->headers->set('X-Api-Key', 'user1');
         $controller = Yii::$app->createController('test')[0];
         $this->assertEquals('success', $controller->run('c'));
     }
 
-    public function testCompositeAuth()
+    public function testRunWithWrongToken()
+    {
+        /** @var TestController $controller */
+        Yii::$app->request->headers->set('X-Api-Key', 'wrong-user');
+        $controller = Yii::$app->createController('test')[0];
+        $this->expectException('yii\web\UnauthorizedHttpException');
+        $controller->run('a');
+    }
+
+    public function testRunWithoutAuthHeader()
+    {
+        /** @var TestController $controller */
+        $controller = Yii::$app->createController('test')[0];
+        $this->expectException('yii\web\UnauthorizedHttpException');
+        $controller->run('a');
+    }
+
+    public function testRunWithOptionalAction()
     {
-        Yii::$app->request->headers->set('Authorization', base64_encode("foo:bar"));
-        /** @var TestAuthController $controller */
+        /** @var TestController $controller */
         $controller = Yii::$app->createController('test')[0];
-        $controller->authMethods = [
-            HttpBearerAuth::className(),
-            TestAuth::className(),
+        $controller->optional = ['a'];
+        $this->assertEquals('success', $controller->run('a'));
+    }
+
+    public function compositeAuthDataProvider()
+    {
+        return [
+            //base usage
+            [
+                [
+                    HttpBearerAuth::className(),
+                    TestAuth::className(),
+                ],
+                'b',
+                true
+            ],
+            //empty auth methods
+            [
+                [],
+                'b',
+                true
+            ],
+            //only "a", run "b"
+            [
+                [
+                    HttpBearerAuth::className(),
+                    [
+                        'class' => TestAuth::className(),
+                        'only' => ['a']
+                    ],
+                ],
+                'b',
+                false
+            ],
+            //only "a", run "a"
+            [
+                [
+                    HttpBearerAuth::className(),
+                    [
+                        'class' => TestAuth::className(),
+                        'only' => ['a']
+                    ],
+                ],
+                'a',
+                true
+            ],
+            //except "b", run "a"
+            [
+                [
+                    HttpBearerAuth::className(),
+                    [
+                        'class' => TestAuth::className(),
+                        'except' => ['b']
+                    ],
+                ],
+                'a',
+                true
+            ],
+            //except "b", run "b"
+            [
+                [
+                    HttpBearerAuth::className(),
+                    [
+                        'class' => TestAuth::className(),
+                        'except' => ['b']
+                    ],
+                ],
+                'b',
+                false
+            ]
         ];
-        try {
-            $this->assertEquals('success', $controller->run('b'));
-        } catch (UnauthorizedHttpException $e) {
+    }
+
+    /**
+     * @param array $authMethods
+     * @param string $actionId
+     * @param bool $expectedAuth
+     *
+     * @dataProvider compositeAuthDataProvider
+     */
+    public function testCompositeAuth($authMethods, $actionId, $expectedAuth)
+    {
+        Yii::$app->request->headers->set('X-Api-Key', 'user1');
+        /** @var TestController $controller */
+        $controller = Yii::$app->createController('test')[0];
+        $controller->authMethods = $authMethods;
+        if( $expectedAuth)
+            $this->assertEquals('success', $controller->run($actionId));
+        else {
+            $this->expectException('yii\web\UnauthorizedHttpException');
+            $controller->run($actionId);
         }
     }
 }
diff --git a/tests/framework/helpers/ArrayHelperTest.php b/tests/framework/helpers/ArrayHelperTest.php
index 614d074af78..89a047e4408 100644
--- a/tests/framework/helpers/ArrayHelperTest.php
+++ b/tests/framework/helpers/ArrayHelperTest.php
@@ -1185,29 +1185,35 @@ public function testHtmlDecode()
             3 => 'blank',
             [
                 '<>' => 'a&lt;&gt;b',
+                '&lt;a&gt;' => '&lt;a href=&quot;index.php?a=1&amp;b=2&quot;&gt;link&lt;/a&gt;',
                 '23' => true,
             ],
         ];
-        $this->assertEquals([
+
+        $expected = [
             'abc' => '123',
             '&lt;' => '>',
             'cde' => false,
             3 => 'blank',
             [
                 '<>' => 'a<>b',
+                '&lt;a&gt;' => '<a href="index.php?a=1&b=2">link</a>',
                 '23' => true,
             ],
-        ], ArrayHelper::htmlDecode($array));
-        $this->assertEquals([
+        ];
+        $this->assertEquals($expected, ArrayHelper::htmlDecode($array));
+        $expected = [
             'abc' => '123',
             '<' => '>',
             'cde' => false,
             3 => 'blank',
             [
                 '<>' => 'a<>b',
+                '<a>' => '<a href="index.php?a=1&b=2">link</a>',
                 '23' => true,
             ],
-        ], ArrayHelper::htmlDecode($array, false));
+        ];
+        $this->assertEquals($expected, ArrayHelper::htmlDecode($array, false));
     }
 
     public function testIsIn()
@@ -1436,6 +1442,72 @@ public function testArrayAccessWithMagicProperty()
         $this->assertEquals(42, ArrayHelper::getValue($model, 'magic'));
         $this->assertEquals('ta-da', ArrayHelper::getValue($model, 'moreMagic'));
     }
+
+    /**
+     * @dataProvider dataProviderRecursiveSort
+     *
+     * @return void
+     */
+    public function testRecursiveSort($expected_result, $input_array)
+    {
+        $actual = ArrayHelper::recursiveSort($input_array);
+        $this->assertEquals($expected_result, $actual);
+    }
+
+    /**
+     * Data provider for [[testRecursiveSort()]].
+     * @return array test data
+     */
+    public function dataProviderRecursiveSort()
+    {
+        return [
+            //Normal index array
+            [
+                [1, 2, 3, 4],
+                [4, 1, 3, 2]
+            ],
+            //Normal associative array
+            [
+                ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4],
+                ['b' => 2, 'a' => 1, 'd' => 4, 'c' => 3],
+            ],
+            //Normal index array
+            [
+                [1, 2, 3, 4],
+                [4, 1, 3, 2]
+            ],
+            //Multidimensional associative array
+            [
+                [
+                    'a' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4],
+                    'b' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4],
+                    'c' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4],
+                    'd' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4],
+                ],
+                [
+                    'b' => ['a' => 1, 'd' => 4, 'b' => 2, 'c' => 3],
+                    'd' => ['b' => 2, 'c' => 3, 'a' => 1, 'd' => 4],
+                    'c' => ['c' => 3, 'a' => 1, 'd' => 4, 'b' => 2],
+                    'a' => ['d' => 4, 'b' => 2, 'c' => 3, 'a' => 1],
+                ],
+            ],
+            //Multidimensional associative array
+            [
+                [
+                    'a' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4]],
+                    'b' => ['a' => 1, 'b' => 2, 'c' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4], 'd' => 4],
+                    'c' => ['a' => 1, 'b' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4], 'c' => 3, 'd' => 4],
+                    'd' => ['a' => ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4], 'b' => 2, 'c' => 3, 'd' => 4],
+                ],
+                [
+                    'b' => ['a' => 1, 'd' => 4, 'b' => 2, 'c' => ['b' => 2, 'c' => 3, 'a' => 1, 'd' => 4]],
+                    'd' => ['b' => 2, 'c' => 3, 'a' => ['a' => 1, 'd' => 4, 'b' => 2, 'c' => 3], 'd' => 4],
+                    'c' => ['c' => 3, 'a' => 1, 'd' => 4, 'b' => ['c' => 3, 'a' => 1, 'd' => 4, 'b' => 2]],
+                    'a' => ['d' => ['d' => 4, 'b' => 2, 'c' => 3, 'a' => 1], 'b' => 2, 'c' => 3, 'a' => 1],
+                ]
+            ],
+        ];
+    }
 }
 
 class Post1
@@ -1477,6 +1549,7 @@ public function __construct($container)
         $this->container = $container;
     }
 
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $value)
     {
         if (is_null($offset)) {
@@ -1486,16 +1559,19 @@ public function offsetSet($offset, $value)
         }
     }
 
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset)
     {
         return array_key_exists($offset, $this->container);
     }
 
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset)
     {
         unset($this->container[$offset]);
     }
 
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return $this->offsetExists($offset) ? $this->container[$offset] : null;
@@ -1519,26 +1595,31 @@ protected function getContainerKey($keyIndex)
         return array_key_exists($keyIndex, $keys) ? $keys[$keyIndex] : false;
     }
 
+    #[\ReturnTypeWillChange]
     public function rewind()
     {
         $this->position = 0;
     }
 
+    #[\ReturnTypeWillChange]
     public function current()
     {
         return $this->offsetGet($this->getContainerKey($this->position));
     }
 
+    #[\ReturnTypeWillChange]
     public function key()
     {
         return $this->getContainerKey($this->position);
     }
 
+    #[\ReturnTypeWillChange]
     public function next()
     {
         ++$this->position;
     }
 
+    #[\ReturnTypeWillChange]
     public function valid()
     {
         $key = $this->getContainerKey($this->position);
diff --git a/tests/framework/helpers/FileHelperTest.php b/tests/framework/helpers/FileHelperTest.php
index 09da3d29606..ae59b54d043 100644
--- a/tests/framework/helpers/FileHelperTest.php
+++ b/tests/framework/helpers/FileHelperTest.php
@@ -717,6 +717,24 @@ public function testGetMimeType()
         $this->assertTrue(in_array(FileHelper::getMimeType($file), ['application/json', 'text/plain']));
     }
 
+    public function testGetUploadedImageMimeTypes()
+    {
+        $ds = DIRECTORY_SEPARATOR;
+        $phpunitPath = Yii::getAlias('@yiiunit');
+        $runtimeLocation = Yii::getAlias('@yiiunit/runtime');
+        $resourceSourceLocation = "{$phpunitPath}{$ds}framework{$ds}validators{$ds}data{$ds}mimeType";
+
+        $pngFile = "{$runtimeLocation}{$ds}php1234";
+        copy("{$resourceSourceLocation}{$ds}test.png", $pngFile);
+
+        $this->assertEquals('image/png', FileHelper::getMimeType($pngFile));
+
+        $jpgFile = "{$runtimeLocation}{$ds}php4567";
+        copy("{$resourceSourceLocation}{$ds}test.jpg", $jpgFile);
+
+        $this->assertEquals('image/jpeg', FileHelper::getMimeType($jpgFile));
+    }
+
     public function testNormalizePath()
     {
         $ds = DIRECTORY_SEPARATOR;
diff --git a/tests/framework/helpers/HtmlTest.php b/tests/framework/helpers/HtmlTest.php
index 5b2c9de0090..9e8eb4b5003 100644
--- a/tests/framework/helpers/HtmlTest.php
+++ b/tests/framework/helpers/HtmlTest.php
@@ -775,6 +775,14 @@ public function testCheckboxList()
 <label><input type="checkbox" name="test[]" value="1.10"> 1.10</label></div>
 EOD;
         $this->assertEqualsWithoutLE($expected, Html::checkboxList('test', ['1.1'], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10'], ['strict' => true]));
+        $this->assertEqualsWithoutLE($expected, Html::checkboxList('test', [1.1], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10'], ['strict' => true]));
+
+        $expected = <<<'EOD'
+<div><label><input type="checkbox" name="test[]" value="1"> 1</label>
+<label><input type="checkbox" name="test[]" value="1.1" checked> 1.1</label>
+<label><input type="checkbox" name="test[]" value="1.10" checked> 1.10</label></div>
+EOD;
+        $this->assertEqualsWithoutLE($expected, Html::checkboxList('test', [1.1], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10']));
     }
 
     public function testRadioListWithArrayExpression()
@@ -923,6 +931,14 @@ public function testRadioList()
 <label><input type="radio" name="test" value="1.10"> 1.10</label></div>
 EOD;
         $this->assertEqualsWithoutLE($expected, Html::radioList('test', ['1.1'], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10'], ['strict' => true]));
+        $this->assertEqualsWithoutLE($expected, Html::radioList('test', [1.1], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10'], ['strict' => true]));
+
+        $expected = <<<'EOD'
+<div><label><input type="radio" name="test" value="1"> 1</label>
+<label><input type="radio" name="test" value="1.1" checked> 1.1</label>
+<label><input type="radio" name="test" value="1.10" checked> 1.10</label></div>
+EOD;
+        $this->assertEqualsWithoutLE($expected, Html::radioList('test', ['1.1'], ['1' => '1', '1.1' => '1.1', '1.10' => '1.10']));
     }
 
     public function testUl()
@@ -1069,6 +1085,15 @@ public function testRenderOptions()
         $data = ['1' => '1', '1.1' => '1.1', '1.10' => '1.10'];
         $attributes = ['strict' => true];
         $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions(['1.1'], $data, $attributes));
+        $attributes = ['strict' => true];
+        $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions([1.1], $data, $attributes));
+
+        $expected = <<<'EOD'
+<option value="1">1</option>
+<option value="1.1" selected>1.1</option>
+<option value="1.10" selected>1.10</option>
+EOD;
+        $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions([1.1], $data));
 
         $expected = <<<'EOD'
 <option value="1">1</option>
@@ -1080,14 +1105,37 @@ public function testRenderOptions()
         $data = ['1' => '1', '1.1' => '1.1', 'group' => ['1.10' => '1.10']];
         $attributes = ['strict' => true];
         $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions(['1.10'], $data, $attributes));
+
+        $expected = <<<'EOD'
+<option value="">Please select</option>
+<option value="1">Yes</option>
+<option value="0" selected>No</option>
+EOD;
+        $data = [true => 'Yes', false => 'No'];
+        $attributes = ['prompt' => 'Please select'];
+        $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions(false, $data, $attributes));
+        //$attributes = ['prompt' => 'Please select'];
+        //$this->assertEqualsWithoutLE($expected, Html::renderSelectOptions([false], $data, $attributes));
+
+        $expected = <<<'EOD'
+<option value="">Please select</option>
+<option value="1">Yes</option>
+<option value="0">No</option>
+EOD;
+        $attributes = ['prompt' => 'Please select', 'strict' => true];
+        $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions(false, $data, $attributes));
+        $attributes = ['prompt' => 'Please select', 'strict' => true];
+        $this->assertEqualsWithoutLE($expected, Html::renderSelectOptions([false], $data, $attributes));
     }
 
-    public function testRenderAttributes()
+    public function testRenderTagAttributes()
     {
         $this->assertEquals('', Html::renderTagAttributes([]));
         $this->assertEquals(' name="test" value="1&lt;&gt;"', Html::renderTagAttributes(['name' => 'test', 'empty' => null, 'value' => '1<>']));
         $this->assertEquals(' checked disabled', Html::renderTagAttributes(['checked' => true, 'disabled' => true, 'hidden' => false]));
         $this->assertEquals(' class="first second"', Html::renderTagAttributes(['class' => ['first', 'second']]));
+        Html::$normalizeClassAttribute = true;
+        $this->assertEquals(' class="first second"', Html::renderTagAttributes(['class' => ['first second', 'first']]));
         $this->assertEquals('', Html::renderTagAttributes(['class' => []]));
         $this->assertEquals(' style="width: 100px; height: 200px;"', Html::renderTagAttributes(['style' => ['width' => '100px', 'height' => '200px']]));
         $this->assertEquals('', Html::renderTagAttributes(['style' => []]));
diff --git a/tests/framework/helpers/MimeTest.php b/tests/framework/helpers/MimeTest.php
index fd9d848c57c..cf55591b3f5 100644
--- a/tests/framework/helpers/MimeTest.php
+++ b/tests/framework/helpers/MimeTest.php
@@ -18,6 +18,7 @@ public function testMimeAliases()
     {
         $this->assertSame(
             [
+                'text/rtf' => 'application/rtf',
                 'text/xml' => 'application/xml',
                 'image/svg' => 'image/svg+xml',
                 'image/x-bmp' => 'image/bmp',
@@ -37,8 +38,7 @@ public function testMimeAliases()
 
     public function testMimeTypes()
     {
-        $this->assertSame(
-            [
+        $coreMimeTypes = [
                 '3dml' => 'text/vnd.in3d.3dml',
                 '3ds' => 'image/x-3ds',
                 '3g2' => 'video/3gpp2',
@@ -385,6 +385,7 @@ public function testMimeTypes()
                 'jam' => 'application/vnd.jam',
                 'jar' => 'application/java-archive',
                 'java' => 'text/x-java-source',
+                'jfif' => 'image/jpeg',
                 'jisp' => 'application/vnd.jisp',
                 'jlt' => 'application/vnd.hp-jlyt',
                 'jnlp' => 'application/x-java-jnlp-file',
@@ -430,6 +431,7 @@ public function testMimeTypes()
                 'log' => 'text/plain',
                 'lostxml' => 'application/lost+xml',
                 'lrf' => 'application/octet-stream',
+                0 => 'application/vnd.lotus-1-2-3',
                 'lrm' => 'application/vnd.ms-lrm',
                 'ltf' => 'application/vnd.frogans.ltf',
                 'lvp' => 'audio/vnd.lucent.voice',
@@ -521,7 +523,6 @@ public function testMimeTypes()
                 'mseed' => 'application/vnd.fdsn.mseed',
                 'mseq' => 'application/vnd.mseq',
                 'msf' => 'application/vnd.epson.msf',
-                0 => 'application/vnd.lotus-1-2-3',
                 'msh' => 'model/mesh',
                 'msi' => 'application/x-msdownload',
                 'msl' => 'application/vnd.mobius.msl',
@@ -1024,7 +1025,13 @@ public function testMimeTypes()
                 'zir' => 'application/vnd.zul',
                 'zirz' => 'application/vnd.zul',
                 'zmm' => 'application/vnd.handheld-entertainment+xml',
-            ],
+            ];
+
+        if (PHP_VERSION_ID >= 80100) {
+            $coreMimeTypes = array_replace($coreMimeTypes, array('xz' => 'application/octet-stream'));
+        }
+
+        $this->assertSame($coreMimeTypes,
             require __DIR__ . '/../../../framework/helpers/mimeTypes.php'
         );
     }
diff --git a/tests/framework/i18n/FormatterTest.php b/tests/framework/i18n/FormatterTest.php
index 300f2b7148f..9e8d4df6ca5 100644
--- a/tests/framework/i18n/FormatterTest.php
+++ b/tests/framework/i18n/FormatterTest.php
@@ -34,14 +34,15 @@ protected function setUp()
             'timeZone' => 'UTC',
             'language' => 'ru-RU',
         ]);
-        $this->formatter = new Formatter(['locale' => 'en-US']);
+        if (!isset($this->formatter)) {
+            $this->formatter = new Formatter(['locale' => 'en-US']);
+        }
     }
 
     protected function tearDown()
     {
         parent::tearDown();
         IntlTestHelper::resetIntlStatus();
-        $this->formatter = null;
     }
 
     public function testFormat()
diff --git a/tests/framework/i18n/I18NTest.php b/tests/framework/i18n/I18NTest.php
index 727dcbb3184..5b8ab6a0774 100644
--- a/tests/framework/i18n/I18NTest.php
+++ b/tests/framework/i18n/I18NTest.php
@@ -129,6 +129,8 @@ public function testSourceLanguageFallback()
         // target is a different language than source
         $this->assertEquals('Собака бегает быстро.', $i18n->translate('test', $msg, [], 'ru-RU'));
         $this->assertEquals('Собака бегает быстро.', $i18n->translate('test', $msg, [], 'ru'));
+        $this->assertEquals('The dog runs fast (en-150).', $i18n->translate('test', $msg, [], 'en-150'));
+        $this->assertEquals('The dog runs fast.', $i18n->translate('test', $msg, [], 'en'));
 
         // language is set to null
         $this->assertEquals($msg, $i18n->translate('test', $msg, [], null));
diff --git a/tests/framework/models/JsonModel.php b/tests/framework/models/JsonModel.php
index f30dfce67f8..89c43ef5b0f 100644
--- a/tests/framework/models/JsonModel.php
+++ b/tests/framework/models/JsonModel.php
@@ -24,6 +24,7 @@ class JsonModel extends DynamicModel implements \JsonSerializable
     /**
      * @return array
      */
+    #[\ReturnTypeWillChange]
     public function jsonSerialize()
     {
         return $this->data;
diff --git a/tests/framework/rest/IndexActionTest.php b/tests/framework/rest/IndexActionTest.php
index 385749c13f7..ffbf6e98944 100644
--- a/tests/framework/rest/IndexActionTest.php
+++ b/tests/framework/rest/IndexActionTest.php
@@ -3,6 +3,9 @@
 namespace yiiunit\framework\rest;
 
 use Yii;
+use yii\data\ActiveDataProvider;
+use yii\data\Pagination;
+use yii\data\Sort;
 use yii\db\ActiveRecord;
 use yii\db\Query;
 use yii\rest\ActiveController;
@@ -63,6 +66,123 @@ public function testPrepareSearchQueryAttribute()
             $sql
         );
     }
+
+    /**
+     * @dataProvider dataProviderTestPrepareDataProviderWithPaginationAndSorting
+     *
+     * @param string $sql
+     * @param array $params
+     * @param string $expectedRawSql
+     */
+    public function testPrepareDataProviderWithPaginationAndSorting(
+        $pagination,
+        $sort,
+        $expectedPaginationPageSize = null,
+        $expectedPaginationDefaultPageSize = null,
+        $expectedSortOrders = [],
+        $expectedSortDefaultOrder = null
+    ) {
+        Yii::$app->getRequest()->setBodyParams([
+            'per-page' => 11,
+            'sort' => '-test-sort'
+        ]);
+
+        $controller = new RestController(
+            'rest',
+            new Module('rest'), [
+            'modelClass' => IndexActionModel::className(),
+            'actions' => [
+                'index' => [
+                    'class' => IndexAction::className(),
+                    'modelClass' => IndexActionModel::className(),
+                    'pagination' => $pagination,
+                    'sort' => $sort,
+                ],
+            ],
+        ]);
+
+        /** @var ActiveDataProvider $dataProvider */
+        $dataProvider = $controller->createAction('index')->runWithParams([]);
+        $actualPagination = $dataProvider->getPagination();
+        $actualSort = $dataProvider->getSort();
+
+        if ($pagination === false) {
+            $this->assertFalse($actualPagination);
+        } else {
+            $this->assertEquals($expectedPaginationPageSize, $actualPagination->pageSize);
+            $this->assertEquals($expectedPaginationDefaultPageSize, $actualPagination->defaultPageSize);
+        }
+
+        if ($sort === false) {
+            $this->assertFalse($actualSort);
+        } else {
+            $this->assertEquals($expectedSortOrders, $actualSort->getOrders());
+            $this->assertEquals($expectedSortDefaultOrder, $actualSort->defaultOrder);
+        }
+    }
+
+    /**
+     * Data provider for [[testPrepareDataProviderWithPaginationAndSorting()]].
+     * @return array test data
+     */
+    public function dataProviderTestPrepareDataProviderWithPaginationAndSorting()
+    {
+        return [
+            [ // Default config
+                [],
+                [],
+                11, // page size set as param in test
+                (new Pagination())->defaultPageSize,
+                [],
+                null
+            ],
+            [ // Default config
+                [],
+                [
+                    'attributes' => ['test-sort'],
+                ],
+                11, // page size set as param in test
+                (new Pagination())->defaultPageSize,
+                ['test-sort' => SORT_DESC], // test sort set as param in test
+                null
+            ],
+            [ // Config via array
+                [
+                    'pageSize' => 12, // Testing a fixed page size
+                    'defaultPageSize' => 991,
+                ],
+                [
+                    'attributes' => ['test-sort'],
+                    'defaultOrder' => [
+                        'created_at_1' => SORT_DESC,
+                    ],
+                ],
+                12,
+                991,
+                ['test-sort' => SORT_DESC], // test sort set as param in test
+                ['created_at_1' => SORT_DESC]
+            ],
+            [ // Config via objects
+                new Pagination([
+                    'defaultPageSize' => 992,
+                ]),
+                new Sort([
+                    'attributes' => ['created_at_2'],
+                    'defaultOrder' => [
+                        'created_at_2' => SORT_DESC,
+                    ],
+                ]),
+                11, // page size set as param in test
+                992,
+                ['created_at_2' => SORT_DESC], // test sort set as param in test is ignored
+                ['created_at_2' => SORT_DESC]
+            ],
+            [ // Disable pagination and sort
+                false,
+                false,
+            ]
+        ];
+    }
 }
 
 class RestController extends ActiveController
diff --git a/tests/framework/rest/SerializerTest.php b/tests/framework/rest/SerializerTest.php
index 6fd70974987..b88c09c5cd9 100644
--- a/tests/framework/rest/SerializerTest.php
+++ b/tests/framework/rest/SerializerTest.php
@@ -540,6 +540,7 @@ public function extraFields()
         return static::$extraFields;
     }
 
+    #[\ReturnTypeWillChange]
     public function jsonSerialize()
     {
         return $this->getAttributes();
@@ -550,6 +551,7 @@ class TestModel4 implements \JsonSerializable
     public $field5 = 'test5';
     public $field6 = 'test6';
 
+    #[\ReturnTypeWillChange]
     public function jsonSerialize()
     {
         return [
diff --git a/tests/framework/validators/BooleanValidatorTest.php b/tests/framework/validators/BooleanValidatorTest.php
index 9835422ebf0..4c183a0de00 100644
--- a/tests/framework/validators/BooleanValidatorTest.php
+++ b/tests/framework/validators/BooleanValidatorTest.php
@@ -85,7 +85,7 @@ public function testErrorMessage()
         $obj->attrD = [];
 
         $this->assertEquals(
-            'yii.validation.boolean(value, messages, {"trueValue":true,"falseValue":false,"message":"attrB must be either \"true\" or \"false\".","skipOnEmpty":1,"strict":1});',
+            'yii.validation.boolean(value, messages, {"trueValue":true,"falseValue":false,"message":"attrB must be either \u0022true\u0022 or \u0022false\u0022.","skipOnEmpty":1,"strict":1});',
             $validator->clientValidateAttribute($obj, 'attrB', new ViewStub())
         );
     }
diff --git a/tests/framework/validators/ExistValidatorTest.php b/tests/framework/validators/ExistValidatorTest.php
index 45759d90167..c11d3b59d36 100644
--- a/tests/framework/validators/ExistValidatorTest.php
+++ b/tests/framework/validators/ExistValidatorTest.php
@@ -10,6 +10,7 @@
 use yii\base\Exception;
 use yii\validators\ExistValidator;
 use yiiunit\data\ar\ActiveRecord;
+use yiiunit\data\ar\Customer;
 use yiiunit\data\ar\Order;
 use yiiunit\data\ar\OrderItem;
 use yiiunit\data\validators\models\ValidatorTestMainModel;
@@ -268,4 +269,31 @@ public function testForceMaster()
 
         ActiveRecord::$db = $this->getConnection();
     }
+
+    public function testSecondTargetAttributeWithError()
+    {
+        $validator = new ExistValidator(['targetAttribute' => ['email', 'name']]);
+        $customer = new Customer();
+        $customer->email = 'user11111@example.com';
+        $customer->name = 'user11111';
+
+        $validator->validateAttribute($customer, 'email');
+        $this->assertTrue($customer->hasErrors('email'));
+
+        $customer->clearErrors();
+
+        $customer->addError('name', 'error');
+        $validator->validateAttribute($customer, 'email');
+        $this->assertFalse($customer->hasErrors('email')); // validator should be skipped
+
+        $validator = new ExistValidator([
+            'targetAttribute' => ['email', 'name'],
+            'skipOnError' => false,
+        ]);
+
+        $customer->clearErrors();
+        $customer->addError('name', 'error');
+        $validator->validateAttribute($customer, 'email');
+        $this->assertTrue($customer->hasErrors('email')); // validator should not be skipped
+    }
 }
diff --git a/tests/framework/validators/FileValidatorTest.php b/tests/framework/validators/FileValidatorTest.php
index 2ce3c797ca3..d3dba37cdc2 100644
--- a/tests/framework/validators/FileValidatorTest.php
+++ b/tests/framework/validators/FileValidatorTest.php
@@ -535,7 +535,7 @@ public function testValidateMimeTypeMaskInvalid($fileName, $mask)
 
     public function validMimeTypes()
     {
-        return array_filter([
+        $validMimeTypes = array_filter([
             ['test.svg', 'image/*', 'svg'],
             ['test.jpg', 'image/*', 'jpg'],
             ['test.png', 'image/*', 'png'],
@@ -545,6 +545,14 @@ public function validMimeTypes()
             ['test.odt', 'application/vnd*', 'odt'],
             ['test.tar.xz', 'application/x-xz', 'tar.xz'],
         ]);
+
+        if (PHP_VERSION_ID >= 80100) {
+            $v81_zx = ['test.tar.xz', 'application/octet-stream', 'tar.xz'];
+            array_pop($validMimeTypes);
+            $validMimeTypes[] = $v81_zx;
+        }
+
+        return $validMimeTypes;
     }
 
     public function invalidMimeTypes()
diff --git a/tests/framework/validators/RequiredValidatorTest.php b/tests/framework/validators/RequiredValidatorTest.php
index 1d4fde051d8..fd7cc1811e0 100644
--- a/tests/framework/validators/RequiredValidatorTest.php
+++ b/tests/framework/validators/RequiredValidatorTest.php
@@ -7,6 +7,7 @@
 
 namespace yiiunit\framework\validators;
 
+use yii\base\Model;
 use yii\validators\RequiredValidator;
 use yiiunit\data\validators\models\FakedValidationModel;
 use yiiunit\TestCase;
@@ -66,4 +67,33 @@ public function testValidateAttribute()
         $val->validateAttribute($m, 'attr_val');
         $this->assertFalse($m->hasErrors('attr_val'));
     }
+
+    public function testErrorClientMessage()
+    {
+        $validator = new RequiredValidator(['message' => '<strong>error</strong> for {attribute}']);
+
+        $obj = new ModelForReqValidator();
+
+        $this->assertEquals(
+            'yii.validation.required(value, messages, {"message":"\u003Cstrong\u003Eerror\u003C\/strong\u003E for \u003Cb\u003EAttr\u003C\/b\u003E"});',
+            $validator->clientValidateAttribute($obj, 'attr', new ViewStub())
+        );
+    }
+}
+
+class ModelForReqValidator extends Model
+{
+    public $attr;
+
+    public function rules()
+    {
+        return [
+            [['attr'], 'required'],
+        ];
+    }
+
+    public function attributeLabels()
+    {
+        return ['attr' => '<b>Attr</b>'];
+    }
 }
diff --git a/tests/framework/validators/UniqueValidatorTest.php b/tests/framework/validators/UniqueValidatorTest.php
index fac59485d53..ff718d02c2b 100644
--- a/tests/framework/validators/UniqueValidatorTest.php
+++ b/tests/framework/validators/UniqueValidatorTest.php
@@ -505,6 +505,33 @@ public function testForceMaster()
 
         ActiveRecord::$db = $this->getConnection();
     }
+
+    public function testSecondTargetAttributeWithError()
+    {
+        $validator = new UniqueValidator(['targetAttribute' => ['email', 'name']]);
+        $customer = new Customer();
+        $customer->email = 'user1@example.com';
+        $customer->name = 'user1';
+
+        $validator->validateAttribute($customer, 'email');
+        $this->assertTrue($customer->hasErrors('email'));
+
+        $customer->clearErrors();
+
+        $customer->addError('name', 'error');
+        $validator->validateAttribute($customer, 'email');
+        $this->assertFalse($customer->hasErrors('email')); // validator should be skipped
+
+        $validator = new UniqueValidator([
+            'targetAttribute' => ['email', 'name'],
+            'skipOnError' => false,
+        ]);
+
+        $customer->clearErrors();
+        $customer->addError('name', 'error');
+        $validator->validateAttribute($customer, 'email');
+        $this->assertTrue($customer->hasErrors('email')); // validator should not be skipped
+    }
 }
 
 class WithCustomer extends Customer {
diff --git a/tests/framework/validators/ValidatorTest.php b/tests/framework/validators/ValidatorTest.php
index a7b22e56937..a37e6544ef5 100644
--- a/tests/framework/validators/ValidatorTest.php
+++ b/tests/framework/validators/ValidatorTest.php
@@ -217,19 +217,20 @@ public function testValidateAttribute()
 
     public function testClientValidateAttribute()
     {
+        $view = new \yii\base\View();
         $val = new TestValidator();
         $this->assertNull(
-            $val->clientValidateAttribute($this->getTestModel(), 'attr_runMe1', [])
-        ); //todo pass a view instead of array
+            $val->clientValidateAttribute($this->getTestModel(), 'attr_runMe1', $view)
+        );
 
         // Access to validator in inline validation (https://github.com/yiisoft/yii2/issues/6242)
 
         $model = new FakedValidationModel();
         $val = Validator::createValidator('inlineVal', $model, ['val_attr_a'], ['params' => ['foo' => 'bar']]);
         $val->clientValidate = 'clientInlineVal';
-        $args = $val->clientValidateAttribute($model, 'val_attr_a', null);
+        $args = $val->clientValidateAttribute($model, 'val_attr_a', $view);
 
-        $this->assertCount(4, $args);
+        $this->assertCount(5, $args);
         $this->assertEquals('val_attr_a', $args[0]);
         $this->assertEquals(['foo' => 'bar'], $args[1]);
         $this->assertInstanceOf(InlineValidator::className(), $args[2]);
diff --git a/tests/framework/web/ControllerTest.php b/tests/framework/web/ControllerTest.php
index 2d9b92a072f..4280a7b5e1e 100644
--- a/tests/framework/web/ControllerTest.php
+++ b/tests/framework/web/ControllerTest.php
@@ -80,7 +80,6 @@ public function testNullableInjectedActionParams()
                 ],
             ],
         ]));
-        $this->mockWebApplication(['controller' => $this->controller]);
 
         $injectionAction = new InlineAction('injection', $this->controller, 'actionNullableInjection');
         $params = [];
@@ -195,7 +194,6 @@ public function testInjectedActionParams()
                 ],
             ],
         ]));
-        $this->mockWebApplication(['controller' => $this->controller]);
 
         $injectionAction = new InlineAction('injection', $this->controller, 'actionInjection');
         $params = ['between' => 'test', 'after' => 'another', 'before' => 'test'];
diff --git a/tests/framework/web/GroupUrlRuleTest.php b/tests/framework/web/GroupUrlRuleTest.php
index 6801ed01a4b..a051ceb0f2a 100644
--- a/tests/framework/web/GroupUrlRuleTest.php
+++ b/tests/framework/web/GroupUrlRuleTest.php
@@ -240,6 +240,21 @@ protected function getTestsForParseRequest()
                     ['create', false],
                 ],
             ],
+            [
+                'slash prefix',
+                [
+                    'prefix' => '/',
+                    'rules' => [
+                        'login' => 'user/login',
+                        'logout' => 'user/logout',
+                    ],
+                ],
+                [
+                    ['login', 'user/login'],
+                    ['logout', 'user/logout'],
+                    ['create', false],
+                ],
+            ],
             [
                 'prefix only',
                 [
diff --git a/tests/framework/web/HeaderCollectionTest.php b/tests/framework/web/HeaderCollectionTest.php
index 7fe9c889f54..33331e7cc02 100644
--- a/tests/framework/web/HeaderCollectionTest.php
+++ b/tests/framework/web/HeaderCollectionTest.php
@@ -24,4 +24,92 @@ public function testFromArray()
         ]);
         $this->assertEquals($location, $headerCollection->get('Location'));
     }
+
+    public function testSetter()
+    {
+        $headerCollection = new HeaderCollection();
+
+        $this->assertSame('default', $headerCollection->get('X-Header', 'default'));
+        $this->assertFalse($headerCollection->has('X-Header'));
+
+        $headerCollection->set('X-Header', '1');
+        $this->assertTrue($headerCollection->has('X-Header'));
+        $this->assertTrue($headerCollection->offsetExists('X-Header'));
+        $this->assertSame('1', $headerCollection->get('X-Header'));
+        $this->assertSame(['1'], $headerCollection->get('X-Header', null, false));
+        $this->assertTrue($headerCollection->has('x-header'));
+        $this->assertSame('1', $headerCollection->get('x-header'));
+        $this->assertSame(['1'], $headerCollection->get('x-header', null, false));
+        $this->assertSame('1', $headerCollection->get('x-hEadER'));
+        $this->assertSame(['1'], $headerCollection->get('x-hEadER', null, false));
+        $this->assertSame(['x-header' => ['1']], $headerCollection->toArray());
+        $this->assertSame(['X-Header' => ['1']], $headerCollection->toOriginalArray());
+
+        $headerCollection->set('X-HEADER', '2');
+        $this->assertSame('2', $headerCollection->get('X-Header'));
+        $this->assertSame('2', $headerCollection->get('x-header'));
+        $this->assertSame('2', $headerCollection->get('x-hEadER'));
+        $this->assertSame(['x-header' => ['2']], $headerCollection->toArray());
+        $this->assertSame(['X-HEADER' => ['2']], $headerCollection->toOriginalArray());
+
+        $headerCollection->offsetSet('X-HEADER', '3');
+        $this->assertSame('3', $headerCollection->get('X-Header'));
+    }
+
+    public function testSetterDefault()
+    {
+        $headerCollection = new HeaderCollection();
+        $headerCollection->setDefault('X-Header', '1');
+        $this->assertSame(['1'], $headerCollection->get('X-Header', null, false));
+
+        $headerCollection->setDefault('X-Header', '2');
+        $this->assertSame(['1'], $headerCollection->get('X-Header', null, false));
+    }
+
+    public function testAdder()
+    {
+        $headerCollection = new HeaderCollection();
+        $headerCollection->add('X-Header', '1');
+        $this->assertSame('1', $headerCollection->get('X-Header'));
+        $this->assertSame(['1'], $headerCollection->get('X-Header', null, false));
+        $this->assertSame('1', $headerCollection->get('x-header'));
+        $this->assertSame(['1'], $headerCollection->get('x-header', null, false));
+        $this->assertSame('1', $headerCollection->get('x-hEadER'));
+        $this->assertSame(['1'], $headerCollection->get('x-hEadER', null, false));
+        $this->assertSame(['x-header' => ['1']], $headerCollection->toArray());
+        $this->assertSame(['X-Header' => ['1']], $headerCollection->toOriginalArray());
+
+        $headerCollection->add('X-HEADER', '2');
+        $this->assertSame('1', $headerCollection->get('X-Header'));
+        $this->assertSame('1', $headerCollection->get('x-header'));
+        $this->assertSame('1', $headerCollection->get('x-hEadER'));
+        $this->assertSame(['1', '2'], $headerCollection->get('x-header', null, false));
+        $this->assertSame(['x-header' => ['1', '2']], $headerCollection->toArray());
+        $this->assertSame(['X-Header' => ['1', '2']], $headerCollection->toOriginalArray());
+    }
+
+    public function testRemover()
+    {
+        $headerCollection = new HeaderCollection();
+        $headerCollection->add('X-Header', '1');
+        $this->assertSame(1, $headerCollection->count());
+        $this->assertSame(1, $headerCollection->getCount());
+        $headerCollection->remove('X-Header');
+        $this->assertSame(0, $headerCollection->count());
+
+        $headerCollection->add('X-Header', '1');
+        $this->assertSame(1, $headerCollection->count());
+        $headerCollection->remove('x-header');
+        $this->assertSame(0, $headerCollection->count());
+
+        $headerCollection->add('X-Header', '1');
+        $headerCollection->offsetUnset('X-HEADER');
+        $this->assertSame(0, $headerCollection->count());
+
+        $headerCollection->add('X-Header-1', '1');
+        $headerCollection->add('X-Header-2', '1');
+        $this->assertSame(2, $headerCollection->count());
+        $headerCollection->removeAll();
+        $this->assertSame(0, $headerCollection->count());
+    }
 }
diff --git a/tests/framework/web/RequestTest.php b/tests/framework/web/RequestTest.php
index 2891372ce79..15a39557ccf 100644
--- a/tests/framework/web/RequestTest.php
+++ b/tests/framework/web/RequestTest.php
@@ -1111,6 +1111,33 @@ public function testTrustedHostAndInjectedXForwardedFor($remoteAddress, $xForwar
         $this->assertSame($expectedUserIp, $request->getUserIP());
     }
 
+    public function trustedHostAndXForwardedPortDataProvider()
+    {
+        return [
+            'defaultPlain' => ['1.1.1.1', 80, null, null, 80],
+            'defaultSSL' => ['1.1.1.1', 443, null, null, 443],
+            'untrustedForwardedSSL' => ['1.1.1.1', 80, 443, ['10.0.0.0/8'], 80],
+            'untrustedForwardedPlain' => ['1.1.1.1', 443, 80, ['10.0.0.0/8'], 443],
+            'trustedForwardedSSL' => ['10.10.10.10', 80, 443, ['10.0.0.0/8'], 443],
+            'trustedForwardedPlain' => ['10.10.10.10', 443, 80, ['10.0.0.0/8'], 80],
+        ];
+    }
+
+    /**
+     * @dataProvider trustedHostAndXForwardedPortDataProvider
+     */
+    public function testTrustedHostAndXForwardedPort($remoteAddress, $requestPort, $xForwardedPort, $trustedHosts, $expectedPort)
+    {
+        $_SERVER['REMOTE_ADDR'] = $remoteAddress;
+        $_SERVER['SERVER_PORT'] = $requestPort;
+        $_SERVER['HTTP_X_FORWARDED_PORT'] = $xForwardedPort;
+        $params = [
+            'trustedHosts' => $trustedHosts,
+        ];
+        $request = new Request($params);
+        $this->assertSame($expectedPort, $request->getServerPort());
+    }
+
     /**
      * @testWith    ["POST", "GET", "POST"]
      *              ["POST", "OPTIONS", "POST"]
diff --git a/tests/framework/web/ResponseTest.php b/tests/framework/web/ResponseTest.php
index 60b71a6825c..ff804a2a1c1 100644
--- a/tests/framework/web/ResponseTest.php
+++ b/tests/framework/web/ResponseTest.php
@@ -12,8 +12,8 @@
 use RuntimeException;
 use Yii;
 use yii\helpers\StringHelper;
+use yii\web\Cookie;
 use yii\web\HttpException;
-use yii\web\Request;
 use yii\web\Response;
 use yiiunit\framework\web\mocks\TestRequestComponent;
 
@@ -60,7 +60,7 @@ public function rightRanges()
      */
     public function testSendFileRanges($rangeHeader, $expectedHeader, $length, $expectedContent)
     {
-        $dataFile = \Yii::getAlias('@yiiunit/data/web/data.txt');
+        $dataFile = Yii::getAlias('@yiiunit/data/web/data.txt');
         $fullContent = file_get_contents($dataFile);
         $_SERVER['HTTP_RANGE'] = 'bytes=' . $rangeHeader;
         ob_start();
@@ -71,9 +71,12 @@ public function testSendFileRanges($rangeHeader, $expectedHeader, $length, $expe
         $this->assertEquals(206, $this->response->statusCode);
         $headers = $this->response->headers;
         $this->assertEquals('bytes', $headers->get('Accept-Ranges'));
-        $this->assertEquals('bytes ' . $expectedHeader . '/' . StringHelper::byteLength($fullContent), $headers->get('Content-Range'));
+        $this->assertEquals(
+            'bytes ' . $expectedHeader . '/' . StringHelper::byteLength($fullContent),
+            $headers->get('Content-Range')
+        );
         $this->assertEquals('text/plain', $headers->get('Content-Type'));
-        $this->assertEquals("$length", $headers->get('Content-Length'));
+        $this->assertEquals((string)$length, $headers->get('Content-Length'));
     }
 
     public function wrongRanges()
@@ -96,7 +99,7 @@ public function testSendFileWrongRanges($rangeHeader)
     {
         $this->expectException('yii\web\RangeNotSatisfiableHttpException');
 
-        $dataFile = \Yii::getAlias('@yiiunit/data/web/data.txt');
+        $dataFile = Yii::getAlias('@yiiunit/data/web/data.txt');
         $_SERVER['HTTP_RANGE'] = 'bytes=' . $rangeHeader;
         $this->response->sendFile($dataFile);
     }
@@ -112,9 +115,7 @@ protected function generateTestFileContent()
     public function testSendContentAsFile()
     {
         ob_start();
-        $this->response->sendContentAsFile('test', 'test.txt')->send([
-            'mimeType' => 'text/plain',
-        ]);
+        $this->response->sendContentAsFile('test', 'test.txt')->send();
         $content = ob_get_clean();
 
         static::assertEquals('test', $content);
@@ -128,18 +129,46 @@ public function testSendContentAsFile()
     public function testRedirect()
     {
         $_SERVER['REQUEST_URI'] = 'http://test-domain.com/';
-        $this->assertEquals($this->response->redirect('')->headers->get('location'), '/');
-        $this->assertEquals($this->response->redirect('http://some-external-domain.com')->headers->get('location'), 'http://some-external-domain.com');
-        $this->assertEquals($this->response->redirect('/')->headers->get('location'), '/');
-        $this->assertEquals($this->response->redirect('/something-relative')->headers->get('location'), '/something-relative');
-        $this->assertEquals($this->response->redirect(['/'])->headers->get('location'), '/index.php?r=');
-        $this->assertEquals($this->response->redirect(['view'])->headers->get('location'), '/index.php?r=view');
-        $this->assertEquals($this->response->redirect(['/controller'])->headers->get('location'), '/index.php?r=controller');
-        $this->assertEquals($this->response->redirect(['/controller/index'])->headers->get('location'), '/index.php?r=controller%2Findex');
-        $this->assertEquals($this->response->redirect(['//controller/index'])->headers->get('location'), '/index.php?r=controller%2Findex');
-        $this->assertEquals($this->response->redirect(['//controller/index', 'id' => 3])->headers->get('location'), '/index.php?r=controller%2Findex&id=3');
-        $this->assertEquals($this->response->redirect(['//controller/index', 'id_1' => 3, 'id_2' => 4])->headers->get('location'), '/index.php?r=controller%2Findex&id_1=3&id_2=4');
-        $this->assertEquals($this->response->redirect(['//controller/index', 'slug' => 'äöüß!"§$%&/()'])->headers->get('location'), '/index.php?r=controller%2Findex&slug=%C3%A4%C3%B6%C3%BC%C3%9F%21%22%C2%A7%24%25%26%2F%28%29');
+        $this->assertEquals('/', $this->response->redirect('')->headers->get('location'));
+        $this->assertFalse($this->response->redirect(null)->headers->get('location'));
+        $this->assertEquals(
+            'http://some-external-domain.com',
+            $this->response->redirect('http://some-external-domain.com')->headers->get('location')
+        );
+        $this->assertEquals('/', $this->response->redirect('/')->headers->get('location'));
+        $this->assertEquals(
+            '/something-relative',
+            $this->response->redirect('/something-relative')->headers->get('location')
+        );
+        $this->assertEquals('/index.php?r=', $this->response->redirect(['/'])->headers->get('location'));
+        $this->assertEquals(
+            '/index.php?r=view',
+            $this->response->redirect(['view'])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller',
+            $this->response->redirect(['/controller'])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller%2Findex',
+            $this->response->redirect(['/controller/index'])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller%2Findex',
+            $this->response->redirect(['//controller/index'])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller%2Findex&id=3',
+            $this->response->redirect(['//controller/index', 'id' => 3])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller%2Findex&id_1=3&id_2=4',
+            $this->response->redirect(['//controller/index', 'id_1' => 3, 'id_2' => 4])->headers->get('location')
+        );
+        $this->assertEquals(
+            '/index.php?r=controller%2Findex&slug=%C3%A4%C3%B6%C3%BC%C3%9F%21%22%C2%A7%24%25%26%2F%28%29',
+            $this->response->redirect(['//controller/index', 'slug' => 'äöüß!"§$%&/()'])->headers->get('location')
+        );
     }
 
     /**
@@ -171,18 +200,30 @@ public function testAjaxRedirectInternetExplorer11($userAgent, $statusCodes) {
      */
     public function dataProviderAjaxRedirectInternetExplorer11() {
         return [
-            ['Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0', [301 => 301, 302 => 302]],                   // Firefox
-            ['Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko', [301 => 200, 302 => 200]],                        // IE 11
-            ['Mozilla/5.0 (Windows NT 6.3; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko', [301 => 200, 302 => 200]],    // IE 11
-            ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36', [301 => 301, 302 => 302]],      // Chrome
-            ['Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136', [301 => 301, 302 => 302]],    // Edge
-            ['Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)', [301 => 200, 302 => 200]],                // special windows versions (for tablets or IoT devices)
+            ['Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0', [301 => 301, 302 => 302]], // Firefox
+            ['Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko', [301 => 200, 302 => 200]], // IE 11
+            [ // IE 11
+                'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko',
+                [301 => 200, 302 => 200]
+            ],
+            [ // Chrome
+                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',
+                [301 => 301, 302 => 302]
+            ],
+            [ // Edge
+                'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136',
+                [301 => 301, 302 => 302]
+            ],
+            [ // special windows versions (for tablets or IoT devices)
+                'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)',
+                [301 => 200, 302 => 200]
+            ],
         ];
     }
 
     /**
      * @dataProvider dataProviderSetStatusCodeByException
-     * @param \Exception $exception
+     * @param Exception $exception
      * @param int $statusCode
      */
     public function testSetStatusCodeByException($exception, $statusCode)
@@ -198,9 +239,7 @@ public function testNonSeekableStream()
     {
         $stream = fopen('php://output', 'r+');
         ob_start();
-        $this->response
-            ->sendStreamAsFile($stream, 'test-stream')
-            ->send();
+        $this->response->sendStreamAsFile($stream, 'test-stream')->send();
         ob_get_clean();
         static::assertEquals(200, $this->response->statusCode);
     }
@@ -321,20 +360,23 @@ public function testSettingStreamToNullOn304()
     public function testSendFileWithInvalidCharactersInFileName()
     {
         $response = new Response();
-        $dataFile = \Yii::getAlias('@yiiunit/data/web/data.txt');
+        $dataFile = Yii::getAlias('@yiiunit/data/web/data.txt');
 
         $response->sendFile($dataFile, "test\x7Ftest.txt");
 
-        $this->assertSame("attachment; filename=\"test_test.txt\"; filename*=utf-8''test%7Ftest.txt", $response->headers['content-disposition']);
+        $this->assertSame(
+            "attachment; filename=\"test_test.txt\"; filename*=utf-8''test%7Ftest.txt",
+            $response->headers['content-disposition']
+        );
     }
 
     public function testSameSiteCookie()
     {
         $response = new Response();
-        $response->cookies->add(new \yii\web\Cookie([
+        $response->cookies->add(new Cookie([
             'name'     => 'test',
             'value'    => 'testValue',
-            'sameSite' => \yii\web\Cookie::SAME_SITE_STRICT,
+            'sameSite' => Cookie::SAME_SITE_STRICT,
         ]));
 
         ob_start();
@@ -378,7 +420,7 @@ protected function assertEmptyContentOn($statusCode, $callback = null)
     protected function assertSettingStreamToNullOn($statusCode)
     {
         $response = new Response();
-        $dataFile = \Yii::getAlias('@yiiunit/data/web/data.txt');
+        $dataFile = Yii::getAlias('@yiiunit/data/web/data.txt');
 
         $response->sendFile($dataFile);
         $response->setStatusCode($statusCode);
diff --git a/tests/framework/web/UserTest.php b/tests/framework/web/UserTest.php
index b37eeed313e..3d1b323efd4 100644
--- a/tests/framework/web/UserTest.php
+++ b/tests/framework/web/UserTest.php
@@ -56,8 +56,8 @@ public function testLoginExpires()
                 'authManager' => [
                     'class' => PhpManager::className(),
                     'itemFile' => '@runtime/user_test_rbac_items.php',
-                     'assignmentFile' => '@runtime/user_test_rbac_assignments.php',
-                     'ruleFile' => '@runtime/user_test_rbac_rules.php',
+                    'assignmentFile' => '@runtime/user_test_rbac_assignments.php',
+                    'ruleFile' => '@runtime/user_test_rbac_rules.php',
                 ],
             ],
         ];
@@ -169,6 +169,7 @@ public function testCookieCleanup()
         ];
 
         $this->mockWebApplication($appConfig);
+        $id1 = Yii::$app->session->id;
         Yii::$app->session->removeAll();
 
         $cookie = new Cookie(Yii::$app->user->identityCookie);
@@ -176,16 +177,21 @@ public function testCookieCleanup()
         $cookiesMock->add($cookie);
         Yii::$app->user->getIdentity();
         $this->assertEquals(strlen($cookiesMock->getValue(Yii::$app->user->identityCookie['name'])), 0);
+        $this->assertSame($id1, Yii::$app->session->id);
 
         Yii::$app->user->login(UserIdentity::findIdentity('user1'), 3600);
         $this->assertFalse(Yii::$app->user->isGuest);
         $this->assertSame(Yii::$app->user->id, 'user1');
         $this->assertNotEquals(strlen($cookiesMock->getValue(Yii::$app->user->identityCookie['name'])), 0);
+        $id2 = Yii::$app->session->id;
+        $this->assertNotSame($id1, $id2);
 
         Yii::$app->user->login(UserIdentity::findIdentity('user2'), 0);
         $this->assertFalse(Yii::$app->user->isGuest);
         $this->assertSame(Yii::$app->user->id, 'user2');
         $this->assertEquals(strlen($cookiesMock->getValue(Yii::$app->user->identityCookie['name'])), 0);
+        $id3 = Yii::$app->session->id;
+        $this->assertNotSame($id2, $id3);
     }
 
     /**
@@ -225,7 +231,7 @@ public function testLoginRequired()
             ],
         ];
         $this->mockWebApplication($appConfig);
-
+        $id = Yii::$app->session->id;
 
         $user = Yii::$app->user;
 
@@ -234,6 +240,7 @@ public function testLoginRequired()
         $user->loginRequired();
         $this->assertEquals('normal', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
 
         $this->reset();
@@ -242,12 +249,13 @@ public function testLoginRequired()
 
         $user->loginRequired();
         $this->assertEquals(Yii::$app->getHomeUrl(), $user->getReturnUrl());
-        // AJAX requests don't update returnUrl but they do cause redirection.
+        // AJAX requests don't update returnUrl, but they do cause redirection.
         $this->assertTrue(Yii::$app->response->getIsRedirection());
 
         $user->loginRequired(false);
         $this->assertEquals('ajax', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('json-only');
@@ -255,6 +263,7 @@ public function testLoginRequired()
         $user->loginRequired(true, false);
         $this->assertEquals('json-only', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('json-only');
@@ -262,6 +271,7 @@ public function testLoginRequired()
         $user->loginRequired(true, false);
         $this->assertEquals('json-only', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('accept-all');
@@ -269,6 +279,7 @@ public function testLoginRequired()
         $user->loginRequired();
         $this->assertEquals('accept-all', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('json-and-accept-all');
@@ -278,6 +289,7 @@ public function testLoginRequired()
         } catch (ForbiddenHttpException $e) {
         }
         $this->assertFalse(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('accept-html-json');
@@ -285,6 +297,7 @@ public function testLoginRequired()
         $user->loginRequired();
         $this->assertEquals('accept-html-json', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         Yii::$app->request->setUrl('accept-html-json');
@@ -292,6 +305,7 @@ public function testLoginRequired()
         $user->loginRequired();
         $this->assertEquals('accept-html-json', $user->getReturnUrl());
         $this->assertTrue(Yii::$app->response->getIsRedirection());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         $_SERVER['REQUEST_METHOD'] = 'POST';
@@ -299,6 +313,7 @@ public function testLoginRequired()
         Yii::$app->getSession()->set($user->returnUrlParam, null);
         $user->loginRequired();
         $this->assertNull(Yii::$app->getSession()->get($user->returnUrlParam));
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         $_SERVER['REQUEST_METHOD'] = 'GET';
@@ -306,6 +321,7 @@ public function testLoginRequired()
         Yii::$app->getSession()->set($user->returnUrlParam, null);
         $user->loginRequired();
         $this->assertEquals('set-return-url-on-get-request', Yii::$app->getSession()->get($user->returnUrlParam));
+        $this->assertSame($id, Yii::$app->session->id);
 
         // Confirm that returnUrl is not set.
         $this->reset();
@@ -316,11 +332,13 @@ public function testLoginRequired()
         } catch (ForbiddenHttpException $e) {
         }
         $this->assertNotEquals('json-only', $user->getReturnUrl());
+        $this->assertSame($id, Yii::$app->session->id);
 
         $this->reset();
         $_SERVER['HTTP_ACCEPT'] = 'text/json;q=0.1';
         $this->expectException('yii\\web\\ForbiddenHttpException');
         $user->loginRequired();
+        $this->assertSame($id, Yii::$app->session->id);
     }
 
     public function testLoginRequiredException1()
@@ -482,8 +500,10 @@ public function testSessionAuthWithMissingKey()
         $this->mockWebApplication($appConfig);
 
         Yii::$app->session->set('__id', 'user1');
+        $id = Yii::$app->session->id;
 
         $this->assertNotNull(Yii::$app->user->getIdentity());
+        $this->assertSame($id, Yii::$app->session->id);
     }
 
     public function testSessionAuthWithInvalidKey()
@@ -497,12 +517,13 @@ public function testSessionAuthWithInvalidKey()
         ];
 
         $this->mockWebApplication($appConfig);
+        $id = Yii::$app->session->id;
 
         Yii::$app->session->set('__id', 'user1');
         Yii::$app->session->set('__authKey', 'invalid');
 
-
         $this->assertNull(Yii::$app->user->getIdentity());
+        $this->assertSame($id, Yii::$app->session->id);
     }
 
     public function testSessionAuthWithValidKey()
@@ -516,11 +537,33 @@ public function testSessionAuthWithValidKey()
         ];
 
         $this->mockWebApplication($appConfig);
+        $id = Yii::$app->session->id;
 
         Yii::$app->session->set('__id', 'user1');
         Yii::$app->session->set('__authKey', 'ABCD1234');
 
         $this->assertNotNull(Yii::$app->user->getIdentity());
+        $this->assertSame($id, Yii::$app->session->id);
+    }
+
+    public function testSessionAuthWhenIdentityReturnsNull()
+    {
+        $appConfig = [
+            'components' => [
+                'user' => [
+                    'identityClass' => UserIdentity::className(),
+                ],
+            ],
+        ];
+
+        $this->mockWebApplication($appConfig);
+        $id = Yii::$app->session->id;
+
+        Yii::$app->session->set('__id', 'user999999');
+        Yii::$app->session->set('__authKey', 'ABCD1234');
+
+        $this->assertNull(Yii::$app->user->getIdentity());
+        $this->assertNotSame($id, Yii::$app->session->id);
     }
 }
 
