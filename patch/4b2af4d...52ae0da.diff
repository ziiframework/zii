diff --git a/.github/workflows/ci-mysql.yml b/.github/workflows/ci-mysql.yml
new file mode 100644
index 00000000000..d7814d5a8b2
--- /dev/null
+++ b/.github/workflows/ci-mysql.yml
@@ -0,0 +1,80 @@
+on:
+  - pull_request
+  - push
+
+name: ci-mysql
+
+jobs:
+  tests:
+    name: PHP ${{ matrix.php-version }}-mysql-${{ matrix.mysql-version }}
+    env:
+      extensions: curl, intl, pdo, pdo_mysql
+      key: cache-v1
+
+    runs-on: ${{ matrix.os }}
+
+    strategy:
+      matrix:
+        os:
+          - ubuntu-latest
+
+        php-version:
+          - "7.4"
+
+        mysql-version:
+          - "latest"
+
+    services:
+      mysql:
+        image: mysql:${{ matrix.mysql-version }}
+        env:
+          MYSQL_ROOT_PASSWORD: root
+          MYSQL_DATABASE: yiitest
+        ports:
+          - 3306:3306
+        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
+
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+
+      - name: Setup cache environment
+        id: cache-env
+        uses: shivammathur/cache-extensions@v1
+        with:
+          php-version: ${{ matrix.php-version }}
+          extensions: ${{ env.extensions }}
+          key: ${{ env.key }}
+
+      - name: Cache extensions
+        uses: actions/cache@v1
+        with:
+          path: ${{ steps.cache-env.outputs.dir }}
+          key: ${{ steps.cache-env.outputs.key }}
+          restore-keys: ${{ steps.cache-env.outputs.key }}
+
+      - name: Install PHP with extensions
+        uses: shivammathur/setup-php@v2
+        with:
+          php-version: ${{ matrix.php-version }}
+          extensions: ${{ env.extensions }}
+          ini-values: date.timezone='UTC'
+          coverage: pcov
+
+      - name: Determine composer cache directory
+        if: matrix.os == 'ubuntu-latest'
+        run: echo "::set-env name=COMPOSER_CACHE_DIR::$(composer config cache-dir)"
+
+      - name: Cache dependencies installed with composer
+        uses: actions/cache@v1
+        with:
+          path: ${{ env.COMPOSER_CACHE_DIR }}
+          key: php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}
+          restore-keys: |
+            php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-
+
+      - name: Install dependencies with composer
+        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader
+
+      - name: Run mysql tests with phpunit
+        run: vendor/bin/phpunit --group mysql
diff --git a/.github/workflows/ci-pgsql.yml b/.github/workflows/ci-pgsql.yml
new file mode 100644
index 00000000000..2d3818129ba
--- /dev/null
+++ b/.github/workflows/ci-pgsql.yml
@@ -0,0 +1,84 @@
+on:
+  - pull_request
+  - push
+
+name: ci-pgsql
+
+jobs:
+  tests:
+    name: PHP ${{ matrix.php-version }}-pgsql-${{ matrix.pgsql-version }}
+    env:
+      extensions: curl, intl, pdo, pdo_pgsql
+      key: cache-v1
+
+    runs-on: ${{ matrix.os }}
+
+    strategy:
+      matrix:
+        os:
+          - ubuntu-latest
+
+        php-version:
+          - "7.4"
+
+        pgsql-version:
+          - "10"
+          - "11"
+          - "12"
+          - "13"
+
+    services:
+      postgres:
+        image: postgres:${{ matrix.pgsql-version }}
+        env:
+          POSTGRES_USER: postgres
+          POSTGRES_PASSWORD: postgres
+          POSTGRES_DB: yiitest
+        ports:
+          - 5432:5432
+        options: --name=postgres --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
+
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+
+      - name: Setup cache environment
+        id: cache-env
+        uses: shivammathur/cache-extensions@v1
+        with:
+          php-version: ${{ matrix.php-version }}
+          extensions: ${{ env.extensions }}
+          key: ${{ env.key }}
+
+      - name: Cache extensions
+        uses: actions/cache@v1
+        with:
+          path: ${{ steps.cache-env.outputs.dir }}
+          key: ${{ steps.cache-env.outputs.key }}
+          restore-keys: ${{ steps.cache-env.outputs.key }}
+
+      - name: Install PHP with extensions
+        uses: shivammathur/setup-php@v2
+        with:
+          php-version: ${{ matrix.php-version }}
+          extensions: ${{ env.extensions }}
+          ini-values: date.timezone='UTC'
+          coverage: pcov
+
+      - name: Determine composer cache directory
+        if: matrix.os == 'ubuntu-latest'
+        run: echo "::set-env name=COMPOSER_CACHE_DIR::$(composer config cache-dir)"
+
+      - name: Cache dependencies installed with composer
+        uses: actions/cache@v1
+        with:
+          path: ${{ env.COMPOSER_CACHE_DIR }}
+          key: php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}
+          restore-keys: |
+            php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-
+
+      - name: Install dependencies with composer
+        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader
+
+      - name: Run pgsql tests with phpunit
+        run: vendor/bin/phpunit --group pgsql
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index a3984eba57f..255deb74e6a 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -5,16 +5,20 @@ Yii Framework 2 Change Log
 ------------------------
 
 - Enh #18213: Do not load fixtures with circular dependencies twice instead of throwing an exception (JesseHines0)
-- Bug #18066: Fixed `yii\db\Query::create()` wasn't using all info from `withQuery()` (maximkou)
+- Bug #18066: Fix `yii\db\Query::create()` wasn't using all info from `withQuery()` (maximkou)
 - Bug #18269: Fix integer safe attribute to work properly in `yii\base\Model` (Ladone)
 - Enh #18236: Allow `yii\filters\RateLimiter` to accept a closure function for the `$user` property in order to assign values on runtime (nadar)
-- Bug #18248: Render only one stack trace on console for chained exceptions (mikehaertl)
+- Bug #18248: Render only one stack trace on a console for chained exceptions (mikehaertl)
 - Bug #18233: Add PHP 8 support (samdark)
 - Enh #18196: `yii\rbac\DbManager::$checkAccessAssignments` is now `protected` (alex-code)
 - Bug #18239: Fix support of no-extension files for `FileValidator::validateExtension()` (darkdef)
-- Bug #18229: Add flag for recognize SyBase databases on uses pdo_dblib (darkdef)
-- Bug #13973: Correct alterColumn for MSSQL & drop constraints before drop column (darkdef)
-
+- Bug #18229: Add a flag to specify SyBase database when used with pdo_dblib (darkdef)
+- Bug #13973: Correct alterColumn for MSSQL & drop constraints before dropping a column (darkdef)
+- Bug #18040: Display width specification for integer data types was deprecated in MySQL 8.0.19 (terabytesoftw)
+- Bug #15265: PostgreSQL > 10.0 is not pass tests with default value of timestamp CURRENT_TIMESTAMP (terabytesoftw)
+- Bug #18232: Fail tests pgsql v-10.14, v-11.9, v-12-latest (terabytesoftw)
+- Bug #16892: Validation error class was not applied to checkbox and radio when validationStateOn = self::VALIDATION_STATE_ON_INPUT (dan-szabo, samdark)
+- Bug #18245: Make resolving DI references inside of arrays in dependencies optional (SamMousa, samdark, hiqsol)
 
 2.0.37 August 07, 2020
 ----------------------
diff --git a/src/UPGRADE.md b/src/UPGRADE.md
index cc80fb4b7fa..b151c334537 100644
--- a/src/UPGRADE.md
+++ b/src/UPGRADE.md
@@ -51,6 +51,12 @@ if you want to upgrade from version A to version C and there is
 version B between A and C, you need to follow the instructions
 for both A and B.
 
+Upgrade from Yii 2.0.37
+-----------------------
+
+* Resolving DI references inside of arrays in dependencies was made optional and turned off by default. In order
+  to turn it on, set `resolveArrays` of container instance to `true`.
+
 Upgrade from Yii 2.0.36
 -----------------------
 
diff --git a/src/db/pgsql/Schema.php b/src/db/pgsql/Schema.php
index 938cff6a341..75793d16d2c 100644
--- a/src/db/pgsql/Schema.php
+++ b/src/db/pgsql/Schema.php
@@ -548,14 +548,21 @@ protected function findColumns($table)
                 }
                 $column->defaultValue = null;
             } elseif ($column->defaultValue) {
-                if ($column->type === 'timestamp' && $column->defaultValue === 'now()') {
+                if (
+                    in_array($column->type, [self::TYPE_TIMESTAMP, self::TYPE_DATE, self::TYPE_TIME], true) &&
+                    in_array(
+                        strtoupper($column->defaultValue),
+                        ['NOW()', 'CURRENT_TIMESTAMP', 'CURRENT_DATE', 'CURRENT_TIME'],
+                        true
+                    )
+                ) {
                     $column->defaultValue = new Expression($column->defaultValue);
                 } elseif ($column->type === 'boolean') {
                     $column->defaultValue = ($column->defaultValue === 'true');
                 } elseif (preg_match("/^B'(.*?)'::/", $column->defaultValue, $matches)) {
                     $column->defaultValue = bindec($matches[1]);
-                } elseif (strncasecmp($column->dbType, 'bit', 3) === 0 || strncasecmp($column->dbType, 'varbit', 6) === 0) {
-                    $column->defaultValue = bindec(trim($column->defaultValue, 'B\''));
+                } elseif (preg_match("/^'(\d+)'::\"bit\"$/", $column->defaultValue, $matches)) {
+                    $column->defaultValue = bindec($matches[1]);
                 } elseif (preg_match("/^'(.*?)'::/", $column->defaultValue, $matches)) {
                     $column->defaultValue = $column->phpTypecast($matches[1]);
                 } elseif (preg_match('/^(\()?(.*?)(?(1)\))(?:::.+)?$/', $column->defaultValue, $matches)) {
diff --git a/src/di/Container.php b/src/di/Container.php
index eaa5b0e3adc..2717572b79a 100644
--- a/src/di/Container.php
+++ b/src/di/Container.php
@@ -94,6 +94,8 @@
  * @property array $definitions The list of the object definitions or the loaded shared objects (type or ID =>
  * definition or instance). This property is read-only.
  *
+ * @property bool $resolveArrays whether to attempt to resolve elements in array dependencies
+ *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
@@ -121,6 +123,10 @@ class Container extends Component
      */
     private $_dependencies = [];
 
+    /**
+     * @var bool whether to attempt to resolve elements in array dependencies
+     */
+    private $_resolveArrays = false;
 
     /**
      * Returns an instance of the requested class.
@@ -491,7 +497,7 @@ protected function resolveDependencies($dependencies, $reflection = null)
                     $class = $reflection->getName();
                     throw new InvalidConfigException("Missing required parameter \"$name\" when instantiating \"$class\".");
                 }
-            } elseif (is_array($dependency)) {
+            } elseif ($this->_resolveArrays && is_array($dependency)) {
                 $dependencies[$index] = $this->resolveDependencies($dependency, $reflection);
             }
         }
@@ -682,4 +688,13 @@ public function setSingletons(array $singletons)
             $this->setSingleton($class, $definition);
         }
     }
+
+    /**
+     * @param bool $value whether to attempt to resolve elements in array dependencies
+     * @since 2.0.37
+     */
+    public function setResolveArrays($value)
+    {
+        $this->_resolveArrays = (bool) $value;
+    }
 }
diff --git a/src/messages/hi/yii.php b/src/messages/hi/yii.php
index 58c21544e15..e43b4bff7ee 100644
--- a/src/messages/hi/yii.php
+++ b/src/messages/hi/yii.php
@@ -26,12 +26,12 @@
     ' and ' => ' और ',
     '(not set)' => '(स्थापित नहीं)',
     'An internal server error occurred.' => 'सर्वर में एक आंतरिक दोष उत्पन्न हुआ है।',
-    'Are you sure you want to delete this item?' => 'क्या आप आश्वस्त हैं कि इसे मिटाना चाहते हैं?',
-    'Delete' => 'मिटायें',
+    'Are you sure you want to delete this item?' => 'क्या आप सुनिश्चित रूप से इस आइटम को मिटाना चाहते हैं?',
+    'Delete' => 'मिटाएँ',
     'Error' => 'खामी',
-    'File upload failed.' => 'फ़ाइल अपलोड असफल हुआ।',
+    'File upload failed.' => 'फ़ाइल अपलोड असफल रहा।',
     'Home' => 'घर',
-    'Invalid data received for parameter "{param}".' => 'पैरामीटर "{param}" के लिए अमान्य डेटा मिली हैं।',
+    'Invalid data received for parameter "{param}".' => 'पैरामीटर "{param}" के लिए प्राप्त डेटा अमान्य है।',
     'Login Required' => 'लॉगिन आवश्यक हैं',
     'Missing required arguments: {params}' => 'आवश्यक तर्क: {params} अनुपस्थित है',
     'Missing required parameters: {params}' => 'आवश्यक पैरामीटर: {params} अनुपस्थित है',
@@ -46,8 +46,8 @@
     'Showing <b>{begin, number}-{end, number}</b> of <b>{totalCount, number}</b> {totalCount, plural, one{item} other{items}}.' => 'दिखाया गया है {totalCount, number} {totalCount, plural, one{चीज} other{चीज़े}} में से {begin, number}-{end, number} ।',
     'The combination {values} of {attributes} has already been taken.' => '{attributes} और {values} का संयोजन पहले से ही लिया जा चुका है।',
     'The file "{file}" is not an image.' => 'यह फ़ाइल "{file}" एक चित्र नहीं है।',
-    'The file "{file}" is too big. Its size cannot exceed {formattedLimit}.' => 'यह फ़ाइल "{file}" बहुत बड़ी है। इसका आकारण {formattedLimit} से अधिक नहीं हो सकता है।',
-    'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.' => 'यह फ़ाइल "{file}" बहुत छोटी है। इसका आकारण {formattedLimit} से छोटा नहीं हो सकता।',
+    'The file "{file}" is too big. Its size cannot exceed {formattedLimit}.' => 'यह फ़ाइल "{file}" बहुत बड़ी है। इसका आकार {formattedLimit} से अधिक नहीं हो सकता है।',
+    'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.' => 'यह फ़ाइल "{file}" बहुत छोटी है। इसका आकार {formattedLimit} से छोटा नहीं हो सकता।',
     'The format of {attribute} is invalid.' => '{attribute} का प्रारूप गलत है।',
     'The image "{file}" is too large. The height cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => 'यह चित्र "{file}" बहुत बड़ी है। ऊंचाई {limit, number} {limit, plural, one{पिक्सेल} other{पिक्सेल}} से बड़ी नहीं हो सकती।',
     'The image "{file}" is too large. The width cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => 'यह चित्र "{file}" बहुत बड़ी है। चौड़ाई {limit, number} {limit, plural, one{पिक्सेल} other{पिक्सेल}} से बड़ी नहीं हो सकती।',
diff --git a/src/widgets/ActiveField.php b/src/widgets/ActiveField.php
index d5e598bf8a7..4ffe3fc90fe 100644
--- a/src/widgets/ActiveField.php
+++ b/src/widgets/ActiveField.php
@@ -545,6 +545,13 @@ public function textarea($options = [])
      */
     public function radio($options = [], $enclosedByLabel = true)
     {
+        if ($this->form->validationStateOn === ActiveForm::VALIDATION_STATE_ON_INPUT) {
+            $this->addErrorClassIfNeeded($options);
+        }
+
+        $this->addAriaAttributes($options);
+        $this->adjustLabelFor($options);
+        
         if ($enclosedByLabel) {
             $this->parts['{input}'] = Html::activeRadio($this->model, $this->attribute, $options);
             $this->parts['{label}'] = '';
@@ -560,13 +567,6 @@ public function radio($options = [], $enclosedByLabel = true)
             $this->parts['{input}'] = Html::activeRadio($this->model, $this->attribute, $options);
         }
 
-        if ($this->form->validationStateOn === ActiveForm::VALIDATION_STATE_ON_INPUT) {
-            $this->addErrorClassIfNeeded($options);
-        }
-
-        $this->addAriaAttributes($options);
-        $this->adjustLabelFor($options);
-
         return $this;
     }
 
@@ -597,6 +597,13 @@ public function radio($options = [], $enclosedByLabel = true)
      */
     public function checkbox($options = [], $enclosedByLabel = true)
     {
+        if ($this->form->validationStateOn === ActiveForm::VALIDATION_STATE_ON_INPUT) {
+            $this->addErrorClassIfNeeded($options);
+        }
+
+        $this->addAriaAttributes($options);
+        $this->adjustLabelFor($options);
+        
         if ($enclosedByLabel) {
             $this->parts['{input}'] = Html::activeCheckbox($this->model, $this->attribute, $options);
             $this->parts['{label}'] = '';
@@ -612,13 +619,6 @@ public function checkbox($options = [], $enclosedByLabel = true)
             $this->parts['{input}'] = Html::activeCheckbox($this->model, $this->attribute, $options);
         }
 
-        if ($this->form->validationStateOn === ActiveForm::VALIDATION_STATE_ON_INPUT) {
-            $this->addErrorClassIfNeeded($options);
-        }
-
-        $this->addAriaAttributes($options);
-        $this->adjustLabelFor($options);
-
         return $this;
     }
 
diff --git a/tests/framework/db/mysql/SchemaTest.php b/tests/framework/db/mysql/SchemaTest.php
index 5b57cd7baaf..6fa6a5d2be6 100644
--- a/tests/framework/db/mysql/SchemaTest.php
+++ b/tests/framework/db/mysql/SchemaTest.php
@@ -118,4 +118,63 @@ public function testAlternativeDisplayOfDefaultCurrentTimestampInMariaDB()
         $this->assertInstanceOf(Expression::className(), $column->defaultValue);
         $this->assertEquals('CURRENT_TIMESTAMP', $column->defaultValue);
     }
+
+    public function getExpectedColumns()
+    {
+        $version = $this->getConnection()->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION);
+
+        return array_merge(
+            parent::getExpectedColumns(),
+            [
+                'int_col' => [
+                    'type' => 'integer',
+                    'dbType' => \version_compare($version, '8.0.17', '>') ? 'int' : 'int(11)',
+                    'phpType' => 'integer',
+                    'allowNull' => false,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'scale' => null,
+                    'defaultValue' => null,
+                ],
+                'int_col2' => [
+                    'type' => 'integer',
+                    'dbType' => \version_compare($version, '8.0.17', '>') ? 'int' : 'int(11)',
+                    'phpType' => 'integer',
+                    'allowNull' => true,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'scale' => null,
+                    'defaultValue' => 1,
+                ],
+                'tinyint_col' => [
+                    'type' => 'tinyint',
+                    'dbType' => \version_compare($version, '8.0.17', '>') ? 'tinyint' : 'tinyint(3)',
+                    'phpType' => 'integer',
+                    'allowNull' => true,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 3,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 3,
+                    'scale' => null,
+                    'defaultValue' => 1,
+                ],
+                'smallint_col' => [
+                    'type' => 'smallint',
+                    'dbType' =>  \version_compare($version, '8.0.17', '>') ? 'smallint' : 'smallint(1)',
+                    'phpType' => 'integer',
+                    'allowNull' => true,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 1,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 1,
+                    'scale' => null,
+                    'defaultValue' => 1,
+                ],
+            ]
+        );
+    }
 }
diff --git a/tests/framework/db/pgsql/SchemaTest.php b/tests/framework/db/pgsql/SchemaTest.php
index ddee4640a7b..d3b0ad3b2a3 100644
--- a/tests/framework/db/pgsql/SchemaTest.php
+++ b/tests/framework/db/pgsql/SchemaTest.php
@@ -75,7 +75,9 @@ public function getExpectedColumns()
         $columns['bool_col2']['precision'] = null;
         $columns['bool_col2']['scale'] = null;
         $columns['bool_col2']['defaultValue'] = true;
-        $columns['ts_default']['defaultValue'] = new Expression('now()');
+        if (version_compare($this->getConnection(false)->getServerVersion(), '10', '<')) {
+            $columns['ts_default']['defaultValue'] = new Expression('now()');
+        }
         $columns['bit_col']['dbType'] = 'bit';
         $columns['bit_col']['size'] = 8;
         $columns['bit_col']['precision'] = null;
diff --git a/tests/framework/di/ContainerTest.php b/tests/framework/di/ContainerTest.php
index f0b5c800130..1d6d54b2145 100644
--- a/tests/framework/di/ContainerTest.php
+++ b/tests/framework/di/ContainerTest.php
@@ -357,6 +357,7 @@ public function testReferencesInArrayInDependencies()
     {
         $quxInterface = 'yiiunit\framework\di\stubs\QuxInterface';
         $container = new Container();
+        $container->resolveArrays = true;
         $container->setSingletons([
             $quxInterface => [
                 'class' => Qux::className(),
@@ -494,4 +495,36 @@ public function testVariadicCallable()
 
         require __DIR__ . '/testContainerWithVariadicCallable.php';
     }
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/18245
+     */
+    public function testDelayedInitializationOfSubArray()
+    {
+        $definitions = [
+            'test' => [
+                'class' => Corge::className(),
+                '__construct()' => [
+                    [Instance::of('setLater')],
+                ],
+            ],
+        ];
+
+        $application = Yii::createObject([
+            '__class' => \yii\web\Application::className(),
+            'basePath' => __DIR__,
+            'id' => 'test',
+            'components' => [
+                'request' => [
+                    'baseUrl' => '123'
+                ],
+            ],
+            'container' => [
+                'definitions' => $definitions,
+            ],
+        ]);
+
+        Yii::$container->set('setLater', new Qux());
+        Yii::$container->get('test');
+    }
 }
diff --git a/tests/framework/widgets/ActiveFormTest.php b/tests/framework/widgets/ActiveFormTest.php
index c8accbb270c..79908614778 100644
--- a/tests/framework/widgets/ActiveFormTest.php
+++ b/tests/framework/widgets/ActiveFormTest.php
@@ -158,6 +158,7 @@ public function testShouldTriggerInitEvent()
 
     /**
      * @see https://github.com/yiisoft/yii2/issues/15476
+     * @see https://github.com/yiisoft/yii2/issues/16892
      */
     public function testValidationStateOnInput()
     {
@@ -182,5 +183,25 @@ public function testValidationStateOnInput()
 EOF
         , (string) $form->field($model, 'name'));
 
+
+        $this->assertEqualsWithoutLE(<<<'EOF'
+<div class="form-group field-dynamicmodel-name">
+
+<input type="hidden" name="DynamicModel[name]" value="0"><label><input type="checkbox" id="dynamicmodel-name" class="has-error" name="DynamicModel[name]" value="1" aria-invalid="true"> Name</label>
+
+<div class="help-block">I have an error!</div>
+</div>
+EOF
+            , (string) $form->field($model, 'name')->checkbox());
+
+        $this->assertEqualsWithoutLE(<<<'EOF'
+<div class="form-group field-dynamicmodel-name">
+
+<input type="hidden" name="DynamicModel[name]" value="0"><label><input type="radio" id="dynamicmodel-name" class="has-error" name="DynamicModel[name]" value="1" aria-invalid="true"> Name</label>
+
+<div class="help-block">I have an error!</div>
+</div>
+EOF
+            , (string) $form->field($model, 'name')->radio());
     }
 }
