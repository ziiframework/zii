diff --git a/src/BaseYii.php b/src/BaseYii.php
index 46808ff7076..04551eadcf9 100644
--- a/src/BaseYii.php
+++ b/src/BaseYii.php
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.41';
+        return '2.0.41.1';
     }
 
     /**
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index c05c27b270e..7f0a32ffc7b 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -1,6 +1,13 @@
 Yii Framework 2 Change Log
 ==========================
 
+2.0.41.1 March 04, 2021
+-----------------------
+
+- Bug #18545: Reversed changes made to the `yii\db\Query::all()` and `indexBy` handling (bizley)
+- Bug #18548: Fix bug with REST rules with prefixes containing tokens not being parsed properly (bizley)
+
+
 2.0.41 March 03, 2021
 ---------------------
 
diff --git a/src/db/ActiveQueryInterface.php b/src/db/ActiveQueryInterface.php
index 8c708072c55..9150e8bc2ec 100644
--- a/src/db/ActiveQueryInterface.php
+++ b/src/db/ActiveQueryInterface.php
@@ -53,8 +53,6 @@ public function one($db = null);
      *     // return the index value corresponding to $model
      * }
      * ```
-     * The column has to be a part of the `SELECT` fragment of a SQL statement.
-     * If [[yii\db\Query::select()|select()]] is used with an array in its parameter, Yii handles adding that required SQL fragment for you.
      *
      * @return $this the query object itself
      */
diff --git a/src/db/Query.php b/src/db/Query.php
index e8c6438997f..f85881ffa2b 100644
--- a/src/db/Query.php
+++ b/src/db/Query.php
@@ -246,26 +246,6 @@ public function all($db = null)
             return [];
         }
 
-        if (is_string($this->indexBy) && $this->indexBy && is_array($this->select)) {
-            $isIndexByAnArray = false;
-            if (strpos($this->indexBy, '.')) {
-                $indexByParts = explode('.', $this->indexBy);
-                foreach ($indexByParts as $indexByPart) {
-                    if (is_numeric($indexByPart)) {
-                        $isIndexByAnArray = true;
-                        break;
-                    }
-                }
-            }
-            if (!$isIndexByAnArray && !in_array($this->indexBy, $this->select, true)) {
-                if (strpos($this->indexBy, '.') === false && count($tables = $this->getTablesUsedInFrom()) > 0) {
-                    $this->select[] = key($tables) . '.' . $this->indexBy;
-                } else {
-                    $this->select[] = $this->indexBy;
-                }
-            }
-        }
-
         $rows = $this->createCommand($db)->queryAll();
 
         return $this->populate($rows);
diff --git a/src/db/QueryInterface.php b/src/db/QueryInterface.php
index 30df4e52ae5..df57ad38385 100644
--- a/src/db/QueryInterface.php
+++ b/src/db/QueryInterface.php
@@ -68,8 +68,6 @@ public function exists($db = null);
      *     // return the index value corresponding to $row
      * }
      * ```
-     * The column has to be a part of the `SELECT` fragment of a SQL statement.
-     * If [[yii\db\Query::select()|select()]] is used with an array in its parameter, Yii handles adding that required SQL fragment for you.
      *
      * @return $this the query object itself
      */
diff --git a/src/db/QueryTrait.php b/src/db/QueryTrait.php
index 277fd05c279..46527dc9f1c 100644
--- a/src/db/QueryTrait.php
+++ b/src/db/QueryTrait.php
@@ -71,8 +71,6 @@ trait QueryTrait
      *     // return the index value corresponding to $row
      * }
      * ```
-     * The column has to be a part of the `SELECT` fragment of a SQL statement.
-     * If [[yii\db\Query::select()|select()]] is used with an array in its parameter, Yii handles adding that required SQL fragment for you.
      *
      * @return $this the query object itself
      */
diff --git a/src/i18n/Formatter.php b/src/i18n/Formatter.php
index acf71020fb8..0af9e3e4ed4 100644
--- a/src/i18n/Formatter.php
+++ b/src/i18n/Formatter.php
@@ -485,7 +485,7 @@ public function asRaw($value)
 
     /**
      * Formats the value as an HTML-encoded plain text.
-     * @param string $value the value to be formatted.
+     * @param string|null $value the value to be formatted.
      * @return string the formatted result.
      */
     public function asText($value)
@@ -499,7 +499,7 @@ public function asText($value)
 
     /**
      * Formats the value as an HTML-encoded plain text with newlines converted into breaks.
-     * @param string $value the value to be formatted.
+     * @param string|null $value the value to be formatted.
      * @return string the formatted result.
      */
     public function asNtext($value)
@@ -515,7 +515,7 @@ public function asNtext($value)
      * Formats the value as HTML-encoded text paragraphs.
      * Each text paragraph is enclosed within a `<p>` tag.
      * One or multiple consecutive empty lines divide two paragraphs.
-     * @param string $value the value to be formatted.
+     * @param string|null $value the value to be formatted.
      * @return string the formatted result.
      */
     public function asParagraphs($value)
@@ -531,7 +531,7 @@ public function asParagraphs($value)
      * Formats the value as HTML text.
      * The value will be purified using [[HtmlPurifier]] to avoid XSS attacks.
      * Use [[asRaw()]] if you do not want any purification of the value.
-     * @param string $value the value to be formatted.
+     * @param string|null $value the value to be formatted.
      * @param array|null $config the configuration for the HTMLPurifier class.
      * @return string the formatted result.
      */
@@ -546,7 +546,7 @@ public function asHtml($value, $config = null)
 
     /**
      * Formats the value as a mailto link.
-     * @param string $value the value to be formatted.
+     * @param string|null $value the value to be formatted.
      * @param array $options the tag options in terms of name-value pairs. See [[Html::mailto()]].
      * @return string the formatted result.
      */
@@ -871,7 +871,7 @@ protected function normalizeDatetimeValue($value, $checkDateTimeInfo = false)
 
     /**
      * Formats a date, time or datetime in a float number as UNIX timestamp (seconds since 01-01-1970).
-     * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp
@@ -997,7 +997,7 @@ public function asRelativeTime($value, $referenceTime = null)
     /**
      * Represents the value as duration in human readable format.
      *
-     * @param DateInterval|string|int $value the value to be formatted. Acceptable formats:
+     * @param DateInterval|string|int|null $value the value to be formatted. Acceptable formats:
      *  - [DateInterval object](https://secure.php.net/manual/ru/class.dateinterval.php)
      *  - integer - number of seconds. For example: value `131` represents `2 minutes, 11 seconds`
      *  - ISO8601 duration format. For example, all of these values represent `1 day, 2 hours, 30 minutes` duration:
@@ -1373,7 +1373,7 @@ public function asOrdinal($value)
      * If [[sizeFormatBase]] is 1024, [binary prefixes](http://en.wikipedia.org/wiki/Binary_prefix) (e.g. kibibyte/KiB, mebibyte/MiB, ...)
      * are used in the formatting result.
      *
-     * @param string|int|float $value value in bytes to be formatted.
+     * @param string|int|float|null $value value in bytes to be formatted.
      * @param int|null $decimals the number of digits after the decimal point.
      * @param array $options optional configuration for the number formatter. This parameter will be merged with [[numberFormatterOptions]].
      * @param array $textOptions optional configuration for the number formatter. This parameter will be merged with [[numberFormatterTextOptions]].
@@ -1429,7 +1429,7 @@ public function asShortSize($value, $decimals = null, $options = [], $textOption
      * If [[sizeFormatBase]] is 1024, [binary prefixes](http://en.wikipedia.org/wiki/Binary_prefix) (e.g. kibibyte/KiB, mebibyte/MiB, ...)
      * are used in the formatting result.
      *
-     * @param string|int|float $value value in bytes to be formatted.
+     * @param string|int|float|null $value value in bytes to be formatted.
      * @param int|null $decimals the number of digits after the decimal point.
      * @param array $options optional configuration for the number formatter. This parameter will be merged with [[numberFormatterOptions]].
      * @param array $textOptions optional configuration for the number formatter. This parameter will be merged with [[numberFormatterTextOptions]].
@@ -1568,7 +1568,7 @@ public function asShortWeight($value, $decimals = null, $options = [], $textOpti
     /**
      * @param string $unitType one of [[UNIT_WEIGHT]], [[UNIT_LENGTH]]
      * @param string $unitFormat one of [[FORMAT_WIDTH_SHORT]], [[FORMAT_WIDTH_LONG]]
-     * @param float|int $value to be formatted
+     * @param float|int|null $value to be formatted
      * @param float $baseUnit unit of value as the multiplier of the smallest unit. When `null`, property [[baseUnits]]
      * will be used to determine base unit using $unitType and $unitSystem.
      * @param string $unitSystem either [[UNIT_SYSTEM_METRIC]] or [[UNIT_SYSTEM_IMPERIAL]]. When `null`, property [[systemOfUnits]] will be used.
diff --git a/src/rest/UrlRule.php b/src/rest/UrlRule.php
index 413ecf3db0b..d90ccf5372e 100644
--- a/src/rest/UrlRule.php
+++ b/src/rest/UrlRule.php
@@ -216,7 +216,11 @@ protected function createRule($pattern, $prefix, $action)
     public function parseRequest($manager, $request)
     {
         $pathInfo = $request->getPathInfo();
-        if ($this->prefix !== '' && strpos($pathInfo . '/', $this->prefix . '/') !== 0) {
+        if (
+            $this->prefix !== ''
+            && strpos($this->prefix, '<') === false
+            && strpos($pathInfo . '/', $this->prefix . '/') !== 0
+        ) {
             return false;
         }
 
diff --git a/tests/framework/db/ActiveRecordTest.php b/tests/framework/db/ActiveRecordTest.php
index 56f936a0f3d..aeb8d9ddca6 100644
--- a/tests/framework/db/ActiveRecordTest.php
+++ b/tests/framework/db/ActiveRecordTest.php
@@ -2095,25 +2095,4 @@ public function testEagerLoadingWithTypeCastedCompositeIdentifier()
             }
         }
     }
-
-    /**
-     * @see https://github.com/yiisoft/yii2/issues/18525
-     */
-    public function testHasManyWithIndexBy()
-    {
-        $category = Category::find()->joinWith('items')->indexBy('items.0.name');
-        $this->assertEquals(['Agile Web Application Development with Yii1.1 and PHP5', 'Ice Age'], array_keys($category->all()));
-
-        $category = Category::find()->select([Category::tableName() . '.*'])->joinWith('items')->indexBy('items.0.name');
-        $this->assertEquals(['Agile Web Application Development with Yii1.1 and PHP5', 'Ice Age'], array_keys($category->all()));
-
-        $category = Category::find()->select([Category::tableName() . '.*'])->joinWith('items')->indexBy('name');
-        $this->assertEquals(['Books', 'Movies'], array_keys($category->all()));
-
-        $category = Category::find()->joinWith('items')->indexBy('item.name');
-        $this->assertEquals([''], array_keys($category->all()));
-
-        $category = Category::find()->select([Category::tableName() . '.name'])->joinWith('items')->indexBy('id');
-        $this->assertEquals([1, 2], array_keys($category->all()));
-    }
 }
diff --git a/tests/framework/db/QueryTest.php b/tests/framework/db/QueryTest.php
index 81eb2af40d5..18179085e44 100644
--- a/tests/framework/db/QueryTest.php
+++ b/tests/framework/db/QueryTest.php
@@ -795,23 +795,4 @@ public function testQueryCreation()
             $newQuery->withQueries
         );
     }
-
-    /**
-     * @see https://github.com/yiisoft/yii2/issues/18499
-     */
-    public function testAllWithAutomaticallyAddedIndexedByColumn()
-    {
-        $db = $this->getConnection();
-
-        $result = (new Query())->from('customer')
-            ->select('name')
-            ->orderBy(['id' => SORT_DESC])
-            ->indexBy('id')
-            ->all($db);
-        $this->assertEquals([
-            3 => ['name' => 'user3', 'id' => 3],
-            2 => ['name' => 'user2', 'id' => 2],
-            1 => ['name' => 'user1', 'id' => 1]
-        ], $result);
-    }
 }
diff --git a/tests/framework/rest/UrlRuleTest.php b/tests/framework/rest/UrlRuleTest.php
index e52eb798e90..748cf2c7483 100644
--- a/tests/framework/rest/UrlRuleTest.php
+++ b/tests/framework/rest/UrlRuleTest.php
@@ -62,7 +62,6 @@ public function testParseRequest()
         }
     }
 
-
     protected function getTestsForParseRequest()
     {
         // structure of each test
@@ -162,6 +161,13 @@ protected function getTestsForParseRequest()
                     ['posts/1338', 'post/view', ['id' => 1338]],
                 ],
             ],
+            [
+                'prefix with token',
+                ['controller' => 'post', 'prefix' => 'admin/<name>'],
+                [
+                    ['admin/aaa/posts', 'post/index', ['name' => 'aaa']],
+                ],
+            ],
         ];
     }
 
