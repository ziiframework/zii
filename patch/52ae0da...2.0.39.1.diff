diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 0498970b496..a912dbfd1b5 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -3,7 +3,7 @@ name: build
 on: [push, pull_request]
 
 env:
-  DEFAULT_COMPOSER_FLAGS: "--prefer-dist --no-interaction --no-progress --optimize-autoloader"
+  DEFAULT_COMPOSER_FLAGS: "--prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi"
   PHPUNIT_EXCLUDE_GROUP: mssql,oci,wincache,xcache,zenddata,cubrid
 
 jobs:
@@ -56,7 +56,7 @@ jobs:
           php-version: ${{ matrix.php }}
           tools: pecl
           extensions: apc, curl, dom, imagick, intl, mbstring, mcrypt, memcached, mysql, pdo, pdo_mysql, pdo_pgsql, pdo_sqlite, pgsql, sqlite
-          ini-values: date.timezone='UTC'
+          ini-values: date.timezone='UTC', session.save_path="${{ runner.temp }}"
       - name: Install php-sqlsrv
         run: |
             curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - >/dev/null 2>&1
@@ -86,16 +86,16 @@ jobs:
       - name: Install dependencies
         run: composer update $DEFAULT_COMPOSER_FLAGS
       - name: PHP Unit tests for PHP 7.1
-        run: vendor/bin/phpunit --verbose --coverage-clover=coverage.clover --exclude-group oci,wincache,xcache,zenddata,cubrid
+        run: vendor/bin/phpunit --verbose --coverage-clover=coverage.clover --exclude-group oci,wincache,xcache,zenddata,cubrid --colors=always
         if: matrix.php == '7.1'
-      - name: PHP Unit tests for PHP 7.2 - 7.4
-        run: vendor/bin/phpunit --verbose --exclude-group $PHPUNIT_EXCLUDE_GROUP
+      - name: PHP Unit tests for PHP >= 7.2
+        run: vendor/bin/phpunit --verbose --exclude-group $PHPUNIT_EXCLUDE_GROUP --colors=always
         env:
           PHPUNIT_EXCLUDE_GROUP: oci,wincache,xcache,zenddata,cubrid
-        if: matrix.php == '7.4' || matrix.php == '7.3' || matrix.php == '7.2'
-      - name: PHP Unit tests for PHP 5.4 - 7.0
-        run: vendor/bin/phpunit --verbose --exclude-group $PHPUNIT_EXCLUDE_GROUP
-        if: matrix.php == '7.0' || matrix.php == '5.6' || matrix.php == '5.5' || matrix.php == '5.4'
+        if: matrix.php >= '7.2'
+      - name: PHP Unit tests for PHP <= 7.0
+        run: vendor/bin/phpunit --verbose --exclude-group $PHPUNIT_EXCLUDE_GROUP --colors=always
+        if: matrix.php <= '7.0'
       - name: Code coverage
         run: |
           wget https://scrutinizer-ci.com/ocular.phar
@@ -114,6 +114,7 @@ jobs:
         uses: shivammathur/setup-php@v2
         with:
           php-version: 7.2
+          ini-values: session.save_path=${{ runner.temp }}
       - name: Get composer cache directory
         id: composer-cache
         run: echo "::set-output name=dir::$(composer config cache-files-dir)"
diff --git a/.github/workflows/ci-mysql.yml b/.github/workflows/ci-mysql.yml
index d7814d5a8b2..d2049645ef6 100644
--- a/.github/workflows/ci-mysql.yml
+++ b/.github/workflows/ci-mysql.yml
@@ -74,7 +74,7 @@ jobs:
             php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-
 
       - name: Install dependencies with composer
-        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader
+        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi
 
       - name: Run mysql tests with phpunit
-        run: vendor/bin/phpunit --group mysql
+        run: vendor/bin/phpunit --group mysql --colors=always
diff --git a/.github/workflows/ci-pgsql.yml b/.github/workflows/ci-pgsql.yml
index 2d3818129ba..9325ac2e901 100644
--- a/.github/workflows/ci-pgsql.yml
+++ b/.github/workflows/ci-pgsql.yml
@@ -78,7 +78,7 @@ jobs:
             php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-
 
       - name: Install dependencies with composer
-        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader
+        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi
 
       - name: Run pgsql tests with phpunit
-        run: vendor/bin/phpunit --group pgsql
+        run: vendor/bin/phpunit --group pgsql --colors=always
diff --git a/src/BaseYii.php b/src/BaseYii.php
index e2c4097e42a..6aebd46bbee 100644
--- a/src/BaseYii.php
+++ b/src/BaseYii.php
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.38-dev';
+        return '2.0.39.1';
     }
 
     /**
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index 255deb74e6a..3480bcb26d0 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -1,24 +1,53 @@
 Yii Framework 2 Change Log
 ==========================
 
-2.0.38 under development
+2.0.39.1 November 10, 2020
+--------------------------
+
+- Bug #18373: Fix not taking default value when unable to resolve non-exing class via DI container (vjik)
+- Enh #18370: Add option to provide a string replacement for `null` value in `yii\data\DataFilter` (bizley)
+
+
+2.0.39 November 10, 2020
 ------------------------
 
-- Enh #18213: Do not load fixtures with circular dependencies twice instead of throwing an exception (JesseHines0)
-- Bug #18066: Fix `yii\db\Query::create()` wasn't using all info from `withQuery()` (maximkou)
-- Bug #18269: Fix integer safe attribute to work properly in `yii\base\Model` (Ladone)
-- Enh #18236: Allow `yii\filters\RateLimiter` to accept a closure function for the `$user` property in order to assign values on runtime (nadar)
-- Bug #18248: Render only one stack trace on a console for chained exceptions (mikehaertl)
-- Bug #18233: Add PHP 8 support (samdark)
-- Enh #18196: `yii\rbac\DbManager::$checkAccessAssignments` is now `protected` (alex-code)
-- Bug #18239: Fix support of no-extension files for `FileValidator::validateExtension()` (darkdef)
-- Bug #18229: Add a flag to specify SyBase database when used with pdo_dblib (darkdef)
+- Bug #16418: Fix `yii\data\Pagination::getLinks()` to return links to the first and the last pages regardless of the current page (ptz-nerf, bizley)
+- Bug #16831: Fix console Table widget does not render correctly in combination with ANSI formatting (issidorov, cebe)
+- Bug #18160, #18192: Fix `registerFile` with set argument `depends` does not take `position` and `appendTimestamp` into account (baleeny)
+- Bug #18263: Fix writing `\yii\caching\FileCache` files to the same directory when `keyPrefix` is set (githubjeka)
+- Bug #18287: Fix for `OUTPUT INSERTED` and computed columns. Add flag to mark computed values in table schema (darkdef)
+- Bug #18290: Fix response with non-seekable streams (schmunk42)
+- Bug #18297: Replace usage of deprecated `ReflectionParameter::isArray()` method in PHP8 (baletskyi)
+- Bug #18303: Fix creating migration for column methods used after `defaultValues` (wsaid)
+- Bug #18308: Fix `\yii\base\Model::getErrorSummary()` reverse order (DrDeath72)
+- Bug #18313: Fix multipart form data parsing with double quotes (wsaid)
+- Bug #18317: Additional PHP 8 compatibility fixes (samdark, bizley)
+- Enh #18247: Add support for the 'session.use_strict_mode' ini directive in `yii\web\Session` (rhertogh)
+- Enh #18285: Enhanced DI container to allow passing parameters by name in a constructor (vjik)
+- Enh #18304: Add support of constructor parameters with default values to DI container (vjik)
+- Enh #18351: Add option to change default timezone for parsing formats without time part in `yii\validators\DateValidator` (bizley)
+
+
+2.0.38 September 14, 2020
+-------------------------
+
 - Bug #13973: Correct alterColumn for MSSQL & drop constraints before dropping a column (darkdef)
-- Bug #18040: Display width specification for integer data types was deprecated in MySQL 8.0.19 (terabytesoftw)
 - Bug #15265: PostgreSQL > 10.0 is not pass tests with default value of timestamp CURRENT_TIMESTAMP (terabytesoftw)
-- Bug #18232: Fail tests pgsql v-10.14, v-11.9, v-12-latest (terabytesoftw)
 - Bug #16892: Validation error class was not applied to checkbox and radio when validationStateOn = self::VALIDATION_STATE_ON_INPUT (dan-szabo, samdark)
+- Bug #18040: Display width specification for integer data types was deprecated in MySQL 8.0.19 (terabytesoftw)
+- Bug #18066: Fix `yii\db\Query::create()` wasn't using all info from `withQuery()` (maximkou)
+- Bug #18229: Add a flag to specify SyBase database when used with pdo_dblib (darkdef)
+- Bug #18232: Fail tests pgsql v-10.14, v-11.9, v-12-latest (terabytesoftw)
+- Bug #18233: Add PHP 8 support (samdark)
+- Bug #18239: Fix support of no-extension files for `FileValidator::validateExtension()` (darkdef)
 - Bug #18245: Make resolving DI references inside of arrays in dependencies optional (SamMousa, samdark, hiqsol)
+- Bug #18248: Render only one stack trace on a console for chained exceptions (mikehaertl)
+- Bug #18269: Fix integer safe attribute to work properly in `yii\base\Model` (Ladone)
+- Bug: (CVE-2020-15148): Disable unserialization of `yii\db\BatchQueryResult` to prevent remote code execution in case application calls unserialize() on user input containing specially crafted string (samdark, russtone)
+- Enh #18196: `yii\rbac\DbManager::$checkAccessAssignments` is now `protected` (alex-code)
+- Enh #18213: Do not load fixtures with circular dependencies twice instead of throwing an exception (JesseHines0)
+- Enh #18236: Allow `yii\filters\RateLimiter` to accept a closure function for the `$user` property in order to assign values on runtime (nadar)
+
 
 2.0.37 August 07, 2020
 ----------------------
diff --git a/src/UPGRADE.md b/src/UPGRADE.md
index b151c334537..0796fb183e4 100644
--- a/src/UPGRADE.md
+++ b/src/UPGRADE.md
@@ -51,6 +51,47 @@ if you want to upgrade from version A to version C and there is
 version B between A and C, you need to follow the instructions
 for both A and B.
 
+Upgrade from Yii 2.0.38
+-----------------------
+
+* The storage structure of the file cache has been changed when you use `\yii\caching\FileCache::$keyPrefix`.
+It is worth warming up the cache again if there is a logical dependency when working with the file cache.
+
+* `yii\web\Session` now respects the 'session.use_strict_mode' ini directive.
+  In case you use a custom `Session` class and have overwritten the `Session::openSession()` and/or 
+  `Session::writeSession()` functions changes might be required:
+  * When in strict mode the `openSession()` function should check if the requested session id exists
+    (and mark it for forced regeneration if not).
+    For example, the `DbSession` does this at the beginning of the function as follows:
+    ```php
+    if ($this->getUseStrictMode()) {
+        $id = $this->getId();
+        if (!$this->getReadQuery($id)->exists()) {
+            //This session id does not exist, mark it for forced regeneration
+            $this->_forceRegenerateId = $id;
+        }
+    }
+    // ... normal function continues ...
+    ``` 
+  * When in strict mode the `writeSession()` function should ignore writing the session under the old id.
+    For example, the `DbSession` does this at the beginning of the function as follows:
+    ```php
+    if ($this->getUseStrictMode() && $id === $this->_forceRegenerateId) {
+        //Ignore write when forceRegenerate is active for this id
+        return true;
+    }
+    // ... normal function continues ...
+    ```
+  > Note: The sample code above is specific for the `yii\web\DbSession` class.
+    Make sure you use the correct implementation based on your parent class,
+    e.g. `yii\web\CacheSession`, `yii\redis\Session`, `yii\mongodb\Session`, etc.
+  
+  > Note: In case your custom functions call their `parent` functions, there are probably no changes needed to your 
+    code if those parents implement the `useStrictMode` checks.
+
+  > Warning: in case `openSession()` and/or `writeSession()` functions do not implement the `useStrictMode` code
+    the session could be stored under a malicious id without warning even if `useStrictMode` is enabled.
+
 Upgrade from Yii 2.0.37
 -----------------------
 
diff --git a/src/base/Action.php b/src/base/Action.php
index bf6464e1c09..5a9413cf296 100644
--- a/src/base/Action.php
+++ b/src/base/Action.php
@@ -30,7 +30,7 @@
  *
  * For more details and usage information on Action, see the [guide article on actions](guide:structure-controllers).
  *
- * @property string $uniqueId The unique ID of this action among the whole application. This property is
+ * @property-read string $uniqueId The unique ID of this action among the whole application. This property is
  * read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/base/Application.php b/src/base/Application.php
index d7771bf636f..94f4be11787 100644
--- a/src/base/Application.php
+++ b/src/base/Application.php
@@ -14,33 +14,39 @@
  *
  * For more details and usage information on Application, see the [guide article on applications](guide:structure-applications).
  *
- * @property \yii\web\AssetManager $assetManager The asset manager application component. This property is
- * read-only.
- * @property \yii\rbac\ManagerInterface $authManager The auth manager application component. Null is returned
- * if auth manager is not configured. This property is read-only.
+ * @property-read \yii\web\AssetManager $assetManager The asset manager application component. This property
+ * is read-only.
+ * @property-read \yii\rbac\ManagerInterface $authManager The auth manager application component. Null is
+ * returned if auth manager is not configured. This property is read-only.
  * @property string $basePath The root directory of the application.
- * @property \yii\caching\CacheInterface $cache The cache application component. Null if the component is not
- * enabled. This property is read-only.
- * @property array $container Values given in terms of name-value pairs. This property is write-only.
- * @property \yii\db\Connection $db The database connection. This property is read-only.
- * @property \yii\web\ErrorHandler|\yii\console\ErrorHandler $errorHandler The error handler application
+ * @property-read \yii\caching\CacheInterface $cache The cache application component. Null if the component is
+ * not enabled. This property is read-only.
+ * @property-write array $container Values given in terms of name-value pairs. This property is write-only.
+ * @property-read \yii\db\Connection $db The database connection. This property is read-only.
+ * @property-read \yii\web\ErrorHandler|\yii\console\ErrorHandler $errorHandler The error handler application
  * component. This property is read-only.
- * @property \yii\i18n\Formatter $formatter The formatter application component. This property is read-only.
- * @property \yii\i18n\I18N $i18n The internationalization application component. This property is read-only.
- * @property \yii\log\Dispatcher $log The log dispatcher application component. This property is read-only.
- * @property \yii\mail\MailerInterface $mailer The mailer application component. This property is read-only.
- * @property \yii\web\Request|\yii\console\Request $request The request component. This property is read-only.
- * @property \yii\web\Response|\yii\console\Response $response The response component. This property is
+ * @property-read \yii\i18n\Formatter $formatter The formatter application component. This property is
+ * read-only.
+ * @property-read \yii\i18n\I18N $i18n The internationalization application component. This property is
+ * read-only.
+ * @property-read \yii\log\Dispatcher $log The log dispatcher application component. This property is
+ * read-only.
+ * @property-read \yii\mail\MailerInterface $mailer The mailer application component. This property is
+ * read-only.
+ * @property-read \yii\web\Request|\yii\console\Request $request The request component. This property is
+ * read-only.
+ * @property-read \yii\web\Response|\yii\console\Response $response The response component. This property is
  * read-only.
  * @property string $runtimePath The directory that stores runtime files. Defaults to the "runtime"
  * subdirectory under [[basePath]].
- * @property \yii\base\Security $security The security application component. This property is read-only.
+ * @property-read \yii\base\Security $security The security application component. This property is read-only.
  * @property string $timeZone The time zone used by this application.
- * @property string $uniqueId The unique ID of the module. This property is read-only.
- * @property \yii\web\UrlManager $urlManager The URL manager for this application. This property is read-only.
+ * @property-read string $uniqueId The unique ID of the module. This property is read-only.
+ * @property-read \yii\web\UrlManager $urlManager The URL manager for this application. This property is
+ * read-only.
  * @property string $vendorPath The directory that stores vendor files. Defaults to "vendor" directory under
  * [[basePath]].
- * @property View|\yii\web\View $view The view application component that is used to render various view
+ * @property-read View|\yii\web\View $view The view application component that is used to render various view
  * files. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/base/Component.php b/src/base/Component.php
index 89bd36a29fc..65516e281fc 100644
--- a/src/base/Component.php
+++ b/src/base/Component.php
@@ -93,7 +93,8 @@
  *
  * For more details and usage information on Component, see the [guide article on components](guide:concept-components).
  *
- * @property Behavior[] $behaviors List of behaviors attached to this component. This property is read-only.
+ * @property-read Behavior[] $behaviors List of behaviors attached to this component. This property is
+ * read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/base/Controller.php b/src/base/Controller.php
index 79e4dc1efef..e15b091eb0f 100644
--- a/src/base/Controller.php
+++ b/src/base/Controller.php
@@ -16,12 +16,12 @@
  *
  * For more details and usage information on Controller, see the [guide article on controllers](guide:structure-controllers).
  *
- * @property Module[] $modules All ancestor modules that this controller is located within. This property is
- * read-only.
- * @property string $route The route (module ID, controller ID and action ID) of the current request. This
+ * @property-read Module[] $modules All ancestor modules that this controller is located within. This property
+ * is read-only.
+ * @property-read string $route The route (module ID, controller ID and action ID) of the current request.
+ * This property is read-only.
+ * @property-read string $uniqueId The controller ID that is prefixed with the module ID (if any). This
  * property is read-only.
- * @property string $uniqueId The controller ID that is prefixed with the module ID (if any). This property is
- * read-only.
  * @property View|\yii\web\View $view The view object that can be used to render views or view files.
  * @property string $viewPath The directory containing the view files for this controller.
  *
diff --git a/src/base/ErrorException.php b/src/base/ErrorException.php
index f3ba4d90bb1..c06111b57dd 100644
--- a/src/base/ErrorException.php
+++ b/src/base/ErrorException.php
@@ -33,14 +33,14 @@ class ErrorException extends \ErrorException
     /**
      * Constructs the exception.
      * @link https://secure.php.net/manual/en/errorexception.construct.php
-     * @param $message [optional]
-     * @param $code [optional]
-     * @param $severity [optional]
-     * @param $filename [optional]
-     * @param $lineno [optional]
-     * @param $previous [optional]
+     * @param string $message [optional]
+     * @param int $code [optional]
+     * @param int $severity [optional]
+     * @param string $filename [optional]
+     * @param int $lineno [optional]
+     * @param \Throwable|\Exception $previous [optional]
      */
-    public function __construct($message = '', $code = 0, $severity = 1, $filename = __FILE__, $lineno = __LINE__, \Exception $previous = null)
+    public function __construct($message = '', $code = 0, $severity = 1, $filename = __FILE__, $lineno = __LINE__, $previous = null)
     {
         parent::__construct($message, $code, $severity, $filename, $lineno, $previous);
 
diff --git a/src/base/ErrorHandler.php b/src/base/ErrorHandler.php
index 07b3c3cc168..8d98dafe789 100644
--- a/src/base/ErrorHandler.php
+++ b/src/base/ErrorHandler.php
@@ -298,7 +298,7 @@ public function handleFatalError()
 
     /**
      * Renders the exception.
-     * @param \Exception $exception the exception to be rendered.
+     * @param \Exception|\Error|\Throwable $exception the exception to be rendered.
      */
     abstract protected function renderException($exception);
 
@@ -336,7 +336,7 @@ public function clearOutput()
      *
      * This method can be used to convert exceptions inside of methods like `__toString()`
      * to PHP errors because exceptions cannot be thrown inside of them.
-     * @param \Exception $exception the exception to convert to a PHP error.
+     * @param \Exception|\Throwable $exception the exception to convert to a PHP error.
      */
     public static function convertExceptionToError($exception)
     {
@@ -345,7 +345,7 @@ public static function convertExceptionToError($exception)
 
     /**
      * Converts an exception into a simple string.
-     * @param \Exception|\Error $exception the exception being converted
+     * @param \Exception|\Error|\Throwable $exception the exception being converted
      * @return string the string representation of the exception.
      */
     public static function convertExceptionToString($exception)
@@ -363,7 +363,7 @@ public static function convertExceptionToString($exception)
 
     /**
      * Converts an exception into a string that has verbose information about the exception and its trace.
-     * @param \Exception|\Error $exception the exception being converted
+     * @param \Exception|\Error|\Throwable $exception the exception being converted
      * @return string the string representation of the exception.
      *
      * @since 2.0.14
diff --git a/src/base/ExitException.php b/src/base/ExitException.php
index 9197b0f9aac..4fde6a8e800 100644
--- a/src/base/ExitException.php
+++ b/src/base/ExitException.php
@@ -28,9 +28,9 @@ class ExitException extends \Exception
      * @param int $status the exit status code
      * @param string $message error message
      * @param int $code error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|\Exception $previous The previous exception used for the exception chaining.
      */
-    public function __construct($status = 0, $message = null, $code = 0, \Exception $previous = null)
+    public function __construct($status = 0, $message = null, $code = 0, $previous = null)
     {
         $this->statusCode = $status;
         parent::__construct($message, $code, $previous);
diff --git a/src/base/Model.php b/src/base/Model.php
index b525b169447..085ec1a992b 100644
--- a/src/base/Model.php
+++ b/src/base/Model.php
@@ -37,19 +37,20 @@
  *
  * For more details and usage information on Model, see the [guide article on models](guide:structure-models).
  *
- * @property \yii\validators\Validator[] $activeValidators The validators applicable to the current
+ * @property-read \yii\validators\Validator[] $activeValidators The validators applicable to the current
  * [[scenario]]. This property is read-only.
  * @property array $attributes Attribute values (name => value).
- * @property array $errors An array of errors for all attributes. Empty array is returned if no error. The
- * result is a two-dimensional array. See [[getErrors()]] for detailed description. This property is read-only.
- * @property array $firstErrors The first errors. The array keys are the attribute names, and the array values
- * are the corresponding error messages. An empty array will be returned if there is no error. This property is
+ * @property-read array $errors An array of errors for all attributes. Empty array is returned if no error.
+ * The result is a two-dimensional array. See [[getErrors()]] for detailed description. This property is
  * read-only.
- * @property ArrayIterator $iterator An iterator for traversing the items in the list. This property is
+ * @property-read array $firstErrors The first errors. The array keys are the attribute names, and the array
+ * values are the corresponding error messages. An empty array will be returned if there is no error. This
+ * property is read-only.
+ * @property-read ArrayIterator $iterator An iterator for traversing the items in the list. This property is
  * read-only.
  * @property string $scenario The scenario that this model is in. Defaults to [[SCENARIO_DEFAULT]].
- * @property ArrayObject|\yii\validators\Validator[] $validators All the validators declared in the model.
- * This property is read-only.
+ * @property-read ArrayObject|\yii\validators\Validator[] $validators All the validators declared in the
+ * model. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -639,7 +640,7 @@ public function getErrorSummary($showAllErrors)
         $lines = [];
         $errors = $showAllErrors ? $this->getErrors() : $this->getFirstErrors();
         foreach ($errors as $es) {
-            $lines = array_merge((array)$es, $lines);
+            $lines = array_merge($lines, (array)$es);
         }
         return $lines;
     }
diff --git a/src/base/Module.php b/src/base/Module.php
index d5954162cbe..d8577d482ed 100644
--- a/src/base/Module.php
+++ b/src/base/Module.php
@@ -23,17 +23,17 @@
  *
  * For more details and usage information on Module, see the [guide article on modules](guide:structure-modules).
  *
- * @property array $aliases List of path aliases to be defined. The array keys are alias names (must start
- * with `@`) and the array values are the corresponding paths or aliases. See [[setAliases()]] for an example.
- * This property is write-only.
+ * @property-write array $aliases List of path aliases to be defined. The array keys are alias names (must
+ * start with `@`) and the array values are the corresponding paths or aliases. See [[setAliases()]] for an
+ * example. This property is write-only.
  * @property string $basePath The root directory of the module.
- * @property string $controllerPath The directory that contains the controller classes. This property is
+ * @property-read string $controllerPath The directory that contains the controller classes. This property is
  * read-only.
  * @property string $layoutPath The root directory of layout files. Defaults to "[[viewPath]]/layouts".
  * @property array $modules The modules (indexed by their IDs).
- * @property string $uniqueId The unique ID of the module. This property is read-only.
+ * @property-read string $uniqueId The unique ID of the module. This property is read-only.
  * @property string $version The version of this module. Note that the type of this property differs in getter
- * and setter. See [[getVersion()]] and [[setVersion()]] for details.
+ * and setter. See [[getVersion()]]  and [[setVersion()]] for details.
  * @property string $viewPath The root directory of view files. Defaults to "[[basePath]]/views".
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/base/View.php b/src/base/View.php
index d9584a3f176..d5b64c668c1 100644
--- a/src/base/View.php
+++ b/src/base/View.php
@@ -20,7 +20,7 @@
  *
  * For more details and usage information on View, see the [guide article on views](guide:structure-views).
  *
- * @property string|bool $viewFile The view file currently being rendered. False if no view file is being
+ * @property-read string|bool $viewFile The view file currently being rendered. False if no view file is being
  * rendered. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/base/Widget.php b/src/base/Widget.php
index d578ae485ae..ab27f028f2f 100644
--- a/src/base/Widget.php
+++ b/src/base/Widget.php
@@ -15,10 +15,11 @@
  *
  * For more details and usage information on Widget, see the [guide article on widgets](guide:structure-widgets).
  *
- * @property string $id ID of the widget.
+ * @property string|null $id ID of the widget. Note that the type of this property differs in getter and
+ * setter. See [[getId()]]  and [[setId()]] for details.
  * @property \yii\web\View $view The view object that can be used to render views or view files. Note that the
- * type of this property differs in getter and setter. See [[getView()]] and [[setView()]] for details.
- * @property string $viewPath The directory containing the view files for this widget. This property is
+ * type of this property differs in getter and setter. See [[getView()]]  and [[setView()]] for details.
+ * @property-read string $viewPath The directory containing the view files for this widget. This property is
  * read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
@@ -156,7 +157,7 @@ public static function widget($config = [])
     /**
      * Returns the ID of the widget.
      * @param bool $autoGenerate whether to generate an ID if it is not set previously
-     * @return string ID of the widget.
+     * @return string|null ID of the widget.
      */
     public function getId($autoGenerate = true)
     {
diff --git a/src/caching/FileCache.php b/src/caching/FileCache.php
index 08f292084e9..da71b179300 100644
--- a/src/caching/FileCache.php
+++ b/src/caching/FileCache.php
@@ -197,24 +197,31 @@ protected function deleteValue($key)
     }
 
     /**
-     * Returns the cache file path given the cache key.
-     * @param string $key cache key
+     * Returns the cache file path given the normalized cache key.
+     * @param string $normalizedKey normalized cache key by [[buildKey]] method
      * @return string the cache file path
      */
-    protected function getCacheFile($key)
+    protected function getCacheFile($normalizedKey)
     {
+        $cacheKey = $normalizedKey;
+
+        if ($this->keyPrefix !== '') {
+            // Remove key prefix to avoid generating constant directory levels
+            $lenKeyPrefix = strlen($this->keyPrefix);
+            $cacheKey = substr_replace($normalizedKey, '', 0, $lenKeyPrefix);
+        }
+
+        $cachePath = $this->cachePath;
+
         if ($this->directoryLevel > 0) {
-            $base = $this->cachePath;
             for ($i = 0; $i < $this->directoryLevel; ++$i) {
-                if (($prefix = substr($key, $i + $i, 2)) !== false) {
-                    $base .= DIRECTORY_SEPARATOR . $prefix;
+                if (($subDirectory = substr($cacheKey, $i + $i, 2)) !== false) {
+                    $cachePath .= DIRECTORY_SEPARATOR . $subDirectory;
                 }
             }
-
-            return $base . DIRECTORY_SEPARATOR . $key . $this->cacheFileSuffix;
         }
 
-        return $this->cachePath . DIRECTORY_SEPARATOR . $key . $this->cacheFileSuffix;
+        return $cachePath . DIRECTORY_SEPARATOR . $normalizedKey . $this->cacheFileSuffix;
     }
 
     /**
diff --git a/src/caching/MemCache.php b/src/caching/MemCache.php
index 0f2bcdcd04a..2a83e5d3fff 100644
--- a/src/caching/MemCache.php
+++ b/src/caching/MemCache.php
@@ -55,10 +55,10 @@
  *
  * For more details and usage information on Cache, see the [guide article on caching](guide:caching-overview).
  *
- * @property \Memcache|\Memcached $memcache The memcache (or memcached) object used by this cache component.
- * This property is read-only.
+ * @property-read \Memcache|\Memcached $memcache The memcache (or memcached) object used by this cache
+ * component. This property is read-only.
  * @property MemCacheServer[] $servers List of memcache server configurations. Note that the type of this
- * property differs in getter and setter. See [[getServers()]] and [[setServers()]] for details.
+ * property differs in getter and setter. See [[getServers()]]  and [[setServers()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/captcha/CaptchaAction.php b/src/captcha/CaptchaAction.php
index 3ded638459e..40e1aa03a0a 100644
--- a/src/captcha/CaptchaAction.php
+++ b/src/captcha/CaptchaAction.php
@@ -31,7 +31,7 @@
  *    to be validated by the 'captcha' validator.
  * 3. In the controller view, insert a [[Captcha]] widget in the form.
  *
- * @property string $verifyCode The verification code. This property is read-only.
+ * @property-read string $verifyCode The verification code. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/console/Application.php b/src/console/Application.php
index 431198a3614..51d81e43b5c 100644
--- a/src/console/Application.php
+++ b/src/console/Application.php
@@ -50,9 +50,10 @@
  * yii help
  * ```
  *
- * @property ErrorHandler $errorHandler The error handler application component. This property is read-only.
- * @property Request $request The request component. This property is read-only.
- * @property Response $response The response component. This property is read-only.
+ * @property-read ErrorHandler $errorHandler The error handler application component. This property is
+ * read-only.
+ * @property-read Request $request The request component. This property is read-only.
+ * @property-read Response $response The response component. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/console/Controller.php b/src/console/Controller.php
index fca945e4a1d..4288f93c822 100644
--- a/src/console/Controller.php
+++ b/src/console/Controller.php
@@ -28,12 +28,14 @@
  * where `<route>` is a route to a controller action and the params will be populated as properties of a command.
  * See [[options()]] for details.
  *
- * @property string $help This property is read-only.
- * @property string $helpSummary This property is read-only.
- * @property array $passedOptionValues The properties corresponding to the passed options. This property is
- * read-only.
- * @property array $passedOptions The names of the options passed during execution. This property is
+ * @property-read string $help This property is read-only.
+ * @property-read string $helpSummary This property is read-only.
+ * @property-read array $passedOptionValues The properties corresponding to the passed options. This property
+ * is read-only.
+ * @property-read array $passedOptions The names of the options passed during execution. This property is
  * read-only.
+ * @property Request $request
+ * @property Response $response
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -211,7 +213,12 @@ public function bindActionParams($action, $params)
             }
 
             if ($key !== null) {
-                if ($param->isArray()) {
+                if (PHP_VERSION_ID >= 80000) {
+                    $isArray = ($type = $param->getType()) instanceof \ReflectionNamedType && $type->getName() === 'array';
+                } else {
+                    $isArray = $param->isArray();
+                }
+                if ($isArray) {
                     $params[$key] = $params[$key] === '' ? [] : preg_split('/\s*,\s*/', $params[$key]);
                 }
                 $args[] = $actionParams[$key] = $params[$key];
@@ -550,7 +557,13 @@ public function getActionArgsHelp($action)
 
         /** @var \ReflectionParameter $reflection */
         foreach ($method->getParameters() as $i => $reflection) {
-            if ($reflection->getClass() !== null) {
+            if (PHP_VERSION_ID >= 80000) {
+                $class = $reflection->getType();
+            } else {
+                $class = $reflection->getClass();
+            }
+
+            if ($class !== null) {
                 continue;
             }
             $name = $reflection->getName();
diff --git a/src/console/controllers/AssetController.php b/src/console/controllers/AssetController.php
index 4f2e492dcea..fe106f79bfd 100644
--- a/src/console/controllers/AssetController.php
+++ b/src/console/controllers/AssetController.php
@@ -39,7 +39,7 @@
  * check [[jsCompressor]] and [[cssCompressor]] for more details.
  *
  * @property \yii\web\AssetManager $assetManager Asset manager instance. Note that the type of this property
- * differs in getter and setter. See [[getAssetManager()]] and [[setAssetManager()]] for details.
+ * differs in getter and setter. See [[getAssetManager()]]  and [[setAssetManager()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Paul Klimov <klimov.paul@gmail.com>
diff --git a/src/console/controllers/HelpController.php b/src/console/controllers/HelpController.php
index b4db783c159..5185f4e011b 100644
--- a/src/console/controllers/HelpController.php
+++ b/src/console/controllers/HelpController.php
@@ -30,7 +30,7 @@
  * In the above, if the command name is not provided, all
  * available commands will be displayed.
  *
- * @property array $commands All available command names. This property is read-only.
+ * @property-read array $commands All available command names. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/console/controllers/MigrateController.php b/src/console/controllers/MigrateController.php
index 4d89ebb85e7..aa2625ea06c 100644
--- a/src/console/controllers/MigrateController.php
+++ b/src/console/controllers/MigrateController.php
@@ -581,7 +581,7 @@ protected function parseFields()
     protected function splitFieldIntoChunks($field)
     {
         $hasDoubleQuotes = false;
-        preg_match_all('/defaultValue\(.*?:.*?\)/', $field, $matches);
+        preg_match_all('/defaultValue\(["\'].*?:?.*?["\']\)/', $field, $matches, PREG_SET_ORDER, 0);
         if (isset($matches[0][0])) {
             $hasDoubleQuotes = true;
             $originalDefaultValue = $matches[0][0];
diff --git a/src/console/widgets/Table.php b/src/console/widgets/Table.php
index f38bb81eb15..99fd5d23234 100644
--- a/src/console/widgets/Table.php
+++ b/src/console/widgets/Table.php
@@ -40,8 +40,8 @@
  *     ],
  * ]);
  *
- * @property string $listPrefix List prefix. This property is write-only.
- * @property int $screenWidth Screen width. This property is write-only.
+ * @property-write string $listPrefix List prefix. This property is write-only.
+ * @property-write int $screenWidth Screen width. This property is write-only.
  *
  * @author Daniel Gomez Pan <pana_1990@hotmail.com>
  * @since 2.0.13
@@ -243,36 +243,35 @@ protected function renderRow(array $row, $spanLeft, $spanMiddle, $spanRight)
 
         $buffer = '';
         $arrayPointer = [];
-        $finalChunk = [];
-        $alreadyPrintedCells = [];
+        $renderedChunkTexts = [];
         for ($i = 0, ($max = $this->calculateRowHeight($row)) ?: $max = 1; $i < $max; $i++) {
             $buffer .= $spanLeft . ' ';
             foreach ($size as $index => $cellSize) {
                 $cell = isset($row[$index]) ? $row[$index] : null;
                 $prefix = '';
-                $chunk = '';
                 if ($index !== 0) {
                     $buffer .= $spanMiddle . ' ';
                 }
                 if (is_array($cell)) {
-                    if (empty($finalChunk[$index])) {
-                        $finalChunk[$index] = '';
+                    if (empty($renderedChunkTexts[$index])) {
+                        $renderedChunkTexts[$index] = '';
+                        $start = 0;
                         $prefix = $this->listPrefix;
                         if (!isset($arrayPointer[$index])) {
                             $arrayPointer[$index] = 0;
                         }
+                    } else {
+                        $start = mb_strwidth($renderedChunkTexts[$index], Yii::$app->charset);
                     }
-                    $chunk = $cell[$arrayPointer[$index]];
-                    $finalChunk[$index] .= $chunk;
-                    if (isset($cell[$arrayPointer[$index] + 1]) && $finalChunk[$index] === $cell[$arrayPointer[$index]]) {
+                    $chunk = Console::ansiColorizedSubstr($cell[$arrayPointer[$index]], $start, $cellSize - 4);
+                    $renderedChunkTexts[$index] .= Console::stripAnsiFormat($chunk);
+                    $fullChunkText = Console::stripAnsiFormat($cell[$arrayPointer[$index]]);
+                    if (isset($cell[$arrayPointer[$index] + 1]) && $renderedChunkTexts[$index] === $fullChunkText) {
                         $arrayPointer[$index]++;
-                        $finalChunk[$index] = '';
+                        $renderedChunkTexts[$index] = '';
                     }
                 } else {
-                    if (!isset($alreadyPrintedCells[$index])) {
-                        $chunk = $cell;
-                    }
-                    $alreadyPrintedCells[$index] = true;
+                    $chunk = Console::ansiColorizedSubstr($cell, ($cellSize * $i) - ($i * 2), $cellSize - 2);
                 }
                 $chunk = $prefix . $chunk;
                 $repeat = $cellSize - Console::ansiStrwidth($chunk) - 1;
@@ -346,15 +345,23 @@ protected function calculateRowsSize()
             $totalWidth += $columnWidth;
         }
 
-        $relativeWidth = $screenWidth / $totalWidth;
-
         if ($totalWidth > $screenWidth) {
+            $minWidth = 3;
+            $fixWidths = [];
+            $relativeWidth = $screenWidth / $totalWidth;
+            foreach ($this->columnWidths as $j => $width) {
+                $scaledWidth = (int) ($width * $relativeWidth);
+                if ($scaledWidth < $minWidth) {
+                    $fixWidths[$j] = 3;
+                }
+            }
+
+            $totalFixWidth = array_sum($fixWidths);
+            $relativeWidth = ($screenWidth - $totalFixWidth) / ($totalWidth - $totalFixWidth);
             foreach ($this->columnWidths as $j => $width) {
-                $this->columnWidths[$j] = (int) ($width * $relativeWidth);
-                if ($j === count($this->columnWidths)) {
-                    $this->columnWidths = $totalWidth;
+                if (!array_key_exists($j, $fixWidths)) {
+                    $this->columnWidths[$j] = (int) ($width * $relativeWidth);
                 }
-                $totalWidth -= $this->columnWidths[$j];
             }
         }
     }
diff --git a/src/data/ActiveDataFilter.php b/src/data/ActiveDataFilter.php
index 5ca65539ec4..88ad36254c2 100644
--- a/src/data/ActiveDataFilter.php
+++ b/src/data/ActiveDataFilter.php
@@ -54,7 +54,7 @@ class ActiveDataFilter extends DataFilter
      *
      * Usually the map can be left empty as filter operator names are consistent with the ones
      * used in [[\yii\db\QueryInterface::where()]]. However, you may want to adjust it in some special cases.
-     * For example, when using PosgreSQL you may want to setup the following map:
+     * For example, when using PostgreSQL you may want to setup the following map:
      *
      * ```php
      * [
diff --git a/src/data/BaseDataProvider.php b/src/data/BaseDataProvider.php
index 82ac0d7fb92..97214cf602c 100644
--- a/src/data/BaseDataProvider.php
+++ b/src/data/BaseDataProvider.php
@@ -16,15 +16,15 @@
  *
  * For more details and usage information on BaseDataProvider, see the [guide article on data providers](guide:output-data-providers).
  *
- * @property int $count The number of data models in the current page. This property is read-only.
+ * @property-read int $count The number of data models in the current page. This property is read-only.
  * @property array $keys The list of key values corresponding to [[models]]. Each data model in [[models]] is
  * uniquely identified by the corresponding key value in this array.
  * @property array $models The list of data models in the current page.
  * @property Pagination|false $pagination The pagination object. If this is false, it means the pagination is
- * disabled. Note that the type of this property differs in getter and setter. See [[getPagination()]] and
+ * disabled. Note that the type of this property differs in getter and setter. See [[getPagination()]]  and
  * [[setPagination()]] for details.
  * @property Sort|bool $sort The sorting object. If this is false, it means the sorting is disabled. Note that
- * the type of this property differs in getter and setter. See [[getSort()]] and [[setSort()]] for details.
+ * the type of this property differs in getter and setter. See [[getSort()]]  and [[setSort()]] for details.
  * @property int $totalCount Total number of possible data models.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/data/DataFilter.php b/src/data/DataFilter.php
index a10177fbf3a..18f218f3622 100644
--- a/src/data/DataFilter.php
+++ b/src/data/DataFilter.php
@@ -113,12 +113,13 @@
  * @see ActiveDataFilter
  *
  * @property array $errorMessages Error messages in format `[errorKey => message]`. Note that the type of this
- * property differs in getter and setter. See [[getErrorMessages()]] and [[setErrorMessages()]] for details.
+ * property differs in getter and setter. See [[getErrorMessages()]]  and [[setErrorMessages()]] for details.
  * @property mixed $filter Raw filter value.
  * @property array $searchAttributeTypes Search attribute type map. Note that the type of this property
- * differs in getter and setter. See [[getSearchAttributeTypes()]] and [[setSearchAttributeTypes()]] for details.
+ * differs in getter and setter. See [[getSearchAttributeTypes()]]  and [[setSearchAttributeTypes()]] for
+ * details.
  * @property Model $searchModel Model instance. Note that the type of this property differs in getter and
- * setter. See [[getSearchModel()]] and [[setSearchModel()]] for details.
+ * setter. See [[getSearchModel()]]  and [[setSearchModel()]] for details.
  *
  * @author Paul Klimov <klimov.paul@gmail.com>
  * @since 2.0.13
@@ -239,6 +240,11 @@ class DataFilter extends Model
      * Attribute map will be applied to filter condition in [[normalize()]] method.
      */
     public $attributeMap = [];
+    /**
+     * @var string representation of `null` instead of literal `null` in case the latter cannot be used.
+     * @since 2.0.40
+     */
+    public $nullValue = 'NULL';
 
     /**
      * @var array|\Closure list of error messages responding to invalid filter structure, in format: `[errorKey => message]`.
@@ -359,24 +365,24 @@ protected function detectSearchAttributeType(Validator $validator)
         if ($validator instanceof BooleanValidator) {
             return self::TYPE_BOOLEAN;
         }
-        
+
         if ($validator instanceof NumberValidator) {
             return $validator->integerOnly ? self::TYPE_INTEGER : self::TYPE_FLOAT;
         }
-        
+
         if ($validator instanceof StringValidator) {
             return self::TYPE_STRING;
         }
-        
+
         if ($validator instanceof EachValidator) {
             return self::TYPE_ARRAY;
         }
-        
+
         if ($validator instanceof DateValidator) {
             if ($validator->type == DateValidator::TYPE_DATETIME) {
                 return self::TYPE_DATETIME;
             }
-            
+
             if ($validator->type == DateValidator::TYPE_TIME) {
                 return self::TYPE_TIME;
             }
@@ -659,7 +665,7 @@ protected function validateAttributeValue($attribute, $value)
             return;
         }
 
-        $model->{$attribute} = $value;
+        $model->{$attribute} = $value === $this->nullValue ? null : $value;
         if (!$model->validate([$attribute])) {
             $this->addError($this->filterAttributeName, $model->getFirstError($attribute));
             return;
@@ -753,6 +759,8 @@ private function normalizeComplexFilter(array $filter)
             }
             if (is_array($value)) {
                 $result[$key] = $this->normalizeComplexFilter($value);
+            } elseif ($value === $this->nullValue) {
+                $result[$key] = null;
             } else {
                 $result[$key] = $value;
             }
diff --git a/src/data/Pagination.php b/src/data/Pagination.php
index 5006d9ea0bd..f593d9a9481 100644
--- a/src/data/Pagination.php
+++ b/src/data/Pagination.php
@@ -58,15 +58,15 @@
  *
  * For more details and usage information on Pagination, see the [guide article on pagination](guide:output-pagination).
  *
- * @property int $limit The limit of the data. This may be used to set the LIMIT value for a SQL statement for
- * fetching the current page of data. Note that if the page size is infinite, a value -1 will be returned. This
- * property is read-only.
- * @property array $links The links for navigational purpose. The array keys specify the purpose of the links
- * (e.g. [[LINK_FIRST]]), and the array values are the corresponding URLs. This property is read-only.
- * @property int $offset The offset of the data. This may be used to set the OFFSET value for a SQL statement
- * for fetching the current page of data. This property is read-only.
+ * @property-read int $limit The limit of the data. This may be used to set the LIMIT value for a SQL
+ * statement for fetching the current page of data. Note that if the page size is infinite, a value -1 will be
+ * returned. This property is read-only.
+ * @property-read array $links The links for navigational purpose. The array keys specify the purpose of the
+ * links (e.g. [[LINK_FIRST]]), and the array values are the corresponding URLs. This property is read-only.
+ * @property-read int $offset The offset of the data. This may be used to set the OFFSET value for a SQL
+ * statement for fetching the current page of data. This property is read-only.
  * @property int $page The zero-based current page number.
- * @property int $pageCount Number of pages. This property is read-only.
+ * @property-read int $pageCount Number of pages. This property is read-only.
  * @property int $pageSize The number of items per page. If it is less than 1, it means the page size is
  * infinite, and thus a single page contains all items.
  *
@@ -319,16 +319,17 @@ public function getLinks($absolute = false)
     {
         $currentPage = $this->getPage();
         $pageCount = $this->getPageCount();
-        $links = [
-            Link::REL_SELF => $this->createUrl($currentPage, null, $absolute),
-        ];
-        if ($currentPage > 0) {
+
+        $links = [Link::REL_SELF => $this->createUrl($currentPage, null, $absolute)];
+        if ($pageCount > 0) {
             $links[self::LINK_FIRST] = $this->createUrl(0, null, $absolute);
-            $links[self::LINK_PREV] = $this->createUrl($currentPage - 1, null, $absolute);
-        }
-        if ($currentPage < $pageCount - 1) {
-            $links[self::LINK_NEXT] = $this->createUrl($currentPage + 1, null, $absolute);
             $links[self::LINK_LAST] = $this->createUrl($pageCount - 1, null, $absolute);
+            if ($currentPage > 0) {
+                $links[self::LINK_PREV] = $this->createUrl($currentPage - 1, null, $absolute);
+            }
+            if ($currentPage < $pageCount - 1) {
+                $links[self::LINK_NEXT] = $this->createUrl($currentPage + 1, null, $absolute);
+            }
         }
 
         return $links;
diff --git a/src/data/Sort.php b/src/data/Sort.php
index 78cc868a82e..d96178e1321 100644
--- a/src/data/Sort.php
+++ b/src/data/Sort.php
@@ -70,9 +70,9 @@
  *
  * @property array $attributeOrders Sort directions indexed by attribute names. Sort direction can be either
  * `SORT_ASC` for ascending order or `SORT_DESC` for descending order. Note that the type of this property
- * differs in getter and setter. See [[getAttributeOrders()]] and [[setAttributeOrders()]] for details.
- * @property array $orders The columns (keys) and their corresponding sort directions (values). This can be
- * passed to [[\yii\db\Query::orderBy()]] to construct a DB query. This property is read-only.
+ * differs in getter and setter. See [[getAttributeOrders()]]  and [[setAttributeOrders()]] for details.
+ * @property-read array $orders The columns (keys) and their corresponding sort directions (values). This can
+ * be passed to [[\yii\db\Query::orderBy()]] to construct a DB query. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/ActiveRecordInterface.php b/src/db/ActiveRecordInterface.php
index 5b67f788030..dfa9ed3096e 100644
--- a/src/db/ActiveRecordInterface.php
+++ b/src/db/ActiveRecordInterface.php
@@ -296,7 +296,7 @@ public static function findAll($condition);
      *
      * @param array $attributes attribute values (name-value pairs) to be saved for the record.
      * Unlike [[update()]] these are not going to be validated.
-     * @param array $condition the condition that matches the records that should get updated.
+     * @param mixed $condition the condition that matches the records that should get updated.
      * Please refer to [[QueryInterface::where()]] on how to specify this parameter.
      * An empty condition will match all records.
      * @return int the number of rows updated
diff --git a/src/db/ActiveRelationTrait.php b/src/db/ActiveRelationTrait.php
index a5a8cbe0ac2..f2c22e125f3 100644
--- a/src/db/ActiveRelationTrait.php
+++ b/src/db/ActiveRelationTrait.php
@@ -17,8 +17,8 @@
  * @author Carsten Brandt <mail@cebe.cc>
  * @since 2.0
  *
- * @method ActiveRecordInterface one()
- * @method ActiveRecordInterface[] all()
+ * @method ActiveRecordInterface one($db = null)
+ * @method ActiveRecordInterface[] all($db = null)
  * @property ActiveRecord $modelClass
  */
 trait ActiveRelationTrait
diff --git a/src/db/BaseActiveRecord.php b/src/db/BaseActiveRecord.php
index c50ce07d742..ead5f5c7d6e 100644
--- a/src/db/BaseActiveRecord.php
+++ b/src/db/BaseActiveRecord.php
@@ -23,19 +23,19 @@
  *
  * See [[\yii\db\ActiveRecord]] for a concrete implementation.
  *
- * @property array $dirtyAttributes The changed attribute values (name-value pairs). This property is
+ * @property-read array $dirtyAttributes The changed attribute values (name-value pairs). This property is
  * read-only.
  * @property bool $isNewRecord Whether the record is new and should be inserted when calling [[save()]].
  * @property array $oldAttributes The old attribute values (name-value pairs). Note that the type of this
- * property differs in getter and setter. See [[getOldAttributes()]] and [[setOldAttributes()]] for details.
- * @property mixed $oldPrimaryKey The old primary key value. An array (column name => column value) is
+ * property differs in getter and setter. See [[getOldAttributes()]]  and [[setOldAttributes()]] for details.
+ * @property-read mixed $oldPrimaryKey The old primary key value. An array (column name => column value) is
  * returned if the primary key is composite. A string is returned otherwise (null will be returned if the key
  * value is null). This property is read-only.
- * @property mixed $primaryKey The primary key value. An array (column name => column value) is returned if
- * the primary key is composite. A string is returned otherwise (null will be returned if the key value is null).
- * This property is read-only.
- * @property array $relatedRecords An array of related records indexed by relation names. This property is
- * read-only.
+ * @property-read mixed $primaryKey The primary key value. An array (column name => column value) is returned
+ * if the primary key is composite. A string is returned otherwise (null will be returned if the key value is
+ * null). This property is read-only.
+ * @property-read array $relatedRecords An array of related records indexed by relation names. This property
+ * is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
diff --git a/src/db/BatchQueryResult.php b/src/db/BatchQueryResult.php
index 68fd03fc926..c08b8745cfa 100644
--- a/src/db/BatchQueryResult.php
+++ b/src/db/BatchQueryResult.php
@@ -223,4 +223,15 @@ private function getDbDriverName()
 
         return null;
     }
+
+    /**
+     * Unserialization is disabled to prevent remote code execution in case application
+     * calls unserialize() on user input containing specially crafted string.
+     * @see CVE-2020-15148
+     * @since 2.0.38
+     */
+    public function __wakeup()
+    {
+        throw new \BadMethodCallException('Cannot unserialize ' . __CLASS__);
+    }
 }
diff --git a/src/db/Command.php b/src/db/Command.php
index 27909fa2cf4..3d61e93a7e9 100644
--- a/src/db/Command.php
+++ b/src/db/Command.php
@@ -246,6 +246,9 @@ public function prepare($forRead = null)
         }
 
         $sql = $this->getSql();
+        if ($sql === '') {
+            return;
+        }
 
         if ($this->db->getTransaction()) {
             // master is in a transaction. use the same connection.
@@ -264,6 +267,9 @@ public function prepare($forRead = null)
             $message = $e->getMessage() . "\nFailed to prepare SQL: $sql";
             $errorInfo = $e instanceof \PDOException ? $e->errorInfo : null;
             throw new Exception($message, $errorInfo, (int) $e->getCode(), $e);
+        } catch (\Throwable $e) {
+            $message = $e->getMessage() . "\nFailed to prepare SQL: $sql";
+            throw new Exception($message, null, (int) $e->getCode(), $e);
         }
     }
 
diff --git a/src/db/Connection.php b/src/db/Connection.php
index d69cb58edf5..5e2bd45a79c 100644
--- a/src/db/Connection.php
+++ b/src/db/Connection.php
@@ -111,24 +111,24 @@
  * ```
  *
  * @property string $driverName Name of the DB driver.
- * @property bool $isActive Whether the DB connection is established. This property is read-only.
- * @property string $lastInsertID The row ID of the last row inserted, or the last value retrieved from the
- * sequence object. This property is read-only.
- * @property Connection $master The currently active master connection. `null` is returned if there is no
+ * @property-read bool $isActive Whether the DB connection is established. This property is read-only.
+ * @property-read string $lastInsertID The row ID of the last row inserted, or the last value retrieved from
+ * the sequence object. This property is read-only.
+ * @property-read Connection $master The currently active master connection. `null` is returned if there is no
  * master available. This property is read-only.
- * @property PDO $masterPdo The PDO instance for the currently active master connection. This property is
+ * @property-read PDO $masterPdo The PDO instance for the currently active master connection. This property is
  * read-only.
  * @property QueryBuilder $queryBuilder The query builder for the current DB connection. Note that the type of
- * this property differs in getter and setter. See [[getQueryBuilder()]] and [[setQueryBuilder()]] for details.
- * @property Schema $schema The schema information for the database opened by this connection. This property
- * is read-only.
- * @property string $serverVersion Server version as a string. This property is read-only.
- * @property Connection $slave The currently active slave connection. `null` is returned if there is no slave
- * available and `$fallbackToMaster` is false. This property is read-only.
- * @property PDO $slavePdo The PDO instance for the currently active slave connection. `null` is returned if
- * no slave connection is available and `$fallbackToMaster` is false. This property is read-only.
- * @property Transaction|null $transaction The currently active transaction. Null if no active transaction.
- * This property is read-only.
+ * this property differs in getter and setter. See [[getQueryBuilder()]]  and [[setQueryBuilder()]] for details.
+ * @property-read Schema $schema The schema information for the database opened by this connection. This
+ * property is read-only.
+ * @property-read string $serverVersion Server version as a string. This property is read-only.
+ * @property-read Connection $slave The currently active slave connection. `null` is returned if there is no
+ * slave available and `$fallbackToMaster` is false. This property is read-only.
+ * @property-read PDO $slavePdo The PDO instance for the currently active slave connection. `null` is returned
+ * if no slave connection is available and `$fallbackToMaster` is false. This property is read-only.
+ * @property-read Transaction|null $transaction The currently active transaction. Null if no active
+ * transaction. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/DataReader.php b/src/db/DataReader.php
index f2ef1eb312f..50a2d7dadc3 100644
--- a/src/db/DataReader.php
+++ b/src/db/DataReader.php
@@ -40,10 +40,10 @@
  * [[fetchMode]]. See the [PHP manual](https://secure.php.net/manual/en/function.PDOStatement-setFetchMode.php)
  * for more details about possible fetch mode.
  *
- * @property int $columnCount The number of columns in the result set. This property is read-only.
- * @property int $fetchMode Fetch mode. This property is write-only.
- * @property bool $isClosed Whether the reader is closed or not. This property is read-only.
- * @property int $rowCount Number of rows contained in the result. This property is read-only.
+ * @property-read int $columnCount The number of columns in the result set. This property is read-only.
+ * @property-write int $fetchMode Fetch mode. This property is write-only.
+ * @property-read bool $isClosed Whether the reader is closed or not. This property is read-only.
+ * @property-read int $rowCount Number of rows contained in the result. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/Exception.php b/src/db/Exception.php
index c0cff469dad..ae16407f85d 100644
--- a/src/db/Exception.php
+++ b/src/db/Exception.php
@@ -27,9 +27,9 @@ class Exception extends \yii\base\Exception
      * @param string $message PDO error message
      * @param array $errorInfo PDO error info
      * @param string $code PDO error code
-     * @param \Exception $previous The previous exception used for the exception chaining.
+     * @param \Throwable|\Exception $previous The previous exception used for the exception chaining.
      */
-    public function __construct($message, $errorInfo = [], $code = '', \Exception $previous = null)
+    public function __construct($message, $errorInfo = [], $code = '', $previous = null)
     {
         parent::__construct($message, 0, $previous);
         $this->errorInfo = $errorInfo;
diff --git a/src/db/Query.php b/src/db/Query.php
index 471f22f9f37..59dcb8382aa 100644
--- a/src/db/Query.php
+++ b/src/db/Query.php
@@ -42,7 +42,7 @@
  *
  * A more detailed usage guide on how to work with Query can be found in the [guide article on Query Builder](guide:db-query-builder).
  *
- * @property string[] $tablesUsedInFrom Table names indexed by aliases. This property is read-only.
+ * @property-read string[] $tablesUsedInFrom Table names indexed by aliases. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
diff --git a/src/db/QueryBuilder.php b/src/db/QueryBuilder.php
index 5015d3ba3fc..c6f74872313 100644
--- a/src/db/QueryBuilder.php
+++ b/src/db/QueryBuilder.php
@@ -22,10 +22,10 @@
  *
  * For more details and usage information on QueryBuilder, see the [guide article on query builders](guide:db-query-builder).
  *
- * @property string[] $conditionClasses Map of condition aliases to condition classes. For example: ```php
- * ['LIKE' => yii\db\condition\LikeCondition::class] ``` . This property is write-only.
- * @property string[] $expressionBuilders Array of builders that should be merged with the pre-defined ones in
- * [[expressionBuilders]] property. This property is write-only.
+ * @property-write string[] $conditionClasses Map of condition aliases to condition classes. For example:
+ * ```php ['LIKE' => yii\db\condition\LikeCondition::class] ``` . This property is write-only.
+ * @property-write string[] $expressionBuilders Array of builders that should be merged with the pre-defined
+ * ones in [[expressionBuilders]] property. This property is write-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/Schema.php b/src/db/Schema.php
index c0ed7227c20..c11a22be210 100644
--- a/src/db/Schema.php
+++ b/src/db/Schema.php
@@ -21,17 +21,18 @@
  *
  * Schema represents the database schema information that is DBMS specific.
  *
- * @property string $lastInsertID The row ID of the last row inserted, or the last value retrieved from the
- * sequence object. This property is read-only.
- * @property QueryBuilder $queryBuilder The query builder for this connection. This property is read-only.
- * @property string[] $schemaNames All schema names in the database, except system schemas. This property is
+ * @property-read string $lastInsertID The row ID of the last row inserted, or the last value retrieved from
+ * the sequence object. This property is read-only.
+ * @property-read QueryBuilder $queryBuilder The query builder for this connection. This property is
  * read-only.
- * @property string $serverVersion Server version as a string. This property is read-only.
- * @property string[] $tableNames All table names in the database. This property is read-only.
- * @property TableSchema[] $tableSchemas The metadata for all tables in the database. Each array element is an
- * instance of [[TableSchema]] or its child class. This property is read-only.
- * @property string $transactionIsolationLevel The transaction isolation level to use for this transaction.
- * This can be one of [[Transaction::READ_UNCOMMITTED]], [[Transaction::READ_COMMITTED]],
+ * @property-read string[] $schemaNames All schema names in the database, except system schemas. This property
+ * is read-only.
+ * @property-read string $serverVersion Server version as a string. This property is read-only.
+ * @property-read string[] $tableNames All table names in the database. This property is read-only.
+ * @property-read TableSchema[] $tableSchemas The metadata for all tables in the database. Each array element
+ * is an instance of [[TableSchema]] or its child class. This property is read-only.
+ * @property-write string $transactionIsolationLevel The transaction isolation level to use for this
+ * transaction. This can be one of [[Transaction::READ_UNCOMMITTED]], [[Transaction::READ_COMMITTED]],
  * [[Transaction::REPEATABLE_READ]] and [[Transaction::SERIALIZABLE]] but also a string containing DBMS specific
  * syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is write-only.
  *
diff --git a/src/db/SqlToken.php b/src/db/SqlToken.php
index 77497ee22f6..0e947c17458 100644
--- a/src/db/SqlToken.php
+++ b/src/db/SqlToken.php
@@ -13,10 +13,10 @@
  * SqlToken represents SQL tokens produced by [[SqlTokenizer]] or its child classes.
  *
  * @property SqlToken[] $children Child tokens.
- * @property bool $hasChildren Whether the token has children. This property is read-only.
- * @property bool $isCollection Whether the token represents a collection of tokens. This property is
+ * @property-read bool $hasChildren Whether the token has children. This property is read-only.
+ * @property-read bool $isCollection Whether the token represents a collection of tokens. This property is
  * read-only.
- * @property string $sql SQL code. This property is read-only.
+ * @property-read string $sql SQL code. This property is read-only.
  *
  * @author Sergey Makinen <sergey@makinen.ru>
  * @since 2.0.13
diff --git a/src/db/TableSchema.php b/src/db/TableSchema.php
index 33e2c128864..899ddb8abb9 100644
--- a/src/db/TableSchema.php
+++ b/src/db/TableSchema.php
@@ -13,7 +13,7 @@
 /**
  * TableSchema represents the metadata of a database table.
  *
- * @property array $columnNames List of column names. This property is read-only.
+ * @property-read array $columnNames List of column names. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/Transaction.php b/src/db/Transaction.php
index 3935a2380ec..e6c1cbe93a2 100644
--- a/src/db/Transaction.php
+++ b/src/db/Transaction.php
@@ -39,13 +39,13 @@
  * > with PHP 5.x and PHP 7.x. `\Exception` implements the [`\Throwable` interface](https://secure.php.net/manual/en/class.throwable.php)
  * > since PHP 7.0, so you can skip the part with `\Exception` if your app uses only PHP 7.0 and higher.
  *
- * @property bool $isActive Whether this transaction is active. Only an active transaction can [[commit()]] or
- * [[rollBack()]]. This property is read-only.
- * @property string $isolationLevel The transaction isolation level to use for this transaction. This can be
- * one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but also a string
- * containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is
+ * @property-read bool $isActive Whether this transaction is active. Only an active transaction can
+ * [[commit()]] or [[rollBack()]]. This property is read-only.
+ * @property-write string $isolationLevel The transaction isolation level to use for this transaction. This
+ * can be one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but also a
+ * string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is
  * write-only.
- * @property int $level The current nesting level of the transaction. This property is read-only.
+ * @property-read int $level The current nesting level of the transaction. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/db/mssql/ColumnSchema.php b/src/db/mssql/ColumnSchema.php
index 8ccd69f13fd..78895d6031f 100644
--- a/src/db/mssql/ColumnSchema.php
+++ b/src/db/mssql/ColumnSchema.php
@@ -14,6 +14,13 @@
  */
 class ColumnSchema extends \yii\db\ColumnSchema
 {
+    /**
+     * @var bool whether this column is a computed column
+     * @since 2.0.39
+     */
+    public $isComputed;
+
+
     /**
      * Prepares default value and converts it according to [[phpType]]
      * @param mixed $value default value
diff --git a/src/db/mssql/QueryBuilder.php b/src/db/mssql/QueryBuilder.php
index 9a74810d4ef..cc2a92067a9 100644
--- a/src/db/mssql/QueryBuilder.php
+++ b/src/db/mssql/QueryBuilder.php
@@ -475,22 +475,31 @@ public function insert($table, $columns, &$params)
         $version2005orLater = version_compare($this->db->getSchema()->getServerVersion(), '9', '>=');
 
         list($names, $placeholders, $values, $params) = $this->prepareInsertValues($table, $columns, $params);
-
-        $sql = 'INSERT INTO ' . $this->db->quoteTableName($table)
-            . (!empty($names) ? ' (' . implode(', ', $names) . ')' : '')
-            . ($version2005orLater ? ' OUTPUT INSERTED.* INTO @temporary_inserted' : '')
-            . (!empty($placeholders) ? ' VALUES (' . implode(', ', $placeholders) . ')' : $values);
-
         if ($version2005orLater) {
             $schema = $this->db->getTableSchema($table);
             $cols = [];
+            $columns = [];
             foreach ($schema->columns as $column) {
+                if ($column->isComputed) {
+                    continue;
+                }
                 $cols[] = $this->db->quoteColumnName($column->name) . ' '
                     . $column->dbType
                     . (in_array($column->dbType, ['char', 'varchar', 'nchar', 'nvarchar', 'binary', 'varbinary']) ? "(MAX)" : "")
                     . ' ' . ($column->allowNull ? "NULL" : "");
+                $columns[] = 'INSERTED.' . $column->name;
             }
-            $sql = "SET NOCOUNT ON;DECLARE @temporary_inserted TABLE (" . implode(", ", $cols) . ");" . $sql . ";SELECT * FROM @temporary_inserted";
+        }
+        $countColumns = count($columns);
+
+        $sql = 'INSERT INTO ' . $this->db->quoteTableName($table)
+            . (!empty($names) ? ' (' . implode(', ', $names) . ')' : '')
+            . (($version2005orLater && $countColumns) ? ' OUTPUT ' . implode(',', $columns) . ' INTO @temporary_inserted' : '')
+            . (!empty($placeholders) ? ' VALUES (' . implode(', ', $placeholders) . ')' : $values);
+
+        if ($version2005orLater && $countColumns) {
+            $sql = 'SET NOCOUNT ON;DECLARE @temporary_inserted TABLE (' . implode(', ', $cols) . ');' . $sql .
+                ';SELECT * FROM @temporary_inserted';
         }
 
         return $sql;
diff --git a/src/db/mssql/Schema.php b/src/db/mssql/Schema.php
index e92f9385e06..1ffad32a924 100644
--- a/src/db/mssql/Schema.php
+++ b/src/db/mssql/Schema.php
@@ -364,6 +364,7 @@ protected function loadColumnSchema($info)
         $column->enumValues = []; // mssql has only vague equivalents to enum
         $column->isPrimaryKey = null; // primary key will be determined in findColumns() method
         $column->autoIncrement = $info['is_identity'] == 1;
+        $column->isComputed = (bool)$info['is_computed'];
         $column->unsigned = stripos($column->dbType, 'unsigned') !== false;
         $column->comment = $info['comment'] === null ? '' : $info['comment'];
 
@@ -436,6 +437,7 @@ protected function findColumns($table)
  END AS 'data_type',
  [t1].[column_default],
  COLUMNPROPERTY(OBJECT_ID([t1].[table_schema] + '.' + [t1].[table_name]), [t1].[column_name], 'IsIdentity') AS is_identity,
+ COLUMNPROPERTY(OBJECT_ID([t1].[table_schema] + '.' + [t1].[table_name]), [t1].[column_name], 'IsComputed') AS is_computed,
  (
     SELECT CONVERT(VARCHAR, [t2].[value])
 		FROM [sys].[extended_properties] AS [t2]
diff --git a/src/db/sqlite/Schema.php b/src/db/sqlite/Schema.php
index ccd6e2bf6ae..0b5a0cc8ec9 100644
--- a/src/db/sqlite/Schema.php
+++ b/src/db/sqlite/Schema.php
@@ -24,9 +24,9 @@
 /**
  * Schema is the class for retrieving metadata from a SQLite (2/3) database.
  *
- * @property string $transactionIsolationLevel The transaction isolation level to use for this transaction.
- * This can be either [[Transaction::READ_UNCOMMITTED]] or [[Transaction::SERIALIZABLE]]. This property is
- * write-only.
+ * @property-write string $transactionIsolationLevel The transaction isolation level to use for this
+ * transaction. This can be either [[Transaction::READ_UNCOMMITTED]] or [[Transaction::SERIALIZABLE]]. This
+ * property is write-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/di/Container.php b/src/di/Container.php
index 2717572b79a..d6b396b6ed9 100644
--- a/src/di/Container.php
+++ b/src/di/Container.php
@@ -8,6 +8,7 @@
 namespace yii\di;
 
 use ReflectionClass;
+use ReflectionException;
 use Yii;
 use yii\base\Component;
 use yii\base\InvalidConfigException;
@@ -91,10 +92,10 @@
  *
  * For more details and usage information on Container, see the [guide article on di-containers](guide:concept-di-container).
  *
- * @property array $definitions The list of the object definitions or the loaded shared objects (type or ID =>
- * definition or instance). This property is read-only.
- *
- * @property bool $resolveArrays whether to attempt to resolve elements in array dependencies
+ * @property-read array $definitions The list of the object definitions or the loaded shared objects (type or
+ * ID => definition or instance). This property is read-only.
+ * @property-write bool $resolveArrays Whether to attempt to resolve elements in array dependencies. This
+ * property is write-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -122,12 +123,12 @@ class Container extends Component
      * is associated with a list of constructor parameter types or default values.
      */
     private $_dependencies = [];
-
     /**
      * @var bool whether to attempt to resolve elements in array dependencies
      */
     private $_resolveArrays = false;
 
+
     /**
      * Returns an instance of the requested class.
      *
@@ -143,11 +144,14 @@ class Container extends Component
      * In this case, the constructor parameters and object configurations will be used
      * only if the class is instantiated the first time.
      *
-     * @param string|Instance $class the class Instance, name or an alias name (e.g. `foo`) that was previously registered via [[set()]]
-     * or [[setSingleton()]].
-     * @param array $params a list of constructor parameter values. The parameters should be provided in the order
-     * they appear in the constructor declaration. If you want to skip some parameters, you should index the remaining
-     * ones with the integers that represent their positions in the constructor parameter list.
+     * @param string|Instance $class the class Instance, name or an alias name (e.g. `foo`) that was previously
+     * registered via [[set()]] or [[setSingleton()]].
+     * @param array $params a list of constructor parameter values. Use one of two definitions:
+     *  - Parameters as name-value pairs, for example: `['posts' => PostRepository::class]`.
+     *  - Parameters in the order they appear in the constructor declaration. If you want to skip some parameters,
+     *    you should index the remaining ones with the integers that represent their positions in the constructor
+     *    parameter list.
+     *    Dependencies indexed by name and by position in the same array are not allowed.
      * @param array $config a list of name-value pairs that will be used to initialize the object properties.
      * @return object an instance of the requested class.
      * @throws InvalidConfigException if the class cannot be recognized or correspond to an invalid definition
@@ -379,15 +383,23 @@ protected function build($class, $params, $config)
         /* @var $reflection ReflectionClass */
         list($reflection, $dependencies) = $this->getDependencies($class);
 
+        $addDependencies = [];
         if (isset($config['__construct()'])) {
-            foreach ($config['__construct()'] as $index => $param) {
-                $dependencies[$index] = $param;
-            }
+            $addDependencies = $config['__construct()'];
             unset($config['__construct()']);
         }
-
         foreach ($params as $index => $param) {
-            $dependencies[$index] = $param;
+            $addDependencies[$index] = $param;
+        }
+
+        $this->validateDependencies($addDependencies);
+
+        if ($addDependencies && is_int(key($addDependencies))) {
+            $dependencies = array_values($dependencies);
+            $dependencies = $this->mergeDependencies($dependencies, $addDependencies);
+        } else {
+            $dependencies = $this->mergeDependencies($dependencies, $addDependencies);
+            $dependencies = array_values($dependencies);
         }
 
         $dependencies = $this->resolveDependencies($dependencies, $reflection);
@@ -414,6 +426,47 @@ protected function build($class, $params, $config)
         return $object;
     }
 
+    /**
+     * @param array $a
+     * @param array $b
+     * @return array
+     */
+    private function mergeDependencies($a, $b)
+    {
+        foreach ($b as $index => $dependency) {
+            $a[$index] = $dependency;
+        }
+        return $a;
+    }
+
+    /**
+     * @param array $parameters
+     * @throws InvalidConfigException
+     */
+    private function validateDependencies($parameters)
+    {
+        $hasStringParameter = false;
+        $hasIntParameter = false;
+        foreach ($parameters as $index => $parameter) {
+            if (is_string($index)) {
+                $hasStringParameter = true;
+                if ($hasIntParameter) {
+                    break;
+                }
+            } else {
+                $hasIntParameter = true;
+                if ($hasStringParameter) {
+                    break;
+                }
+            }
+        }
+        if ($hasIntParameter && $hasStringParameter) {
+            throw new InvalidConfigException(
+                'Dependencies indexed by name and by position in the same array are not allowed.'
+            );
+        }
+    }
+
     /**
      * Merges the user-specified constructor parameters with the ones registered via [[set()]].
      * @param string $class class name, interface name or alias name
@@ -458,17 +511,31 @@ protected function getDependencies($class)
         $constructor = $reflection->getConstructor();
         if ($constructor !== null) {
             foreach ($constructor->getParameters() as $param) {
-                if (version_compare(PHP_VERSION, '5.6.0', '>=') && $param->isVariadic()) {
+                if (PHP_VERSION_ID >= 50600 && $param->isVariadic()) {
                     break;
-                } elseif ($param->isDefaultValueAvailable()) {
-                    $dependencies[] = $param->getDefaultValue();
+                }
+
+                if (PHP_VERSION_ID >= 80000) {
+                    $c = $param->getType();
+                    $isClass = $c !== null && !$param->getType()->isBuiltin();
                 } else {
-                    if (PHP_VERSION_ID >= 80000) {
-                        $c = $param->getType();
-                    } else {
+                    try {
                         $c = $param->getClass();
+                    } catch (ReflectionException $e) {
+                        $c = null;
                     }
-                    $dependencies[] = Instance::of($c === null ? null : $c->getName());
+                    $isClass = $c !== null;
+                }
+                $className = $isClass ? $c->getName() : null;
+
+                if ($className !== null &&
+                    ($this->has($className) || class_exists($className))
+                ) {
+                    $dependencies[$param->getName()] = Instance::of($className);
+                } else {
+                    $dependencies[$param->getName()] = $param->isDefaultValueAvailable()
+                        ? $param->getDefaultValue()
+                        : null;
                 }
             }
         }
@@ -565,12 +632,23 @@ public function resolveCallableDependencies(callable $callback, $params = [])
 
         foreach ($reflection->getParameters() as $param) {
             $name = $param->getName();
-            if (($class = $param->getClass()) !== null) {
+
+            if (PHP_VERSION_ID >= 80000) {
+                $class = $param->getType();
+                $isClass = $class !== null && !$param->getType()->isBuiltin();
+            } else {
+                $class = $param->getClass();
+                $isClass = $class !== null;
+            }
+
+            if ($isClass) {
                 $className = $class->getName();
-                if (version_compare(PHP_VERSION, '5.6.0', '>=') && $param->isVariadic()) {
+                if (PHP_VERSION_ID >= 50600 && $param->isVariadic()) {
                     $args = array_merge($args, array_values($params));
                     break;
-                } elseif ($associative && isset($params[$name]) && $params[$name] instanceof $className) {
+                }
+
+                if ($associative && isset($params[$name]) && $params[$name] instanceof $className) {
                     $args[] = $params[$name];
                     unset($params[$name]);
                 } elseif (!$associative && isset($params[0]) && $params[0] instanceof $className) {
diff --git a/src/filters/AccessRule.php b/src/filters/AccessRule.php
index a4b604ed37b..606c1701026 100644
--- a/src/filters/AccessRule.php
+++ b/src/filters/AccessRule.php
@@ -114,7 +114,7 @@ class AccessRule extends Component
      * @var array list of user IP addresses that this rule applies to. An IP address
      * can contain the wildcard `*` at the end so that it matches IP addresses with the same prefix.
      * For example, '192.168.*' matches all IP addresses in the segment '192.168.'.
-     * It may also contain a pattern/mask like '172.16.0.0/12' which would match all IPs from the 
+     * It may also contain a pattern/mask like '172.16.0.0/12' which would match all IPs from the
      * 20-bit private network block in RFC1918.
      * If not set or empty, it means this rule applies to all IP addresses.
      * @see Request::userIP
diff --git a/src/grid/DataColumn.php b/src/grid/DataColumn.php
index be1610190e7..53c18b6b8aa 100644
--- a/src/grid/DataColumn.php
+++ b/src/grid/DataColumn.php
@@ -142,7 +142,7 @@ protected function renderHeaderCellContent()
     }
 
     /**
-     * {@inheritdoc]
+     * {@inheritdoc}
      * @since 2.0.8
      */
     protected function getHeaderCellLabel()
diff --git a/src/helpers/BaseConsole.php b/src/helpers/BaseConsole.php
index e9e417edca1..285276238cf 100644
--- a/src/helpers/BaseConsole.php
+++ b/src/helpers/BaseConsole.php
@@ -331,7 +331,7 @@ public static function xtermBgColor($colorCode)
      */
     public static function stripAnsiFormat($string)
     {
-        return preg_replace('/\033\[[\d;?]*\w/', '', $string);
+        return preg_replace(self::ansiCodesPattern(), '', $string);
     }
 
     /**
@@ -355,6 +355,67 @@ public static function ansiStrwidth($string)
         return mb_strwidth(static::stripAnsiFormat($string), Yii::$app->charset);
     }
 
+    /**
+     * Returns the portion with ANSI color codes of string specified by the start and length parameters.
+     * If string has color codes, then will be return "TEXT_COLOR + TEXT_STRING + DEFAULT_COLOR",
+     * else will be simple "TEXT_STRING".
+     * @param string $string
+     * @param int $start
+     * @param int $length
+     * @return string
+     */
+    public static function ansiColorizedSubstr($string, $start, $length)
+    {
+        if ($start < 0 || $length <= 0) {
+            return '';
+        }
+
+        $textItems = preg_split(self::ansiCodesPattern(), $string);
+
+        preg_match_all(self::ansiCodesPattern(), $string, $colors);
+        $colors = count($colors) ? $colors[0] : [];
+        array_unshift($colors, '');
+
+        $result = '';
+        $curPos = 0;
+        $inRange = false;
+
+        foreach ($textItems as $k => $textItem) {
+            $color = $colors[$k];
+
+            if ($curPos <= $start && $start < $curPos + Console::ansiStrwidth($textItem)) {
+                $text = mb_substr($textItem, $start - $curPos, null, Yii::$app->charset);
+                $inRange = true;
+            } else {
+                $text = $textItem;
+            }
+
+            if ($inRange) {
+                $result .= $color . $text;
+                $diff = $length - Console::ansiStrwidth($result);
+                if ($diff <= 0) {
+                    if ($diff < 0) {
+                        $result = mb_substr($result, 0, $diff, Yii::$app->charset);
+                    }
+                    $defaultColor = static::renderColoredString('%n');
+                    if ($color && $color != $defaultColor) {
+                        $result .= $defaultColor;
+                    }
+                    break;
+                }
+            }
+
+            $curPos += mb_strlen($textItem, Yii::$app->charset);
+        }
+
+        return $result;
+    }
+
+    private static function ansiCodesPattern()
+    {
+        return /** @lang PhpRegExp */ '/\033\[[\d;?]*\w/';
+    }
+
     /**
      * Converts an ANSI formatted string to HTML.
      *
diff --git a/src/i18n/I18N.php b/src/i18n/I18N.php
index 49cf93bd459..3e5bd425d19 100644
--- a/src/i18n/I18N.php
+++ b/src/i18n/I18N.php
@@ -19,7 +19,7 @@
  *
  * @property MessageFormatter $messageFormatter The message formatter to be used to format message via ICU
  * message format. Note that the type of this property differs in getter and setter. See
- * [[getMessageFormatter()]] and [[setMessageFormatter()]] for details.
+ * [[getMessageFormatter()]]  and [[setMessageFormatter()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/i18n/Locale.php b/src/i18n/Locale.php
index 6567c083f59..86b78de6a88 100644
--- a/src/i18n/Locale.php
+++ b/src/i18n/Locale.php
@@ -16,7 +16,7 @@
  *
  * The class requires [PHP intl extension](https://secure.php.net/manual/en/book.intl.php) to be installed.
  *
- * @property string $currencySymbol This property is read-only.
+ * @property-read string $currencySymbol This property is read-only.
  *
  * @since 2.0.14
  */
diff --git a/src/i18n/MessageFormatter.php b/src/i18n/MessageFormatter.php
index 2b11c034b5d..2fdba093213 100644
--- a/src/i18n/MessageFormatter.php
+++ b/src/i18n/MessageFormatter.php
@@ -36,8 +36,8 @@
  *   Also messages that are working with the fallback implementation are not necessarily compatible with the
  *   PHP intl MessageFormatter so do not rely on the fallback if you are able to install intl extension somehow.
  *
- * @property string $errorCode Code of the last error. This property is read-only.
- * @property string $errorMessage Description of the last error. This property is read-only.
+ * @property-read string $errorCode Code of the last error. This property is read-only.
+ * @property-read string $errorMessage Description of the last error. This property is read-only.
  *
  * @author Alexander Makarov <sam@rmcreative.ru>
  * @author Carsten Brandt <mail@cebe.cc>
diff --git a/src/log/Dispatcher.php b/src/log/Dispatcher.php
index 8109e0b8978..d888d89a8d1 100644
--- a/src/log/Dispatcher.php
+++ b/src/log/Dispatcher.php
@@ -53,7 +53,7 @@
  * @property int $flushInterval How many messages should be logged before they are sent to targets. This
  * method returns the value of [[Logger::flushInterval]].
  * @property Logger $logger The logger. If not set, [[\Yii::getLogger()]] will be used. Note that the type of
- * this property differs in getter and setter. See [[getLogger()]] and [[setLogger()]] for details.
+ * this property differs in getter and setter. See [[getLogger()]]  and [[setLogger()]] for details.
  * @property int $traceLevel How many application call stacks should be logged together with each message.
  * This method returns the value of [[Logger::traceLevel]]. Defaults to 0.
  *
diff --git a/src/log/Logger.php b/src/log/Logger.php
index 9bbfa4e89a5..6a6f3b9a85e 100644
--- a/src/log/Logger.php
+++ b/src/log/Logger.php
@@ -30,13 +30,13 @@
  * to send logged messages to different log targets, such as [[FileTarget|file]], [[EmailTarget|email]],
  * or [[DbTarget|database]], with the help of the [[dispatcher]].
  *
- * @property array $dbProfiling The first element indicates the number of SQL statements executed, and the
- * second element the total time spent in SQL execution. This property is read-only.
- * @property float $elapsedTime The total elapsed time in seconds for current request. This property is
+ * @property-read array $dbProfiling The first element indicates the number of SQL statements executed, and
+ * the second element the total time spent in SQL execution. This property is read-only.
+ * @property-read float $elapsedTime The total elapsed time in seconds for current request. This property is
  * read-only.
- * @property array $profiling The profiling results. Each element is an array consisting of these elements:
- * `info`, `category`, `timestamp`, `trace`, `level`, `duration`, `memory`, `memoryDiff`. The `memory` and
- * `memoryDiff` values are available since version 2.0.11. This property is read-only.
+ * @property-read array $profiling The profiling results. Each element is an array consisting of these
+ * elements: `info`, `category`, `timestamp`, `trace`, `level`, `duration`, `memory`, `memoryDiff`. The `memory`
+ * and `memoryDiff` values are available since version 2.0.11. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/log/Target.php b/src/log/Target.php
index 2a192e80d55..846bc919a9f 100644
--- a/src/log/Target.php
+++ b/src/log/Target.php
@@ -27,10 +27,10 @@
  * may specify [[except]] to exclude messages of certain categories.
  *
  * @property bool $enabled Indicates whether this log target is enabled. Defaults to true. Note that the type
- * of this property differs in getter and setter. See [[getEnabled()]] and [[setEnabled()]] for details.
+ * of this property differs in getter and setter. See [[getEnabled()]]  and [[setEnabled()]] for details.
  * @property int $levels The message levels that this target is interested in. This is a bitmap of level
  * values. Defaults to 0, meaning all available levels. Note that the type of this property differs in getter and
- * setter. See [[getLevels()]] and [[setLevels()]] for details.
+ * setter. See [[getLevels()]]  and [[setLevels()]] for details.
  *
  * For more details and usage information on Target, see the [guide article on logging & targets](guide:runtime-logging).
  *
diff --git a/src/mail/BaseMailer.php b/src/mail/BaseMailer.php
index c4546fbd1f4..633974daa2f 100644
--- a/src/mail/BaseMailer.php
+++ b/src/mail/BaseMailer.php
@@ -23,7 +23,7 @@
  * For more details and usage information on BaseMailer, see the [guide article on mailing](guide:tutorial-mailing).
  *
  * @property View $view View instance. Note that the type of this property differs in getter and setter. See
- * [[getView()]] and [[setView()]] for details.
+ * [[getView()]]  and [[setView()]] for details.
  * @property string $viewPath The directory that contains the view files for composing mail messages Defaults
  * to '@app/mail'.
  *
diff --git a/src/messages/bg/yii.php b/src/messages/bg/yii.php
index e10f6fcc6a2..bb738174771 100644
--- a/src/messages/bg/yii.php
+++ b/src/messages/bg/yii.php
@@ -119,7 +119,7 @@
     '{delta, plural, =1{a month} other{# months}} ago' => 'преди {delta, plural, =1{месец} other{# месеца}}',
     '{delta, plural, =1{a second} other{# seconds}} ago' => 'преди {delta, plural, =1{секунда} other{# секунди}}',
     '{delta, plural, =1{a year} other{# years}} ago' => 'преди {delta, plural, =1{година} other{# години}}',
-    '{delta, plural, =1{an hour} other{# hours}} ago' => '{delta, plural, =1{час} other{# часа}}',
+    '{delta, plural, =1{an hour} other{# hours}} ago' => 'преди {delta, plural, =1{час} other{# часа}}',
     '{nFormatted} B' => '{nFormatted} B',
     '{nFormatted} GB' => '{nFormatted} GB',
     '{nFormatted} GiB' => '{nFormatted} GiB',
diff --git a/src/rbac/BaseManager.php b/src/rbac/BaseManager.php
index 4f832e014d6..c8dda76f930 100644
--- a/src/rbac/BaseManager.php
+++ b/src/rbac/BaseManager.php
@@ -17,10 +17,10 @@
  *
  * For more details and usage information on DbManager, see the [guide article on security authorization](guide:security-authorization).
  *
- * @property Role[] $defaultRoleInstances Default roles. The array is indexed by the role names. This property
- * is read-only.
+ * @property-read Role[] $defaultRoleInstances Default roles. The array is indexed by the role names. This
+ * property is read-only.
  * @property string[] $defaultRoles Default roles. Note that the type of this property differs in getter and
- * setter. See [[getDefaultRoles()]] and [[setDefaultRoles()]] for details.
+ * setter. See [[getDefaultRoles()]]  and [[setDefaultRoles()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/rbac/DbManager.php b/src/rbac/DbManager.php
index 51947bdb7b9..9aa29ae9453 100644
--- a/src/rbac/DbManager.php
+++ b/src/rbac/DbManager.php
@@ -106,6 +106,7 @@ class DbManager extends BaseManager
      */
     protected $checkAccessAssignments = [];
 
+
     /**
      * Initializes the application component.
      * This method overrides the parent implementation by establishing the database connection.
diff --git a/src/test/ActiveFixture.php b/src/test/ActiveFixture.php
index 6d93b79c010..ff626a43b5f 100644
--- a/src/test/ActiveFixture.php
+++ b/src/test/ActiveFixture.php
@@ -24,7 +24,7 @@
  *
  * For more details and usage information on ActiveFixture, see the [guide article on fixtures](guide:test-fixtures).
  *
- * @property TableSchema $tableSchema The schema information of the database table associated with this
+ * @property-read TableSchema $tableSchema The schema information of the database table associated with this
  * fixture. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
diff --git a/src/validators/DateValidator.php b/src/validators/DateValidator.php
index 3f2dccf13b9..24604cf6721 100644
--- a/src/validators/DateValidator.php
+++ b/src/validators/DateValidator.php
@@ -8,6 +8,7 @@
 namespace yii\validators;
 
 use DateTime;
+use DateTimeZone;
 use Exception;
 use IntlDateFormatter;
 use Yii;
@@ -125,10 +126,11 @@ class DateValidator extends Validator
      * This can be the same attribute as the one being validated. If this is the case,
      * the original value will be overwritten with the timestamp value after successful validation.
      *
-     * Note, that when using this property, the input value will be converted to a unix timestamp,
-     * which by definition is in UTC, so a conversion from the [[$timeZone|input time zone]] to UTC
-     * will be performed. When defining [[$timestampAttributeFormat]] you can control the conversion by
-     * setting [[$timestampAttributeTimeZone]] to a different value than `'UTC'`.
+     * Note, that when using this property, the input value will be converted to a unix timestamp, which by definition
+     * is in [[$defaultTimeZone|default UTC time zone]], so a conversion from the [[$timeZone|input time zone]] to
+     * the default one will be performed. If you want to change the default time zone, set the [[$defaultTimeZone]] property.
+     * When defining [[$timestampAttributeFormat]] you can further control the conversion by setting
+     * [[$timestampAttributeTimeZone]] to a different value than `'UTC'`.
      *
      * @see timestampAttributeFormat
      * @see timestampAttributeTimeZone
@@ -146,7 +148,7 @@ class DateValidator extends Validator
      */
     public $timestampAttributeFormat;
     /**
-     * @var string the timezone to use when populating the [[timestampAttribute]]. Defaults to `UTC`.
+     * @var string the timezone to use when populating the [[timestampAttribute]] with [[timestampAttributeFormat]]. Defaults to `UTC`.
      *
      * This can be any value that may be passed to [date_default_timezone_set()](https://secure.php.net/manual/en/function.date-default-timezone-set.php)
      * e.g. `UTC`, `Europe/Berlin` or `America/Chicago`.
@@ -202,6 +204,12 @@ class DateValidator extends Validator
      * @since 2.0.22
      */
     public $strictDateFormat = false;
+    /**
+     * @var string the default timezone used for parsing when no time parts are provided in the format.
+     * See [[timestampAttributeTimeZone]] for more description.
+     * @since 2.0.39
+     */
+    public $defaultTimeZone = 'UTC';
 
     /**
      * @var array map of short format names to IntlDateFormatter constant values.
@@ -288,10 +296,8 @@ public function validateAttribute($model, $attribute)
                     if (is_int($value)) {
                         return;
                     }
-                } else {
-                    if ($this->parseDateValueFormat($value, $this->timestampAttributeFormat) !== false) {
-                        return;
-                    }
+                } elseif ($this->parseDateValueFormat($value, $this->timestampAttributeFormat) !== false) {
+                    return;
                 }
             }
             $this->addError($model, $attribute, $this->message, []);
@@ -328,7 +334,7 @@ protected function validateValue($value)
     /**
      * Parses date string into UNIX timestamp.
      *
-     * @param string $value string representing date
+     * @param mixed $value string representing date
      * @return int|false a UNIX timestamp or `false` on failure.
      */
     protected function parseDateValue($value)
@@ -340,7 +346,7 @@ protected function parseDateValue($value)
     /**
      * Parses date string into UNIX timestamp.
      *
-     * @param string $value string representing date
+     * @param mixed $value string representing date
      * @param string $format expected date format
      * @return int|false a UNIX timestamp or `false` on failure.
      * @throws InvalidConfigException
@@ -399,17 +405,15 @@ private function parseDateValueIntl($value, $format)
     private function getIntlDateFormatter($format)
     {
         if (!isset($this->_dateFormats[$format])) {
-            // if no time was provided in the format string set time to 0 to get a simple date timestamp
-            $hasTimeInfo = (strpbrk($format, 'ahHkKmsSA') !== false);
-            $formatter = new IntlDateFormatter($this->locale, IntlDateFormatter::NONE, IntlDateFormatter::NONE, $hasTimeInfo ? $this->timeZone : 'UTC', null, $format);
-
-            return $formatter;
+            // if no time was provided in the format string set timezone to default one to match yii\i18n\Formatter::formatDateTimeValue()
+            $timezone = strpbrk($format, 'ahHkKmsSA') !== false ? $this->timeZone : $this->defaultTimeZone;
+            return new IntlDateFormatter($this->locale, IntlDateFormatter::NONE, IntlDateFormatter::NONE, $timezone, null, $format);
         }
 
         if ($this->type === self::TYPE_DATE) {
             $dateType = $this->_dateFormats[$format];
             $timeType = IntlDateFormatter::NONE;
-            $timeZone = 'UTC';
+            $timeZone = $this->defaultTimeZone;
         } elseif ($this->type === self::TYPE_DATETIME) {
             $dateType = $this->_dateFormats[$format];
             $timeType = $this->_dateFormats[$format];
@@ -422,9 +426,7 @@ private function getIntlDateFormatter($format)
             throw new InvalidConfigException('Unknown validation type set for DateValidator::$type: ' . $this->type);
         }
 
-        $formatter = new IntlDateFormatter($this->locale, $dateType, $timeType, $timeZone);
-
-        return $formatter;
+        return new IntlDateFormatter($this->locale, $dateType, $timeType, $timeZone);
     }
 
     /**
@@ -435,16 +437,17 @@ private function getIntlDateFormatter($format)
      */
     private function parseDateValuePHP($value, $format)
     {
-        // if no time was provided in the format string set time to 0 to get a simple date timestamp
-        $hasTimeInfo = (strpbrk($format, 'HhGgisU') !== false);
-
-        $date = DateTime::createFromFormat($format, $value, new \DateTimeZone($hasTimeInfo ? $this->timeZone : 'UTC'));
+        $hasTimeInfo = strpbrk($format, 'HhGgisU') !== false;
+        // if no time was provided in the format string set timezone to default one to match yii\i18n\Formatter::formatDateTimeValue()
+        $timezone = $hasTimeInfo ? $this->timeZone : $this->defaultTimeZone;
+        $date = DateTime::createFromFormat($format, $value, new DateTimeZone($timezone));
         $errors = DateTime::getLastErrors();
         if ($date === false || $errors['error_count'] || $errors['warning_count'] || ($this->strictDateFormat && $date->format($format) !== $value)) {
             return false;
         }
 
         if (!$hasTimeInfo) {
+            // if no time was provided in the format string set time to 0 to get a simple date timestamp
             $date->setTime(0, 0, 0);
         }
 
@@ -468,7 +471,8 @@ private function formatTimestamp($timestamp, $format)
 
         $date = new DateTime();
         $date->setTimestamp($timestamp);
-        $date->setTimezone(new \DateTimeZone($this->timestampAttributeTimeZone));
+        $date->setTimezone(new DateTimeZone($this->timestampAttributeTimeZone));
+
         return $date->format($format);
     }
 }
diff --git a/src/validators/FileValidator.php b/src/validators/FileValidator.php
index c941ff6f48e..d67934ffd74 100644
--- a/src/validators/FileValidator.php
+++ b/src/validators/FileValidator.php
@@ -20,7 +20,7 @@
  *
  * Note that you should enable `fileinfo` PHP extension.
  *
- * @property int $sizeLimit The size limit for uploaded files. This property is read-only.
+ * @property-read int $sizeLimit The size limit for uploaded files. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/validators/Validator.php b/src/validators/Validator.php
index 19800a1cd56..5b808acd271 100644
--- a/src/validators/Validator.php
+++ b/src/validators/Validator.php
@@ -48,8 +48,8 @@
  *
  * For more details and usage information on Validator, see the [guide article on validators](guide:input-validation).
  *
- * @property array $attributeNames Attribute names. This property is read-only.
- * @property array $validationAttributes List of attribute names. This property is read-only.
+ * @property-read array $attributeNames Attribute names. This property is read-only.
+ * @property-read array $validationAttributes List of attribute names. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/Application.php b/src/web/Application.php
index f20c2f85213..6a052f19d3d 100644
--- a/src/web/Application.php
+++ b/src/web/Application.php
@@ -16,12 +16,13 @@
  *
  * For more details and usage information on Application, see the [guide article on applications](guide:structure-applications).
  *
- * @property ErrorHandler $errorHandler The error handler application component. This property is read-only.
+ * @property-read ErrorHandler $errorHandler The error handler application component. This property is
+ * read-only.
  * @property string $homeUrl The homepage URL.
- * @property Request $request The request component. This property is read-only.
- * @property Response $response The response component. This property is read-only.
- * @property Session $session The session component. This property is read-only.
- * @property User $user The user component. This property is read-only.
+ * @property-read Request $request The request component. This property is read-only.
+ * @property-read Response $response The response component. This property is read-only.
+ * @property-read Session $session The session component. This property is read-only.
+ * @property-read User $user The user component. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/AssetBundle.php b/src/web/AssetBundle.php
index 9890da94964..60ada80ef3b 100644
--- a/src/web/AssetBundle.php
+++ b/src/web/AssetBundle.php
@@ -153,10 +153,10 @@ public function registerAssetFiles($view)
             if (is_array($js)) {
                 $file = array_shift($js);
                 $options = ArrayHelper::merge($this->jsOptions, $js);
-                $view->registerJsFile($manager->getAssetUrl($this, $file), $options);
+                $view->registerJsFile($manager->getActualAssetUrl($this, $file), $options);
             } else {
                 if ($js !== null) {
-                    $view->registerJsFile($manager->getAssetUrl($this, $js), $this->jsOptions);
+                    $view->registerJsFile($manager->getActualAssetUrl($this, $js), $this->jsOptions);
                 }
             }
         }
@@ -164,10 +164,10 @@ public function registerAssetFiles($view)
             if (is_array($css)) {
                 $file = array_shift($css);
                 $options = ArrayHelper::merge($this->cssOptions, $css);
-                $view->registerCssFile($manager->getAssetUrl($this, $file), $options);
+                $view->registerCssFile($manager->getActualAssetUrl($this, $file), $options);
             } else {
                 if ($css !== null) {
-                    $view->registerCssFile($manager->getAssetUrl($this, $css), $this->cssOptions);
+                    $view->registerCssFile($manager->getActualAssetUrl($this, $css), $this->cssOptions);
                 }
             }
         }
diff --git a/src/web/AssetManager.php b/src/web/AssetManager.php
index ee0b61ed4ee..215f5b1ac8d 100644
--- a/src/web/AssetManager.php
+++ b/src/web/AssetManager.php
@@ -34,7 +34,7 @@
  * For more details and usage information on AssetManager, see the [guide article on assets](guide:structure-assets).
  *
  * @property AssetConverterInterface $converter The asset converter. Note that the type of this property
- * differs in getter and setter. See [[getConverter()]] and [[setConverter()]] for details.
+ * differs in getter and setter. See [[getConverter()]]  and [[setConverter()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -298,30 +298,14 @@ protected function loadDummyBundle($name)
      */
     public function getAssetUrl($bundle, $asset)
     {
-        if (($actualAsset = $this->resolveAsset($bundle, $asset)) !== false) {
-            if (strncmp($actualAsset, '@web/', 5) === 0) {
-                $asset = substr($actualAsset, 5);
-                $basePath = Yii::getAlias('@webroot');
-                $baseUrl = Yii::getAlias('@web');
-            } else {
-                $asset = Yii::getAlias($actualAsset);
-                $basePath = $this->basePath;
-                $baseUrl = $this->baseUrl;
-            }
-        } else {
-            $basePath = $bundle->basePath;
-            $baseUrl = $bundle->baseUrl;
-        }
+        $assetUrl = $this->getActualAssetUrl($bundle, $asset);
+        $assetPath = $this->getAssetPath($bundle, $asset);
 
-        if (!Url::isRelative($asset) || strncmp($asset, '/', 1) === 0) {
-            return $asset;
+        if ($this->appendTimestamp && $assetPath && ($timestamp = @filemtime($assetPath)) > 0) {
+            return "$assetUrl?v=$timestamp";
         }
 
-        if ($this->appendTimestamp && ($timestamp = @filemtime("$basePath/$asset")) > 0) {
-            return "$baseUrl/$asset?v=$timestamp";
-        }
-
-        return "$baseUrl/$asset";
+        return $assetUrl;
     }
 
     /**
@@ -625,4 +609,33 @@ protected function hash($path)
         $path = (is_file($path) ? dirname($path) : $path) . filemtime($path);
         return sprintf('%x', crc32($path . Yii::getVersion() . '|' . $this->linkAssets));
     }
+
+    /**
+     * Returns the actual URL for the specified asset. Without parameters.
+     * The actual URL is obtained by prepending either [[AssetBundle::$baseUrl]] or [[AssetManager::$baseUrl]] to the given asset path.
+     * @param AssetBundle $bundle the asset bundle which the asset file belongs to
+     * @param string $asset the asset path. This should be one of the assets listed in [[AssetBundle::$js]] or [[AssetBundle::$css]].
+     * @return string the actual URL for the specified asset.
+     * @since 2.0.39
+     */
+    public function getActualAssetUrl($bundle, $asset)
+    {
+        if (($actualAsset = $this->resolveAsset($bundle, $asset)) !== false) {
+            if (strncmp($actualAsset, '@web/', 5) === 0) {
+                $asset = substr($actualAsset, 5);
+                $baseUrl = Yii::getAlias('@web');
+            } else {
+                $asset = Yii::getAlias($actualAsset);
+                $baseUrl = $this->baseUrl;
+            }
+        } else {
+            $baseUrl = $bundle->baseUrl;
+        }
+
+        if (!Url::isRelative($asset) || strncmp($asset, '/', 1) === 0) {
+            return $asset;
+        }
+
+        return "$baseUrl/$asset";
+    }
 }
diff --git a/src/web/CacheSession.php b/src/web/CacheSession.php
index 918535973a4..ecb14b782a1 100644
--- a/src/web/CacheSession.php
+++ b/src/web/CacheSession.php
@@ -31,7 +31,7 @@
  * ]
  * ```
  *
- * @property bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
@@ -69,6 +69,26 @@ public function getUseCustomStorage()
         return true;
     }
 
+    /**
+     * Session open handler.
+     * @internal Do not call this method directly.
+     * @param string $savePath session save path
+     * @param string $sessionName session name
+     * @return bool whether session is opened successfully
+     */
+    public function openSession($savePath, $sessionName)
+    {
+        if ($this->getUseStrictMode()) {
+            $id = $this->getId();
+            if (!$this->cache->exists($this->calculateKey($id))) {
+                //This session id does not exist, mark it for forced regeneration
+                $this->_forceRegenerateId = $id;
+            }
+        }
+
+        return parent::openSession($savePath, $sessionName);
+    }
+
     /**
      * Session read handler.
      * @internal Do not call this method directly.
@@ -91,6 +111,11 @@ public function readSession($id)
      */
     public function writeSession($id, $data)
     {
+        if ($this->getUseStrictMode() && $id === $this->_forceRegenerateId) {
+            //Ignore write when forceRegenerate is active for this id
+            return true;
+        }
+
         return $this->cache->set($this->calculateKey($id), $data, $this->getTimeout());
     }
 
diff --git a/src/web/CompositeUrlRule.php b/src/web/CompositeUrlRule.php
index d985f078010..d707c64ccc4 100644
--- a/src/web/CompositeUrlRule.php
+++ b/src/web/CompositeUrlRule.php
@@ -13,8 +13,8 @@
 /**
  * CompositeUrlRule is the base class for URL rule classes that consist of multiple simpler rules.
  *
- * @property null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call. `null`
- * if rule does not provide info about create status. This property is read-only.
+ * @property-read null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call.
+ * `null` if rule does not provide info about create status. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/Controller.php b/src/web/Controller.php
index 3b2e8b1ffae..4e205d00eb6 100644
--- a/src/web/Controller.php
+++ b/src/web/Controller.php
@@ -8,7 +8,6 @@
 namespace yii\web;
 
 use Yii;
-use yii\base\ErrorException;
 use yii\base\Exception;
 use yii\base\InlineAction;
 use yii\helpers\Url;
@@ -18,6 +17,9 @@
  *
  * For more details and usage information on Controller, see the [guide article on controllers](guide:structure-controllers).
  *
+ * @property Request $request
+ * @property Response $response
+ *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
  */
@@ -130,7 +132,12 @@ public function bindActionParams($action, $params)
             $name = $param->getName();
             if (array_key_exists($name, $params)) {
                 $isValid = true;
-                if ($param->isArray()) {
+                if (PHP_VERSION_ID >= 80000) {
+                    $isArray = ($type = $param->getType()) instanceof \ReflectionNamedType && $type->getName() === 'array';
+                } else {
+                    $isArray = $param->isArray();
+                }
+                if ($isArray) {
                     $params[$name] = (array)$params[$name];
                 } elseif (is_array($params[$name])) {
                     $isValid = false;
diff --git a/src/web/CookieCollection.php b/src/web/CookieCollection.php
index e5b2b688f16..c26cfd35445 100644
--- a/src/web/CookieCollection.php
+++ b/src/web/CookieCollection.php
@@ -17,9 +17,9 @@
  *
  * For more details and usage information on CookieCollection, see the [guide article on handling cookies](guide:runtime-sessions-cookies).
  *
- * @property int $count The number of cookies in the collection. This property is read-only.
- * @property ArrayIterator $iterator An iterator for traversing the cookies in the collection. This property
- * is read-only.
+ * @property-read int $count The number of cookies in the collection. This property is read-only.
+ * @property-read ArrayIterator $iterator An iterator for traversing the cookies in the collection. This
+ * property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/DbSession.php b/src/web/DbSession.php
index 26c392f0d34..bc23f660660 100644
--- a/src/web/DbSession.php
+++ b/src/web/DbSession.php
@@ -93,6 +93,26 @@ public function init()
         $this->db = Instance::ensure($this->db, Connection::className());
     }
 
+    /**
+     * Session open handler.
+     * @internal Do not call this method directly.
+     * @param string $savePath session save path
+     * @param string $sessionName session name
+     * @return bool whether session is opened successfully
+     */
+    public function openSession($savePath, $sessionName)
+    {
+        if ($this->getUseStrictMode()) {
+            $id = $this->getId();
+            if (!$this->getReadQuery($id)->exists()) {
+                //This session id does not exist, mark it for forced regeneration
+                $this->_forceRegenerateId = $id;
+            }
+        }
+
+        return parent::openSession($savePath, $sessionName);
+    }
+
     /**
      * {@inheritdoc}
      */
@@ -160,9 +180,7 @@ public function close()
      */
     public function readSession($id)
     {
-        $query = new Query();
-        $query->from($this->sessionTable)
-            ->where('[[expire]]>:expire AND [[id]]=:id', [':expire' => time(), ':id' => $id]);
+        $query = $this->getReadQuery($id);
 
         if ($this->readCallback !== null) {
             $fields = $query->one($this->db);
@@ -182,6 +200,11 @@ public function readSession($id)
      */
     public function writeSession($id, $data)
     {
+        if ($this->getUseStrictMode() && $id === $this->_forceRegenerateId) {
+            //Ignore write when forceRegenerate is active for this id
+            return true;
+        }
+
         // exception must be caught in session write handler
         // https://secure.php.net/manual/en/function.session-set-save-handler.php#refsect1-function.session-set-save-handler-notes
         try {
@@ -240,6 +263,18 @@ public function gcSession($maxLifetime)
         return true;
     }
 
+    /**
+     * Generates a query to get the session from db
+     * @param string $id The id of the session
+     * @return Query
+     */
+    protected function getReadQuery($id)
+    {
+        return (new Query())
+            ->from($this->sessionTable)
+            ->where('[[expire]]>:expire AND [[id]]=:id', [':expire' => time(), ':id' => $id]);
+    }
+
     /**
      * Method typecasts $fields before passing them to PDO.
      * Default implementation casts field `data` to `\PDO::PARAM_LOB`.
diff --git a/src/web/ErrorHandler.php b/src/web/ErrorHandler.php
index 44784d61ff3..8c9ee2728f9 100644
--- a/src/web/ErrorHandler.php
+++ b/src/web/ErrorHandler.php
@@ -483,7 +483,7 @@ public function argumentsToString($args)
     /**
      * Returns human-readable exception name.
      * @param \Exception $exception
-     * @return string human-readable exception name or null if it cannot be determined
+     * @return string|null human-readable exception name or null if it cannot be determined
      */
     public function getExceptionName($exception)
     {
diff --git a/src/web/HeaderCollection.php b/src/web/HeaderCollection.php
index 7c135d26824..1fa6021f7b4 100644
--- a/src/web/HeaderCollection.php
+++ b/src/web/HeaderCollection.php
@@ -13,9 +13,9 @@
 /**
  * HeaderCollection is used by [[Response]] to maintain the currently registered HTTP headers.
  *
- * @property int $count The number of headers in the collection. This property is read-only.
- * @property \ArrayIterator $iterator An iterator for traversing the headers in the collection. This property
- * is read-only.
+ * @property-read int $count The number of headers in the collection. This property is read-only.
+ * @property-read \ArrayIterator $iterator An iterator for traversing the headers in the collection. This
+ * property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/MultiFieldSession.php b/src/web/MultiFieldSession.php
index cd26d120aca..1b73e6d583e 100644
--- a/src/web/MultiFieldSession.php
+++ b/src/web/MultiFieldSession.php
@@ -22,7 +22,7 @@
  * While extending this class you should use [[composeFields()]] method - while writing the session data into the storage and
  * [[extractData()]] - while reading session data from the storage.
  *
- * @property bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
  *
  * @author Paul Klimov <klimov.paul@gmail.com>
  * @since 2.0.6
diff --git a/src/web/MultipartFormDataParser.php b/src/web/MultipartFormDataParser.php
index 0685160f1bd..c6f8c8ccaa6 100644
--- a/src/web/MultipartFormDataParser.php
+++ b/src/web/MultipartFormDataParser.php
@@ -141,10 +141,11 @@ public function parse($rawBody, $contentType)
             return [];
         }
 
-        if (!preg_match('/boundary=(.*)$/is', $contentType, $matches)) {
+        if (!preg_match('/boundary="?(.*)"?$/is', $contentType, $matches)) {
             return [];
         }
-        $boundary = $matches[1];
+
+        $boundary = trim($matches[1], '"');
 
         $bodyParts = preg_split('/\\R?-+' . preg_quote($boundary, '/') . '/s', $rawBody);
         array_pop($bodyParts); // last block always has no data, contains boundary ending like `--`
diff --git a/src/web/Request.php b/src/web/Request.php
index a99c2b3d379..6ebd807a8bd 100644
--- a/src/web/Request.php
+++ b/src/web/Request.php
@@ -23,70 +23,73 @@
  *
  * For more details and usage information on Request, see the [guide article on requests](guide:runtime-requests).
  *
- * @property string $absoluteUrl The currently requested absolute URL. This property is read-only.
+ * @property-read string $absoluteUrl The currently requested absolute URL. This property is read-only.
  * @property array $acceptableContentTypes The content types ordered by the quality score. Types with the
  * highest scores will be returned first. The array keys are the content types, while the array values are the
  * corresponding quality score and other parameters as given in the header.
  * @property array $acceptableLanguages The languages ordered by the preference level. The first element
  * represents the most preferred language.
- * @property array $authCredentials That contains exactly two elements: - 0: the username sent via HTTP
+ * @property-read array $authCredentials That contains exactly two elements: - 0: the username sent via HTTP
  * authentication, `null` if the username is not given - 1: the password sent via HTTP authentication, `null` if
  * the password is not given. This property is read-only.
- * @property string|null $authPassword The password sent via HTTP authentication, `null` if the password is
+ * @property-read string|null $authPassword The password sent via HTTP authentication, `null` if the password
+ * is not given. This property is read-only.
+ * @property-read string|null $authUser The username sent via HTTP authentication, `null` if the username is
  * not given. This property is read-only.
- * @property string|null $authUser The username sent via HTTP authentication, `null` if the username is not
- * given. This property is read-only.
  * @property string $baseUrl The relative URL for the application.
  * @property array $bodyParams The request parameters given in the request body.
- * @property string $contentType Request content-type. Null is returned if this information is not available.
- * This property is read-only.
- * @property CookieCollection $cookies The cookie collection. This property is read-only.
- * @property string $csrfToken The token used to perform CSRF validation. This property is read-only.
- * @property string $csrfTokenFromHeader The CSRF token sent via [[CSRF_HEADER]] by browser. Null is returned
- * if no such header is sent. This property is read-only.
- * @property array $eTags The entity tags. This property is read-only.
- * @property HeaderCollection $headers The header collection. This property is read-only.
+ * @property-read string $contentType Request content-type. Null is returned if this information is not
+ * available. This property is read-only.
+ * @property-read CookieCollection $cookies The cookie collection. This property is read-only.
+ * @property-read string $csrfToken The token used to perform CSRF validation. This property is read-only.
+ * @property-read string $csrfTokenFromHeader The CSRF token sent via [[CSRF_HEADER]] by browser. Null is
+ * returned if no such header is sent. This property is read-only.
+ * @property-read array $eTags The entity tags. This property is read-only.
+ * @property-read HeaderCollection $headers The header collection. This property is read-only.
  * @property string|null $hostInfo Schema and hostname part (with port number if needed) of the request URL
  * (e.g. `http://www.yiiframework.com`), null if can't be obtained from `$_SERVER` and wasn't set. See
  * [[getHostInfo()]] for security related notes on this property.
- * @property string|null $hostName Hostname part of the request URL (e.g. `www.yiiframework.com`). This
+ * @property-read string|null $hostName Hostname part of the request URL (e.g. `www.yiiframework.com`). This
  * property is read-only.
- * @property bool $isAjax Whether this is an AJAX (XMLHttpRequest) request. This property is read-only.
- * @property bool $isDelete Whether this is a DELETE request. This property is read-only.
- * @property bool $isFlash Whether this is an Adobe Flash or Adobe Flex request. This property is read-only.
- * @property bool $isGet Whether this is a GET request. This property is read-only.
- * @property bool $isHead Whether this is a HEAD request. This property is read-only.
- * @property bool $isOptions Whether this is a OPTIONS request. This property is read-only.
- * @property bool $isPatch Whether this is a PATCH request. This property is read-only.
- * @property bool $isPjax Whether this is a PJAX request. This property is read-only.
- * @property bool $isPost Whether this is a POST request. This property is read-only.
- * @property bool $isPut Whether this is a PUT request. This property is read-only.
- * @property bool $isSecureConnection If the request is sent via secure channel (https). This property is
+ * @property-read bool $isAjax Whether this is an AJAX (XMLHttpRequest) request. This property is read-only.
+ * @property-read bool $isDelete Whether this is a DELETE request. This property is read-only.
+ * @property-read bool $isFlash Whether this is an Adobe Flash or Adobe Flex request. This property is
  * read-only.
- * @property string $method Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The value returned is
- * turned into upper case. This property is read-only.
- * @property string|null $origin URL origin of a CORS request, `null` if not available. This property is
+ * @property-read bool $isGet Whether this is a GET request. This property is read-only.
+ * @property-read bool $isHead Whether this is a HEAD request. This property is read-only.
+ * @property-read bool $isOptions Whether this is a OPTIONS request. This property is read-only.
+ * @property-read bool $isPatch Whether this is a PATCH request. This property is read-only.
+ * @property-read bool $isPjax Whether this is a PJAX request. This property is read-only.
+ * @property-read bool $isPost Whether this is a POST request. This property is read-only.
+ * @property-read bool $isPut Whether this is a PUT request. This property is read-only.
+ * @property-read bool $isSecureConnection If the request is sent via secure channel (https). This property is
+ * read-only.
+ * @property-read string $method Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The value
+ * returned is turned into upper case. This property is read-only.
+ * @property-read string|null $origin URL origin of a CORS request, `null` if not available. This property is
  * read-only.
  * @property string $pathInfo Part of the request URL that is after the entry script and before the question
  * mark. Note, the returned path info is already URL-decoded.
  * @property int $port Port number for insecure requests.
  * @property array $queryParams The request GET parameter values.
- * @property string $queryString Part of the request URL that is after the question mark. This property is
- * read-only.
+ * @property-read string $queryString Part of the request URL that is after the question mark. This property
+ * is read-only.
  * @property string $rawBody The request body.
- * @property string|null $referrer URL referrer, null if not available. This property is read-only.
- * @property string|null $remoteHost Remote host name, `null` if not available. This property is read-only.
- * @property string|null $remoteIP Remote IP address, `null` if not available. This property is read-only.
+ * @property-read string|null $referrer URL referrer, null if not available. This property is read-only.
+ * @property-read string|null $remoteHost Remote host name, `null` if not available. This property is
+ * read-only.
+ * @property-read string|null $remoteIP Remote IP address, `null` if not available. This property is
+ * read-only.
  * @property string $scriptFile The entry script file path.
  * @property string $scriptUrl The relative URL of the entry script.
  * @property int $securePort Port number for secure requests.
- * @property string $serverName Server name, null if not available. This property is read-only.
- * @property int|null $serverPort Server port number, null if not available. This property is read-only.
+ * @property-read string $serverName Server name, null if not available. This property is read-only.
+ * @property-read int|null $serverPort Server port number, null if not available. This property is read-only.
  * @property string $url The currently requested relative URL. Note that the URI returned may be URL-encoded
  * depending on the client.
- * @property string|null $userAgent User agent, null if not available. This property is read-only.
- * @property string|null $userHost User host name, null if not available. This property is read-only.
- * @property string|null $userIP User IP address, null if not available. This property is read-only.
+ * @property-read string|null $userAgent User agent, null if not available. This property is read-only.
+ * @property-read string|null $userHost User host name, null if not available. This property is read-only.
+ * @property-read string|null $userIP User IP address, null if not available. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/Response.php b/src/web/Response.php
index 78e719fefe5..cbeac1ba37f 100644
--- a/src/web/Response.php
+++ b/src/web/Response.php
@@ -37,23 +37,27 @@
  *
  * For more details and usage information on Response, see the [guide article on responses](guide:runtime-responses).
  *
- * @property CookieCollection $cookies The cookie collection. This property is read-only.
- * @property string $downloadHeaders The attachment file name. This property is write-only.
- * @property HeaderCollection $headers The header collection. This property is read-only.
- * @property bool $isClientError Whether this response indicates a client error. This property is read-only.
- * @property bool $isEmpty Whether this response is empty. This property is read-only.
- * @property bool $isForbidden Whether this response indicates the current request is forbidden. This property
- * is read-only.
- * @property bool $isInformational Whether this response is informational. This property is read-only.
- * @property bool $isInvalid Whether this response has a valid [[statusCode]]. This property is read-only.
- * @property bool $isNotFound Whether this response indicates the currently requested resource is not found.
- * This property is read-only.
- * @property bool $isOk Whether this response is OK. This property is read-only.
- * @property bool $isRedirection Whether this response is a redirection. This property is read-only.
- * @property bool $isServerError Whether this response indicates a server error. This property is read-only.
- * @property bool $isSuccessful Whether this response is successful. This property is read-only.
+ * @property-read CookieCollection $cookies The cookie collection. This property is read-only.
+ * @property-write string $downloadHeaders The attachment file name. This property is write-only.
+ * @property-read HeaderCollection $headers The header collection. This property is read-only.
+ * @property-read bool $isClientError Whether this response indicates a client error. This property is
+ * read-only.
+ * @property-read bool $isEmpty Whether this response is empty. This property is read-only.
+ * @property-read bool $isForbidden Whether this response indicates the current request is forbidden. This
+ * property is read-only.
+ * @property-read bool $isInformational Whether this response is informational. This property is read-only.
+ * @property-read bool $isInvalid Whether this response has a valid [[statusCode]]. This property is
+ * read-only.
+ * @property-read bool $isNotFound Whether this response indicates the currently requested resource is not
+ * found. This property is read-only.
+ * @property-read bool $isOk Whether this response is OK. This property is read-only.
+ * @property-read bool $isRedirection Whether this response is a redirection. This property is read-only.
+ * @property-read bool $isServerError Whether this response indicates a server error. This property is
+ * read-only.
+ * @property-read bool $isSuccessful Whether this response is successful. This property is read-only.
  * @property int $statusCode The HTTP status code to send with the response.
- * @property \Exception|\Error $statusCodeByException The exception object. This property is write-only.
+ * @property-write \Exception|\Error|\Throwable $statusCodeByException The exception object. This property is
+ * write-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @author Carsten Brandt <mail@cebe.cc>
@@ -295,7 +299,7 @@ public function setStatusCode($value, $text = null)
 
     /**
      * Sets the response status code based on the exception.
-     * @param \Exception|\Error $e the exception object.
+     * @param \Exception|\Error|\Throwable $e the exception object.
      * @throws InvalidArgumentException if the status code is invalid.
      * @return $this the response object itself
      * @since 2.0.12
@@ -441,7 +445,12 @@ protected function sendContent()
 
         if (is_array($this->stream)) {
             list($handle, $begin, $end) = $this->stream;
-            fseek($handle, $begin);
+
+            // only seek if stream is seekable
+            if ($this->isSeekable($handle)) {
+                fseek($handle, $begin);
+            }
+
             while (!feof($handle) && ($pos = ftell($handle)) <= $end) {
                 if ($pos + $chunkSize > $end) {
                     $chunkSize = $end - $pos + 1;
@@ -583,8 +592,12 @@ public function sendStreamAsFile($handle, $attachmentName, $options = [])
         if (isset($options['fileSize'])) {
             $fileSize = $options['fileSize'];
         } else {
-            fseek($handle, 0, SEEK_END);
-            $fileSize = ftell($handle);
+            if ($this->isSeekable($handle)) {
+                fseek($handle, 0, SEEK_END);
+                $fileSize = ftell($handle);
+            } else {
+                $fileSize = 0;
+            }
         }
 
         $range = $this->getHttpRange($fileSize);
@@ -1089,4 +1102,20 @@ protected function prepare()
             }
         }
     }
+
+    /**
+     * Checks if a stream is seekable
+     *
+     * @param $handle
+     * @return bool
+     */
+    private function isSeekable($handle)
+    {
+        if (!is_resource($handle)) {
+            return true;
+        }
+
+        $metaData = stream_get_meta_data($handle);
+        return isset($metaData['seekable']) && $metaData['seekable'] === true;
+    }
 }
diff --git a/src/web/Session.php b/src/web/Session.php
index fcc8a3a3f7b..03d4ece7c63 100644
--- a/src/web/Session.php
+++ b/src/web/Session.php
@@ -45,27 +45,28 @@
  *
  * For more details and usage information on Session, see the [guide article on sessions](guide:runtime-sessions-cookies).
  *
- * @property array $allFlashes Flash messages (key => message or key => [message1, message2]). This property
- * is read-only.
- * @property string $cacheLimiter Current cache limiter. This property is read-only.
- * @property array $cookieParams The session cookie parameters. This property is read-only.
- * @property int $count The number of session variables. This property is read-only.
- * @property string $flash The key identifying the flash message. Note that flash messages and normal session
- * variables share the same name space. If you have a normal session variable using the same name, its value will
- * be overwritten by this method. This property is write-only.
+ * @property-read array $allFlashes Flash messages (key => message or key => [message1, message2]). This
+ * property is read-only.
+ * @property-read string $cacheLimiter Current cache limiter. This property is read-only.
+ * @property-read array $cookieParams The session cookie parameters. This property is read-only.
+ * @property-read int $count The number of session variables. This property is read-only.
+ * @property-write string $flash The key identifying the flash message. Note that flash messages and normal
+ * session variables share the same name space. If you have a normal session variable using the same name, its
+ * value will be overwritten by this method. This property is write-only.
  * @property float $gCProbability The probability (percentage) that the GC (garbage collection) process is
  * started on every session initialization.
  * @property bool $hasSessionId Whether the current request has sent the session ID.
  * @property string $id The current session ID.
- * @property bool $isActive Whether the session has started. This property is read-only.
- * @property SessionIterator $iterator An iterator for traversing the session variables. This property is
+ * @property-read bool $isActive Whether the session has started. This property is read-only.
+ * @property-read SessionIterator $iterator An iterator for traversing the session variables. This property is
  * read-only.
  * @property string $name The current session name.
  * @property string $savePath The current session save path, defaults to '/tmp'.
  * @property int $timeout The number of seconds after which data will be seen as 'garbage' and cleaned up. The
  * default value is 1440 seconds (or the value of "session.gc_maxlifetime" set in php.ini).
  * @property bool|null $useCookies The value indicating whether cookies should be used to store session IDs.
- * @property bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useCustomStorage Whether to use custom storage. This property is read-only.
+ * @property-read bool $useStrictMode Whether strict mode is enabled or not. This property is read-only.
  * @property bool $useTransparentSessionID Whether transparent sid support is enabled or not, defaults to
  * false.
  *
@@ -74,6 +75,15 @@
  */
 class Session extends Component implements \IteratorAggregate, \ArrayAccess, \Countable
 {
+    /**
+     * @var string|null Holds the original session module (before a custom handler is registered) so that it can be
+     * restored when a Session component without custom handler is used after one that has.
+     */
+    static protected $_originalSessionModule = null;
+    /**
+     * Polyfill for ini directive session.use-strict-mode for PHP < 5.5.2.
+     */
+    static private $_useStrictModePolyfill = false;
     /**
      * @var string the name of the session variable that stores the flash message data.
      */
@@ -83,6 +93,11 @@ class Session extends Component implements \IteratorAggregate, \ArrayAccess, \Co
      */
     public $handler;
 
+    /**
+     * @var string|null Holds the session id in case useStrictMode is enabled and the session id needs to be regenerated
+     */
+    protected $_forceRegenerateId = null;
+
     /**
      * @var array parameter-value pairs to override default session cookie parameters that are used for session_set_cookie_params() function
      * Array may have the following possible keys: 'lifetime', 'path', 'domain', 'secure', 'httponly'
@@ -136,6 +151,11 @@ public function open()
 
         YII_DEBUG ? session_start() : @session_start();
 
+        if ($this->getUseStrictMode() && $this->_forceRegenerateId) {
+            $this->regenerateID();
+            $this->_forceRegenerateId = null;
+        }
+
         if ($this->getIsActive()) {
             Yii::info('Session started', __METHOD__);
             $this->updateFlashCounters();
@@ -152,6 +172,11 @@ public function open()
      */
     protected function registerSessionHandler()
     {
+        $sessionModuleName = session_module_name();
+        if (static::$_originalSessionModule === null) {
+            static::$_originalSessionModule = $sessionModuleName;
+        }
+
         if ($this->handler !== null) {
             if (!is_object($this->handler)) {
                 $this->handler = Yii::createObject($this->handler);
@@ -180,6 +205,12 @@ protected function registerSessionHandler()
                     [$this, 'gcSession']
                 );
             }
+        } elseif (
+            $sessionModuleName !== static::$_originalSessionModule
+            && static::$_originalSessionModule !== null
+            && static::$_originalSessionModule !== 'user'
+        ) {
+            session_module_name(static::$_originalSessionModule);
         }
     }
 
@@ -191,6 +222,8 @@ public function close()
         if ($this->getIsActive()) {
             YII_DEBUG ? session_write_close() : @session_write_close();
         }
+
+        $this->_forceRegenerateId = null;
     }
 
     /**
@@ -514,6 +547,43 @@ public function setTimeout($value)
         $this->unfreeze();
     }
 
+    /**
+     * @var bool Whether strict mode is enabled or not.
+     * When `true` this setting prevents the session component to use an uninitialized session ID.
+     * Note: Enabling `useStrictMode` on PHP < 5.5.2 is only supported with custom storage classes.
+     * Warning! Although enabling strict mode is mandatory for secure sessions, the default value of 'session.use-strict-mode' is `0`.
+     * @see https://www.php.net/manual/en/session.configuration.php#ini.session.use-strict-mode
+     * @since 2.0.38
+     */
+    public function setUseStrictMode($value)
+    {
+        if (PHP_VERSION_ID < 50502) {
+            if ($this->getUseCustomStorage() || !$value) {
+                self::$_useStrictModePolyfill = $value;
+            } else {
+                throw new InvalidConfigException('Enabling `useStrictMode` on PHP < 5.5.2 is only supported with custom storage classes.');
+            }
+        } else {
+            $this->freeze();
+            ini_set('session.use_strict_mode', $value ? '1' : '0');
+            $this->unfreeze();
+        }
+    }
+
+    /**
+     * @return bool Whether strict mode is enabled or not.
+     * @see setUseStrictMode()
+     * @since 2.0.38
+     */
+    public function getUseStrictMode()
+    {
+        if (PHP_VERSION_ID < 50502) {
+            return self::$_useStrictModePolyfill;
+        }
+
+        return (bool)ini_get('session.use_strict_mode');
+    }
+
     /**
      * Session open handler.
      * This method should be overridden if [[useCustomStorage]] returns true.
diff --git a/src/web/UploadedFile.php b/src/web/UploadedFile.php
index 7a97b30c7b8..ed8fa111b89 100644
--- a/src/web/UploadedFile.php
+++ b/src/web/UploadedFile.php
@@ -22,10 +22,10 @@
  *
  * For more details and usage information on UploadedFile, see the [guide article on handling uploads](guide:input-file-upload).
  *
- * @property string $baseName Original file base name. This property is read-only.
- * @property string $extension File extension. This property is read-only.
- * @property bool $hasError Whether there is an error with the uploaded file. Check [[error]] for detailed
- * error code information. This property is read-only.
+ * @property-read string $baseName Original file base name. This property is read-only.
+ * @property-read string $extension File extension. This property is read-only.
+ * @property-read bool $hasError Whether there is an error with the uploaded file. Check [[error]] for
+ * detailed error code information. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/UrlRule.php b/src/web/UrlRule.php
index 2f0582350fb..25d3cd81faf 100644
--- a/src/web/UrlRule.php
+++ b/src/web/UrlRule.php
@@ -24,8 +24,8 @@
  * ]
  * ```
  *
- * @property null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call. `null`
- * if rule does not provide info about create status. This property is read-only.
+ * @property-read null|int $createUrlStatus Status of the URL creation after the last [[createUrl()]] call.
+ * `null` if rule does not provide info about create status. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/User.php b/src/web/User.php
index 3e4db6a9ef1..db1935fe605 100644
--- a/src/web/User.php
+++ b/src/web/User.php
@@ -47,13 +47,13 @@
  * ]
  * ```
  *
- * @property string|int $id The unique identifier for the user. If `null`, it means the user is a guest. This
- * property is read-only.
+ * @property-read string|int $id The unique identifier for the user. If `null`, it means the user is a guest.
+ * This property is read-only.
  * @property IdentityInterface|null $identity The identity object associated with the currently logged-in
  * user. `null` is returned if the user is not logged in (not authenticated).
- * @property bool $isGuest Whether the current user is a guest. This property is read-only.
+ * @property-read bool $isGuest Whether the current user is a guest. This property is read-only.
  * @property string $returnUrl The URL that the user should be redirected to after login. Note that the type
- * of this property differs in getter and setter. See [[getReturnUrl()]] and [[setReturnUrl()]] for details.
+ * of this property differs in getter and setter. See [[getReturnUrl()]]  and [[setReturnUrl()]] for details.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/src/web/View.php b/src/web/View.php
index 626d7a86d52..c77f59fba7a 100644
--- a/src/web/View.php
+++ b/src/web/View.php
@@ -479,15 +479,16 @@ private function registerFile($type, $url, $options = [], $key = null)
         $url = Yii::getAlias($url);
         $key = $key ?: $url;
         $depends = ArrayHelper::remove($options, 'depends', []);
+        $originalOptions = $options;
         $position = ArrayHelper::remove($options, 'position', self::POS_END);
 
         try {
-            $asssetManagerAppendTimestamp = $this->getAssetManager()->appendTimestamp;
+            $assetManagerAppendTimestamp = $this->getAssetManager()->appendTimestamp;
         } catch (InvalidConfigException $e) {
             $depends = null; // the AssetManager is not available
-            $asssetManagerAppendTimestamp = false;
+            $assetManagerAppendTimestamp = false;
         }
-        $appendTimestamp = ArrayHelper::remove($options, 'appendTimestamp', $asssetManagerAppendTimestamp);
+        $appendTimestamp = ArrayHelper::remove($options, 'appendTimestamp', $assetManagerAppendTimestamp);
 
         if (empty($depends)) {
             // register directly without AssetManager
@@ -504,7 +505,7 @@ private function registerFile($type, $url, $options = [], $key = null)
                 'class' => AssetBundle::className(),
                 'baseUrl' => '',
                 'basePath' => '@webroot',
-                (string)$type => [!Url::isRelative($url) ? $url : ltrim($url, '/')],
+                (string)$type => [ArrayHelper::merge([!Url::isRelative($url) ? $url : ltrim($url, '/')], $originalOptions)],
                 "{$type}Options" => $options,
                 'depends' => (array)$depends,
             ]);
diff --git a/src/widgets/FragmentCache.php b/src/widgets/FragmentCache.php
index d9bed1f1b93..e30e997218c 100644
--- a/src/widgets/FragmentCache.php
+++ b/src/widgets/FragmentCache.php
@@ -18,8 +18,8 @@
 /**
  * FragmentCache is used by [[\yii\base\View]] to provide caching of page fragments.
  *
- * @property string|false $cachedContent The cached content. False is returned if valid content is not found
- * in the cache. This property is read-only.
+ * @property-read string|false $cachedContent The cached content. False is returned if valid content is not
+ * found in the cache. This property is read-only.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
  * @since 2.0
diff --git a/package.json b/package.json
index 8596f2e04fe..e102ef18079 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,7 @@
     "sinon": "^1.17.6"
   },
   "scripts": {
-    "test": "./node_modules/.bin/mocha tests/js/tests/*.test.js --timeout 0"
+    "test": "./node_modules/.bin/mocha tests/js/tests/*.test.js --timeout 0 --colors"
   },
   "repository": {
     "type": "git",
diff --git a/tests/data/console/migrate_create/create_fields_with_col_method_after_default_value.php b/tests/data/console/migrate_create/create_fields_with_col_method_after_default_value.php
new file mode 100644
index 00000000000..8d8a579bb39
--- /dev/null
+++ b/tests/data/console/migrate_create/create_fields_with_col_method_after_default_value.php
@@ -0,0 +1,42 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+return <<<CODE
+<?php
+
+{$namespace}use yii\db\Migration;
+
+/**
+ * Handles the creation of table `{{%test}}`.
+ */
+class {$class} extends Migration
+{
+    /**
+     * {@inheritdoc}
+     */
+    public function safeUp()
+    {
+        \$this->createTable('{{%test}}', [
+            'id' => \$this->primaryKey(),
+            'title' => \$this->string(10)->notNull()->unique()->defaultValue("test")->after("id"),
+            'body' => \$this->text()->notNull()->defaultValue("test")->after("title"),
+            'address' => \$this->text()->notNull()->defaultValue("test")->after("body"),
+            'address2' => \$this->text()->notNull()->defaultValue('te:st')->after("address"),
+            'address3' => \$this->text()->notNull()->defaultValue(':te:st:')->after("address2"),
+        ]);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function safeDown()
+    {
+        \$this->dropTable('{{%test}}');
+    }
+}
+
+CODE;
diff --git a/tests/data/validators/models/FakedValidationModel.php b/tests/data/validators/models/FakedValidationModel.php
index 5933ac90754..bb74d969e4d 100644
--- a/tests/data/validators/models/FakedValidationModel.php
+++ b/tests/data/validators/models/FakedValidationModel.php
@@ -44,14 +44,14 @@ public function rules()
         ];
     }
 
-    public function inlineVal($attribute, $params = [], $validator, $current)
+    public function inlineVal($attribute, $params, $validator, $current)
     {
         $this->inlineValArgs = \func_get_args();
 
         return true;
     }
 
-    public function clientInlineVal($attribute, $params = [], $validator, $current)
+    public function clientInlineVal($attribute, $params, $validator, $current)
     {
         return \func_get_args();
     }
diff --git a/tests/framework/base/ModelTest.php b/tests/framework/base/ModelTest.php
index 4fedffb4dc7..428f3fb1b91 100644
--- a/tests/framework/base/ModelTest.php
+++ b/tests/framework/base/ModelTest.php
@@ -322,8 +322,8 @@ public function testErrors()
             'lastName' => ['Another one!'],
         ], $speaker->getErrors());
 
-        $this->assertEquals(['Another one!', 'Something is wrong!', 'Totally wrong!'], $speaker->getErrorSummary(true));
-        $this->assertEquals(['Another one!', 'Something is wrong!'], $speaker->getErrorSummary(false));
+        $this->assertEquals(['Something is wrong!', 'Totally wrong!', 'Another one!'], $speaker->getErrorSummary(true));
+        $this->assertEquals(['Something is wrong!', 'Another one!'], $speaker->getErrorSummary(false));
 
         $speaker->clearErrors('firstName');
         $this->assertEquals([
diff --git a/tests/framework/caching/FileCacheTest.php b/tests/framework/caching/FileCacheTest.php
index 3f19ee6aca3..55f2fcad1ea 100644
--- a/tests/framework/caching/FileCacheTest.php
+++ b/tests/framework/caching/FileCacheTest.php
@@ -53,6 +53,36 @@ public function testExpireAdd()
         $this->assertFalse($cache->get('expire_testa'));
     }
 
+    public function testKeyPrefix()
+    {
+        $keyPrefix = 'foobar';
+        $key = uniqid('uid-cache_');
+        $cache = $this->getCacheInstance();
+        $cache->flush();
+
+        $cache->directoryLevel = 1;
+        $cache->keyPrefix = $keyPrefix;
+        $normalizeKey = $cache->buildKey($key);
+        $expectedDirectoryName = substr($normalizeKey, 6, 2);
+
+        $value = \time();
+
+        $refClass = new \ReflectionClass($cache);
+
+        $refMethodGetCacheFile = $refClass->getMethod('getCacheFile');
+        $refMethodGetCacheFile->setAccessible(true);
+        $refMethodGet = $refClass->getMethod('get');
+        $refMethodSet = $refClass->getMethod('set');
+
+        $cacheFile = $refMethodGetCacheFile->invoke($cache, $normalizeKey);
+
+        $this->assertTrue($refMethodSet->invoke($cache, $key, $value));
+        $this->assertContains($keyPrefix, basename($cacheFile));
+        $this->assertEquals($expectedDirectoryName, basename(dirname($cacheFile)), $cacheFile);
+        $this->assertTrue(is_dir(dirname($cacheFile)), 'File not found ' . $cacheFile);
+        $this->assertEquals($value, $refMethodGet->invoke($cache, $key));
+    }
+
     public function testCacheRenewalOnDifferentOwnership()
     {
         $TRAVIS_SECOND_USER = getenv('TRAVIS_SECOND_USER');
diff --git a/tests/framework/console/controllers/MigrateControllerTest.php b/tests/framework/console/controllers/MigrateControllerTest.php
index 4f3e1ea5301..76ba005dfe6 100644
--- a/tests/framework/console/controllers/MigrateControllerTest.php
+++ b/tests/framework/console/controllers/MigrateControllerTest.php
@@ -131,6 +131,14 @@ public function generateMigrationDataProvider()
                     price:money(11,2):notNull,
                     parenthesis_in_comment:string(255):notNull:comment(\'Name of set (RU)\')',
             ],
+            'create_fields_with_col_method_after_default_value' => [
+                'fields' => 'id:primaryKey,
+                    title:string(10):notNull:unique:defaultValue("test"):after("id"),
+                    body:text:notNull:defaultValue("test"):after("title"),
+                    address:text:notNull:defaultValue("test"):after("body"),
+                    address2:text:notNull:defaultValue(\'te:st\'):after("address"),
+                    address3:text:notNull:defaultValue(\':te:st:\'):after("address2")',
+            ],
             'create_title_pk' => [
                 'fields' => 'title:primaryKey,body:text:notNull,price:money(11,2)',
             ],
@@ -236,6 +244,9 @@ public function generateMigrationDataProvider()
             ['create_title_with_comma_default_values', 'create_test_table', 'test', $params['create_title_with_comma_default_values']],
             ['create_field_with_colon_default_values', 'create_test_table', 'test', $params['create_field_with_colon_default_values']],
 
+            // @see https://github.com/yiisoft/yii2/issues/18303
+            ['create_fields_with_col_method_after_default_value', 'create_test_table', 'test', $params['create_fields_with_col_method_after_default_value']],
+
             ['drop_test', 'drop_test_table', 'test', []],
             ['drop_test', 'drop_test__table', 'test_', []],
             ['drop_test', 'drop_TEST_table', 'TEST', []],
diff --git a/tests/framework/console/widgets/TableTest.php b/tests/framework/console/widgets/TableTest.php
index 76335d135dc..59cf4bab17b 100644
--- a/tests/framework/console/widgets/TableTest.php
+++ b/tests/framework/console/widgets/TableTest.php
@@ -379,4 +379,150 @@ public function testCalculateRowHeightShouldNotThrowDivisionByZeroException()
         ]);
         $this->assertEqualsWithoutLE($table, $table);
     }
+
+    public function testLineBreakTableCell()
+    {
+        $table = new Table();
+
+        $expected = <<<"EXPECTED"
+╔══════════════════════╗
+║ test                 ║
+╟──────────────────────╢
+║ AAAAAAAAAAAAAAAAAAAA ║
+║ BBBBBBBBBBBBBBBBBBBB ║
+║ CCCCC                ║
+╟──────────────────────╢
+║ • AAAAAAAAAAAAAAAAAA ║
+║ BBBBBBB              ║
+║ • CCCCCCCCCCCCCCCCCC ║
+║ DDDDDDD              ║
+╚══════════════════════╝
+
+EXPECTED;
+
+        $this->assertEqualsWithoutLE(
+            $expected,
+            $table->setHeaders(['test'])
+                ->setRows([
+                    ['AAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBCCCCC'],
+                    [[
+                        'AAAAAAAAAAAAAAAAAABBBBBBB',
+                        'CCCCCCCCCCCCCCCCCCDDDDDDD',
+                    ]],
+                ])
+                ->setScreenWidth(25)
+                ->run()
+        );
+    }
+
+    public function testColorizedLineBreakTableCell()
+    {
+        $table = new Table();
+
+        $expected = <<<"EXPECTED"
+╔══════════════════════╗
+║ test                 ║
+╟──────────────────────╢
+║ \e[33mAAAAAAAAAAAAAAAAAAAA\e[0m ║
+║ \e[33mBBBBBBBBBBBBBBBBBBBB\e[0m ║
+║ \e[33mCCCCC\e[0m                ║
+╟──────────────────────╢
+║ \e[31mAAAAAAAAAAAAAAAAAAAA\e[0m ║
+║ \e[32mBBBBBBBBBBBBBBBBBBBB\e[0m ║
+║ \e[34mCCCCC\e[0m                ║
+╟──────────────────────╢
+║ • \e[31mAAAAAAAAAAAAAAAAAA\e[0m ║
+║ \e[31mBBBBBBB\e[0m              ║
+║ • \e[33mCCCCCCCCCCCCCCCCCC\e[0m ║
+║ \e[33mDDDDDDD\e[0m              ║
+╟──────────────────────╢
+║ • \e[35mAAAAAAAAAAAAAAAAAA\e[0m ║
+║ \e[31mBBBBBBB\e[0m              ║
+║ • \e[32mCCCCCCCCCCCCCCCCCC\e[0m ║
+║ \e[34mDDDDDDD\e[0m              ║
+╚══════════════════════╝
+
+EXPECTED;
+
+        $this->assertEqualsWithoutLE(
+            $expected,
+            $table->setHeaders(['test'])
+                ->setRows([
+                    [Console::renderColoredString('%yAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBCCCCC%n')],
+                    [Console::renderColoredString('%rAAAAAAAAAAAAAAAAAAAA%gBBBBBBBBBBBBBBBBBBBB%bCCCCC%n')],
+                    [[
+                        Console::renderColoredString('%rAAAAAAAAAAAAAAAAAABBBBBBB%n'),
+                        Console::renderColoredString('%yCCCCCCCCCCCCCCCCCCDDDDDDD%n'),
+                    ]],
+                    [[
+                        Console::renderColoredString('%mAAAAAAAAAAAAAAAAAA%rBBBBBBB%n'),
+                        Console::renderColoredString('%gCCCCCCCCCCCCCCCCCC%bDDDDDDD%n'),
+                    ]],
+                ])
+                ->setScreenWidth(25)
+                ->run()
+        );
+    }
+
+    /**
+     * @param $smallString
+     * @dataProvider dataMinimumWidth
+     */
+    public function testMinimumWidth($smallString)
+    {
+        $bigString = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
+
+        (new Table())
+            ->setHeaders(['t1', 't2', ''])
+            ->setRows([
+                [$bigString, $bigString, $smallString],
+            ])
+            ->setScreenWidth(20)
+            ->run();
+
+        // Without exceptions
+        $this->assertTrue(true);
+    }
+
+    public function dataMinimumWidth()
+    {
+        return [
+            ['X'],
+            [''],
+            [['X', 'X', 'X']],
+            [[]],
+            [['']]
+        ];
+    }
+
+    public function testTableWithAnsiFormat()
+    {
+        $table = new Table();
+
+        // test fullwidth chars
+        // @see https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms
+        $expected = <<<EXPECTED
+╔═══════════════╤═══════════════╤═══════════════╗
+║ test1         │ test2         │ \e[31mtest3\e[0m         ║
+╟───────────────┼───────────────┼───────────────╢
+║ \e[34mtestcontent11\e[0m │ \e[33mtestcontent12\e[0m │ testcontent13 ║
+╟───────────────┼───────────────┼───────────────╢
+║ testcontent21 │ testcontent22 │ • a           ║
+║               │               │ • \e[35mb\e[0m           ║
+║               │               │ • \e[32mc\e[0m           ║
+╚═══════════════╧═══════════════╧═══════════════╝
+
+EXPECTED;
+
+        $this->assertEqualsWithoutLE($expected, $table->setHeaders(['test1', 'test2', Console::ansiFormat('test3', [Console::FG_RED])])
+            ->setRows([
+                [Console::ansiFormat('testcontent11', [Console::FG_BLUE]), Console::ansiFormat('testcontent12', [Console::FG_YELLOW]), 'testcontent13'],
+                ['testcontent21', 'testcontent22', [
+                    'a',
+                    Console::ansiFormat('b', [Console::FG_PURPLE]),
+                    Console::ansiFormat('c', [Console::FG_GREEN]),
+                ]],
+            ])->setScreenWidth(200)->run()
+        );
+    }
 }
diff --git a/tests/framework/data/ActiveDataFilterTest.php b/tests/framework/data/ActiveDataFilterTest.php
index 179f59295c9..7e22c9ddbbc 100644
--- a/tests/framework/data/ActiveDataFilterTest.php
+++ b/tests/framework/data/ActiveDataFilterTest.php
@@ -134,6 +134,29 @@ public function dataProviderBuild()
                     ],
                 ],
             ],
+            [
+                [
+                    'name' => 'NULL',
+                    'number' => 'NULL',
+                    'price' => 'NULL',
+                    'tags' => ['NULL'],
+                ],
+                [
+                    'AND',
+                    ['name' => ''],
+                    ['number' => null],
+                    ['price' => null],
+                    ['tags' => [null]],
+                ],
+            ],
+            [
+                [
+                    'number' => [
+                        'neq' => 'NULL'
+                    ],
+                ],
+                ['!=', 'number', null],
+            ],
         ];
     }
 
diff --git a/tests/framework/data/DataFilterTest.php b/tests/framework/data/DataFilterTest.php
index e29546eaf95..24908539808 100644
--- a/tests/framework/data/DataFilterTest.php
+++ b/tests/framework/data/DataFilterTest.php
@@ -225,6 +225,31 @@ public function dataProviderValidate()
                 true,
                 [],
             ],
+            [
+                [
+                    'name' => [
+                        'eq' => 'NULL',
+                    ],
+                ],
+                true,
+                [],
+            ],
+            [
+                [
+                    'name' => 'NULL',
+                ],
+                true,
+                [],
+            ],
+            [
+                [
+                    'name' => [
+                        'neq' => 'NULL',
+                    ],
+                ],
+                true,
+                [],
+            ],
         ];
     }
 
@@ -363,6 +388,14 @@ public function dataProviderNormalize()
                     'datetime' => '2015-06-06 17:46:12',
                 ],
             ],
+            [
+                [
+                    'name' => 'NULL',
+                ],
+                [
+                    'name' => null,
+                ],
+            ],
         ];
     }
 
@@ -403,6 +436,15 @@ public function testNormalize($filter, $expectedResult)
         $this->assertEquals($expectedResult, $builder->normalize(false));
     }
 
+    public function testNormalizeNonDefaultNull()
+    {
+        $builder = new DataFilter();
+        $builder->nullValue = 'abcde';
+        $builder->setSearchModel((new DynamicModel(['name' => null]))->addRule('name', 'string'));
+        $builder->filter = ['name' => 'abcde'];
+        $this->assertEquals(['name' => null], $builder->normalize(false));
+    }
+
     public function testSetupErrorMessages()
     {
         $builder = new DataFilter();
diff --git a/tests/framework/data/PaginationTest.php b/tests/framework/data/PaginationTest.php
index 98bc9ecfbc8..5f2d3488f8f 100644
--- a/tests/framework/data/PaginationTest.php
+++ b/tests/framework/data/PaginationTest.php
@@ -8,6 +8,7 @@
 namespace yiiunit\framework\data;
 
 use yii\data\Pagination;
+use yii\web\Link;
 use yiiunit\TestCase;
 
 /**
@@ -58,6 +59,13 @@ public function dataProviderCreateUrl()
                 '/index.php?r=item%2Flist&q=test&page=3&per-page=5',
                 ['q' => 'test'],
             ],
+            [
+                1,
+                10,
+                '/index.php?r=item%2Flist&page=2&per-page=10',
+                null,
+                true,
+            ],
         ];
     }
 
@@ -68,13 +76,14 @@ public function dataProviderCreateUrl()
      * @param int $pageSize
      * @param string $expectedUrl
      * @param array $params
+     * @param bool $absolute
      */
-    public function testCreateUrl($page, $pageSize, $expectedUrl, $params)
+    public function testCreateUrl($page, $pageSize, $expectedUrl, $params, $absolute = false)
     {
         $pagination = new Pagination();
         $pagination->route = 'item/list';
         $pagination->params = $params;
-        $this->assertEquals($expectedUrl, $pagination->createUrl($page, $pageSize));
+        $this->assertEquals($expectedUrl, $pagination->createUrl($page, $pageSize, $absolute));
     }
 
     /**
@@ -105,4 +114,312 @@ public function testValidatePage()
         $pagination->setPage(999, false);
         $this->assertEquals(999, $pagination->getPage());
     }
+
+    public function dataProviderPageCount()
+    {
+        return [
+            [0, 0, 0],
+            [0, 1, 1],
+            [-1, 0, 0],
+            [-1, 1, 1],
+            [1, -1, 0],
+            [1, 0, 0],
+            [1, 1, 1],
+            [10, 10, 1],
+            [10, 20, 2],
+            [2, 15, 8],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderPageCount
+     *
+     * @param int $pageSize
+     * @param int $totalCount
+     * @param int $pageCount
+     */
+    public function testPageCount($pageSize, $totalCount, $pageCount)
+    {
+        $pagination = new Pagination();
+        $pagination->setPageSize($pageSize);
+        $pagination->totalCount = $totalCount;
+
+        $this->assertEquals($pageCount, $pagination->getPageCount());
+    }
+
+    public function testGetDefaultPage()
+    {
+        $this->assertEquals(0, (new Pagination())->getPage());
+    }
+
+    public function dataProviderSetPage()
+    {
+        return [
+            [null, false, 0, null],
+            [null, true, 0, null],
+            [0, false, 0, 0],
+            [0, true, 0, 0],
+            [-1, false, 0, 0],
+            [-1, true, 0, 0],
+            [1, false, 0, 1],
+            [1, true, 0, 0],
+            [2, false, 10, 2],
+            [2, true, 10, 0],
+            [2, false, 40, 2],
+            [2, true, 40, 1],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderSetPage
+     *
+     * @param int|null $value
+     * @param bool $validate
+     * @param int $totalCount
+     * @param int $page
+     */
+    public function testSetPage($value, $validate, $totalCount, $page)
+    {
+        $pagination = new Pagination();
+        $pagination->totalCount = $totalCount;
+        $pagination->setPage($value, $validate);
+
+        $this->assertEquals($page, $pagination->getPage());
+    }
+
+    public function dataProviderGetPageSize()
+    {
+        return [
+            [[1, 50], 20],
+            [[], 20],
+            [[1], 20],
+            [['a' => 1, 50], 20],
+            [['a' => 1, 'b' => 50], 20],
+            [[2, 10], 10],
+            [[30, 100], 30],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderGetPageSize
+     *
+     * @param array|bool $pageSizeLimit
+     * @param int $pageSize
+     */
+    public function testGetPageSize($pageSizeLimit, $pageSize)
+    {
+        $pagination = new Pagination();
+        $pagination->pageSizeLimit = $pageSizeLimit;
+
+        $this->assertEquals($pageSize, $pagination->getPageSize());
+    }
+
+    public function dataProviderSetPageSize()
+    {
+        return [
+            [null, false, false, 20],
+            [null, true, false, 20],
+            [null, false, [1, 50], 20],
+            [null, true, [1, 50], 20],
+            [1, false, false, 1],
+            [1, true, false, 1],
+            [1, false, [1, 50], 1],
+            [1, true, [1, 50], 1],
+            [10, false, [20, 50], 10],
+            [10, true, [20, 50], 20],
+            [40, false, [1, 20], 40],
+            [40, true, [1, 20], 20],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderSetPageSize
+     *
+     * @param int|null $value
+     * @param bool $validate
+     * @param array|false $pageSizeLimit
+     * @param int $pageSize
+     */
+    public function testSetPageSize($value, $validate, $pageSizeLimit, $pageSize)
+    {
+        $pagination = new Pagination();
+        $pagination->pageSizeLimit = $pageSizeLimit;
+        $pagination->setPageSize($value, $validate);
+
+        $this->assertEquals($pageSize, $pagination->getPageSize());
+    }
+
+    public function dataProviderGetOffset()
+    {
+        return [
+            [0, 0, 0],
+            [0, 1, 0],
+            [1, 1, 1],
+            [1, 2, 2],
+            [10, 2, 20],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderGetOffset
+     *
+     * @param int $pageSize
+     * @param int $page
+     * @param int $offset
+     */
+    public function testGetOffset($pageSize, $page, $offset)
+    {
+        $pagination = new Pagination();
+        $pagination->setPageSize($pageSize);
+        $pagination->setPage($page);
+
+        $this->assertEquals($offset, $pagination->getOffset());
+    }
+
+    public function dataProviderGetLimit()
+    {
+        return [
+            [0, -1],
+            [1, 1],
+            [2, 2],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderGetLimit
+     *
+     * @param int $pageSize
+     * @param int $limit
+     */
+    public function testGetLimit($pageSize, $limit)
+    {
+        $pagination = new Pagination();
+        $pagination->setPageSize($pageSize);
+
+        $this->assertEquals($limit, $pagination->getLimit());
+    }
+
+    public function dataProviderGetLinks()
+    {
+        return [
+            [0, 0, 0, '/index.php?r=list&page=1&per-page=0', null, null, null, null],
+            [1, 0, 0, '/index.php?r=list&page=1&per-page=0', null, null, null, null],
+            [
+                0,
+                0,
+                1,
+                '/index.php?r=list&page=1&per-page=0',
+                '/index.php?r=list&page=1&per-page=0',
+                '/index.php?r=list&page=1&per-page=0',
+                null,
+                null,
+            ],
+            [
+                1,
+                0,
+                1,
+                '/index.php?r=list&page=1&per-page=0',
+                '/index.php?r=list&page=1&per-page=0',
+                '/index.php?r=list&page=1&per-page=0',
+                null,
+                null,
+            ],
+            [
+                0,
+                1,
+                1,
+                '/index.php?r=list&page=1&per-page=1',
+                '/index.php?r=list&page=1&per-page=1',
+                '/index.php?r=list&page=1&per-page=1',
+                null,
+                null,
+            ],
+            [
+                1,
+                1,
+                1,
+                '/index.php?r=list&page=1&per-page=1',
+                '/index.php?r=list&page=1&per-page=1',
+                '/index.php?r=list&page=1&per-page=1',
+                null,
+                null,
+            ],
+            [
+                0,
+                5,
+                10,
+                '/index.php?r=list&page=1&per-page=5',
+                '/index.php?r=list&page=1&per-page=5',
+                '/index.php?r=list&page=2&per-page=5',
+                null,
+                '/index.php?r=list&page=2&per-page=5',
+            ],
+            [
+                1,
+                5,
+                10,
+                '/index.php?r=list&page=2&per-page=5',
+                '/index.php?r=list&page=1&per-page=5',
+                '/index.php?r=list&page=2&per-page=5',
+                '/index.php?r=list&page=1&per-page=5',
+                null,
+            ],
+            [
+                1,
+                5,
+                15,
+                '/index.php?r=list&page=2&per-page=5',
+                '/index.php?r=list&page=1&per-page=5',
+                '/index.php?r=list&page=3&per-page=5',
+                '/index.php?r=list&page=1&per-page=5',
+                '/index.php?r=list&page=3&per-page=5',
+            ],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProviderGetLinks
+     *
+     * @param int $page
+     * @param int $pageSize
+     * @param int $totalCount
+     * @param string $self
+     * @param string|null $first
+     * @param string|null $last
+     * @param string|null $prev
+     * @param string|null $next
+     */
+    public function testGetLinks($page, $pageSize, $totalCount, $self, $first, $last, $prev, $next)
+    {
+        $pagination = new Pagination();
+        $pagination->totalCount = $totalCount;
+        $pagination->route = 'list';
+        $pagination->setPageSize($pageSize);
+        $pagination->setPage($page, true);
+
+        $links = $pagination->getLinks();
+
+        $this->assertSame($self, $links[Link::REL_SELF]);
+
+        if ($first) {
+            $this->assertSame($first, $links[Pagination::LINK_FIRST]);
+        } else {
+            $this->assertArrayNotHasKey(Pagination::LINK_FIRST, $links);
+        }
+        if ($last) {
+            $this->assertSame($last, $links[Pagination::LINK_LAST]);
+        } else {
+            $this->assertArrayNotHasKey(Pagination::LINK_LAST, $links);
+        }
+        if ($prev) {
+            $this->assertSame($prev, $links[Pagination::LINK_PREV]);
+        } else {
+            $this->assertArrayNotHasKey(Pagination::LINK_PREV, $links);
+        }
+        if ($next) {
+            $this->assertSame($next, $links[Pagination::LINK_NEXT]);
+        } else {
+            $this->assertArrayNotHasKey(Pagination::LINK_NEXT, $links);
+        }
+    }
 }
diff --git a/tests/framework/db/ActiveQueryModelConnectionTest.php b/tests/framework/db/ActiveQueryModelConnectionTest.php
new file mode 100644
index 00000000000..fdef6d55b2c
--- /dev/null
+++ b/tests/framework/db/ActiveQueryModelConnectionTest.php
@@ -0,0 +1,78 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\db;
+
+use yii\db\ActiveQuery;
+use yii\db\ActiveRecord as DefaultActiveRecord;
+use yiiunit\data\ar\ActiveRecord;
+use yiiunit\TestCase;
+
+class ActiveQueryModelConnectionTest extends TestCase
+{
+    private $globalConnection;
+    private $modelConnection;
+
+    protected function setUp()
+    {
+        $this->globalConnection = $this->getMockBuilder('yii\db\Connection')->getMock();
+        $this->modelConnection = $this->getMockBuilder('yii\db\Connection')->getMock();
+
+        $this->mockApplication([
+            'components' => [
+                'db' => $this->globalConnection
+            ]
+        ]);
+
+        ActiveRecord::$db = $this->modelConnection;
+    }
+
+    private function prepareConnectionMock($connection)
+    {
+        $command = $this->getMockBuilder('yii\db\Command')->getMock();
+        $command->method('queryOne')->willReturn(false);
+        $connection->method('createCommand')->willReturn($command);
+        $builder = $this->getMockBuilder('yii\db\QueryBuilder')->disableOriginalConstructor()->getMock();
+        $connection->expects($this->once())->method('getQueryBuilder')->willReturn($builder);
+    }
+
+    public function testEnsureModelConnectionForOne()
+    {
+        $this->globalConnection->expects($this->never())->method('getQueryBuilder');
+        $this->prepareConnectionMock($this->modelConnection);
+
+        $query = new ActiveQuery(ActiveRecord::className());
+        $query->one();
+    }
+
+    public function testEnsureGlobalConnectionForOne()
+    {
+        $this->modelConnection->expects($this->never())->method('getQueryBuilder');
+        $this->prepareConnectionMock($this->globalConnection);
+
+        $query = new ActiveQuery(DefaultActiveRecord::className());
+        $query->one();
+    }
+
+    public function testEnsureModelConnectionForAll()
+    {
+        $this->globalConnection->expects($this->never())->method('getQueryBuilder');
+        $this->prepareConnectionMock($this->modelConnection);
+
+        $query = new ActiveQuery(ActiveRecord::className());
+        $query->all();
+    }
+
+    public function testEnsureGlobalConnectionForAll()
+    {
+        $this->modelConnection->expects($this->never())->method('getQueryBuilder');
+        $this->prepareConnectionMock($this->globalConnection);
+
+        $query = new ActiveQuery(DefaultActiveRecord::className());
+        $query->all();
+    }
+}
diff --git a/tests/framework/db/ActiveRecordTest.php b/tests/framework/db/ActiveRecordTest.php
index 7e5a2d7d147..1599d987e93 100644
--- a/tests/framework/db/ActiveRecordTest.php
+++ b/tests/framework/db/ActiveRecordTest.php
@@ -1893,24 +1893,24 @@ public function testLegalValuesForFindByCondition($modelClassName, $validFilter)
     public function illegalValuesForFindByCondition()
     {
         return [
-            [Customer::className(), ['id' => ['`id`=`id` and 1' => 1]]],
-            [Customer::className(), ['id' => [
+            [Customer::className(), [['`id`=`id` and 1' => 1]]],
+            [Customer::className(), [[
                 'legal' => 1,
                 '`id`=`id` and 1' => 1,
             ]]],
-            [Customer::className(), ['id' => [
+            [Customer::className(), [[
                 'nested_illegal' => [
                     'false or 1=' => 1
                 ]
             ]]],
             [Customer::className(), [['true--' => 1]]],
 
-            [CustomerWithAlias::className(), ['csr.id' => ['`csr`.`id`=`csr`.`id` and 1' => 1]]],
-            [CustomerWithAlias::className(), ['csr.id' => [
+            [CustomerWithAlias::className(), [['`csr`.`id`=`csr`.`id` and 1' => 1]]],
+            [CustomerWithAlias::className(), [[
                 'legal' => 1,
                 '`csr`.`id`=`csr`.`id` and 1' => 1,
             ]]],
-            [CustomerWithAlias::className(), ['csr.id' => [
+            [CustomerWithAlias::className(), [[
                 'nested_illegal' => [
                     'false or 1=' => 1
                 ]
diff --git a/tests/framework/db/mssql/ActiveRecordTest.php b/tests/framework/db/mssql/ActiveRecordTest.php
index 086938807f6..f29cab5964f 100644
--- a/tests/framework/db/mssql/ActiveRecordTest.php
+++ b/tests/framework/db/mssql/ActiveRecordTest.php
@@ -56,4 +56,28 @@ public function testSaveWithTrigger()
         $testRecord = TestTriggerAlert::findOne(1);
         $this->assertEquals('test', $testRecord->stringcol);
     }
+
+    /**
+     * @throws \yii\db\Exception
+     */
+    public function testSaveWithComputedColumn()
+    {
+        $db = $this->getConnection();
+
+        $sql = 'CREATE OR ALTER FUNCTION TESTFUNC(@Number INT)
+RETURNS VARCHAR(15)
+AS
+BEGIN
+      RETURN (SELECT TRY_CONVERT(VARCHAR(15),@Number))
+END';
+        $db->createCommand($sql)->execute();
+
+        $sql = 'ALTER TABLE [dbo].[test_trigger] ADD [computed_column] AS dbo.TESTFUNC([ID])';
+        $db->createCommand($sql)->execute();
+
+        $record = new TestTrigger();
+        $record->stringcol = 'test';
+        $this->assertTrue($record->save(false));
+        $this->assertEquals(1, $record->id);
+    }
 }
diff --git a/tests/framework/db/mssql/QueryBuilderTest.php b/tests/framework/db/mssql/QueryBuilderTest.php
index 92eb0181114..99eb3f29510 100644
--- a/tests/framework/db/mssql/QueryBuilderTest.php
+++ b/tests/framework/db/mssql/QueryBuilderTest.php
@@ -277,7 +277,7 @@ public function insertProvider()
                 ],
                 [],
                 $this->replaceQuotes('SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [email] varchar(128) , [name] varchar(128) NULL, [address] text NULL, [status] int NULL, [profile_id] int NULL);' .
-                    'INSERT INTO [[customer]] ([[email]], [[name]], [[address]], [[is_active]], [[related_id]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp0, :qp1, :qp2, :qp3, :qp4);' .
+                    'INSERT INTO [customer] ([email], [name], [address], [is_active], [related_id]) OUTPUT INSERTED.id,INSERTED.email,INSERTED.name,INSERTED.address,INSERTED.status,INSERTED.profile_id INTO @temporary_inserted VALUES (:qp0, :qp1, :qp2, :qp3, :qp4);' .
                     'SELECT * FROM @temporary_inserted'),
                 [
                     ':qp0' => 'test@example.com',
@@ -295,7 +295,7 @@ public function insertProvider()
                 ],
                 [],
                 'SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([int_col] int , [int_col2] int NULL, [tinyint_col] tinyint NULL, [smallint_col] smallint NULL, [char_col] char(100) , [char_col2] varchar(100) NULL, [char_col3] text NULL, [float_col] decimal , [float_col2] float NULL, [blob_col] varbinary(MAX) NULL, [numeric_col] decimal NULL, [time] datetime , [bool_col] tinyint , [bool_col2] tinyint NULL);' .
-                'INSERT INTO {{%type}} ({{%type}}.[[related_id]], [[time]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp0, now());' .
+                'INSERT INTO {{%type}} ({{%type}}.[[related_id]], [[time]]) OUTPUT INSERTED.int_col,INSERTED.int_col2,INSERTED.tinyint_col,INSERTED.smallint_col,INSERTED.char_col,INSERTED.char_col2,INSERTED.char_col3,INSERTED.float_col,INSERTED.float_col2,INSERTED.blob_col,INSERTED.numeric_col,INSERTED.time,INSERTED.bool_col,INSERTED.bool_col2 INTO @temporary_inserted VALUES (:qp0, now());' .
                 'SELECT * FROM @temporary_inserted',
                 [
                     ':qp0' => null,
@@ -313,7 +313,7 @@ public function insertProvider()
                 ],
                 [':phBar' => 'bar'],
                 $this->replaceQuotes('SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [email] varchar(128) , [name] varchar(128) NULL, [address] text NULL, [status] int NULL, [profile_id] int NULL);' .
-                    'INSERT INTO [[customer]] ([[email]], [[name]], [[address]], [[is_active]], [[related_id]], [[col]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp1, :qp2, :qp3, :qp4, :qp5, CONCAT(:phFoo, :phBar));' .
+                    'INSERT INTO [customer] ([email], [name], [address], [is_active], [related_id], [col]) OUTPUT INSERTED.id,INSERTED.email,INSERTED.name,INSERTED.address,INSERTED.status,INSERTED.profile_id INTO @temporary_inserted VALUES (:qp1, :qp2, :qp3, :qp4, :qp5, CONCAT(:phFoo, :phBar));' .
                     'SELECT * FROM @temporary_inserted'),
                 [
                     ':phBar' => 'bar',
@@ -346,7 +346,7 @@ public function insertProvider()
                     ]),
                 [':phBar' => 'bar'],
                 $this->replaceQuotes('SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [email] varchar(128) , [name] varchar(128) NULL, [address] text NULL, [status] int NULL, [profile_id] int NULL);' .
-                    'INSERT INTO [[customer]] ([[email]], [[name]], [[address]], [[is_active]], [[related_id]]) OUTPUT INSERTED.* INTO @temporary_inserted SELECT [[email]], [[name]], [[address]], [[is_active]], [[related_id]] FROM [[customer]] WHERE ([[email]]=:qp1) AND ([[name]]=:qp2) AND ([[address]]=:qp3) AND ([[is_active]]=:qp4) AND ([[related_id]] IS NULL) AND ([[col]]=CONCAT(:phFoo, :phBar));' .
+                    'INSERT INTO [customer] ([email], [name], [address], [is_active], [related_id]) OUTPUT INSERTED.id,INSERTED.email,INSERTED.name,INSERTED.address,INSERTED.status,INSERTED.profile_id INTO @temporary_inserted SELECT [email], [name], [address], [is_active], [related_id] FROM [customer] WHERE ([email]=:qp1) AND ([name]=:qp2) AND ([address]=:qp3) AND ([is_active]=:qp4) AND ([related_id] IS NULL) AND ([col]=CONCAT(:phFoo, :phBar));' .
                     'SELECT * FROM @temporary_inserted'),
                 [
                     ':phBar' => 'bar',
@@ -396,17 +396,17 @@ public function upsertProvider()
             ],
             'values and expressions' => [
                 3 => 'SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [ts] int NULL, [email] varchar(128) , [recovery_email] varchar(128) NULL, [address] text NULL, [status] tinyint , [orders] int , [profile_id] int NULL);' .
-                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp0, now());' .
+                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.id,INSERTED.ts,INSERTED.email,INSERTED.recovery_email,INSERTED.address,INSERTED.status,INSERTED.orders,INSERTED.profile_id INTO @temporary_inserted VALUES (:qp0, now());' .
                     'SELECT * FROM @temporary_inserted',
             ],
             'values and expressions with update part' => [
                 3 => 'SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [ts] int NULL, [email] varchar(128) , [recovery_email] varchar(128) NULL, [address] text NULL, [status] tinyint , [orders] int , [profile_id] int NULL);' .
-                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp0, now());' .
+                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.id,INSERTED.ts,INSERTED.email,INSERTED.recovery_email,INSERTED.address,INSERTED.status,INSERTED.orders,INSERTED.profile_id INTO @temporary_inserted VALUES (:qp0, now());' .
                     'SELECT * FROM @temporary_inserted',
             ],
             'values and expressions without update part' => [
                 3 => 'SET NOCOUNT ON;DECLARE @temporary_inserted TABLE ([id] int , [ts] int NULL, [email] varchar(128) , [recovery_email] varchar(128) NULL, [address] text NULL, [status] tinyint , [orders] int , [profile_id] int NULL);' .
-                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.* INTO @temporary_inserted VALUES (:qp0, now());' .
+                    'INSERT INTO {{%T_upsert}} ({{%T_upsert}}.[[email]], [[ts]]) OUTPUT INSERTED.id,INSERTED.ts,INSERTED.email,INSERTED.recovery_email,INSERTED.address,INSERTED.status,INSERTED.orders,INSERTED.profile_id INTO @temporary_inserted VALUES (:qp0, now());' .
                     'SELECT * FROM @temporary_inserted',
             ],
             'query, values and expressions with update part' => [
diff --git a/tests/framework/di/ContainerTest.php b/tests/framework/di/ContainerTest.php
index 1d6d54b2145..f3f832e7852 100644
--- a/tests/framework/di/ContainerTest.php
+++ b/tests/framework/di/ContainerTest.php
@@ -14,8 +14,11 @@
 use yiiunit\data\ar\Cat;
 use yiiunit\data\ar\Order;
 use yiiunit\data\ar\Type;
+use yiiunit\framework\di\stubs\Alpha;
 use yiiunit\framework\di\stubs\Bar;
 use yiiunit\framework\di\stubs\BarSetter;
+use yiiunit\framework\di\stubs\Beta;
+use yiiunit\framework\di\stubs\Car;
 use yiiunit\framework\di\stubs\Corge;
 use yiiunit\framework\di\stubs\Foo;
 use yiiunit\framework\di\stubs\FooProperty;
@@ -172,7 +175,7 @@ public function testInvoke()
 
 
         $myFunc = function ($a, NumberValidator $b, $c = 'default') {
-            return[$a, \get_class($b), $c];
+            return [$a, \get_class($b), $c];
         };
         $result = Yii::$container->invoke($myFunc, ['a']);
         $this->assertEquals(['a', 'yii\validators\NumberValidator', 'default'], $result);
@@ -262,7 +265,8 @@ public function testSetDependencies()
             'qux.using.closure' => function () {
                 return new Qux();
             },
-            'rollbar', 'baibaratsky\yii\rollbar\Rollbar'
+            'rollbar',
+            'baibaratsky\yii\rollbar\Rollbar'
         ]);
         $container->setDefinitions([]);
 
@@ -278,8 +282,7 @@ public function testSetDependencies()
         try {
             $container->get('rollbar');
             $this->fail('InvalidConfigException was not thrown');
-        } catch(\Exception $e)
-        {
+        } catch (\Exception $e) {
             $this->assertInstanceOf('yii\base\InvalidConfigException', $e);
         }
     }
@@ -527,4 +530,48 @@ public function testDelayedInitializationOfSubArray()
         Yii::$container->set('setLater', new Qux());
         Yii::$container->get('test');
     }
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/18304
+     */
+    public function testNulledConstructorParameters()
+    {
+        $alpha = (new Container())->get(Alpha::className());
+        $this->assertInstanceOf(Beta::className(), $alpha->beta);
+        $this->assertNull($alpha->omega);
+
+        $QuxInterface = __NAMESPACE__ . '\stubs\QuxInterface';
+        $container = new Container();
+        $container->set($QuxInterface, Qux::className());
+        $alpha = $container->get(Alpha::className());
+        $this->assertInstanceOf(Beta::className(), $alpha->beta);
+        $this->assertInstanceOf($QuxInterface, $alpha->omega);
+        $this->assertNull($alpha->unknown);
+    }
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/18284
+     */
+    public function testNamedConstructorParameters()
+    {
+        $test = (new Container())->get(Car::className(), [
+            'name' => 'Hello',
+            'color' => 'red',
+        ]);
+        $this->assertSame('Hello', $test->name);
+        $this->assertSame('red', $test->color);
+    }
+
+    /**
+     * @see https://github.com/yiisoft/yii2/issues/18284
+     */
+    public function testInvalidConstructorParameters()
+    {
+        $this->expectException('yii\base\InvalidConfigException');
+        $this->expectExceptionMessage('Dependencies indexed by name and by position in the same array are not allowed.');
+        (new Container())->get(Car::className(), [
+            'color' => 'red',
+            'Hello',
+        ]);
+    }
 }
diff --git a/tests/framework/di/stubs/Alpha.php b/tests/framework/di/stubs/Alpha.php
new file mode 100644
index 00000000000..83023f5eb98
--- /dev/null
+++ b/tests/framework/di/stubs/Alpha.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+use yii\base\BaseObject;
+
+class Alpha extends BaseObject
+{
+    public $beta;
+    public $omega;
+    public $unknown = true;
+
+    public function __construct(Beta $beta = null, QuxInterface $omega = null, Unknown $unknown = null)
+    {
+        $this->beta = $beta;
+        $this->omega = $omega;
+        $this->unknown = $unknown;
+    }
+}
diff --git a/tests/framework/di/stubs/Beta.php b/tests/framework/di/stubs/Beta.php
new file mode 100644
index 00000000000..cf2daa61690
--- /dev/null
+++ b/tests/framework/di/stubs/Beta.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+use yii\base\BaseObject;
+
+class Beta extends BaseObject
+{
+}
diff --git a/tests/framework/di/stubs/Car.php b/tests/framework/di/stubs/Car.php
new file mode 100644
index 00000000000..dc91d53b937
--- /dev/null
+++ b/tests/framework/di/stubs/Car.php
@@ -0,0 +1,17 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+use yii\base\BaseObject;
+
+class Car extends BaseObject
+{
+    public $color;
+    public $name;
+
+    public function __construct($color, $name)
+    {
+        $this->color = $color;
+        $this->name = $name;
+    }
+}
diff --git a/tests/framework/filters/RateLimiterTest.php b/tests/framework/filters/RateLimiterTest.php
index f13c4ec13cf..0b44eb2edb9 100644
--- a/tests/framework/filters/RateLimiterTest.php
+++ b/tests/framework/filters/RateLimiterTest.php
@@ -7,13 +7,12 @@
 
 namespace yiiunit\framework\filters;
 
-use Prophecy\Argument;
 use Yii;
 use yii\filters\RateLimiter;
-use yii\log\Logger;
 use yii\web\Request;
 use yii\web\Response;
 use yii\web\User;
+use yiiunit\framework\filters\stubs\ExposedLogger;
 use yiiunit\framework\filters\stubs\RateLimit;
 use yiiunit\framework\filters\stubs\UserIdentity;
 use yiiunit\TestCase;
@@ -27,15 +26,7 @@ protected function setUp()
     {
         parent::setUp();
 
-        /* @var $logger Logger|\Prophecy\ObjectProphecy */
-        $logger = $this->prophesize(Logger::className());
-        $logger
-            ->log(Argument::any(), Argument::any(), Argument::any())
-            ->will(function ($parameters, $logger) {
-                $logger->messages = $parameters;
-            });
-
-        Yii::setLogger($logger->reveal());
+        Yii::setLogger(new ExposedLogger());
 
         $this->mockWebApplication();
     }
@@ -170,7 +161,7 @@ public function testUserWithClosureFunction()
         };
         $rateLimiter->beforeAction('test');
 
-        // testing the evaluation of user closure, which in this case returns not the expect object and therefore 
+        // testing the evaluation of user closure, which in this case returns not the expect object and therefore
         // the log message "does not implement RateLimitInterface" is expected.
         $this->assertInstanceOf(User::className(), $rateLimiter->user);
         $this->assertContains('Rate limit skipped: "user" does not implement RateLimitInterface.', Yii::getLogger()->messages);
diff --git a/tests/framework/filters/stubs/ExposedLogger.php b/tests/framework/filters/stubs/ExposedLogger.php
new file mode 100644
index 00000000000..951ae55a115
--- /dev/null
+++ b/tests/framework/filters/stubs/ExposedLogger.php
@@ -0,0 +1,19 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\filters\stubs;
+
+
+use yii\log\Logger;
+
+class ExposedLogger extends Logger
+{
+    public function log($message, $level, $category = 'application')
+    {
+        $this->messages[] = $message;
+    }
+}
diff --git a/tests/framework/helpers/BaseConsoleTest.php b/tests/framework/helpers/BaseConsoleTest.php
index 874c2371ad0..0a655dfeab8 100644
--- a/tests/framework/helpers/BaseConsoleTest.php
+++ b/tests/framework/helpers/BaseConsoleTest.php
@@ -12,6 +12,12 @@
  */
 class BaseConsoleTest extends TestCase
 {
+    protected function setUp()
+    {
+        parent::setUp();
+        $this->mockApplication();
+    }
+
     /**
      * @test
      */
@@ -21,9 +27,57 @@ public function renderColoredString()
         $actual = BaseConsole::renderColoredString($data);
         $expected = "\033[33mfoo";
         $this->assertEquals($expected, $actual);
-        
+
         $actual = BaseConsole::renderColoredString($data, false);
         $expected = "foo";
         $this->assertEquals($expected, $actual);
     }
+
+    /**
+     * @test
+     */
+    public function ansiColorizedSubstr_withoutColors()
+    {
+        $str = 'FooBar';
+
+        $actual = BaseConsole::ansiColorizedSubstr($str, 0, 3);
+        $expected = BaseConsole::renderColoredString('Foo');
+        $this->assertEquals($expected, $actual);
+
+        $actual = BaseConsole::ansiColorizedSubstr($str, 3, 3);
+        $expected = BaseConsole::renderColoredString('Bar');
+        $this->assertEquals($expected, $actual);
+
+        $actual = BaseConsole::ansiColorizedSubstr($str, 1, 4);
+        $expected = BaseConsole::renderColoredString('ooBa');
+        $this->assertEquals($expected, $actual);
+    }
+
+    /**
+     * @test
+     * @dataProvider ansiColorizedSubstr_withColors_data
+     * @param $str
+     * @param $start
+     * @param $length
+     * @param $expected
+     */
+    public function ansiColorizedSubstr_withColors($str, $start, $length, $expected)
+    {
+        $ansiStr = BaseConsole::renderColoredString($str);
+
+        $ansiActual = BaseConsole::ansiColorizedSubstr($ansiStr, $start, $length);
+        $ansiExpected = BaseConsole::renderColoredString($expected);
+        $this->assertEquals($ansiExpected, $ansiActual);
+    }
+
+    public function ansiColorizedSubstr_withColors_data()
+    {
+        return [
+            ['%rFoo%gBar%n', 0, 3, '%rFoo%n'],
+            ['%rFoo%gBar%n', 3, 3, '%gBar%n'],
+            ['%rFoo%gBar%n', 1, 4, '%roo%gBa%n'],
+            ['Foo%yBar%nYes', 1, 7, 'oo%yBar%nYe'],
+            ['Foo%yBar%nYes', 5, 3, '%yr%nYe'],
+        ];
+    }
 }
diff --git a/tests/framework/validators/DateValidatorTest.php b/tests/framework/validators/DateValidatorTest.php
index 91b627b2799..9ae3d770019 100644
--- a/tests/framework/validators/DateValidatorTest.php
+++ b/tests/framework/validators/DateValidatorTest.php
@@ -361,7 +361,11 @@ public function testValidationWithTime($timezone)
     {
         date_default_timezone_set($timezone);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timeZone' => 'UTC']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timeZone' => 'UTC'
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 14:23:15';
         $model->attr_timestamp = true;
@@ -370,7 +374,11 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame(1379082195, $model->attr_timestamp);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timeZone' => 'Europe/Berlin']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timeZone' => 'Europe/Berlin',
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 16:23:15';
         $model->attr_timestamp = true;
@@ -379,7 +387,12 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame(1379082195, $model->attr_timestamp);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timestampAttributeFormat' => 'yyyy-MM-dd HH:mm:ss', 'timeZone' => 'UTC']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timestampAttributeFormat' => 'yyyy-MM-dd HH:mm:ss',
+            'timeZone' => 'UTC',
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 14:23:15';
         $model->attr_timestamp = true;
@@ -388,7 +401,12 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2013-09-13 14:23:15', $model->attr_timestamp);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timestampAttributeFormat' => 'yyyy-MM-dd HH:mm:ss', 'timeZone' => 'Europe/Berlin']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timestampAttributeFormat' => 'yyyy-MM-dd HH:mm:ss',
+            'timeZone' => 'Europe/Berlin',
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 16:23:15';
         $model->attr_timestamp = true;
@@ -397,7 +415,12 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2013-09-13 14:23:15', $model->attr_timestamp);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timestampAttributeFormat' => 'php:Y-m-d H:i:s', 'timeZone' => 'UTC']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timestampAttributeFormat' => 'php:Y-m-d H:i:s',
+            'timeZone' => 'UTC',
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 14:23:15';
         $model->attr_timestamp = true;
@@ -406,7 +429,12 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2013-09-13 14:23:15', $model->attr_timestamp);
 
-        $val = new DateValidator(['format' => 'yyyy-MM-dd HH:mm:ss', 'timestampAttribute' => 'attr_timestamp', 'timestampAttributeFormat' => 'php:Y-m-d H:i:s', 'timeZone' => 'Europe/Berlin']);
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timestampAttributeFormat' => 'php:Y-m-d H:i:s',
+            'timeZone' => 'Europe/Berlin',
+        ]);
         $model = new FakedValidationModel();
         $model->attr_date = '2013-09-13 16:23:15';
         $model->attr_timestamp = true;
@@ -414,6 +442,21 @@ public function testValidationWithTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2013-09-13 14:23:15', $model->attr_timestamp);
+
+        // setting non-UTC defaultTimeZone should not impact values with format where time part is provided
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd HH:mm:ss',
+            'timestampAttribute' => 'attr_timestamp',
+            'timeZone' => 'UTC',
+            'defaultTimeZone' => 'Europe/Berlin',
+        ]);
+        $model = new FakedValidationModel();
+        $model->attr_date = '2013-09-13 16:23:15';
+        $model->attr_timestamp = true;
+        $val->validateAttribute($model, 'attr_date');
+        $this->assertFalse($model->hasErrors('attr_date'));
+        $this->assertFalse($model->hasErrors('attr_timestamp'));
+        $this->assertSame(1379089395, $model->attr_timestamp); // = 2013-09-13 16:23:15 UTC
     }
 
     /**
@@ -510,6 +553,7 @@ public function testValidationWithoutTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2017-06-15 00:00:00', $model->attr_timestamp);
+
         $val = new DateValidator([
             'format' => 'php:Y-m-d',
             'timestampAttribute' => 'attr_timestamp',
@@ -538,6 +582,7 @@ public function testValidationWithoutTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2017-06-15 00:00:00', $model->attr_timestamp);
+
         $val = new DateValidator([
             'format' => 'php:Y-m-d',
             'timestampAttribute' => 'attr_timestamp',
@@ -567,6 +612,7 @@ public function testValidationWithoutTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2017-06-15 02:00:00', $model->attr_timestamp);
+
         $val = new DateValidator([
             'format' => 'php:Y-m-d',
             'timestampAttribute' => 'attr_timestamp',
@@ -597,6 +643,7 @@ public function testValidationWithoutTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2017-06-15 02:00:00', $model->attr_timestamp);
+
         $val = new DateValidator([
             'format' => 'php:Y-m-d',
             'timestampAttribute' => 'attr_timestamp',
@@ -611,6 +658,35 @@ public function testValidationWithoutTime($timezone)
         $this->assertFalse($model->hasErrors('attr_date'));
         $this->assertFalse($model->hasErrors('attr_timestamp'));
         $this->assertSame('2017-06-15 02:00:00', $model->attr_timestamp);
+
+        // defaultTimeZone different than UTC:
+
+        $val = new DateValidator([
+            'format' => 'php:Y-m-d',
+            'timestampAttribute' => 'attr_timestamp',
+            'timeZone' => 'Europe/Warsaw',
+            'defaultTimeZone' => 'Europe/Warsaw',
+        ]);
+        $model = new FakedValidationModel();
+        $model->attr_date = '2017-06-15';
+        $model->attr_timestamp = true;
+        $val->validateAttribute($model, 'attr_date');
+        $this->assertFalse($model->hasErrors('attr_date'));
+        $this->assertFalse($model->hasErrors('attr_timestamp'));
+        $this->assertSame(1497477600, $model->attr_timestamp); // = 2017-06-14 22:00:00 UTC = 2017-06-15 00:00:00 Europe/Warsaw
+
+        $val = new DateValidator([
+            'format' => 'yyyy-MM-dd',
+            'timestampAttribute' => 'attr_timestamp',
+            'defaultTimeZone' => 'Europe/Warsaw',
+        ]);
+        $model = new FakedValidationModel();
+        $model->attr_date = '2017-06-15';
+        $model->attr_timestamp = true;
+        $val->validateAttribute($model, 'attr_date');
+        $this->assertFalse($model->hasErrors('attr_date'));
+        $this->assertFalse($model->hasErrors('attr_timestamp'));
+        $this->assertSame(1497477600, $model->attr_timestamp);
     }
 
     /**
diff --git a/tests/framework/web/MultipartFormDataParserTest.php b/tests/framework/web/MultipartFormDataParserTest.php
index 1212c72534d..4447defec20 100644
--- a/tests/framework/web/MultipartFormDataParserTest.php
+++ b/tests/framework/web/MultipartFormDataParserTest.php
@@ -52,6 +52,45 @@ public function testParse()
         $this->assertStringEqualsFile($_FILES['Item']['tmp_name']['file'], 'item file content');
     }
 
+    public function testParseWithDoubleQuotes()
+    {
+        if (defined('HHVM_VERSION')) {
+            static::markTestSkipped('Can not test on HHVM because it does not support proper handling of the temporary files.');
+        }
+
+        $parser = new MultipartFormDataParser();
+
+        $boundary = '---------------------------22472926011618';
+        $contentType = 'multipart/form-data; boundary="' . $boundary . '"';
+        $rawBody = "--{$boundary}\nContent-Disposition: form-data; name=\"title\"\r\n\r\ntest-title";
+        $rawBody .= "\r\n--{$boundary}\nContent-Disposition: form-data; name=\"Item[name]\"\r\n\r\ntest-name";
+        $rawBody .= "\r\n--{$boundary}\nContent-Disposition: form-data; name=\"someFile\"; filename=\"some-file.txt\"\nContent-Type: text/plain\r\n\r\nsome file content";
+        $rawBody .= "\r\n--{$boundary}\nContent-Disposition: form-data; name=\"Item[file]\"; filename=\"item-file.txt\"\nContent-Type: text/plain\r\n\r\nitem file content";
+        $rawBody .= "\r\n--{$boundary}--";
+
+        $bodyParams = $parser->parse($rawBody, $contentType);
+
+        $expectedBodyParams = [
+            'title' => 'test-title',
+            'Item' => [
+                'name' => 'test-name',
+            ],
+        ];
+        $this->assertEquals($expectedBodyParams, $bodyParams);
+
+        $this->assertNotEmpty($_FILES['someFile']);
+        $this->assertEquals(UPLOAD_ERR_OK, $_FILES['someFile']['error']);
+        $this->assertEquals('some-file.txt', $_FILES['someFile']['name']);
+        $this->assertEquals('text/plain', $_FILES['someFile']['type']);
+        $this->assertStringEqualsFile($_FILES['someFile']['tmp_name'], 'some file content');
+
+        $this->assertNotEmpty($_FILES['Item']);
+        $this->assertNotEmpty($_FILES['Item']['name']['file']);
+        $this->assertEquals(UPLOAD_ERR_OK, $_FILES['Item']['error']['file']);
+        $this->assertEquals('item-file.txt', $_FILES['Item']['name']['file']);
+        $this->assertEquals('text/plain', $_FILES['Item']['type']['file']);
+        $this->assertStringEqualsFile($_FILES['Item']['tmp_name']['file'], 'item file content');
+    }
     /**
      * @depends testParse
      */
diff --git a/tests/framework/web/ResponseTest.php b/tests/framework/web/ResponseTest.php
index 50b1226591d..35ddf94e435 100644
--- a/tests/framework/web/ResponseTest.php
+++ b/tests/framework/web/ResponseTest.php
@@ -191,6 +191,20 @@ public function testSetStatusCodeByException($exception, $statusCode)
         $this->assertEquals($statusCode, $this->response->getStatusCode());
     }
 
+    /**
+     * @see https://github.com/yiisoft/yii2/pull/18290
+     */
+    public function testNonSeekableStream()
+    {
+        $stream = fopen('php://output', 'r+');
+        ob_start();
+        $this->response
+            ->sendStreamAsFile($stream, 'test-stream')
+            ->send();
+        ob_get_clean();
+        static::assertEquals(200, $this->response->statusCode);
+    }
+
     public function dataProviderSetStatusCodeByException()
     {
         $data = [
diff --git a/tests/framework/web/ViewTest.php b/tests/framework/web/ViewTest.php
index ea18b4b8818..10016a0b37e 100644
--- a/tests/framework/web/ViewTest.php
+++ b/tests/framework/web/ViewTest.php
@@ -211,7 +211,7 @@ public function testAppendTimestampForRegisterJsFile()
         $this->assertRegExp($pattern, $html);
 
         // with alias but wo timestamp
-        // The timestamp setting won't be redefined because global AssetManager is used
+        // redefine AssetManager timestamp setting
         $view = new View();
         $view->registerJsFile('@web/assetSources/js/jquery.js',
             [
@@ -219,7 +219,7 @@ public function testAppendTimestampForRegisterJsFile()
                 'depends' => 'yii\web\AssetBundle',
             ]); // <script src="/assetSources/js/jquery.js"></script>
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
-        $this->assertRegExp($pattern, $html);
+        $this->assertNotRegExp($pattern, $html);
 
         // wo depends == wo AssetManager
         $view = new View();
@@ -268,15 +268,15 @@ public function testAppendTimestampForRegisterJsFile()
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
         $this->assertRegExp($pattern, $html);
 
-        // The timestamp setting won't be redefined because global AssetManager is used
+        // redefine AssetManager timestamp setting
         $view = new View();
         $view->registerJsFile('/assetSources/js/jquery.js',
             [
                 'appendTimestamp' => true,
                 'depends' => 'yii\web\AssetBundle',
-            ]); // <script src="/assetSources/js/jquery.js"></script>
+            ]); // <script src="/assetSources/js/jquery.js?v=1602294572"></script>
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
-        $this->assertNotRegExp($pattern, $html);
+        $this->assertRegExp($pattern, $html);
 
         $view = new View();
         $view->registerJsFile('/assetSources/js/jquery.js',
@@ -357,7 +357,7 @@ public function testAppendTimestampForRegisterCssFile()
         $this->assertRegExp($pattern, $html);
 
         // with alias but wo timestamp
-        // The timestamp setting won't be redefined because global AssetManager is used
+        // redefine AssetManager timestamp setting
         $view = new View();
         $view->registerCssFile('@web/assetSources/css/stub.css',
             [
@@ -365,7 +365,7 @@ public function testAppendTimestampForRegisterCssFile()
                 'depends' => 'yii\web\AssetBundle',
             ]); // <link href="/assetSources/css/stub.css" rel="stylesheet" >
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
-        $this->assertRegExp($pattern, $html);
+        $this->assertNotRegExp($pattern, $html);
 
         // wo depends == wo AssetManager
         $view = new View();
@@ -414,15 +414,15 @@ public function testAppendTimestampForRegisterCssFile()
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
         $this->assertRegExp($pattern, $html);
 
-        // The timestamp setting won't be redefined because global AssetManager is used
+        // redefine AssetManager timestamp setting
         $view = new View();
         $view->registerCssFile('/assetSources/css/stub.css',
             [
                 'appendTimestamp' => true,
                 'depends' => 'yii\web\AssetBundle',
-            ]); // <link href="/assetSources/css/stub.css" rel="stylesheet" >
+            ]); // <link href="/assetSources/css/stub.css?v=1602294572" rel="stylesheet" >
         $html = $view->render('@yiiunit/data/views/layout.php', ['content' => 'content']);
-        $this->assertNotRegExp($pattern, $html);
+        $this->assertRegExp($pattern, $html);
 
         $view = new View();
         $view->registerCssFile('/assetSources/css/stub.css',
diff --git a/tests/framework/web/session/AbstractDbSessionTest.php b/tests/framework/web/session/AbstractDbSessionTest.php
index b9f29d2696e..835ea13b21c 100644
--- a/tests/framework/web/session/AbstractDbSessionTest.php
+++ b/tests/framework/web/session/AbstractDbSessionTest.php
@@ -9,8 +9,8 @@
 
 use Yii;
 use yii\db\Connection;
-use yii\db\Query;
 use yii\db\Migration;
+use yii\db\Query;
 use yii\web\DbSession;
 use yiiunit\framework\console\controllers\EchoMigrateController;
 use yiiunit\TestCase;
@@ -20,6 +20,8 @@
  */
 abstract class AbstractDbSessionTest extends TestCase
 {
+    use SessionTestTrait;
+
     /**
      * @return string[] the driver names that are suitable for the test (mysql, pgsql, etc)
      */
@@ -266,4 +268,14 @@ public function testInstantiate()
         Yii::$app->set('sessionDb', null);
         ini_set('session.gc_maxlifetime', $oldTimeout);
     }
+
+    public function testInitUseStrictMode()
+    {
+        $this->initStrictModeTest(DbSession::className());
+    }
+
+    public function testUseStrictMode()
+    {
+        $this->useStrictModeTest(DbSession::className());
+    }
 }
diff --git a/tests/framework/web/session/CacheSessionTest.php b/tests/framework/web/session/CacheSessionTest.php
index 018d1643fbe..e31b0f970f2 100644
--- a/tests/framework/web/session/CacheSessionTest.php
+++ b/tests/framework/web/session/CacheSessionTest.php
@@ -16,6 +16,8 @@
  */
 class CacheSessionTest extends \yiiunit\TestCase
 {
+    use SessionTestTrait;
+
     protected function setUp()
     {
         parent::setUp();
@@ -51,4 +53,14 @@ public function testNotWrittenSessionDestroying()
 
         $this->assertTrue($session->destroySession($session->getId()));
     }
+
+    public function testInitUseStrictMode()
+    {
+        $this->initStrictModeTest(CacheSession::className());
+    }
+
+    public function testUseStrictMode()
+    {
+        $this->useStrictModeTest(CacheSession::className());
+    }
 }
diff --git a/tests/framework/web/session/SessionTest.php b/tests/framework/web/session/SessionTest.php
index 28fc1e10d1e..6ad327f68f7 100644
--- a/tests/framework/web/session/SessionTest.php
+++ b/tests/framework/web/session/SessionTest.php
@@ -15,6 +15,8 @@
  */
 class SessionTest extends TestCase
 {
+    use SessionTestTrait;
+
     /**
      * Test to prove that after Session::destroy session id set to old value.
      */
@@ -69,6 +71,7 @@ public function testParamsAfterSessionStart()
         $newGcProbability = $session->getGCProbability();
         $this->assertNotEquals($oldGcProbability, $newGcProbability);
         $this->assertEquals(100, $newGcProbability);
+        $session->setGCProbability($oldGcProbability);
     }
 
     /**
@@ -88,4 +91,24 @@ public function testSetName()
 
         $session->destroy();
     }
+
+    public function testInitUseStrictMode()
+    {
+        $this->initStrictModeTest(Session::className());
+    }
+
+    public function testUseStrictMode()
+    {
+        //Manual garbage collection since native storage module might not support removing data via Session::destroySession()
+        $sessionSavePath = session_save_path() ?: sys_get_temp_dir();
+        // Only perform garbage collection if "N argument" is not used,
+        // see https://www.php.net/manual/en/session.configuration.php#ini.session.save-path
+        if (strpos($sessionSavePath, ';') === false) {
+            foreach (['non-existing-non-strict', 'non-existing-strict'] as $sessionId) {
+                @unlink($sessionSavePath . '/sess_' . $sessionId);
+            }
+        }
+
+        $this->useStrictModeTest(Session::className());
+    }
 }
diff --git a/tests/framework/web/session/SessionTestTrait.php b/tests/framework/web/session/SessionTestTrait.php
new file mode 100644
index 00000000000..1c3e3da687e
--- /dev/null
+++ b/tests/framework/web/session/SessionTestTrait.php
@@ -0,0 +1,73 @@
+<?php
+
+
+namespace yiiunit\framework\web\session;
+
+use yii\web\Session;
+
+trait SessionTestTrait
+{
+    public function initStrictModeTest($class)
+    {
+        /** @var Session $session */
+        $session = new $class();
+
+        $session->useStrictMode = false;
+        $this->assertEquals(false, $session->getUseStrictMode());
+
+        if (PHP_VERSION_ID < 50502 && !$session->getUseCustomStorage()) {
+            $this->expectException('yii\base\InvalidConfigException');
+            $session->useStrictMode = true;
+            return;
+        }
+
+        $session->useStrictMode = true;
+        $this->assertEquals(true, $session->getUseStrictMode());
+    }
+
+    /**
+     * @param string $class
+     */
+    protected function useStrictModeTest($class)
+    {
+        /** @var Session $session */
+        $session = new $class();
+
+        if (PHP_VERSION_ID < 50502 && !$session->getUseCustomStorage()) {
+            $this->markTestSkipped('Can not be tested on PHP < 5.5.2 without custom storage class.');
+            return;
+        }
+
+        //non-strict-mode test
+        $session->useStrictMode = false;
+        $session->close();
+        $session->destroySession('non-existing-non-strict');
+        $session->setId('non-existing-non-strict');
+        $session->open();
+        $this->assertEquals('non-existing-non-strict', $session->getId());
+        $session->close();
+
+        //strict-mode test
+        $session->useStrictMode = true;
+        $session->close();
+        $session->destroySession('non-existing-strict');
+        $session->setId('non-existing-strict');
+        $session->open();
+        $id = $session->getId();
+        $this->assertNotEquals('non-existing-strict', $id);
+        $session->set('strict_mode_test', 'session data');
+        $session->close();
+        //Ensure session was not stored under forced id
+        $session->setId('non-existing-strict');
+        $session->open();
+        $this->assertNotEquals('session data', $session->get('strict_mode_test'));
+        $session->close();
+        //Ensure session can be accessed with the new (and thus existing) id.
+        $session->setId($id);
+        $session->open();
+        $this->assertNotEmpty($id);
+        $this->assertEquals($id, $session->getId());
+        $this->assertEquals('session data', $session->get('strict_mode_test'));
+        $session->close();
+    }
+}
