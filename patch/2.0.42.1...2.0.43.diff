diff --git a/src/BaseYii.php b/src/BaseYii.php
index 4e0d2caa2b5..4a5302a0fa0 100644
--- a/src/BaseYii.php
+++ b/src/BaseYii.php
@@ -68,7 +68,7 @@ class BaseYii
      */
     public static $classMap = [];
     /**
-     * @var \yii\console\Application|\yii\web\Application the application instance
+     * @var \yii\console\Application|\yii\web\Application|\yii\base\Application the application instance
      */
     public static $app;
     /**
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.42.1';
+        return '2.0.43';
     }
 
     /**
@@ -124,7 +124,7 @@ public static function getVersion()
      * @param string $alias the alias to be translated.
      * @param bool $throwException whether to throw an exception if the given alias is invalid.
      * If this is false and an invalid alias is given, false will be returned by this method.
-     * @return string|bool the path corresponding to the alias, false if the root alias is not previously registered.
+     * @return string|false the path corresponding to the alias, false if the root alias is not previously registered.
      * @throws InvalidArgumentException if the alias is invalid while $throwException is true.
      * @see setAlias()
      */
@@ -162,7 +162,7 @@ public static function getAlias($alias, $throwException = true)
      * A root alias is an alias that has been registered via [[setAlias()]] previously.
      * If a given alias matches multiple root aliases, the longest one will be returned.
      * @param string $alias the alias
-     * @return string|bool the root alias, or false if no root alias is found
+     * @return string|false the root alias, or false if no root alias is found
      */
     public static function getRootAlias($alias)
     {
diff --git a/src/CHANGELOG.md b/src/CHANGELOG.md
index 3f475b789b5..eaf515e26df 100644
--- a/src/CHANGELOG.md
+++ b/src/CHANGELOG.md
@@ -1,6 +1,34 @@
 Yii Framework 2 Change Log
 ==========================
 
+2.0.43 August 09, 2021
+----------------------
+
+- Bug #14663: Do not convert int to string if database type of column is numeric (egorrishe)
+- Bug #18274: Fix `yii\log\Logger` to calculate profile timings no matter the value of the flush interval (bizley)
+- Bug #18648: Fix `yii\web\Request` to properly handle HTTP Basic Auth headers (olegbaturin)
+- Bug #18650: Refactor `framework/assets/yii.activeForm.js` arrow function into traditional function for IE11 compatibility (marcovtwout)
+- Bug #18678: Fix `yii\caching\DbCache` to use configured cache table name instead of the default one in case of MSSQL varbinary column type detection (aidanbek)
+- Bug #18749: Fix `yii\web\ErrorHandler::encodeHtml()` to support strings with invalid UTF symbols (vjik)
+- Bug #18756: Fix `\yii\validators\ExistValidator::queryValueExists` to validate against an array of unique values (DrDeath72)
+- Bug #18807: Fix replacing source whitespaces and optimize code of `yii\helpers\BaseStringHelper::mb_ucwords()` (WinterSilence)
+- Enh #18274: Add `profilingAware` option to `yii\log\Logger` to prevent breaking the profiling block messages pair when flushing them (bizley)
+- Enh #18628: Add strings "software", and "hardware" to `$specials` array in `yii\helpers\BaseInflector` (kjusupov)
+- Enh #18653: Add method `yii\helpers\BaseHtml::getInputIdByName()` (WinterSilence)
+- Enh #18656: Add ability for `yii serve`'s `--router` param to take an alias (markhuot)
+- Enh #18669: Change visibility of `yii\web\User::checkRedirectAcceptable()` to `public` (rhertogh)
+- Enh #18674: Add more user-friendly exception messages for `yii\i18n\Formatter` (bizley)
+- Enh #18676: Add method `yii\helpers\BaseFileHelper::changeOwnership()` and `newFileMode`/`newFileOwnership` properties to `yii\console\controllers\BaseMigrateController` (rhertogh)
+- Enh #18695: Add `yii\web\Cookie::SAME_SITE_NONE` constant (rhertogh)
+- Enh #18707: Change the base error handler to not expose `$_SERVER` details unless `YII_DEBUG` is enabled (coolgoose)
+- Enh #18712: Add `scheme` option for `$options` argument for `yii\i18n\Formatter::asUrl()` (bizley)
+- Enh #18724: Allow jQuery 3.6 to be installed (marcovtwout)
+- Enh #18726: Add `yii\helpers\Json::$prettyPrint` (rhertogh)
+- Enh #18734: Add `yii\validators\EmailValidator::$enableLocalIDN` (brandonkelly)
+- Enh #18789: Add JSONP support in `yii\web\JsonParser::parse()` (WinterSilence)
+- Enh #18817: Use `paragonie/random_compat` for random bytes and int generation (samdark)
+
+
 2.0.42.1 May 06, 2021
 ---------------------
 
diff --git a/src/UPGRADE.md b/src/UPGRADE.md
index 5a3588064b8..7ec63dcd92e 100644
--- a/src/UPGRADE.md
+++ b/src/UPGRADE.md
@@ -51,6 +51,21 @@ if you want to upgrade from version A to version C and there is
 version B between A and C, you need to follow the instructions
 for both A and B.
 
+Upgrade from Yii 2.0.42
+-----------------------
+
+* `yii\base\ErrorHandler` does not expose the `$_SERVER` information implicitly anymore.
+* The methods `phpTypecast()` and `dbTypecast()` of `yii\db\ColumnSchema` will no longer convert `$value` from `int` to 
+  `string`, if database column type is `INTEGER UNSIGNED` or `BIGINT UNSIGNED`.
+  * I.e. it affects update and insert queries. For example:
+  ```php
+  \Yii::$app->db->createCommand()->insert('{{some_table}}', ['int_unsigned_col' => 22])->execute();
+  ```
+  will execute next SQL:
+  ```sql
+  INSERT INTO `some_table` (`int_unsigned_col`) VALUES (22)
+  ```
+
 Upgrade from Yii 2.0.41
 -----------------------
 
diff --git a/src/assets/yii.activeForm.js b/src/assets/yii.activeForm.js
index c61df82b27b..ab44e0cbd8b 100644
--- a/src/assets/yii.activeForm.js
+++ b/src/assets/yii.activeForm.js
@@ -329,7 +329,9 @@
                 this.$form = $form;
                 var $input = findInput($form, this);
 
-                var disabled = $input.toArray().reduce((result, next) => result && $(next).is(':disabled'), true);
+                var disabled = $input.toArray().reduce(function(result, next) {
+                    return result && $(next).is(':disabled');
+                }, true);
                 if (disabled) {
                     return true;
                 }
diff --git a/src/base/Controller.php b/src/base/Controller.php
index f2d655bac19..0c79060ceff 100644
--- a/src/base/Controller.php
+++ b/src/base/Controller.php
@@ -514,6 +514,7 @@ public function setViewPath($path)
     public function findLayoutFile($view)
     {
         $module = $this->module;
+        $layout = null;
         if (is_string($this->layout)) {
             $layout = $this->layout;
         } elseif ($this->layout === null) {
@@ -525,7 +526,7 @@ public function findLayoutFile($view)
             }
         }
 
-        if (!isset($layout)) {
+        if ($layout === null) {
             return false;
         }
 
diff --git a/src/base/ErrorHandler.php b/src/base/ErrorHandler.php
index 8d98dafe789..4b36d481ec3 100644
--- a/src/base/ErrorHandler.php
+++ b/src/base/ErrorHandler.php
@@ -169,10 +169,10 @@ protected function handleFallbackExceptionMessage($exception, $previousException
             } else {
                 echo '<pre>' . htmlspecialchars($msg, ENT_QUOTES, Yii::$app->charset) . '</pre>';
             }
+            $msg .= "\n\$_SERVER = " . VarDumper::export($_SERVER);
         } else {
             echo 'An internal server error occurred.';
         }
-        $msg .= "\n\$_SERVER = " . VarDumper::export($_SERVER);
         error_log($msg);
         if (defined('HHVM_VERSION')) {
             flush();
diff --git a/src/base/Event.php b/src/base/Event.php
index 29bc0a8dacf..3cb85dce018 100644
--- a/src/base/Event.php
+++ b/src/base/Event.php
@@ -73,7 +73,7 @@ class Event extends BaseObject
      * `afterInsert` event:
      *
      * ```php
-     * Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_INSERT, function ($event) {
+     * Event::on(ActiveRecord::class, ActiveRecord::EVENT_AFTER_INSERT, function ($event) {
      *     Yii::trace(get_class($event->sender) . ' is inserted.');
      * });
      * ```
diff --git a/src/base/Module.php b/src/base/Module.php
index fa84e553c74..2562f0ca1fa 100644
--- a/src/base/Module.php
+++ b/src/base/Module.php
@@ -238,7 +238,7 @@ public function setBasePath($path)
     {
         $path = Yii::getAlias($path);
         $p = strncmp($path, 'phar://', 7) === 0 ? $path : realpath($path);
-        if ($p !== false && is_dir($p)) {
+        if (is_string($p) && is_dir($p)) {
             $this->_basePath = $p;
         } else {
             throw new InvalidArgumentException("The directory does not exist: $path");
diff --git a/src/base/Security.php b/src/base/Security.php
index e3a2373ab8a..49972d17bde 100644
--- a/src/base/Security.php
+++ b/src/base/Security.php
@@ -116,14 +116,6 @@ protected function shouldUseLibreSSL()
         return $this->_useLibreSSL;
     }
 
-    /**
-     * @return bool if operating system is Windows
-     */
-    private function isWindows()
-    {
-        return DIRECTORY_SEPARATOR !== '/';
-    }
-
     /**
      * Encrypts data using a password.
      * Derives keys for encryption and authentication from the password using PBKDF2 and a random salt,
@@ -471,8 +463,6 @@ public function validateData($data, $key, $rawHash = false)
         return false;
     }
 
-    private $_randomFile;
-
     /**
      * Generates specified number of random bytes.
      * Note that output may not be ASCII.
@@ -493,84 +483,7 @@ public function generateRandomKey($length = 32)
             throw new InvalidArgumentException('First parameter ($length) must be greater than 0');
         }
 
-        // always use random_bytes() if it is available
-        if (function_exists('random_bytes')) {
-            return random_bytes($length);
-        }
-
-        // The recent LibreSSL RNGs are faster and likely better than /dev/urandom.
-        // Since 5.4.0, openssl_random_pseudo_bytes() reads from CryptGenRandom on Windows instead
-        // of using OpenSSL library. LibreSSL is OK everywhere but don't use OpenSSL on non-Windows.
-        if (function_exists('openssl_random_pseudo_bytes')
-            && ($this->shouldUseLibreSSL() || $this->isWindows())
-        ) {
-            $key = openssl_random_pseudo_bytes($length, $cryptoStrong);
-            if ($cryptoStrong === false) {
-                throw new Exception(
-                    'openssl_random_pseudo_bytes() set $crypto_strong false. Your PHP setup is insecure.'
-                );
-            }
-            if ($key !== false && StringHelper::byteLength($key) === $length) {
-                return $key;
-            }
-        }
-
-        // mcrypt_create_iv() does not use libmcrypt. Since PHP 5.3.7 it directly reads
-        // CryptGenRandom on Windows. Elsewhere it directly reads /dev/urandom.
-        if (function_exists('mcrypt_create_iv')) {
-            $key = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
-            if (StringHelper::byteLength($key) === $length) {
-                return $key;
-            }
-        }
-
-        // If not on Windows, try to open a random device.
-        if ($this->_randomFile === null && !$this->isWindows()) {
-            // urandom is a symlink to random on FreeBSD.
-            $device = PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom';
-            // Check random device for special character device protection mode. Use lstat()
-            // instead of stat() in case an attacker arranges a symlink to a fake device.
-            $lstat = @lstat($device);
-            if ($lstat !== false && ($lstat['mode'] & 0170000) === 020000) {
-                $this->_randomFile = fopen($device, 'rb') ?: null;
-
-                if (is_resource($this->_randomFile)) {
-                    // Reduce PHP stream buffer from default 8192 bytes to optimize data
-                    // transfer from the random device for smaller values of $length.
-                    // This also helps to keep future randoms out of user memory space.
-                    $bufferSize = 8;
-
-                    if (function_exists('stream_set_read_buffer')) {
-                        stream_set_read_buffer($this->_randomFile, $bufferSize);
-                    }
-                    // stream_set_read_buffer() isn't implemented on HHVM
-                    if (function_exists('stream_set_chunk_size')) {
-                        stream_set_chunk_size($this->_randomFile, $bufferSize);
-                    }
-                }
-            }
-        }
-
-        if (is_resource($this->_randomFile)) {
-            $buffer = '';
-            $stillNeed = $length;
-            while ($stillNeed > 0) {
-                $someBytes = fread($this->_randomFile, $stillNeed);
-                if ($someBytes === false) {
-                    break;
-                }
-                $buffer .= $someBytes;
-                $stillNeed -= StringHelper::byteLength($someBytes);
-                if ($stillNeed === 0) {
-                    // Leaving file pointer open in order to make next generation faster by reusing it.
-                    return $buffer;
-                }
-            }
-            fclose($this->_randomFile);
-            $this->_randomFile = null;
-        }
-
-        throw new Exception('Unable to generate a random key');
+        return random_bytes($length);
     }
 
     /**
diff --git a/src/behaviors/AttributeBehavior.php b/src/behaviors/AttributeBehavior.php
index c50f180f6cc..0b4ba8b3a62 100644
--- a/src/behaviors/AttributeBehavior.php
+++ b/src/behaviors/AttributeBehavior.php
@@ -28,7 +28,7 @@
  * {
  *     return [
  *         [
- *             'class' => AttributeBehavior::className(),
+ *             'class' => AttributeBehavior::class,
  *             'attributes' => [
  *                 ActiveRecord::EVENT_BEFORE_INSERT => 'attribute1',
  *                 ActiveRecord::EVENT_BEFORE_UPDATE => 'attribute2',
diff --git a/src/behaviors/AttributeTypecastBehavior.php b/src/behaviors/AttributeTypecastBehavior.php
index c9c02cfe25d..33520bde3bc 100644
--- a/src/behaviors/AttributeTypecastBehavior.php
+++ b/src/behaviors/AttributeTypecastBehavior.php
@@ -37,7 +37,7 @@
  *     {
  *         return [
  *             'typecast' => [
- *                 'class' => AttributeTypecastBehavior::className(),
+ *                 'class' => AttributeTypecastBehavior::class,
  *                 'attributeTypes' => [
  *                     'amount' => AttributeTypecastBehavior::TYPE_INTEGER,
  *                     'price' => AttributeTypecastBehavior::TYPE_FLOAT,
@@ -77,7 +77,7 @@
  *     {
  *         return [
  *             'typecast' => [
- *                 'class' => AttributeTypecastBehavior::className(),
+ *                 'class' => AttributeTypecastBehavior::class,
  *                 // 'attributeTypes' will be composed automatically according to `rules()`
  *             ],
  *         ];
@@ -132,7 +132,7 @@ class AttributeTypecastBehavior extends Behavior
      *     'price' => 'float',
      *     'is_active' => 'boolean',
      *     'date' => function ($value) {
-     *         return ($value instanceof \DateTime) ? $value->getTimestamp(): (int)$value;
+     *         return ($value instanceof \DateTime) ? $value->getTimestamp(): (int) $value;
      *     },
      * ]
      * ```
@@ -346,7 +346,7 @@ public function beforeSave($event)
     {
         $this->typecastAttributes();
     }
-    
+
     /**
      * Handles owner 'afterInsert' and 'afterUpdate' events, ensuring attribute typecasting.
      * @param \yii\base\Event $event event instance.
diff --git a/src/behaviors/AttributesBehavior.php b/src/behaviors/AttributesBehavior.php
index 1ac025f16e4..e1b0f874ea5 100644
--- a/src/behaviors/AttributesBehavior.php
+++ b/src/behaviors/AttributesBehavior.php
@@ -28,7 +28,7 @@
  * {
  *     return [
  *         [
- *             'class' => AttributesBehavior::className(),
+ *             'class' => AttributesBehavior::class,
  *             'attributes' => [
  *                 'attribute1' => [
  *                     ActiveRecord::EVENT_BEFORE_INSERT => new Expression('NOW()'),
diff --git a/src/behaviors/BlameableBehavior.php b/src/behaviors/BlameableBehavior.php
index 38d1a8b1441..b4c7ab07882 100755
--- a/src/behaviors/BlameableBehavior.php
+++ b/src/behaviors/BlameableBehavior.php
@@ -21,7 +21,7 @@
  * public function behaviors()
  * {
  *     return [
- *         BlameableBehavior::className(),
+ *         BlameableBehavior::class,
  *     ];
  * }
  * ```
@@ -41,7 +41,7 @@
  * {
  *     return [
  *         [
- *             'class' => BlameableBehavior::className(),
+ *             'class' => BlameableBehavior::class,
  *             'createdByAttribute' => 'author_id',
  *             'updatedByAttribute' => 'updater_id',
  *         ],
diff --git a/src/behaviors/CacheableWidgetBehavior.php b/src/behaviors/CacheableWidgetBehavior.php
index 60db7ec023c..c6d4cd32c5c 100644
--- a/src/behaviors/CacheableWidgetBehavior.php
+++ b/src/behaviors/CacheableWidgetBehavior.php
@@ -30,7 +30,7 @@
  * {
  *     return [
  *         [
- *             'class' => CacheableWidgetBehavior::className(),
+ *             'class' => CacheableWidgetBehavior::class,
  *             'cacheDuration' => 0,
  *             'cacheDependency' => [
  *                 'class' => 'yii\caching\DbDependency',
diff --git a/src/behaviors/OptimisticLockBehavior.php b/src/behaviors/OptimisticLockBehavior.php
index fb01a1a488f..b3fd6a405b3 100644
--- a/src/behaviors/OptimisticLockBehavior.php
+++ b/src/behaviors/OptimisticLockBehavior.php
@@ -33,7 +33,7 @@
  * public function behaviors()
  * {
  *     return [
- *         OptimisticLockBehavior::className(),
+ *         OptimisticLockBehavior::class,
  *     ];
  * }
  * ```
diff --git a/src/behaviors/SluggableBehavior.php b/src/behaviors/SluggableBehavior.php
index 13ebab3b5cf..b62ade8ea2c 100644
--- a/src/behaviors/SluggableBehavior.php
+++ b/src/behaviors/SluggableBehavior.php
@@ -29,7 +29,7 @@
  * {
  *     return [
  *         [
- *             'class' => SluggableBehavior::className(),
+ *             'class' => SluggableBehavior::class,
  *             'attribute' => 'title',
  *             // 'slugAttribute' => 'slug',
  *         ],
@@ -50,7 +50,7 @@
  * {
  *     return [
  *         [
- *             'class' => SluggableBehavior::className(),
+ *             'class' => SluggableBehavior::class,
  *             'slugAttribute' => 'alias',
  *         ],
  *     ];
diff --git a/src/behaviors/TimestampBehavior.php b/src/behaviors/TimestampBehavior.php
index 12a6ff6f9f5..4b4f54c2af6 100644
--- a/src/behaviors/TimestampBehavior.php
+++ b/src/behaviors/TimestampBehavior.php
@@ -21,7 +21,7 @@
  * public function behaviors()
  * {
  *     return [
- *         TimestampBehavior::className(),
+ *         TimestampBehavior::class,
  *     ];
  * }
  * ```
@@ -45,7 +45,7 @@
  * {
  *     return [
  *         [
- *             'class' => TimestampBehavior::className(),
+ *             'class' => TimestampBehavior::class,
  *             'createdAtAttribute' => 'create_time',
  *             'updatedAtAttribute' => 'update_time',
  *             'value' => new Expression('NOW()'),
diff --git a/src/caching/DbCache.php b/src/caching/DbCache.php
index 191ba5c005f..3cd211ec013 100644
--- a/src/caching/DbCache.php
+++ b/src/caching/DbCache.php
@@ -276,7 +276,8 @@ protected function deleteValue($key)
      */
     public function gc($force = false)
     {
-        if ($force || mt_rand(0, 1000000) < $this->gcProbability) {
+
+        if ($force || random_int(0, 1000000) < $this->gcProbability) {
             $this->db->createCommand()
                 ->delete($this->cacheTable, '[[expire]] > 0 AND [[expire]] < ' . time())
                 ->execute();
@@ -305,7 +306,7 @@ protected function isVarbinaryDataField()
     {
         if ($this->isVarbinaryDataField === null) {
             $this->isVarbinaryDataField = in_array($this->db->getDriverName(), ['sqlsrv', 'dblib']) &&
-                $this->db->getTableSchema('cache')->columns['data']->dbType === 'varbinary';
+                $this->db->getTableSchema($this->cacheTable)->columns['data']->dbType === 'varbinary';
         }
         return $this->isVarbinaryDataField;
     }
diff --git a/src/caching/FileCache.php b/src/caching/FileCache.php
index b221998db88..378a84fb736 100644
--- a/src/caching/FileCache.php
+++ b/src/caching/FileCache.php
@@ -245,7 +245,7 @@ protected function flushValues()
      */
     public function gc($force = false, $expiredOnly = true)
     {
-        if ($force || mt_rand(0, 1000000) < $this->gcProbability) {
+        if ($force || random_int(0, 1000000) < $this->gcProbability) {
             $this->gcRecursive($this->cachePath, $expiredOnly);
         }
     }
diff --git a/src/captcha/CaptchaAction.php b/src/captcha/CaptchaAction.php
index 40e1aa03a0a..e61a9ed34ae 100644
--- a/src/captcha/CaptchaAction.php
+++ b/src/captcha/CaptchaAction.php
@@ -214,16 +214,17 @@ protected function generateVerifyCode()
         if ($this->maxLength > 20) {
             $this->maxLength = 20;
         }
-        $length = mt_rand($this->minLength, $this->maxLength);
+
+        $length = random_int($this->minLength, $this->maxLength);
 
         $letters = 'bcdfghjklmnpqrstvwxyz';
         $vowels = 'aeiou';
         $code = '';
         for ($i = 0; $i < $length; ++$i) {
-            if ($i % 2 && mt_rand(0, 10) > 2 || !($i % 2) && mt_rand(0, 10) > 9) {
-                $code .= $vowels[mt_rand(0, 4)];
+            if ($i % 2 && random_int(0, 10) > 2 || !($i % 2) && random_int(0, 10) > 9) {
+                $code .= $vowels[random_int(0, 4)];
             } else {
-                $code .= $letters[mt_rand(0, 20)];
+                $code .= $letters[random_int(0, 20)];
             }
         }
 
@@ -298,8 +299,8 @@ protected function renderImageByGD($code)
         $x = 10;
         $y = round($this->height * 27 / 40);
         for ($i = 0; $i < $length; ++$i) {
-            $fontSize = (int) (mt_rand(26, 32) * $scale * 0.8);
-            $angle = mt_rand(-10, 10);
+            $fontSize = (int) (random_int(26, 32) * $scale * 0.8);
+            $angle = random_int(-10, 10);
             $letter = $code[$i];
             $box = imagettftext($image, $fontSize, $angle, $x, $y, $foreColor, $this->fontFile, $letter);
             $x = $box[2] + $this->offset;
@@ -341,9 +342,9 @@ protected function renderImageByImagick($code)
         for ($i = 0; $i < $length; ++$i) {
             $draw = new \ImagickDraw();
             $draw->setFont($this->fontFile);
-            $draw->setFontSize((int) (mt_rand(26, 32) * $scale * 0.8));
+            $draw->setFontSize((int) (random_int(26, 32) * $scale * 0.8));
             $draw->setFillColor($foreColor);
-            $image->annotateImage($draw, $x, $y, mt_rand(-10, 10), $code[$i]);
+            $image->annotateImage($draw, $x, $y, random_int(-10, 10), $code[$i]);
             $fontMetrics = $image->queryFontMetrics($draw, $code[$i]);
             $x += (int) $fontMetrics['textWidth'] + $this->offset;
         }
diff --git a/src/console/ErrorHandler.php b/src/console/ErrorHandler.php
index 16127a1b2d5..526de75dfac 100644
--- a/src/console/ErrorHandler.php
+++ b/src/console/ErrorHandler.php
@@ -39,7 +39,7 @@ protected function renderException($exception)
             } elseif (count($alternatives) > 1) {
                 $message .= "\n\nDid you mean one of these?\n    - " . implode("\n    - ", $alternatives);
             }
-        } elseif ($exception instanceof Exception && ($exception instanceof UserException || !YII_DEBUG)) {
+        } elseif ($exception instanceof UserException && ($exception instanceof Exception || !YII_DEBUG)) {
             $message = $this->formatMessage($exception->getName() . ': ') . $exception->getMessage();
         } elseif (YII_DEBUG) {
             if ($exception instanceof Exception) {
diff --git a/src/console/controllers/BaseMigrateController.php b/src/console/controllers/BaseMigrateController.php
index dc94497cc70..0d3f0de7d39 100644
--- a/src/console/controllers/BaseMigrateController.php
+++ b/src/console/controllers/BaseMigrateController.php
@@ -84,6 +84,20 @@ abstract class BaseMigrateController extends Controller
      * or a file path.
      */
     public $templateFile;
+    /**
+     * @var int the permission to be set for newly generated migration files.
+     * This value will be used by PHP chmod() function. No umask will be applied.
+     * If not set, the permission will be determined by the current environment.
+     * @since 2.0.43
+     */
+    public $newFileMode;
+    /**
+     * @var string|int the user and/or group ownership to be set for newly generated migration files.
+     * If not set, the ownership will be determined by the current environment.
+     * @since 2.0.43
+     * @see FileHelper::changeOwnership()
+     */
+    public $newFileOwnership;
     /**
      * @var bool indicates whether the console output should be compacted.
      * If this is set to true, the individual commands ran within the migration will not be output to the console.
@@ -573,9 +587,7 @@ public function actionHistory($limit = 10)
      */
     public function actionNew($limit = 10)
     {
-        if ($limit === 'all') {
-            $limit = null;
-        } else {
+        if ($limit !== 'all') {
             $limit = (int) $limit;
             if ($limit < 1) {
                 throw new Exception('The limit must be greater than 0.');
@@ -588,7 +600,7 @@ public function actionNew($limit = 10)
             $this->stdout("No new migrations found. Your system is up-to-date.\n", Console::FG_GREEN);
         } else {
             $n = count($migrations);
-            if ($limit && $n > $limit) {
+            if ($limit !== 'all' && $n > $limit) {
                 $migrations = array_slice($migrations, 0, $limit);
                 $this->stdout("Showing $limit out of $n new " . ($n === 1 ? 'migration' : 'migrations') . ":\n", Console::FG_YELLOW);
             } else {
@@ -663,6 +675,8 @@ public function actionCreate($name)
                 return ExitCode::IOERR;
             }
 
+            FileHelper::changeOwnership($file, $this->newFileOwnership, $this->newFileMode);
+
             $this->stdout("New migration created successfully.\n", Console::FG_GREEN);
         }
 
diff --git a/src/console/controllers/CacheController.php b/src/console/controllers/CacheController.php
index b53fe73d194..8675c53410c 100644
--- a/src/console/controllers/CacheController.php
+++ b/src/console/controllers/CacheController.php
@@ -84,11 +84,11 @@ public function actionFlush()
         $foundCaches = array_keys($caches);
         $notFoundCaches = array_diff($cachesInput, array_keys($caches));
 
-        if ($notFoundCaches) {
+        if ($notFoundCaches !== []) {
             $this->notifyNotFoundCaches($notFoundCaches);
         }
 
-        if (!$foundCaches) {
+        if ($foundCaches === []) {
             $this->notifyNoCachesFound();
             return ExitCode::OK;
         }
diff --git a/src/console/controllers/FixtureController.php b/src/console/controllers/FixtureController.php
index cce951f8004..667c2a56bcf 100644
--- a/src/console/controllers/FixtureController.php
+++ b/src/console/controllers/FixtureController.php
@@ -122,7 +122,7 @@ public function actionLoad(array $fixturesInput = [])
             $foundFixtures = $this->findFixtures($fixtures);
             $notFoundFixtures = array_diff($fixtures, $foundFixtures);
 
-            if ($notFoundFixtures) {
+            if ($notFoundFixtures !== []) {
                 $this->notifyNotFound($notFoundFixtures);
             }
         } else {
@@ -138,7 +138,7 @@ public function actionLoad(array $fixturesInput = [])
             );
         }
 
-        if (!$fixturesToLoad) {
+        if ($fixturesToLoad === []) {
             $this->notifyNothingToLoad($foundFixtures, $except);
             return ExitCode::OK;
         }
@@ -198,23 +198,23 @@ public function actionUnload(array $fixturesInput = [])
             $foundFixtures = $this->findFixtures($fixtures);
             $notFoundFixtures = array_diff($fixtures, $foundFixtures);
 
-            if ($notFoundFixtures) {
+            if ($notFoundFixtures !== []) {
                 $this->notifyNotFound($notFoundFixtures);
             }
         } else {
             $foundFixtures = $this->findFixtures();
         }
 
-        $fixturesToUnload = array_diff($foundFixtures, $except);
-
-        if (!$foundFixtures) {
+        if ($foundFixtures === []) {
             throw new Exception(
                 'No files were found for: "' . implode(', ', $fixturesInput) . "\".\n" .
                 "Check that files exist under fixtures path: \n\"" . $this->getFixturePath() . '".'
             );
         }
 
-        if (!$fixturesToUnload) {
+        $fixturesToUnload = array_diff($foundFixtures, $except);
+
+        if ($fixturesToUnload === []) {
             $this->notifyNothingToUnload($foundFixtures, $except);
             return ExitCode::OK;
         }
@@ -225,7 +225,7 @@ public function actionUnload(array $fixturesInput = [])
 
         $fixtures = $this->getFixturesConfig(array_merge($this->globalFixtures, $fixturesToUnload));
 
-        if (!$fixtures) {
+        if ($fixtures === []) {
             throw new Exception('No fixtures were found in namespace: ' . $this->namespace . '".');
         }
 
diff --git a/src/console/controllers/HelpController.php b/src/console/controllers/HelpController.php
index 5185f4e011b..712fa76028a 100644
--- a/src/console/controllers/HelpController.php
+++ b/src/console/controllers/HelpController.php
@@ -485,7 +485,7 @@ protected function formatOptionHelp($name, $required, $type, $defaultValue, $com
             }
             if (is_bool($defaultValue)) {
                 // show as integer to avoid confusion
-                $defaultValue = (int)$defaultValue;
+                $defaultValue = (int) $defaultValue;
             }
             if (is_string($defaultValue)) {
                 $defaultValue = "'" . $defaultValue . "'";
diff --git a/src/console/controllers/MigrateController.php b/src/console/controllers/MigrateController.php
index aa2625ea06c..3f0efeaac12 100644
--- a/src/console/controllers/MigrateController.php
+++ b/src/console/controllers/MigrateController.php
@@ -301,11 +301,9 @@ protected function truncateDatabase()
 
         // First drop all foreign keys,
         foreach ($schemas as $schema) {
-            if ($schema->foreignKeys) {
-                foreach ($schema->foreignKeys as $name => $foreignKey) {
-                    $db->createCommand()->dropForeignKey($name, $schema->name)->execute();
-                    $this->stdout("Foreign key $name dropped.\n");
-                }
+            foreach ($schema->foreignKeys as $name => $foreignKey) {
+                $db->createCommand()->dropForeignKey($name, $schema->name)->execute();
+                $this->stdout("Foreign key $name dropped.\n");
             }
         }
 
@@ -580,10 +578,10 @@ protected function parseFields()
      */
     protected function splitFieldIntoChunks($field)
     {
-        $hasDoubleQuotes = false;
+        $originalDefaultValue = null;
+        $defaultValue = null;
         preg_match_all('/defaultValue\(["\'].*?:?.*?["\']\)/', $field, $matches, PREG_SET_ORDER, 0);
         if (isset($matches[0][0])) {
-            $hasDoubleQuotes = true;
             $originalDefaultValue = $matches[0][0];
             $defaultValue = str_replace(':', '{{colon}}', $originalDefaultValue);
             $field = str_replace($originalDefaultValue, $defaultValue, $field);
@@ -591,7 +589,7 @@ protected function splitFieldIntoChunks($field)
 
         $chunks = preg_split('/\s?:\s?/', $field);
 
-        if (is_array($chunks) && $hasDoubleQuotes) {
+        if (is_array($chunks) && $defaultValue !== null && $originalDefaultValue !== null) {
             foreach ($chunks as $key => $chunk) {
                 $chunks[$key] = str_replace($defaultValue, $originalDefaultValue, $chunk);
             }
diff --git a/src/console/controllers/ServeController.php b/src/console/controllers/ServeController.php
index 5eb98165974..67afee668b3 100644
--- a/src/console/controllers/ServeController.php
+++ b/src/console/controllers/ServeController.php
@@ -36,7 +36,7 @@ class ServeController extends Controller
      */
     public $docroot = '@app/web';
     /**
-     * @var string path to router script.
+     * @var string path or [path alias](guide:concept-aliases) to router script.
      * See https://secure.php.net/manual/en/features.commandline.webserver.php
      */
     public $router;
@@ -52,6 +52,7 @@ class ServeController extends Controller
     public function actionIndex($address = 'localhost')
     {
         $documentRoot = Yii::getAlias($this->docroot);
+        $router = $this->router !== null ? Yii::getAlias($this->router) : null;
 
         if (strpos($address, ':') === false) {
             $address = $address . ':' . $this->port;
@@ -67,19 +68,19 @@ public function actionIndex($address = 'localhost')
             return self::EXIT_CODE_ADDRESS_TAKEN_BY_ANOTHER_PROCESS;
         }
 
-        if ($this->router !== null && !file_exists($this->router)) {
-            $this->stdout("Routing file \"$this->router\" does not exist.\n", Console::FG_RED);
+        if ($this->router !== null && !file_exists($router)) {
+            $this->stdout("Routing file \"$router\" does not exist.\n", Console::FG_RED);
             return self::EXIT_CODE_NO_ROUTING_FILE;
         }
 
         $this->stdout("Server started on http://{$address}/\n");
         $this->stdout("Document root is \"{$documentRoot}\"\n");
         if ($this->router) {
-            $this->stdout("Routing file is \"$this->router\"\n");
+            $this->stdout("Routing file is \"$router\"\n");
         }
         $this->stdout("Quit the server with CTRL-C or COMMAND-C.\n");
 
-        passthru('"' . PHP_BINARY . '"' . " -S {$address} -t \"{$documentRoot}\" $this->router");
+        passthru('"' . PHP_BINARY . '"' . " -S {$address} -t \"{$documentRoot}\" $router");
     }
 
     /**
diff --git a/src/data/DataFilter.php b/src/data/DataFilter.php
index 6af8447caec..c07e2a86407 100644
--- a/src/data/DataFilter.php
+++ b/src/data/DataFilter.php
@@ -355,7 +355,7 @@ protected function detectSearchAttributeTypes()
     /**
      * Detect attribute type from given validator.
      *
-     * @param Validator validator from which to detect attribute type.
+     * @param Validator $validator validator from which to detect attribute type.
      * @return string|null detected attribute type.
      * @since 2.0.14
      */
diff --git a/src/db/ActiveQuery.php b/src/db/ActiveQuery.php
index 300f9dda7fe..434b59cd598 100644
--- a/src/db/ActiveQuery.php
+++ b/src/db/ActiveQuery.php
@@ -699,7 +699,7 @@ private function joinWithRelation($parent, $child, $joinType)
      * ```php
      * public function getActiveUsers()
      * {
-     *     return $this->hasMany(User::className(), ['id' => 'user_id'])
+     *     return $this->hasMany(User::class, ['id' => 'user_id'])
      *                 ->onCondition(['active' => true]);
      * }
      * ```
@@ -769,7 +769,7 @@ public function orOnCondition($condition, $params = [])
      * ```php
      * public function getItems()
      * {
-     *     return $this->hasMany(Item::className(), ['id' => 'item_id'])
+     *     return $this->hasMany(Item::class, ['id' => 'item_id'])
      *                 ->viaTable('order_item', ['order_id' => 'id']);
      * }
      * ```
diff --git a/src/db/ActiveRelationTrait.php b/src/db/ActiveRelationTrait.php
index 6f6e12c7f7e..461ea759cc2 100644
--- a/src/db/ActiveRelationTrait.php
+++ b/src/db/ActiveRelationTrait.php
@@ -87,11 +87,11 @@ public function __clone()
      * class Order extends ActiveRecord
      * {
      *    public function getOrderItems() {
-     *        return $this->hasMany(OrderItem::className(), ['order_id' => 'id']);
+     *        return $this->hasMany(OrderItem::class, ['order_id' => 'id']);
      *    }
      *
      *    public function getItems() {
-     *        return $this->hasMany(Item::className(), ['id' => 'item_id'])
+     *        return $this->hasMany(Item::class, ['id' => 'item_id'])
      *                    ->via('orderItems');
      *    }
      * }
@@ -126,7 +126,7 @@ public function via($relationName, callable $callable = null)
      * ```php
      * public function getOrders()
      * {
-     *     return $this->hasMany(Order::className(), ['customer_id' => 'id'])->inverseOf('customer');
+     *     return $this->hasMany(Order::class, ['customer_id' => 'id'])->inverseOf('customer');
      * }
      * ```
      *
@@ -135,7 +135,7 @@ public function via($relationName, callable $callable = null)
      * ```php
      * public function getCustomer()
      * {
-     *     return $this->hasOne(Customer::className(), ['id' => 'customer_id'])->inverseOf('orders');
+     *     return $this->hasOne(Customer::class, ['id' => 'customer_id'])->inverseOf('orders');
      * }
      * ```
      *
diff --git a/src/db/BaseActiveRecord.php b/src/db/BaseActiveRecord.php
index 6555cf2f5db..d5675479c10 100644
--- a/src/db/BaseActiveRecord.php
+++ b/src/db/BaseActiveRecord.php
@@ -226,7 +226,7 @@ public static function deleteAll($condition = null)
      *    Or add [[\yii\behaviors\OptimisticLockBehavior|OptimisticLockBehavior]] to your model
      *    class in order to automate the process.
      * 3. In the Web form that collects the user input, add a hidden field that stores
-     *    the lock version of the recording being updated.
+     *    the lock version of the record being updated.
      * 4. In the controller action that does the data updating, try to catch the [[StaleObjectException]]
      *    and implement necessary business logic (e.g. merging the changes, prompting stated data)
      *    to resolve the conflict.
@@ -335,9 +335,9 @@ public function __isset($name)
     {
         try {
             return $this->__get($name) !== null;
-        } catch (\Throwable $t) {
+        } catch (\Exception $t) {
             return false;
-        } catch (\Exception $e) {
+        } catch (\Throwable $e) {
             return false;
         }
     }
@@ -376,7 +376,7 @@ public function __unset($name)
      * ```php
      * public function getCountry()
      * {
-     *     return $this->hasOne(Country::className(), ['id' => 'country_id']);
+     *     return $this->hasOne(Country::class, ['id' => 'country_id']);
      * }
      * ```
      *
@@ -411,7 +411,7 @@ public function hasOne($class, $link)
      * ```php
      * public function getOrders()
      * {
-     *     return $this->hasMany(Order::className(), ['customer_id' => 'id']);
+     *     return $this->hasMany(Order::class, ['customer_id' => 'id']);
      * }
      * ```
      *
@@ -1278,7 +1278,8 @@ public function getRelation($name, $throwException = true)
      *
      * The relationship is established by setting the foreign key value(s) in one model
      * to be the corresponding primary key value(s) in the other model.
-     * The model with the foreign key will be saved into database without performing validation.
+     * The model with the foreign key will be saved into database **without** performing validation
+     * and **without** events/behaviors.
      *
      * If the relationship involves a junction table, a new row will be inserted into the
      * junction table which contains the primary key values from both models.
@@ -1294,6 +1295,7 @@ public function getRelation($name, $throwException = true)
      */
     public function link($name, $model, $extraColumns = [])
     {
+        /* @var $relation ActiveQueryInterface|ActiveQuery */
         $relation = $this->getRelation($name);
 
         if ($relation->via !== null) {
@@ -1330,16 +1332,16 @@ public function link($name, $model, $extraColumns = [])
                 $record->insert(false);
             } else {
                 /* @var $viaTable string */
-                static::getDb()->createCommand()
-                    ->insert($viaTable, $columns)->execute();
+                static::getDb()->createCommand()->insert($viaTable, $columns)->execute();
             }
         } else {
             $p1 = $model->isPrimaryKey(array_keys($relation->link));
             $p2 = static::isPrimaryKey(array_values($relation->link));
             if ($p1 && $p2) {
-                if ($this->getIsNewRecord() && $model->getIsNewRecord()) {
-                    throw new InvalidCallException('Unable to link models: at most one model can be newly created.');
-                } elseif ($this->getIsNewRecord()) {
+                if ($this->getIsNewRecord()) {
+                    if ($model->getIsNewRecord()) {
+                        throw new InvalidCallException('Unable to link models: at most one model can be newly created.');
+                    }
                     $this->bindModels(array_flip($relation->link), $this, $model);
                 } else {
                     $this->bindModels($relation->link, $model, $this);
@@ -1492,6 +1494,7 @@ public function unlink($name, $model, $delete = false)
      */
     public function unlinkAll($name, $delete = false)
     {
+        /* @var $relation ActiveQueryInterface|ActiveQuery */
         $relation = $this->getRelation($name);
 
         if ($relation->via !== null) {
diff --git a/src/db/ColumnSchema.php b/src/db/ColumnSchema.php
index d392aba8c3d..5eb6b7b891b 100644
--- a/src/db/ColumnSchema.php
+++ b/src/db/ColumnSchema.php
@@ -154,6 +154,13 @@ protected function typecast($value)
                     // ensure type cast always has . as decimal separator in all locales
                     return StringHelper::floatToString($value);
                 }
+                if (is_numeric($value)
+                    && ColumnSchemaBuilder::CATEGORY_NUMERIC === ColumnSchemaBuilder::$typeCategoryMap[$this->type]
+                ) {
+                    // https://github.com/yiisoft/yii2/issues/14663
+                    return $value;
+                }
+
                 return (string) $value;
             case 'integer':
                 return (int) $value;
diff --git a/src/db/ColumnSchemaBuilder.php b/src/db/ColumnSchemaBuilder.php
index cb0e84942dd..b9616148da2 100644
--- a/src/db/ColumnSchemaBuilder.php
+++ b/src/db/ColumnSchemaBuilder.php
@@ -16,6 +16,8 @@
  *
  * See [[SchemaBuilderTrait]] for more detailed description and usage examples.
  *
+ * @property array $categoryMap Mapping of abstract column types (keys) to type categories (values).
+ *
  * @author Vasenin Matvey <vaseninm@gmail.com>
  * @since 2.0.6
  */
@@ -81,9 +83,9 @@ class ColumnSchemaBuilder extends BaseObject
 
     /**
      * @var array mapping of abstract column types (keys) to type categories (values).
-     * @since 2.0.8
+     * @since 2.0.43
      */
-    public $categoryMap = [
+    public static $typeCategoryMap = [
         Schema::TYPE_PK => self::CATEGORY_PK,
         Schema::TYPE_UPK => self::CATEGORY_PK,
         Schema::TYPE_BIGPK => self::CATEGORY_PK,
@@ -289,6 +291,24 @@ public function __toString()
         return $this->buildCompleteString($format);
     }
 
+    /**
+     * @return array mapping of abstract column types (keys) to type categories (values).
+     * @since 2.0.43
+     */
+    public function getCategoryMap()
+    {
+        return static::$typeCategoryMap;
+    }
+
+    /**
+     * @param array $categoryMap mapping of abstract column types (keys) to type categories (values).
+     * @since 2.0.43
+     */
+    public function setCategoryMap($categoryMap)
+    {
+        static::$typeCategoryMap = $categoryMap;
+    }
+
     /**
      * Builds the length/precision part of the column.
      * @return string
diff --git a/src/db/Connection.php b/src/db/Connection.php
index 391ef7f7f75..c31a8689f47 100644
--- a/src/db/Connection.php
+++ b/src/db/Connection.php
@@ -694,20 +694,24 @@ protected function createPdoInstance()
     {
         $pdoClass = $this->pdoClass;
         if ($pdoClass === null) {
-            $pdoClass = 'PDO';
+            $driver = null;
             if ($this->_driverName !== null) {
                 $driver = $this->_driverName;
             } elseif (($pos = strpos($this->dsn, ':')) !== false) {
                 $driver = strtolower(substr($this->dsn, 0, $pos));
             }
-            if (isset($driver)) {
-                if ($driver === 'mssql') {
+            switch ($driver) {
+                case 'mssql':
                     $pdoClass = 'yii\db\mssql\PDO';
-                } elseif ($driver === 'dblib') {
+                    break;
+                case 'dblib':
                     $pdoClass = 'yii\db\mssql\DBLibPDO';
-                } elseif ($driver === 'sqlsrv') {
+                    break;
+                case 'sqlsrv':
                     $pdoClass = 'yii\db\mssql\SqlsrvPDO';
-                }
+                    break;
+                default:
+                    $pdoClass = 'PDO';
             }
         }
 
diff --git a/src/db/Query.php b/src/db/Query.php
index f85881ffa2b..1892c8a272e 100644
--- a/src/db/Query.php
+++ b/src/db/Query.php
@@ -145,7 +145,7 @@ class Query extends Component implements QueryInterface, ExpressionInterface
 
     /**
      * Creates a DB command that can be used to execute this query.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return Command the created DB command instance.
      */
@@ -236,7 +236,7 @@ public function each($batchSize = 100, $db = null)
 
     /**
      * Executes the query and returns all results as an array.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return array the query results. If the query results in nothing, an empty array will be returned.
      */
@@ -273,7 +273,7 @@ public function populate($rows)
 
     /**
      * Executes the query and returns a single row of result.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return array|bool the first row (in terms of an array) of the query result. False is returned if the query
      * results in nothing.
@@ -306,7 +306,7 @@ public function scalar($db = null)
 
     /**
      * Executes the query and returns the first column of the result.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return array the first column of the query result. An empty array is returned if the query results in nothing.
      */
@@ -354,9 +354,9 @@ public function column($db = null)
      * Returns the number of records.
      * @param string $q the COUNT expression. Defaults to '*'.
      * Make sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given (or null), the `db` application component will be used.
-     * @return int|string number of records. The result may be a string depending on the
+     * @return int|string|null number of records. The result may be a string depending on the
      * underlying database engine and to support integer values higher than a 32bit PHP integer can handle.
      */
     public function count($q = '*', $db = null)
@@ -406,7 +406,7 @@ public function average($q, $db = null)
      * Returns the minimum of the specified column values.
      * @param string $q the column name or expression.
      * Make sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return mixed the minimum of the specified column values.
      */
@@ -419,7 +419,7 @@ public function min($q, $db = null)
      * Returns the maximum of the specified column values.
      * @param string $q the column name or expression.
      * Make sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return mixed the maximum of the specified column values.
      */
@@ -430,7 +430,7 @@ public function max($q, $db = null)
 
     /**
      * Returns a value indicating whether the query result contains any row of data.
-     * @param Connection $db the database connection used to generate the SQL statement.
+     * @param Connection|null $db the database connection used to generate the SQL statement.
      * If this parameter is not given, the `db` application component will be used.
      * @return bool whether the query result contains any row of data.
      */
@@ -450,8 +450,9 @@ public function exists($db = null)
      * Queries a scalar value by setting [[select]] first.
      * Restores the value of select to make this query reusable.
      * @param string|ExpressionInterface $selectExpression
-     * @param Connection|null $db
-     * @return bool|string
+     * @param Connection|null $db the database connection used to execute the query.
+     * @return bool|string|null
+     * @throws \Throwable if can't create command
      */
     protected function queryScalar($selectExpression, $db)
     {
@@ -479,7 +480,7 @@ protected function queryScalar($selectExpression, $db)
             try {
                 $command = $this->createCommand($db);
             } catch (\Exception $e) {
-                // throw it later
+                // throw it later (for PHP < 7.0)
             } catch (\Throwable $e) {
                 // throw it later
             }
diff --git a/src/db/QueryInterface.php b/src/db/QueryInterface.php
index df57ad38385..4f266f490a9 100644
--- a/src/db/QueryInterface.php
+++ b/src/db/QueryInterface.php
@@ -42,15 +42,15 @@ public function one($db = null);
     /**
      * Returns the number of records.
      * @param string $q the COUNT expression. Defaults to '*'.
-     * @param Connection $db the database connection used to execute the query.
+     * @param Connection|null $db the database connection used to execute the query.
      * If this parameter is not given, the `db` application component will be used.
-     * @return int number of records.
+     * @return int|string|null number of records.
      */
     public function count($q = '*', $db = null);
 
     /**
      * Returns a value indicating whether the query result contains any row of data.
-     * @param Connection $db the database connection used to execute the query.
+     * @param Connection|null $db the database connection used to execute the query.
      * If this parameter is not given, the `db` application component will be used.
      * @return bool whether the query result contains any row of data.
      */
diff --git a/src/db/SqlToken.php b/src/db/SqlToken.php
index 0e947c17458..fa570689cc3 100644
--- a/src/db/SqlToken.php
+++ b/src/db/SqlToken.php
@@ -267,10 +267,8 @@ private function tokensMatch(SqlToken $patternToken, SqlToken $token, $offset =
 
                 if ($firstMatchIndex === null) {
                     $firstMatchIndex = $offset;
-                    $lastMatchIndex = $offset;
-                } else {
-                    $lastMatchIndex = $offset;
                 }
+                $lastMatchIndex = $offset;
                 $wildcard = false;
                 $offset++;
                 continue 2;
diff --git a/src/db/conditions/InConditionBuilder.php b/src/db/conditions/InConditionBuilder.php
index f685216c111..dd238b7a7ce 100644
--- a/src/db/conditions/InConditionBuilder.php
+++ b/src/db/conditions/InConditionBuilder.php
@@ -54,18 +54,16 @@ public function build(ExpressionInterface $expression, array &$params = [])
         if (is_array($column)) {
             if (count($column) > 1) {
                 return $this->buildCompositeInCondition($operator, $column, $values, $params);
-            } else {
-                $column = reset($column);
             }
+            $column = reset($column);
         }
 
         if ($column instanceof \Traversable) {
             if (iterator_count($column) > 1) {
                 return $this->buildCompositeInCondition($operator, $column, $values, $params);
-            } else {
-                $column->rewind();
-                $column = $column->current();
             }
+            $column->rewind();
+            $column = $column->current();
         }
 
         if (is_array($values)) {
@@ -74,6 +72,8 @@ public function build(ExpressionInterface $expression, array &$params = [])
             $rawValues = $this->getRawValuesFromTraversableObject($values);
         }
 
+        $nullCondition = null;
+        $nullConditionOperator = null;
         if (isset($rawValues) && in_array(null, $rawValues, true)) {
             $nullCondition = $this->getNullCondition($operator, $column);
             $nullConditionOperator = $operator === 'IN' ? 'OR' : 'AND';
@@ -81,7 +81,7 @@ public function build(ExpressionInterface $expression, array &$params = [])
 
         $sqlValues = $this->buildValues($expression, $values, $params);
         if (empty($sqlValues)) {
-            if (!isset($nullCondition)) {
+            if ($nullCondition === null) {
                 return $operator === 'IN' ? '0=1' : '';
             }
             return $nullCondition;
@@ -97,7 +97,9 @@ public function build(ExpressionInterface $expression, array &$params = [])
             $sql = $column . $operator . reset($sqlValues);
         }
 
-        return isset($nullCondition) ? sprintf('%s %s %s', $sql, $nullConditionOperator, $nullCondition) : $sql;
+        return $nullCondition !== null && $nullConditionOperator !== null
+            ? sprintf('%s %s %s', $sql, $nullConditionOperator, $nullCondition)
+            : $sql;
     }
 
     /**
diff --git a/src/db/mssql/QueryBuilder.php b/src/db/mssql/QueryBuilder.php
index 8e250a5af02..79c5d3d180f 100644
--- a/src/db/mssql/QueryBuilder.php
+++ b/src/db/mssql/QueryBuilder.php
@@ -11,6 +11,7 @@
 use yii\base\NotSupportedException;
 use yii\db\Constraint;
 use yii\db\Expression;
+use yii\db\TableSchema;
 
 /**
  * QueryBuilder is the query builder for MS SQL Server databases (version 2008 and above).
@@ -107,7 +108,7 @@ protected function newBuildOrderByAndLimit($sql, $orderBy, $limit, $offset)
      * Builds the ORDER BY/LIMIT/OFFSET clauses for SQL SERVER 2005 to 2008.
      * @param string $sql the existing SQL (without ORDER BY/LIMIT/OFFSET)
      * @param array $orderBy the order by columns. See [[\yii\db\Query::orderBy]] for more details on how to specify this parameter.
-     * @param int $limit the limit number. See [[\yii\db\Query::limit]] for more details.
+     * @param int|Expression $limit the limit number. See [[\yii\db\Query::limit]] for more details.
      * @param int $offset the offset number. See [[\yii\db\Query::offset]] for more details.
      * @return string the SQL completed with ORDER BY/LIMIT/OFFSET (if any)
      */
@@ -483,10 +484,11 @@ public function insert($table, $columns, &$params)
         $version2005orLater = version_compare($this->db->getSchema()->getServerVersion(), '9', '>=');
 
         list($names, $placeholders, $values, $params) = $this->prepareInsertValues($table, $columns, $params);
+        $cols = [];
+        $columns = [];
         if ($version2005orLater) {
+            /* @var $schema TableSchema */
             $schema = $this->db->getTableSchema($table);
-            $cols = [];
-            $columns = [];
             foreach ($schema->columns as $column) {
                 if ($column->isComputed) {
                     continue;
diff --git a/src/db/mssql/Schema.php b/src/db/mssql/Schema.php
index a2ad449c63e..cb451e68d12 100644
--- a/src/db/mssql/Schema.php
+++ b/src/db/mssql/Schema.php
@@ -394,9 +394,9 @@ protected function loadColumnSchema($info)
             }
             if (!empty($matches[2])) {
                 $values = explode(',', $matches[2]);
-                $column->size = $column->precision = (int)$values[0];
+                $column->size = $column->precision = (int) $values[0];
                 if (isset($values[1])) {
-                    $column->scale = (int)$values[1];
+                    $column->scale = (int) $values[1];
                 }
                 if ($column->size === 1 && ($type === 'tinyint' || $type === 'bit')) {
                     $column->type = 'boolean';
diff --git a/src/db/pgsql/Schema.php b/src/db/pgsql/Schema.php
index 5959b1bf98f..8f0f1e7d42a 100644
--- a/src/db/pgsql/Schema.php
+++ b/src/db/pgsql/Schema.php
@@ -607,7 +607,7 @@ protected function loadColumnSchema($info)
         $column->precision = $info['numeric_precision'];
         $column->scale = $info['numeric_scale'];
         $column->size = $info['size'] === null ? null : (int) $info['size'];
-        $column->dimension = (int)$info['dimension'];
+        $column->dimension = (int) $info['dimension'];
         // pg_get_serial_sequence() doesn't track DEFAULT value change. GENERATED BY IDENTITY columns always have null default value
         if (isset($column->defaultValue) && preg_match("/nextval\\('\"?\\w+\"?\.?\"?\\w+\"?'(::regclass)?\\)/", $column->defaultValue) === 1) {
             $column->sequenceName = preg_replace(['/nextval/', '/::/', '/regclass/', '/\'\)/', '/\(\'/'], '', $column->defaultValue);
diff --git a/src/di/Instance.php b/src/di/Instance.php
index 52943860488..bea4fe8cdd4 100644
--- a/src/di/Instance.php
+++ b/src/di/Instance.php
@@ -102,9 +102,9 @@ public static function of($id, $optional = false)
      * use yii\db\Connection;
      *
      * // returns Yii::$app->db
-     * $db = Instance::ensure('db', Connection::className());
+     * $db = Instance::ensure('db', Connection::class);
      * // returns an instance of Connection using the given configuration
-     * $db = Instance::ensure(['dsn' => 'sqlite:path/to/my.db'], Connection::className());
+     * $db = Instance::ensure(['dsn' => 'sqlite:path/to/my.db'], Connection::class);
      * ```
      *
      * @param object|string|array|static $reference an object or a reference to the desired object.
diff --git a/src/filters/AccessControl.php b/src/filters/AccessControl.php
index 4224f487265..3e91b80a22e 100644
--- a/src/filters/AccessControl.php
+++ b/src/filters/AccessControl.php
@@ -31,7 +31,7 @@
  * {
  *     return [
  *         'access' => [
- *             'class' => \yii\filters\AccessControl::className(),
+ *             'class' => \yii\filters\AccessControl::class,
  *             'only' => ['create', 'update'],
  *             'rules' => [
  *                 // deny all POST requests
diff --git a/src/filters/AccessRule.php b/src/filters/AccessRule.php
index 606c1701026..aece5ccf68a 100644
--- a/src/filters/AccessRule.php
+++ b/src/filters/AccessRule.php
@@ -66,10 +66,10 @@ class AccessRule extends Component
      * @see $roleParams
      */
     public $roles;
-    /** 
+    /**
      * @var array list of RBAC (Role-Based Access Control) permissions that this rules applies to.
      * [[User::can()]] will be called to check access.
-     * 
+     *
      * If this property is not set or empty, it means this rule applies regardless of permissions.
      * @since 2.0.12
      * @see $roles
@@ -264,16 +264,17 @@ protected function matchIP($ip)
             return true;
         }
         foreach ($this->ips as $rule) {
-            if ($rule === '*' ||
-                $rule === $ip ||
-                (
-                    $ip !== null &&
-                    ($pos = strpos($rule, '*')) !== false &&
-                    strncmp($ip, $rule, $pos) === 0
-                ) ||
-                (
-                    ($pos = strpos($rule, '/')) !== false &&
-                    IpHelper::inRange($ip, $rule) === true
+            if (
+                $rule === '*'
+                || $rule === $ip
+                || (
+                    $ip !== null
+                    && ($pos = strpos($rule, '*')) !== false
+                    && strncmp($ip, $rule, $pos) === 0
+                )
+                || (
+                    strpos($rule, '/') !== false
+                    && IpHelper::inRange($ip, $rule) === true
                 )
             ) {
                 return true;
diff --git a/src/filters/Cors.php b/src/filters/Cors.php
index cdfe280868d..356053f514b 100644
--- a/src/filters/Cors.php
+++ b/src/filters/Cors.php
@@ -26,7 +26,7 @@
  * {
  *     return [
  *         'corsFilter' => [
- *             'class' => \yii\filters\Cors::className(),
+ *             'class' => \yii\filters\Cors::class,
  *         ],
  *     ];
  * }
@@ -40,7 +40,7 @@
  * {
  *     return [
  *         'corsFilter' => [
- *             'class' => \yii\filters\Cors::className(),
+ *             'class' => \yii\filters\Cors::class,
  *             'cors' => [
  *                 // restrict access to
  *                 'Origin' => ['http://www.myserver.com', 'https://www.myserver.com'],
@@ -197,7 +197,7 @@ public function prepareHeaders($requestHeaders)
         if (isset($this->cors['Access-Control-Expose-Headers'])) {
             $responseHeaders['Access-Control-Expose-Headers'] = implode(', ', $this->cors['Access-Control-Expose-Headers']);
         }
-        
+
         if (isset($this->cors['Access-Control-Allow-Headers'])) {
             $responseHeaders['Access-Control-Allow-Headers'] = implode(', ', $this->cors['Access-Control-Allow-Headers']);
         }
diff --git a/src/filters/HostControl.php b/src/filters/HostControl.php
index 0c9b7fbc2c2..51aa5bee24a 100644
--- a/src/filters/HostControl.php
+++ b/src/filters/HostControl.php
@@ -45,7 +45,7 @@
  *     {
  *         return [
  *             'hostControl' => [
- *                 'class' => HostControl::className(),
+ *                 'class' => HostControl::class,
  *                 'allowedHosts' => [
  *                     'example.com',
  *                     '*.example.com',
diff --git a/src/filters/RateLimiter.php b/src/filters/RateLimiter.php
index daa8310d269..5ffc1a69ff2 100644
--- a/src/filters/RateLimiter.php
+++ b/src/filters/RateLimiter.php
@@ -24,7 +24,7 @@
  * {
  *     return [
  *         'rateLimiter' => [
- *             'class' => \yii\filters\RateLimiter::className(),
+ *             'class' => \yii\filters\RateLimiter::class,
  *         ],
  *     ];
  * }
diff --git a/src/filters/VerbFilter.php b/src/filters/VerbFilter.php
index 272797c21cf..76b6d9e4fe0 100644
--- a/src/filters/VerbFilter.php
+++ b/src/filters/VerbFilter.php
@@ -28,7 +28,7 @@
  * {
  *     return [
  *         'verbs' => [
- *             'class' => \yii\filters\VerbFilter::className(),
+ *             'class' => \yii\filters\VerbFilter::class,
  *             'actions' => [
  *                 'index'  => ['GET'],
  *                 'view'   => ['GET'],
@@ -57,6 +57,8 @@ class VerbFilter extends Behavior
      * You can use `'*'` to stand for all actions. When an action is explicitly
      * specified, it takes precedence over the specification given by `'*'`.
      *
+     * @see https://www.yiiframework.com/doc/guide/2.0/en/structure-controllers#action-ids
+     *
      * For example,
      *
      * ```php
@@ -64,6 +66,7 @@ class VerbFilter extends Behavior
      *   'create' => ['GET', 'POST'],
      *   'update' => ['GET', 'PUT', 'POST'],
      *   'delete' => ['POST', 'DELETE'],
+     *   'author-comment' => ['POST', 'DELETE'],
      *   '*' => ['GET'],
      * ]
      * ```
diff --git a/src/filters/auth/CompositeAuth.php b/src/filters/auth/CompositeAuth.php
index 3b63c5af4ae..37043d4235d 100644
--- a/src/filters/auth/CompositeAuth.php
+++ b/src/filters/auth/CompositeAuth.php
@@ -23,10 +23,10 @@
  * {
  *     return [
  *         'compositeAuth' => [
- *             'class' => \yii\filters\auth\CompositeAuth::className(),
+ *             'class' => \yii\filters\auth\CompositeAuth::class,
  *             'authMethods' => [
- *                 \yii\filters\auth\HttpBasicAuth::className(),
- *                 \yii\filters\auth\QueryParamAuth::className(),
+ *                 \yii\filters\auth\HttpBasicAuth::class,
+ *                 \yii\filters\auth\QueryParamAuth::class,
  *             ],
  *         ],
  *     ];
diff --git a/src/filters/auth/HttpBasicAuth.php b/src/filters/auth/HttpBasicAuth.php
index 3d60077f6ae..8ba40e0bf73 100644
--- a/src/filters/auth/HttpBasicAuth.php
+++ b/src/filters/auth/HttpBasicAuth.php
@@ -17,7 +17,7 @@
  * {
  *     return [
  *         'basicAuth' => [
- *             'class' => \yii\filters\auth\HttpBasicAuth::className(),
+ *             'class' => \yii\filters\auth\HttpBasicAuth::class,
  *         ],
  *     ];
  * }
@@ -34,7 +34,7 @@
  * {
  *     return [
  *         'basicAuth' => [
- *             'class' => \yii\filters\auth\HttpBasicAuth::className(),
+ *             'class' => \yii\filters\auth\HttpBasicAuth::class,
  *             'auth' => function ($username, $password) {
  *                 $user = User::find()->where(['username' => $username])->one();
  *                 if ($user->verifyPassword($password)) {
diff --git a/src/filters/auth/HttpBearerAuth.php b/src/filters/auth/HttpBearerAuth.php
index 82b97762746..f5fb80a97df 100644
--- a/src/filters/auth/HttpBearerAuth.php
+++ b/src/filters/auth/HttpBearerAuth.php
@@ -17,7 +17,7 @@
  * {
  *     return [
  *         'bearerAuth' => [
- *             'class' => \yii\filters\auth\HttpBearerAuth::className(),
+ *             'class' => \yii\filters\auth\HttpBearerAuth::class,
  *         ],
  *     ];
  * }
diff --git a/src/filters/auth/HttpHeaderAuth.php b/src/filters/auth/HttpHeaderAuth.php
index ea32b7050bb..1b0dbbff152 100644
--- a/src/filters/auth/HttpHeaderAuth.php
+++ b/src/filters/auth/HttpHeaderAuth.php
@@ -17,7 +17,7 @@
  * {
  *     return [
  *         'basicAuth' => [
- *             'class' => \yii\filters\auth\HttpHeaderAuth::className(),
+ *             'class' => \yii\filters\auth\HttpHeaderAuth::class,
  *         ],
  *     ];
  * }
diff --git a/src/grid/ActionColumn.php b/src/grid/ActionColumn.php
index e8dbfed287a..d945e1ea1a0 100644
--- a/src/grid/ActionColumn.php
+++ b/src/grid/ActionColumn.php
@@ -20,7 +20,7 @@
  * 'columns' => [
  *     // ...
  *     [
- *         'class' => ActionColumn::className(),
+ *         'class' => ActionColumn::class,
  *         // you may configure additional properties here
  *     ],
  * ]
diff --git a/src/grid/GridView.php b/src/grid/GridView.php
index 6de342d86c8..1fa783f9adb 100644
--- a/src/grid/GridView.php
+++ b/src/grid/GridView.php
@@ -148,14 +148,14 @@ class GridView extends BaseListView
      *
      * ```php
      * [
-     *     ['class' => SerialColumn::className()],
+     *     ['class' => SerialColumn::class],
      *     [
-     *         'class' => DataColumn::className(), // this line is optional
+     *         'class' => DataColumn::class, // this line is optional
      *         'attribute' => 'name',
      *         'format' => 'text',
      *         'label' => 'Name',
      *     ],
-     *     ['class' => CheckboxColumn::className()],
+     *     ['class' => CheckboxColumn::class],
      * ]
      * ```
      *
@@ -359,7 +359,7 @@ public function renderItems()
 
         $tableFooter = false;
         $tableFooterAfterBody = false;
-        
+
         if ($this->showFooter) {
             if ($this->placeFooterAfterBody) {
                 $tableFooterAfterBody = $this->renderTableFooter();
diff --git a/src/helpers/BaseFileHelper.php b/src/helpers/BaseFileHelper.php
index 4fa96cf281b..b1bf1c19e52 100644
--- a/src/helpers/BaseFileHelper.php
+++ b/src/helpers/BaseFileHelper.php
@@ -9,6 +9,7 @@
 
 use Yii;
 use yii\base\ErrorException;
+use yii\base\Exception;
 use yii\base\InvalidArgumentException;
 use yii\base\InvalidConfigException;
 
@@ -595,19 +596,15 @@ public static function filterPath($path, $options)
 
         $path = str_replace('\\', '/', $path);
 
-        if (!empty($options['except'])) {
-            if (($except = self::lastExcludeMatchingFromList($options['basePath'], $path, $options['except'])) !== null) {
-                return $except['flags'] & self::PATTERN_NEGATIVE;
-            }
+        if (
+            !empty($options['except'])
+            && ($except = self::lastExcludeMatchingFromList($options['basePath'], $path, $options['except'])) !== null
+        ) {
+            return $except['flags'] & self::PATTERN_NEGATIVE;
         }
 
         if (!empty($options['only']) && !is_dir($path)) {
-            if (($except = self::lastExcludeMatchingFromList($options['basePath'], $path, $options['only'])) !== null) {
-                // don't check PATTERN_NEGATIVE since those entries are not prefixed with !
-                return true;
-            }
-
-            return false;
+            return self::lastExcludeMatchingFromList($options['basePath'], $path, $options['only']) !== null;
         }
 
         return true;
@@ -874,4 +871,83 @@ protected static function normalizeOptions(array $options)
 
         return $options;
     }
+
+    /**
+     * Changes the Unix user and/or group ownership of a file or directory, and optionally the mode.
+     * Note: This function will not work on remote files as the file to be examined must be accessible
+     * via the server's filesystem.
+     * Note: On Windows, this function fails silently when applied on a regular file.
+     * @param string $path the path to the file or directory.
+     * @param string|array|int|null $ownership the user and/or group ownership for the file or directory.
+     * When $ownership is a string, the format is 'user:group' where both are optional. E.g.
+     * 'user' or 'user:' will only change the user,
+     * ':group' will only change the group,
+     * 'user:group' will change both.
+     * When $owners is an index array the format is [0 => user, 1 => group], e.g. `[$myUser, $myGroup]`.
+     * It is also possible to pass an associative array, e.g. ['user' => $myUser, 'group' => $myGroup].
+     * In case $owners is an integer it will be used as user id.
+     * If `null`, an empty array or an empty string is passed, the ownership will not be changed.
+     * @param int|null $mode the permission to be set for the file or directory.
+     * If `null` is passed, the mode will not be changed.
+     *
+     * @since 2.0.43
+     */
+    public static function changeOwnership($path, $ownership, $mode = null)
+    {
+        if (!file_exists($path)) {
+            throw new InvalidArgumentException('Unable to change ownerhip, "' . $path . '" is not a file or directory.');
+        }
+
+        if (empty($ownership) && $ownership !== 0 && $mode === null) {
+            return;
+        }
+
+        $user = $group = null;
+        if (!empty($ownership) || $ownership === 0 || $ownership === '0') {
+            if (is_int($ownership)) {
+                $user = $ownership;
+            } elseif (is_string($ownership)) {
+                $ownerParts = explode(':', $ownership);
+                $user = $ownerParts[0];
+                if (count($ownerParts) > 1) {
+                    $group = $ownerParts[1];
+                }
+            } elseif (is_array($ownership)) {
+                $ownershipIsIndexed = ArrayHelper::isIndexed($ownership);
+                $user = ArrayHelper::getValue($ownership, $ownershipIsIndexed ? 0 : 'user');
+                $group = ArrayHelper::getValue($ownership, $ownershipIsIndexed ? 1 : 'group');
+            } else {
+                throw new InvalidArgumentException('$ownership must be an integer, string, array, or null.');
+            }
+        }
+
+        if ($mode !== null) {
+            if (!is_int($mode)) {
+                throw new InvalidArgumentException('$mode must be an integer or null.');
+            }
+            if (!chmod($path, $mode)) {
+                throw new Exception('Unable to change mode of "' . $path . '" to "0' . decoct($mode) . '".');
+            }
+        }
+        if ($user !== null && $user !== '') {
+            if (is_numeric($user)) {
+                $user = (int) $user;
+            } elseif (!is_string($user)) {
+                throw new InvalidArgumentException('The user part of $ownership must be an integer, string, or null.');
+            }
+            if (!chown($path, $user)) {
+                throw new Exception('Unable to change user ownership of "' . $path . '" to "' . $user . '".');
+            }
+        }
+        if ($group !== null && $group !== '') {
+            if (is_numeric($group)) {
+                $group = (int) $group;
+            } elseif (!is_string($group)) {
+                throw new InvalidArgumentException('The group part of $ownership must be an integer, string or null.');
+            }
+            if (!chgrp($path, $group)) {
+                throw new Exception('Unable to change group ownership of "' . $path . '" to "' . $group . '".');
+            }
+        }
+    }
 }
diff --git a/src/helpers/BaseFormatConverter.php b/src/helpers/BaseFormatConverter.php
index 1a96120c3d6..340f7d4447e 100644
--- a/src/helpers/BaseFormatConverter.php
+++ b/src/helpers/BaseFormatConverter.php
@@ -335,7 +335,7 @@ public static function convertDatePhpToIcu($pattern)
             '\\\\' => '\\',
         ]);
 
-        // remove `''` - the're result of consecutive escaped chars (`\A\B` will be `'A''B'`, but should be `'AB'`)
+        // remove `''` - they're result of consecutive escaped chars (`\A\B` will be `'A''B'`, but should be `'AB'`)
         // real `'` are encoded as `''''`
         return strtr($result, [
             "''''" => "''",
diff --git a/src/helpers/BaseHtml.php b/src/helpers/BaseHtml.php
index 93bc4c6b723..83caf53b8b0 100644
--- a/src/helpers/BaseHtml.php
+++ b/src/helpers/BaseHtml.php
@@ -2306,21 +2306,34 @@ public static function getInputName($model, $attribute)
         throw new InvalidArgumentException(get_class($model) . '::formName() cannot be empty for tabular inputs.');
     }
 
+    /**
+     * Converts input name to ID.
+     *
+     * For example, if `$name` is `Post[content]`, this method will return `post-content`.
+     *
+     * @param string $name the input name
+     * @return string the generated input ID
+     * @since 2.0.43
+     */
+    public static function getInputIdByName($name)
+    {
+        $charset = Yii::$app ? Yii::$app->charset : 'UTF-8';
+        $name = mb_strtolower($name, $charset);
+        return str_replace(['[]', '][', '[', ']', ' ', '.', '--'], ['', '-', '-', '', '-', '-', '-'], $name);
+    }
+
     /**
      * Generates an appropriate input ID for the specified attribute name or expression.
      *
-     * This method converts the result [[getInputName()]] into a valid input ID.
-     * For example, if [[getInputName()]] returns `Post[content]`, this method will return `post-content`.
      * @param Model $model the model object
      * @param string $attribute the attribute name or expression. See [[getAttributeName()]] for explanation of attribute expression.
-     * @return string the generated input ID
+     * @return string the generated input ID.
      * @throws InvalidArgumentException if the attribute name contains non-word characters.
      */
     public static function getInputId($model, $attribute)
     {
-        $charset = Yii::$app ? Yii::$app->charset : 'UTF-8';
-        $name = mb_strtolower(static::getInputName($model, $attribute), $charset);
-        return str_replace(['[]', '][', '[', ']', ' ', '.'], ['', '-', '-', '', '-', '-'], $name);
+        $name = static::getInputName($model, $attribute);
+        return static::getInputIdByName($name);
     }
 
     /**
diff --git a/src/helpers/BaseInflector.php b/src/helpers/BaseInflector.php
index 410ee59bd82..2e01e761907 100644
--- a/src/helpers/BaseInflector.php
+++ b/src/helpers/BaseInflector.php
@@ -219,6 +219,8 @@ class BaseInflector
         'whiting' => 'whiting',
         'wildebeest' => 'wildebeest',
         'Yengeese' => 'Yengeese',
+        'software' => 'software',
+        'hardware' => 'hardware',
     ];
     /**
      * @var array fallback map for transliteration used by [[transliterate()]] when intl isn't available.
diff --git a/src/helpers/BaseJson.php b/src/helpers/BaseJson.php
index 0e3663e4a2c..2637653e845 100644
--- a/src/helpers/BaseJson.php
+++ b/src/helpers/BaseJson.php
@@ -22,6 +22,13 @@
  */
 class BaseJson
 {
+    /**
+     * @var bool|null Enables human readable output a.k.a. Pretty Print.
+     * This can useful for debugging during development but is not recommended in a production environment!
+     * In case `prettyPrint` is `null` (default) the `options` passed to `encode` functions will not be changed.
+     * @since 2.0.43
+     */
+    public static $prettyPrint = null;
     /**
      * List of JSON Error messages assigned to constant names for better handling of version differences.
      * @var array
@@ -62,6 +69,13 @@ public static function encode($value, $options = 320)
         set_error_handler(function () {
             static::handleJsonError(JSON_ERROR_SYNTAX);
         }, E_WARNING);
+
+        if (static::$prettyPrint === true) {
+            $options |= JSON_PRETTY_PRINT;
+        } elseif (static::$prettyPrint === false) {
+            $options &= ~JSON_PRETTY_PRINT;
+        }
+
         $json = json_encode($value, $options);
         restore_error_handler();
         static::handleJsonError(json_last_error());
diff --git a/src/helpers/BaseStringHelper.php b/src/helpers/BaseStringHelper.php
index 417c0ae40bc..8ab4db035d4 100644
--- a/src/helpers/BaseStringHelper.php
+++ b/src/helpers/BaseStringHelper.php
@@ -23,6 +23,7 @@ class BaseStringHelper
     /**
      * Returns the number of bytes in the given string.
      * This method ensures the string is treated as a byte array by using `mb_strlen()`.
+     *
      * @param string $string the string being measured for length
      * @return int the number of bytes in the given string.
      */
@@ -34,6 +35,7 @@ public static function byteLength($string)
     /**
      * Returns the portion of string specified by the start and length parameters.
      * This method ensures the string is treated as a byte array by using `mb_substr()`.
+     *
      * @param string $string the input string. Must be one character or longer.
      * @param int $start the starting position
      * @param int $length the desired portion length. If not specified or `null`, there will be
@@ -43,7 +45,11 @@ public static function byteLength($string)
      */
     public static function byteSubstr($string, $start, $length = null)
     {
-        return mb_substr($string, $start, $length === null ? mb_strlen($string, '8bit') : $length, '8bit');
+        if ($length === null) {
+            $length = static::byteLength($string);
+        }
+ 
+        return mb_substr($string, $start, $length, '8bit');
     }
 
     /**
@@ -61,11 +67,14 @@ public static function byteSubstr($string, $start, $length = null)
      */
     public static function basename($path, $suffix = '')
     {
-        if (($len = mb_strlen($suffix)) > 0 && mb_substr($path, -$len) === $suffix) {
+        $len = mb_strlen($suffix);
+        if ($len > 0 && mb_substr($path, -$len) === $suffix) {
             $path = mb_substr($path, 0, -$len);
         }
-        $path = rtrim(str_replace('\\', '/', $path), '/\\');
-        if (($pos = mb_strrpos($path, '/')) !== false) {
+ 
+        $path = rtrim(str_replace('\\', '/', $path), '/');
+        $pos = mb_strrpos($path, '/');
+        if ($pos !== false) {
             return mb_substr($path, $pos + 1);
         }
 
@@ -146,9 +155,9 @@ public static function truncateWords($string, $count, $suffix = '...', $asHtml =
      * Truncate a string while preserving the HTML.
      *
      * @param string $string The string to truncate
-     * @param int $count
+     * @param int $count The counter
      * @param string $suffix String to append to the end of the truncated string.
-     * @param string|bool $encoding
+     * @param string|bool $encoding Encoding flag or charset.
      * @return string
      * @since 2.0.1
      */
@@ -205,12 +214,12 @@ protected static function truncateHtml($string, $count, $suffix, $encoding = fal
     }
 
     /**
-     * Check if given string starts with specified substring.
-     * Binary and multibyte safe.
+     * Check if given string starts with specified substring. Binary and multibyte safe.
      *
      * @param string $string Input string
      * @param string $with Part to search inside the $string
-     * @param bool $caseSensitive Case sensitive search. Default is true. When case sensitive is enabled, $with must exactly match the starting of the string in order to get a true value.
+     * @param bool $caseSensitive Case sensitive search. Default is true. When case sensitive is enabled, `$with` must
+     * exactly match the starting of the string in order to get a true value.
      * @return bool Returns true if first input starts with second input, false otherwise
      */
     public static function startsWith($string, $with, $caseSensitive = true)
@@ -220,19 +229,21 @@ public static function startsWith($string, $with, $caseSensitive = true)
         }
         if ($caseSensitive) {
             return strncmp($string, $with, $bytes) === 0;
-
         }
+
         $encoding = Yii::$app ? Yii::$app->charset : 'UTF-8';
-        return mb_strtolower(mb_substr($string, 0, $bytes, '8bit'), $encoding) === mb_strtolower($with, $encoding);
+        $string = static::byteSubstr($string, 0, $bytes);
+
+        return mb_strtolower($string, $encoding) === mb_strtolower($with, $encoding);
     }
 
     /**
-     * Check if given string ends with specified substring.
-     * Binary and multibyte safe.
+     * Check if given string ends with specified substring. Binary and multibyte safe.
      *
      * @param string $string Input string to check
-     * @param string $with Part to search inside of the $string.
-     * @param bool $caseSensitive Case sensitive search. Default is true. When case sensitive is enabled, $with must exactly match the ending of the string in order to get a true value.
+     * @param string $with Part to search inside of the `$string`.
+     * @param bool $caseSensitive Case sensitive search. Default is true. When case sensitive is enabled, `$with` must
+     * exactly match the ending of the string in order to get a true value.
      * @return bool Returns true if first input ends with second input, false otherwise
      */
     public static function endsWith($string, $with, $caseSensitive = true)
@@ -241,7 +252,7 @@ public static function endsWith($string, $with, $caseSensitive = true)
             return true;
         }
         if ($caseSensitive) {
-            // Warning check, see https://secure.php.net/manual/en/function.substr-compare.php#refsect1-function.substr-compare-returnvalues
+            // Warning check, see https://php.net/substr-compare#refsect1-function.substr-compare-returnvalues
             if (static::byteLength($string) < $bytes) {
                 return false;
             }
@@ -250,7 +261,9 @@ public static function endsWith($string, $with, $caseSensitive = true)
         }
 
         $encoding = Yii::$app ? Yii::$app->charset : 'UTF-8';
-        return mb_strtolower(mb_substr($string, -$bytes, mb_strlen($string, '8bit'), '8bit'), $encoding) === mb_strtolower($with, $encoding);
+        $string = static::byteSubstr($string, -$bytes);
+
+        return mb_strtolower($string, $encoding) === mb_strtolower($with, $encoding);
     }
 
     /**
@@ -291,10 +304,10 @@ public static function explode($string, $delimiter = ',', $trim = true, $skipEmp
 
     /**
      * Counts words in a string.
-     * @since 2.0.8
      *
-     * @param string $string
+     * @param string $string the text to calculate
      * @return int
+     * @since 2.0.8
      */
     public static function countWords($string)
     {
@@ -304,13 +317,14 @@ public static function countWords($string)
     /**
      * Returns string representation of number value with replaced commas to dots, if decimal point
      * of current locale is comma.
-     * @param int|float|string $value
+     *
+     * @param int|float|string $value the value to normalize.
      * @return string
      * @since 2.0.11
      */
     public static function normalizeNumber($value)
     {
-        $value = (string)$value;
+        $value = (string) $value;
 
         $localeInfo = localeconv();
         $decimalSeparator = isset($localeInfo['decimal_point']) ? $localeInfo['decimal_point'] : null;
@@ -328,9 +342,9 @@ public static function normalizeNumber($value)
      * > Note: Base 64 padding `=` may be at the end of the returned string.
      * > `=` is not transparent to URL encoding.
      *
-     * @see https://tools.ietf.org/html/rfc4648#page-7
      * @param string $input the string to encode.
      * @return string encoded string.
+     * @see https://tools.ietf.org/html/rfc4648#page-7
      * @since 2.0.12
      */
     public static function base64UrlEncode($input)
@@ -341,9 +355,9 @@ public static function base64UrlEncode($input)
     /**
      * Decodes "Base 64 Encoding with URL and Filename Safe Alphabet" (RFC 4648).
      *
-     * @see https://tools.ietf.org/html/rfc4648#page-7
      * @param string $input encoded string.
      * @return string decoded string.
+     * @see https://tools.ietf.org/html/rfc4648#page-7
      * @since 2.0.12
      */
     public static function base64UrlDecode($input)
@@ -353,8 +367,8 @@ public static function base64UrlDecode($input)
 
     /**
      * Safely casts a float to string independent of the current locale.
-     *
      * The decimal separator will always be `.`.
+     *
      * @param float|int $number a floating point number or integer.
      * @return string the string representation of the number.
      * @since 2.0.13
@@ -369,6 +383,7 @@ public static function floatToString($number)
     /**
      * Checks if the passed string would match the given shell wildcard pattern.
      * This function emulates [[fnmatch()]], which may be unavailable at certain environment, using PCRE.
+     *
      * @param string $pattern the shell wildcard pattern.
      * @param string $string the tested string.
      * @param array $options options for matching. Valid options are:
@@ -442,17 +457,25 @@ public static function mb_ucfirst($string, $encoding = 'UTF-8')
      * @param string $string the string to be proceeded
      * @param string $encoding Optional, defaults to "UTF-8"
      * @return string
-     * @see https://secure.php.net/manual/en/function.ucwords.php
+     * @see https://www.php.net/manual/en/function.ucwords
      * @since 2.0.16
      */
     public static function mb_ucwords($string, $encoding = 'UTF-8')
     {
-        $words = preg_split("/\s/u", $string, -1, PREG_SPLIT_NO_EMPTY);
+        $string = (string) $string;
+        if (empty($string)) {
+            return $string;
+        }
 
-        $titelized = array_map(function ($word) use ($encoding) {
-            return static::mb_ucfirst($word, $encoding);
-        }, $words);
+        $parts = preg_split('/(\s+[^\w]+\s+|^[^\w]+\s+|\s+)/u', $string, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
+        $ucfirstEven = !trim(mb_substr($parts[0], -1, 1, $encoding));
+        foreach ($parts as $key => $value) {
+            $isEven = (bool)($key % 2);
+            if ($ucfirstEven === $isEven) {
+                $parts[$key] = static::mb_ucfirst($value, $encoding);
+            }
+        }
 
-        return implode(' ', $titelized);
+        return implode('', $parts);
     }
 }
diff --git a/src/helpers/BaseUrl.php b/src/helpers/BaseUrl.php
index 4b44551f4f3..4da728e6816 100644
--- a/src/helpers/BaseUrl.php
+++ b/src/helpers/BaseUrl.php
@@ -232,12 +232,12 @@ public static function to($url = '', $scheme = false)
     }
 
     /**
-     * Normalize URL by ensuring that it use specified scheme.
+     * Normalize the URL by ensuring it uses specified scheme.
      *
-     * If URL is relative or scheme is not string, normalization is skipped.
+     * If the URL is relative or the scheme is not a string, normalization is skipped.
      *
      * @param string $url the URL to process
-     * @param string $scheme the URI scheme used in URL (e.g. `http` or `https`). Use empty string to
+     * @param string $scheme the URI scheme used in the URL (e.g. `http` or `https`). Use an empty string to
      * create protocol-relative URL (e.g. `//example.com/path`)
      * @return string the processed URL
      * @since 2.0.11
diff --git a/src/i18n/Formatter.php b/src/i18n/Formatter.php
index 0af9e3e4ed4..27bad524d5c 100644
--- a/src/i18n/Formatter.php
+++ b/src/i18n/Formatter.php
@@ -18,9 +18,11 @@
 use yii\base\Component;
 use yii\base\InvalidArgumentException;
 use yii\base\InvalidConfigException;
+use yii\helpers\ArrayHelper;
 use yii\helpers\FormatConverter;
 use yii\helpers\Html;
 use yii\helpers\HtmlPurifier;
+use yii\helpers\Url;
 
 /**
  * Formatter provides a set of commonly used data formatting methods.
@@ -210,7 +212,7 @@ class Formatter extends Component
      */
     public $calendar;
     /**
-     * @var string the character displayed as the decimal point when formatting a number.
+     * @var string|null the character displayed as the decimal point when formatting a number.
      * If not set, the decimal separator corresponding to [[locale]] will be used.
      * If [PHP intl extension](https://secure.php.net/manual/en/book.intl.php) is not available, the default value is '.'.
      */
@@ -223,7 +225,7 @@ class Formatter extends Component
      */
     public $currencyDecimalSeparator;
     /**
-     * @var string the character displayed as the thousands separator (also called grouping separator) character when formatting a number.
+     * @var string|null the character displayed as the thousands separator (also called grouping separator) character when formatting a number.
      * If not set, the thousand separator corresponding to [[locale]] will be used.
      * If [PHP intl extension](https://secure.php.net/manual/en/book.intl.php) is not available, the default value is ','.
      */
@@ -286,7 +288,7 @@ class Formatter extends Component
      */
     public $numberFormatterSymbols = [];
     /**
-     * @var string the 3-letter ISO 4217 currency code indicating the default currency to use for [[asCurrency]].
+     * @var string|null the 3-letter ISO 4217 currency code indicating the default currency to use for [[asCurrency]].
      * If not set, the currency code corresponding to [[locale]] will be used.
      * Note that in this case the [[locale]] has to be specified with a country code, e.g. `en-US` otherwise it
      * is not possible to determine the default currency.
@@ -443,8 +445,9 @@ public function init()
     public function format($value, $format)
     {
         if ($format instanceof Closure) {
-            return call_user_func($format, $value, $this);
-        } elseif (is_array($format)) {
+            return $format($value, $this);
+        }
+        if (is_array($format)) {
             if (!isset($format[0])) {
                 throw new InvalidArgumentException('The $format array must contain at least one element.');
             }
@@ -463,10 +466,8 @@ public function format($value, $format)
         throw new InvalidArgumentException("Unknown format type: $format");
     }
 
-
     // simple formats
 
-
     /**
      * Formats the value as is without any formatting.
      * This method simply returns back the parameter without any format.
@@ -577,7 +578,11 @@ public function asImage($value, $options = [])
     /**
      * Formats the value as a hyperlink.
      * @param mixed $value the value to be formatted.
-     * @param array $options the tag options in terms of name-value pairs. See [[Html::a()]].
+     * @param array $options the tag options in terms of name-value pairs. See [[Html::a()]]. Since 2.0.43 there is
+     * a special option available `scheme` - if set it won't be passed to [[Html::a()]] but it will control the URL
+     * protocol part of the link by normalizing URL and ensuring that it uses specified scheme. See [[Url::ensureScheme()]].
+     * If `scheme` is not set the original behavior is preserved which is to add "http://" prefix when "://" string is
+     * not found in the $value.
      * @return string the formatted result.
      */
     public function asUrl($value, $options = [])
@@ -586,8 +591,13 @@ public function asUrl($value, $options = [])
             return $this->nullDisplay;
         }
         $url = $value;
-        if (strpos($url, '://') === false) {
-            $url = 'http://' . $url;
+        $scheme = ArrayHelper::remove($options, 'scheme');
+        if ($scheme === null) {
+            if (strpos($url, '://') === false) {
+                $url = 'http://' . $url;
+            }
+        } else {
+            $url = Url::ensureScheme($url, $scheme);
         }
 
         return Html::a(Html::encode($value), $url, $options);
@@ -608,10 +618,8 @@ public function asBoolean($value)
         return $value ? $this->booleanFormat[1] : $this->booleanFormat[0];
     }
 
-
     // date and time formats
 
-
     /**
      * Formats the value as a date.
      * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
@@ -735,7 +743,7 @@ public function asDatetime($value, $format = null)
     ];
 
     /**
-     * @param int|string|DateTime|DateTimeInterface $value the value to be formatted. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the value to be formatted. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp
@@ -754,7 +762,7 @@ private function formatDateTimeValue($value, $format, $type)
         // avoid time zone conversion for date-only and time-only values
         if ($type === 'date' || $type === 'time') {
             list($timestamp, $hasTimeInfo, $hasDateInfo) = $this->normalizeDatetimeValue($value, true);
-            if ($type === 'date' && !$hasTimeInfo || $type === 'time' && !$hasDateInfo) {
+            if (($type === 'date' && !$hasTimeInfo) || ($type === 'time' && !$hasDateInfo)) {
                 $timeZone = $this->defaultTimeZone;
             }
         } else {
@@ -772,18 +780,41 @@ private function formatDateTimeValue($value, $format, $type)
             }
             if (isset($this->_dateFormats[$format])) {
                 if ($type === 'date') {
-                    $formatter = new IntlDateFormatter($this->locale, $this->_dateFormats[$format], IntlDateFormatter::NONE, $timeZone, $this->calendar);
+                    $formatter = new IntlDateFormatter(
+                        $this->locale,
+                        $this->_dateFormats[$format],
+                        IntlDateFormatter::NONE,
+                        $timeZone,
+                        $this->calendar
+                    );
                 } elseif ($type === 'time') {
-                    $formatter = new IntlDateFormatter($this->locale, IntlDateFormatter::NONE, $this->_dateFormats[$format], $timeZone, $this->calendar);
+                    $formatter = new IntlDateFormatter(
+                        $this->locale,
+                        IntlDateFormatter::NONE,
+                        $this->_dateFormats[$format],
+                        $timeZone,
+                        $this->calendar
+                    );
                 } else {
-                    $formatter = new IntlDateFormatter($this->locale, $this->_dateFormats[$format], $this->_dateFormats[$format], $timeZone, $this->calendar);
+                    $formatter = new IntlDateFormatter(
+                        $this->locale,
+                        $this->_dateFormats[$format],
+                        $this->_dateFormats[$format],
+                        $timeZone,
+                        $this->calendar
+                    );
                 }
             } else {
-                $formatter = new IntlDateFormatter($this->locale, IntlDateFormatter::NONE, IntlDateFormatter::NONE, $timeZone, $this->calendar, $format);
-            }
-            if ($formatter === null) {
-                throw new InvalidConfigException(intl_get_error_message());
+                $formatter = new IntlDateFormatter(
+                    $this->locale,
+                    IntlDateFormatter::NONE,
+                    IntlDateFormatter::NONE,
+                    $timeZone,
+                    $this->calendar,
+                    $format
+                );
             }
+
             // make IntlDateFormatter work with DateTimeImmutable
             if ($timestamp instanceof \DateTimeImmutable) {
                 $timestamp = new DateTime($timestamp->format(DateTime::ISO8601), $timestamp->getTimezone());
@@ -811,7 +842,7 @@ private function formatDateTimeValue($value, $format, $type)
     /**
      * Normalizes the given datetime value as a DateTime object that can be taken by various date/time formatting methods.
      *
-     * @param int|string|DateTime|DateTimeInterface $value the datetime value to be normalized. The following
+     * @param int|string|DateTime|DateTimeInterface|null $value the datetime value to be normalized. The following
      * types of value are supported:
      *
      * - an integer representing a UNIX timestamp
@@ -824,7 +855,7 @@ private function formatDateTimeValue($value, $format, $type)
      * timestamp, the second a boolean indicating whether the timestamp has time information and third a boolean indicating
      * whether the timestamp has date information.
      * This parameter is available since version 2.0.1.
-     * @return DateTime|array the normalized datetime value.
+     * @return DateTime|array the normalized datetime value
      * Since version 2.0.1 this may also return an array if `$checkDateTimeInfo` is true.
      * The first element of the array is the normalized timestamp and the second is a boolean indicating whether
      * the timestamp has time information or it is just a date value.
@@ -846,9 +877,23 @@ protected function normalizeDatetimeValue($value, $checkDateTimeInfo = false)
             if (is_numeric($value)) { // process as unix timestamp, which is always in UTC
                 $timestamp = new DateTime('@' . (int) $value, new DateTimeZone('UTC'));
                 return $checkDateTimeInfo ? [$timestamp, true, true] : $timestamp;
-            } elseif (($timestamp = DateTime::createFromFormat('Y-m-d|', $value, new DateTimeZone($this->defaultTimeZone))) !== false) { // try Y-m-d format (support invalid dates like 2012-13-01)
+            }
+            if (
+                ($timestamp = DateTime::createFromFormat(
+                    'Y-m-d|',
+                    $value,
+                    new DateTimeZone($this->defaultTimeZone))
+                ) !== false
+            ) { // try Y-m-d format (support invalid dates like 2012-13-01)
                 return $checkDateTimeInfo ? [$timestamp, false, true] : $timestamp;
-            } elseif (($timestamp = DateTime::createFromFormat('Y-m-d H:i:s', $value, new DateTimeZone($this->defaultTimeZone))) !== false) { // try Y-m-d H:i:s format (support invalid dates like 2012-13-01 12:63:12)
+            }
+            if (
+                ($timestamp = DateTime::createFromFormat(
+                    'Y-m-d H:i:s',
+                    $value,
+                    new DateTimeZone($this->defaultTimeZone))
+                ) !== false
+            ) { // try Y-m-d H:i:s format (support invalid dates like 2012-13-01 12:63:12)
                 return $checkDateTimeInfo ? [$timestamp, true, true] : $timestamp;
             }
             // finally try to create a DateTime object with the value
@@ -923,30 +968,17 @@ public function asRelativeTime($value, $referenceTime = null)
             $interval = $value;
         } else {
             $timestamp = $this->normalizeDatetimeValue($value);
+            $timeZone = new DateTimeZone($this->timeZone);
 
-            if ($timestamp === false) {
-                // $value is not a valid date/time value, so we try
-                // to create a DateInterval with it
-                try {
-                    $interval = new DateInterval($value);
-                } catch (\Exception $e) {
-                    // invalid date/time and invalid interval
-                    return $this->nullDisplay;
-                }
+            if ($referenceTime === null) {
+                $dateNow = new DateTime('now', $timeZone);
             } else {
-                $timeZone = new DateTimeZone($this->timeZone);
-
-                if ($referenceTime === null) {
-                    $dateNow = new DateTime('now', $timeZone);
-                } else {
-                    $dateNow = $this->normalizeDatetimeValue($referenceTime);
-                    $dateNow->setTimezone($timeZone);
-                }
-
-                $dateThen = $timestamp->setTimezone($timeZone);
-
-                $interval = $dateThen->diff($dateNow);
+                $dateNow = $this->normalizeDatetimeValue($referenceTime);
+                $dateNow->setTimezone($timeZone);
             }
+
+            $dateThen = $timestamp->setTimezone($timeZone);
+            $interval = $dateThen->diff($dateNow);
         }
 
         if ($interval->invert) {
@@ -1213,7 +1245,8 @@ public function asPercent($value, $decimals = null, $options = [], $textOptions
      * If not given, the number of digits depends in the input value and is determined based on
      * `NumberFormatter::MIN_FRACTION_DIGITS` and `NumberFormatter::MAX_FRACTION_DIGITS`, which can be configured
      * using [[$numberFormatterOptions]].
-     * If the [PHP intl extension](https://secure.php.net/manual/en/book.intl.php) is not available, the default value depends on your PHP configuration.
+     * If the [PHP intl extension](https://secure.php.net/manual/en/book.intl.php) is not available, the default value
+     * depends on your PHP configuration.
      * If you want consistent behavior between environments where intl is available and not, you should explicitly
      * specify a value here.
      * @param array $options optional configuration for the number formatter. This parameter will be merged with [[numberFormatterOptions]].
@@ -1497,7 +1530,7 @@ public function asSize($value, $decimals = null, $options = [], $textOptions = [
      */
     public function asLength($value, $decimals = null, $numberOptions = [], $textOptions = [])
     {
-        return $this->formatUnit(self::UNIT_LENGTH, self::FORMAT_WIDTH_LONG, $value, null, null, $decimals, $numberOptions, $textOptions);
+        return $this->formatUnit(self::UNIT_LENGTH, self::FORMAT_WIDTH_LONG, $value, $decimals, $numberOptions, $textOptions);
     }
 
     /**
@@ -1520,7 +1553,7 @@ public function asLength($value, $decimals = null, $numberOptions = [], $textOpt
      */
     public function asShortLength($value, $decimals = null, $options = [], $textOptions = [])
     {
-        return $this->formatUnit(self::UNIT_LENGTH, self::FORMAT_WIDTH_SHORT, $value, null, null, $decimals, $options, $textOptions);
+        return $this->formatUnit(self::UNIT_LENGTH, self::FORMAT_WIDTH_SHORT, $value, $decimals, $options, $textOptions);
     }
 
     /**
@@ -1540,7 +1573,7 @@ public function asShortLength($value, $decimals = null, $options = [], $textOpti
      */
     public function asWeight($value, $decimals = null, $options = [], $textOptions = [])
     {
-        return $this->formatUnit(self::UNIT_WEIGHT, self::FORMAT_WIDTH_LONG, $value, null, null, $decimals, $options, $textOptions);
+        return $this->formatUnit(self::UNIT_WEIGHT, self::FORMAT_WIDTH_LONG, $value, $decimals, $options, $textOptions);
     }
 
     /**
@@ -1562,38 +1595,29 @@ public function asWeight($value, $decimals = null, $options = [], $textOptions =
      */
     public function asShortWeight($value, $decimals = null, $options = [], $textOptions = [])
     {
-        return $this->formatUnit(self::UNIT_WEIGHT, self::FORMAT_WIDTH_SHORT, $value, null, null, $decimals, $options, $textOptions);
+        return $this->formatUnit(self::UNIT_WEIGHT, self::FORMAT_WIDTH_SHORT, $value, $decimals, $options, $textOptions);
     }
 
     /**
      * @param string $unitType one of [[UNIT_WEIGHT]], [[UNIT_LENGTH]]
      * @param string $unitFormat one of [[FORMAT_WIDTH_SHORT]], [[FORMAT_WIDTH_LONG]]
      * @param float|int|null $value to be formatted
-     * @param float $baseUnit unit of value as the multiplier of the smallest unit. When `null`, property [[baseUnits]]
-     * will be used to determine base unit using $unitType and $unitSystem.
-     * @param string $unitSystem either [[UNIT_SYSTEM_METRIC]] or [[UNIT_SYSTEM_IMPERIAL]]. When `null`, property [[systemOfUnits]] will be used.
-     * @param int $decimals the number of digits after the decimal point.
+     * @param int|null $decimals the number of digits after the decimal point.
      * @param array $options optional configuration for the number formatter. This parameter will be merged with [[numberFormatterOptions]].
      * @param array $textOptions optional configuration for the number formatter. This parameter will be merged with [[numberFormatterTextOptions]].
      * @return string
      * @throws InvalidConfigException when INTL is not installed or does not contain required information
      */
-    private function formatUnit($unitType, $unitFormat, $value, $baseUnit, $unitSystem, $decimals, $options, $textOptions)
+    private function formatUnit($unitType, $unitFormat, $value, $decimals, $options, $textOptions)
     {
         if ($value === null) {
             return $this->nullDisplay;
         }
-        if ($unitSystem === null) {
-            $unitSystem = $this->systemOfUnits;
-        }
-        if ($baseUnit === null) {
-            $baseUnit = $this->baseUnits[$unitType][$unitSystem];
-        }
 
-        $multipliers = array_values($this->measureUnits[$unitType][$unitSystem]);
+        $multipliers = array_values($this->measureUnits[$unitType][$this->systemOfUnits]);
 
         list($params, $position) = $this->formatNumber(
-            $this->normalizeNumericValue($value) * $baseUnit,
+            $this->normalizeNumericValue($value) * $this->baseUnits[$unitType][$this->systemOfUnits],
             $decimals,
             null,
             $multipliers,
@@ -1601,7 +1625,7 @@ private function formatUnit($unitType, $unitFormat, $value, $baseUnit, $unitSyst
             $textOptions
         );
 
-        $message = $this->getUnitMessage($unitType, $unitFormat, $unitSystem, $position);
+        $message = $this->getUnitMessage($unitType, $unitFormat, $this->systemOfUnits, $position);
 
         return (new \MessageFormatter($this->locale, $message))->format([
             '0' => $params['nFormatted'],
@@ -1638,7 +1662,10 @@ private function getUnitMessage($unitType, $unitFormat, $system, $position)
 
         $unitBundle = $this->_resourceBundle[$bundleKey][$unitType][$unitNames[$position]];
         if ($unitBundle === null) {
-            throw new InvalidConfigException('Current ICU data version does not contain information about unit type "' . $unitType . '" and unit measure "' . $unitNames[$position] . '". Check system requirements.');
+            throw new InvalidConfigException(
+                'Current ICU data version does not contain information about unit type "' . $unitType
+                . '" and unit measure "' . $unitNames[$position] . '". Check system requirements.'
+            );
         }
 
         $message = [];
@@ -1656,7 +1683,7 @@ private function getUnitMessage($unitType, $unitFormat, $system, $position)
      * Given the value in bytes formats number part of the human readable form.
      *
      * @param string|int|float $value value in bytes to be formatted.
-     * @param int $decimals the number of digits after the decimal point
+     * @param int|null $decimals the number of digits after the decimal point
      * @param int $maxPosition maximum internal position of size unit, ignored if $formatBase is an array
      * @param array|int $formatBase the base at which each next unit is calculated, either 1000 or 1024, or an array
      * @param array $options optional configuration for the number formatter. This parameter will be merged with [[numberFormatterOptions]].
@@ -1705,7 +1732,7 @@ protected function formatNumber($value, $decimals, $maxPosition, $formatBase, $o
         $oldThousandSeparator = $this->thousandSeparator;
         $this->thousandSeparator = '';
         if ($this->_intlLoaded && !isset($options[NumberFormatter::GROUPING_USED])) {
-            $options[NumberFormatter::GROUPING_USED] = false;
+            $options[NumberFormatter::GROUPING_USED] = 0;
         }
         // format the size value
         $params = [
@@ -1766,19 +1793,19 @@ protected function createNumberFormatter($style, $decimals = null, $options = []
         $formatter = new NumberFormatter($this->locale, $style);
 
         // set text attributes
-        foreach ($this->numberFormatterTextOptions as $name => $attribute) {
-            $formatter->setTextAttribute($name, $attribute);
+        foreach ($this->numberFormatterTextOptions as $attribute => $value) {
+            $this->setFormatterTextAttribute($formatter, $attribute, $value, 'numberFormatterTextOptions', 'numberFormatterOptions');
         }
-        foreach ($textOptions as $name => $attribute) {
-            $formatter->setTextAttribute($name, $attribute);
+        foreach ($textOptions as $attribute => $value) {
+            $this->setFormatterTextAttribute($formatter, $attribute, $value, '$textOptions', '$options');
         }
 
         // set attributes
-        foreach ($this->numberFormatterOptions as $name => $value) {
-            $formatter->setAttribute($name, $value);
+        foreach ($this->numberFormatterOptions as $attribute => $value) {
+            $this->setFormatterIntAttribute($formatter, $attribute, $value, 'numberFormatterOptions', 'numberFormatterTextOptions');
         }
-        foreach ($options as $name => $value) {
-            $formatter->setAttribute($name, $value);
+        foreach ($options as $attribute => $value) {
+            $this->setFormatterIntAttribute($formatter, $attribute, $value, '$options', '$textOptions');
         }
         if ($decimals !== null) {
             $formatter->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, $decimals);
@@ -1796,13 +1823,91 @@ protected function createNumberFormatter($style, $decimals = null, $options = []
             $formatter->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, $this->thousandSeparator);
             $formatter->setSymbol(NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, $this->thousandSeparator);
         }
-        foreach ($this->numberFormatterSymbols as $name => $symbol) {
-            $formatter->setSymbol($name, $symbol);
+        foreach ($this->numberFormatterSymbols as $symbol => $value) {
+            $this->setFormatterSymbol($formatter, $symbol, $value, 'numberFormatterSymbols');
         }
 
         return $formatter;
     }
 
+    /**
+     * @param NumberFormatter $formatter
+     * @param mixed $attribute
+     * @param mixed $value
+     * @param string $source
+     * @param string $alternative
+     */
+    private function setFormatterTextAttribute($formatter, $attribute, $value, $source, $alternative)
+    {
+        if (!is_int($attribute)) {
+            throw new InvalidArgumentException(
+                "The $source array keys must be integers recognizable by NumberFormatter::setTextAttribute(). \""
+                . gettype($attribute) . '" provided instead.'
+            );
+        }
+        if (!is_string($value)) {
+            if (is_int($value)) {
+                throw new InvalidArgumentException(
+                    "The $source array values must be strings. Did you mean to use $alternative?"
+                );
+            }
+            throw new InvalidArgumentException(
+                "The $source array values must be strings. \"" . gettype($value) . '" provided instead.'
+            );
+        }
+        $formatter->setTextAttribute($attribute, $value);
+    }
+
+    /**
+     * @param NumberFormatter $formatter
+     * @param mixed $symbol
+     * @param mixed $value
+     * @param string $source
+     */
+    private function setFormatterSymbol($formatter, $symbol, $value, $source)
+    {
+        if (!is_int($symbol)) {
+            throw new InvalidArgumentException(
+                "The $source array keys must be integers recognizable by NumberFormatter::setSymbol(). \""
+                . gettype($symbol) . '" provided instead.'
+            );
+        }
+        if (!is_string($value)) {
+            throw new InvalidArgumentException(
+                "The $source array values must be strings. \"" . gettype($value) . '" provided instead.'
+            );
+        }
+        $formatter->setSymbol($symbol, $value);
+    }
+
+    /**
+     * @param NumberFormatter $formatter
+     * @param mixed $attribute
+     * @param mixed $value
+     * @param string $source
+     * @param string $alternative
+     */
+    private function setFormatterIntAttribute($formatter, $attribute, $value, $source, $alternative)
+    {
+        if (!is_int($attribute)) {
+            throw new InvalidArgumentException(
+                "The $source array keys must be integers recognizable by NumberFormatter::setAttribute(). \""
+                . gettype($attribute) . '" provided instead.'
+            );
+        }
+        if (!is_int($value)) {
+            if (is_string($value)) {
+                throw new InvalidArgumentException(
+                    "The $source array values must be integers. Did you mean to use $alternative?"
+                );
+            }
+            throw new InvalidArgumentException(
+                "The $source array values must be integers. \"" . gettype($value) . '" provided instead.'
+            );
+        }
+        $formatter->setAttribute($attribute, $value);
+    }
+
     /**
      * Checks if string representations of given value and its normalized version are different.
      * @param string|float|int $value
@@ -1881,7 +1986,7 @@ protected function normalizeNumericStringValue($value)
      * to the defined decimal digits.
      *
      * @param string|int|float $value the value to be formatted.
-     * @param int $decimals the number of digits after the decimal point. The default value is `2`.
+     * @param int|null $decimals the number of digits after the decimal point. The default value is `2`.
      * @return string the formatted result.
      * @see decimalSeparator
      * @see thousandSeparator
diff --git a/src/i18n/GettextMessageSource.php b/src/i18n/GettextMessageSource.php
index 251bd7fb5ad..d96fb5290f0 100644
--- a/src/i18n/GettextMessageSource.php
+++ b/src/i18n/GettextMessageSource.php
@@ -113,7 +113,7 @@ protected function loadFallbackMessages($category, $fallbackLanguage, $messages,
         } elseif (!empty($fallbackMessages)) {
             foreach ($fallbackMessages as $key => $value) {
                 if (!empty($value) && empty($messages[$key])) {
-                    $messages[$key] = $fallbackMessages[$key];
+                    $messages[$key] = $value;
                 }
             }
         }
diff --git a/src/i18n/PhpMessageSource.php b/src/i18n/PhpMessageSource.php
index 975846874ab..4bcfcd9adff 100644
--- a/src/i18n/PhpMessageSource.php
+++ b/src/i18n/PhpMessageSource.php
@@ -115,7 +115,7 @@ protected function loadFallbackMessages($category, $fallbackLanguage, $messages,
         } elseif (!empty($fallbackMessages)) {
             foreach ($fallbackMessages as $key => $value) {
                 if (!empty($value) && empty($messages[$key])) {
-                    $messages[$key] = $fallbackMessages[$key];
+                    $messages[$key] = $value;
                 }
             }
         }
diff --git a/src/log/DbTarget.php b/src/log/DbTarget.php
index 343ade6bb7f..bef9c50c771 100644
--- a/src/log/DbTarget.php
+++ b/src/log/DbTarget.php
@@ -78,7 +78,7 @@ public function export()
             list($text, $level, $category, $timestamp) = $message;
             if (!is_string($text)) {
                 // exceptions may not be serializable if in the call stack somewhere is a Closure
-                if ($text instanceof \Throwable || $text instanceof \Exception) {
+                if ($text instanceof \Exception || $text instanceof \Throwable) {
                     $text = (string) $text;
                 } else {
                     $text = VarDumper::export($text);
diff --git a/src/log/Logger.php b/src/log/Logger.php
index 76e993d3061..42d71cc988d 100644
--- a/src/log/Logger.php
+++ b/src/log/Logger.php
@@ -59,7 +59,7 @@ class Logger extends Component
      */
     const LEVEL_INFO = 0x04;
     /**
-     * Tracing message level. An tracing message is one that reveals the code execution flow.
+     * Tracing message level. A tracing message is one that reveals the code execution flow.
      */
     const LEVEL_TRACE = 0x08;
     /**
@@ -67,13 +67,13 @@ class Logger extends Component
      */
     const LEVEL_PROFILE = 0x40;
     /**
-     * Profiling message level. This indicates the message is for profiling purpose. It marks the
-     * beginning of a profiling block.
+     * Profiling message level. This indicates the message is for profiling purpose. It marks the beginning
+     * of a profiling block.
      */
     const LEVEL_PROFILE_BEGIN = 0x50;
     /**
-     * Profiling message level. This indicates the message is for profiling purpose. It marks the
-     * end of a profiling block.
+     * Profiling message level. This indicates the message is for profiling purpose. It marks the end
+     * of a profiling block.
      */
     const LEVEL_PROFILE_END = 0x60;
 
@@ -95,7 +95,7 @@ class Logger extends Component
     public $messages = [];
     /**
      * @var int how many messages should be logged before they are flushed from memory and sent to targets.
-     * Defaults to 1000, meaning the [[flush]] method will be invoked once every 1000 messages logged.
+     * Defaults to 1000, meaning the [[flush()]] method will be invoked once every 1000 messages logged.
      * Set this property to be 0 if you don't want to flush messages until the application terminates.
      * This property mainly affects how much memory will be taken by the logged messages.
      * A smaller value means less memory, but will increase the execution time due to the overhead of [[flush()]].
@@ -108,7 +108,7 @@ class Logger extends Component
      */
     public $traceLevel = 0;
     /**
-     * @var Dispatcher the message dispatcher
+     * @var Dispatcher the message dispatcher.
      */
     public $dispatcher;
     /**
@@ -116,6 +116,15 @@ class Logger extends Component
      * @since 2.0.41
      */
     public $dbEventNames = ['yii\db\Command::query', 'yii\db\Command::execute'];
+    /**
+     * @var bool whether the profiling-aware mode should be switched on.
+     * If on, [[flush()]] makes sure that profiling blocks are flushed in pairs. In case that any dangling messages are
+     * detected these are kept for the next flush interval to find their pair. To prevent memory leaks, when number of
+     * dangling messages reaches flushInterval value, logger flushes them immediately and triggers a warning.
+     * Keep in mind that profiling-aware mode is more time and memory consuming.
+     * @since 2.0.43
+     */
+    public $profilingAware = false;
 
 
     /**
@@ -140,7 +149,7 @@ public function init()
      * @param string|array $message the message to be logged. This can be a simple string or a more
      * complex data structure that will be handled by a [[Target|log target]].
      * @param int $level the level of the message. This must be one of the following:
-     * `Logger::LEVEL_ERROR`, `Logger::LEVEL_WARNING`, `Logger::LEVEL_INFO`, `Logger::LEVEL_TRACE`,
+     * `Logger::LEVEL_ERROR`, `Logger::LEVEL_WARNING`, `Logger::LEVEL_INFO`, `Logger::LEVEL_TRACE`, `Logger::LEVEL_PROFILE`,
      * `Logger::LEVEL_PROFILE_BEGIN`, `Logger::LEVEL_PROFILE_END`.
      * @param string $category the category of the message.
      */
@@ -162,7 +171,13 @@ public function log($message, $level, $category = 'application')
                 }
             }
         }
-        $this->messages[] = [$message, $level, $category, $time, $traces, memory_get_usage()];
+        $data = [$message, $level, $category, $time, $traces, memory_get_usage()];
+        if ($this->profilingAware && in_array($level, [self::LEVEL_PROFILE_BEGIN, self::LEVEL_PROFILE_END])) {
+            $this->messages[($level == self::LEVEL_PROFILE_BEGIN ? 'begin-' : 'end-') . md5(json_encode($message))] = $data;
+        } else {
+            $this->messages[] = $data;
+        }
+
         if ($this->flushInterval > 0 && count($this->messages) >= $this->flushInterval) {
             $this->flush();
         }
@@ -174,10 +189,40 @@ public function log($message, $level, $category = 'application')
      */
     public function flush($final = false)
     {
-        $messages = $this->messages;
-        // https://github.com/yiisoft/yii2/issues/5619
-        // new messages could be logged while the existing ones are being handled by targets
-        $this->messages = [];
+        if ($this->profilingAware) {
+            $keep = [];
+            $messages = [];
+            foreach ($this->messages as $index => $message) {
+                if (is_int($index)) {
+                    $messages[] = $message;
+                } else {
+                    if (strpos($index, 'begin-') === 0) {
+                        $oppositeProfile = 'end-' . substr($index, 6);
+                    } else {
+                        $oppositeProfile = 'begin-' . substr($index, 4);
+                    }
+                    if (array_key_exists($oppositeProfile, $this->messages)) {
+                        $messages[] = $message;
+                    } else {
+                        $keep[$index] = $message;
+                    }
+                }
+            }
+            if ($this->flushInterval > 0 && count($keep) >= $this->flushInterval) {
+                $this->messages = [];
+                $this->log(
+                    'Number of dangling profiling block messages reached flushInterval value and therefore these were flushed. Please consider setting higher flushInterval value or making profiling blocks shorter.',
+                    self::LEVEL_WARNING
+                );
+                $messages = array_merge($messages, array_values($keep));
+            } else {
+                $this->messages = $keep;
+            }
+        } else {
+            $messages = $this->messages;
+            $this->messages = [];
+        }
+
         if ($this->dispatcher instanceof Dispatcher) {
             $this->dispatcher->dispatch($messages, $final);
         }
@@ -218,11 +263,15 @@ public function getProfiling($categories = [], $excludeCategories = [])
             return $timings;
         }
 
-        foreach ($timings as $i => $timing) {
+        foreach ($timings as $outerIndex => $outerTimingItem) {
+            $currentIndex = $outerIndex;
             $matched = empty($categories);
             foreach ($categories as $category) {
                 $prefix = rtrim($category, '*');
-                if (($timing['category'] === $category || $prefix !== $category) && strpos($timing['category'], $prefix) === 0) {
+                if (
+                    ($outerTimingItem['category'] === $category || $prefix !== $category)
+                    && strpos($outerTimingItem['category'], $prefix) === 0
+                ) {
                     $matched = true;
                     break;
                 }
@@ -231,8 +280,12 @@ public function getProfiling($categories = [], $excludeCategories = [])
             if ($matched) {
                 foreach ($excludeCategories as $category) {
                     $prefix = rtrim($category, '*');
-                    foreach ($timings as $i => $timing) {
-                        if (($timing['category'] === $category || $prefix !== $category) && strpos($timing['category'], $prefix) === 0) {
+                    foreach ($timings as $innerIndex => $innerTimingItem) {
+                        $currentIndex = $innerIndex;
+                        if (
+                            ($innerTimingItem['category'] === $category || $prefix !== $category)
+                            && strpos($innerTimingItem['category'], $prefix) === 0
+                        ) {
                             $matched = false;
                             break;
                         }
@@ -241,7 +294,7 @@ public function getProfiling($categories = [], $excludeCategories = [])
             }
 
             if (!$matched) {
-                unset($timings[$i]);
+                unset($timings[$currentIndex]);
             }
         }
 
diff --git a/src/log/SyslogTarget.php b/src/log/SyslogTarget.php
index 4d766fa4155..6a9b0cfbb7d 100644
--- a/src/log/SyslogTarget.php
+++ b/src/log/SyslogTarget.php
@@ -84,7 +84,7 @@ public function formatMessage($message)
         $level = Logger::getLevelName($level);
         if (!is_string($text)) {
             // exceptions may not be serializable if in the call stack somewhere is a Closure
-            if ($text instanceof \Throwable || $text instanceof \Exception) {
+            if ($text instanceof \Exception || $text instanceof \Throwable) {
                 $text = (string) $text;
             } else {
                 $text = VarDumper::export($text);
diff --git a/src/log/Target.php b/src/log/Target.php
index 2a192e80d55..d57c2614ec9 100644
--- a/src/log/Target.php
+++ b/src/log/Target.php
@@ -11,7 +11,6 @@
 use yii\base\Component;
 use yii\base\InvalidConfigException;
 use yii\helpers\ArrayHelper;
-use yii\helpers\StringHelper;
 use yii\helpers\VarDumper;
 use yii\web\Request;
 
@@ -297,7 +296,7 @@ public function formatMessage($message)
         $level = Logger::getLevelName($level);
         if (!is_string($text)) {
             // exceptions may not be serializable if in the call stack somewhere is a Closure
-            if ($text instanceof \Throwable || $text instanceof \Exception) {
+            if ($text instanceof \Exception || $text instanceof \Throwable) {
                 $text = (string) $text;
             } else {
                 $text = VarDumper::export($text);
diff --git a/src/mail/BaseMailer.php b/src/mail/BaseMailer.php
index c4546fbd1f4..63b6904ee52 100644
--- a/src/mail/BaseMailer.php
+++ b/src/mail/BaseMailer.php
@@ -343,7 +343,7 @@ public function generateMessageFileName()
     {
         $time = microtime(true);
 
-        return date('Ymd-His-', $time) . sprintf('%04d', (int) (($time - (int) $time) * 10000)) . '-' . sprintf('%04d', mt_rand(0, 10000)) . '.eml';
+        return date('Ymd-His-', $time) . sprintf('%04d', (int) (($time - (int) $time) * 10000)) . '-' . sprintf('%04d', random_int(0, 10000)) . '.eml';
     }
 
     /**
diff --git a/src/messages/hr/yii.php b/src/messages/hr/yii.php
index 58265276442..772ef9493e4 100644
--- a/src/messages/hr/yii.php
+++ b/src/messages/hr/yii.php
@@ -28,7 +28,7 @@
     'Are you sure you want to delete this item' => 'Želiš li to obrisati?',
     'Delete' => 'Obrisati',
     'Error' => 'Pogreška',
-    'File upload failed.' => 'Upload podatka nije uspio.',
+    'File upload failed.' => 'Upload datoteke nije uspio.',
     'Home' => 'Home',
     'Invalid data received for parameter "{param}".' => 'Nevažeći podaci primljeni za parametar "{param}"',
     'Login Required' => 'Prijava potrebna',
@@ -39,14 +39,14 @@
     'No help for unknown sub-command "{command}".' => 'Nema pomoći za nepoznatu pod-naredbu "{command}"',
     'No results found.' => 'Nema rezultata.',
     'Only files with these MIME types are allowed: {mimeTypes}.' => 'Samo datoteke s ovim MIME vrstama su dopuštene: {mimeTypes}.',
-    'Only files with these extensions are allowed: {extensions}.' => 'Samo datoteke s ovim eksentinzijama su dopuštene:: {extensions}',
+    'Only files with these extensions are allowed: {extensions}.' => 'Samo datoteke s ovim ekstenzijama su dopuštene: {extensions}',
     'Page not found.' => 'Stranica nije pronađena.',
     'Please fix the following errors:' => 'Molimo vas ispravite pogreške:',
     'Please upload a file.' => 'Molimo vas da uploadate datoteku.',
     'Showing <b>{begin, number}-{end, number}</b> of <b>{totalCount, number}</b> {totalCount, plural, one{item} other{items}}.' => 'Prikazuj  <b>{begin, number}-{end, number}</b> od <b>{totalCount, number}</b> {totalCount, plural, one{stavka} few{stavke} many{stavki} other{stavki}}.',
-    'The file "{file}" is not an image.' => 'Podatak "{file}" nije slika.',
-    'The file "{file}" is too big. Its size cannot exceed {formattedLimit}.' => 'Podatak "{file}" je prevelik. Ne smije biti veći od {formattedLimit}.',
-    'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.' => 'Podatak "{file}" je premalen. Ne smije biti manji od {formattedLimit}.',
+    'The file "{file}" is not an image.' => 'Datoteka "{file}" nije slika.',
+    'The file "{file}" is too big. Its size cannot exceed {formattedLimit}.' => 'Datoteka "{file}" je prevelika. Ne smije biti veća od {formattedLimit}.',
+    'The file "{file}" is too small. Its size cannot be smaller than {formattedLimit}.' => 'Datoteka "{file}" je premalena. Ne smije biti manja od {formattedLimit}.',
     'The format of {attribute} is invalid.' => 'Format od {attribute} je nevažeći.',
     'The image "{file}" is too large. The height cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => 'Slika "{file}" je prevelika. Visina slike ne smije biti veća od {limit, number} {limit, plural, one{piksel} other{piksela}}.',
     'The image "{file}" is too large. The width cannot be larger than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => 'Slika "{file}" je prevelika. Širina slike ne smije biti veća od {limit, number} {limit, plural, one{piksel} other{piksela}}.',
@@ -54,14 +54,14 @@
     'The image "{file}" is too small. The width cannot be smaller than {limit, number} {limit, plural, one{pixel} other{pixels}}.' => 'Slika "{file}" je premalena.  Širina slike ne smije biti manja od {limit, number} {limit, plural, one{piksel} other{piksela}}.',
     'The verification code is incorrect.' => 'Kod za provjeru nije točan.',
     'Total <b>{count, number}</b> {count, plural, one{item} other{items}}.' => 'Ukupno <b>{count, number}</b> {count, plural, =1{stavka} one{# stavka} few{# stavke} many{# stavki} other{# stavki}}.',
-    'Unable to verify your data submission.' => 'Nije moguće provjeriti podnesene podatke.',
+    'Unable to verify your data submission.' => 'Nije moguće provjeriti poslane podatke.',
     'Unknown command "{command}".' => 'Nepoznata naredba "{command}".',
     'Unknown option: --{name}' => 'Nepoznata opcija: --{name}',
     'Update' => 'Uredi',
     'View' => 'Pregled',
     'Yes' => 'Da',
     'You are not allowed to perform this action.' => 'Nije vam dopušteno obavljati tu radnju.',
-    'You can upload at most {limit, number} {limit, plural, one{file} other{files}}.' => 'Najviše možete uploadat {limit, number} {limit, plural, one{fajl} other{fajlova}}.',
+    'You can upload at most {limit, number} {limit, plural, one{file} other{files}}.' => 'Najviše možete uploadat {limit, number} {limit, plural, one{datoteku} few{datoteke} other{datoteka}}.',
     'in {delta, plural, =1{a day} other{# days}}' => 'u {delta, plural, =1{dan} one{# dan} few{# dana} many{# dana} other{# dana}}',
     'in {delta, plural, =1{a minute} other{# minutes}}' => 'u {delta, plural, =1{minuta} one{# minuta} few{# minute} many{# minuta} other{# minuta}}',
     'in {delta, plural, =1{a month} other{# months}}' => 'u {delta, plural, =1{mjesec} one{# mjesec} few{# mjeseca} many{# mjeseci} other{# mjeseci}}',
diff --git a/src/mutex/PgsqlMutex.php b/src/mutex/PgsqlMutex.php
index 8c38c75f46f..900ac5ff391 100644
--- a/src/mutex/PgsqlMutex.php
+++ b/src/mutex/PgsqlMutex.php
@@ -7,7 +7,6 @@
 
 namespace yii\mutex;
 
-use yii\base\InvalidArgumentException;
 use yii\base\InvalidConfigException;
 
 /**
diff --git a/src/requirements/views/console/index.php b/src/requirements/views/console/index.php
index d1559b68bcf..68c4cb543e1 100644
--- a/src/requirements/views/console/index.php
+++ b/src/requirements/views/console/index.php
@@ -23,7 +23,6 @@
 foreach ($requirements as $key => $requirement) {
     if ($requirement['condition']) {
         echo $requirement['name'] . ": OK\n";
-        echo "\n";
     } else {
         echo $requirement['name'] . ': ' . ($requirement['mandatory'] ? 'FAILED!!!' : 'WARNING!!!') . "\n";
         echo 'Required by: ' . strip_tags($requirement['by']) . "\n";
@@ -31,8 +30,8 @@
         if (!empty($memo)) {
             echo 'Memo: ' . strip_tags($requirement['memo']) . "\n";
         }
-        echo "\n";
     }
+    echo "\n";
 }
 
 $summaryString = 'Errors: ' . $summary['errors'] . '   Warnings: ' . $summary['warnings'] . '   Total checks: ' . $summary['total'];
diff --git a/src/test/FixtureTrait.php b/src/test/FixtureTrait.php
index e5dc9b09a35..7a72610da55 100644
--- a/src/test/FixtureTrait.php
+++ b/src/test/FixtureTrait.php
@@ -43,12 +43,12 @@ trait FixtureTrait
      * ```php
      * [
      *     // anonymous fixture
-     *     PostFixture::className(),
+     *     PostFixture::class,
      *     // "users" fixture
-     *     'users' => UserFixture::className(),
+     *     'users' => UserFixture::class,
      *     // "cache" fixture with configuration
      *     'cache' => [
-     *          'class' => CacheFixture::className(),
+     *          'class' => CacheFixture::class,
      *          'host' => 'xxx',
      *     ],
      * ]
diff --git a/src/validators/EmailValidator.php b/src/validators/EmailValidator.php
index cfb6a32e5b5..984d00d4510 100644
--- a/src/validators/EmailValidator.php
+++ b/src/validators/EmailValidator.php
@@ -63,6 +63,12 @@ class EmailValidator extends Validator
      * otherwise an exception would be thrown.
      */
     public $enableIDN = false;
+    /**
+     * @var bool whether [[enableIDN]] should apply to the local part of the email (left side
+     * of the `@`). Only applies if [[enableIDN]] is `true`.
+     * @since 2.0.43
+     */
+    public $enableLocalIDN = true;
 
 
     /**
@@ -90,7 +96,9 @@ protected function validateValue($value)
             $valid = false;
         } else {
             if ($this->enableIDN) {
-                $matches['local'] = $this->idnToAsciiWithFallback($matches['local']);
+                if ($this->enableLocalIDN) {
+                    $matches['local'] = $this->idnToAsciiWithFallback($matches['local']);
+                }
                 $matches['domain'] = $this->idnToAscii($matches['domain']);
                 $value = $matches['name'] . $matches['open'] . $matches['local'] . '@' . $matches['domain'] . $matches['close'];
             }
diff --git a/src/validators/ExistValidator.php b/src/validators/ExistValidator.php
index 8bbcd69195e..679bf57d26b 100644
--- a/src/validators/ExistValidator.php
+++ b/src/validators/ExistValidator.php
@@ -131,15 +131,13 @@ private function checkTargetRelationExistence($model, $attribute)
             $relationQuery->andWhere($this->filter);
         }
 
-        if ($this->forceMasterDb && method_exists($model::getDb(), 'useMaster')) {
-            $model::getDb()->useMaster(function() use ($relationQuery, &$exists) {
-                $exists = $relationQuery->exists();
-            });
+        $connection = $model::getDb();
+        if ($this->forceMasterDb && method_exists($connection, 'useMaster')) {
+            $exists = $connection->useMaster([$relationQuery, 'exists']);
         } else {
             $exists = $relationQuery->exists();
         }
 
-
         if (!$exists) {
             $this->addError($model, $attribute, $this->message);
         }
@@ -169,7 +167,7 @@ private function checkTargetAttributeExistence($model, $attribute)
             $conditions[] = $params;
         }
 
-        $targetClass = $this->targetClass === null ? get_class($model) : $this->targetClass;
+        $targetClass = $this->getTargetClass($model);
         $query = $this->createQuery($targetClass, $conditions);
 
         if (!$this->valueExists($targetClass, $query, $model->$attribute)) {
@@ -246,9 +244,9 @@ protected function validateValue($value)
     }
 
     /**
-     * Check whether value exists in target table
+     * Check whether value exists in target table.
      *
-     * @param string $targetClass
+     * @param string $targetClass the model
      * @param QueryInterface $query
      * @param mixed $value the value want to be checked
      * @return bool
@@ -259,8 +257,8 @@ private function valueExists($targetClass, $query, $value)
         $exists = false;
 
         if ($this->forceMasterDb && method_exists($db, 'useMaster')) {
-            $db->useMaster(function ($db) use ($query, $value, &$exists) {
-                $exists = $this->queryValueExists($query, $value);
+            $exists = $db->useMaster(function () use ($query, $value) {
+                return $this->queryValueExists($query, $value);
             });
         } else {
             $exists = $this->queryValueExists($query, $value);
@@ -271,7 +269,7 @@ private function valueExists($targetClass, $query, $value)
 
 
     /**
-     * Run query to check if value exists
+     * Run query to check if value exists.
      *
      * @param QueryInterface $query
      * @param mixed $value the value to be checked
@@ -280,7 +278,7 @@ private function valueExists($targetClass, $query, $value)
     private function queryValueExists($query, $value)
     {
         if (is_array($value)) {
-            return $query->count("DISTINCT [[$this->targetAttribute]]") == count($value) ;
+            return $query->count("DISTINCT [[$this->targetAttribute]]") == count(array_unique($value));
         }
         return $query->exists();
     }
diff --git a/src/web/Cookie.php b/src/web/Cookie.php
index 2c0d909a32f..84b694b4768 100644
--- a/src/web/Cookie.php
+++ b/src/web/Cookie.php
@@ -33,6 +33,16 @@ class Cookie extends \yii\base\BaseObject
      * @see $sameSite
      */
     const SAME_SITE_STRICT = 'Strict';
+    /**
+     * SameSite policy None disables the SameSite policy so cookies will be sent in all contexts,
+     * i.e in responses to both first-party and cross-origin requests.
+     * E.g. a POST request from https://otherdomain.com to https://yourdomain.com will include the cookie.
+     * Note: If `sameSite` is set to None, the `secure` attribute must be set to `true` (otherwise the cookie will be blocked by the browser).
+     * @see $sameSite
+     * @see $secure
+     * @since 2.0.43
+     */
+    const SAME_SITE_NONE = 'None';
 
     /**
      * @var string name of the cookie
@@ -68,7 +78,7 @@ class Cookie extends \yii\base\BaseObject
     /**
      * @var string SameSite prevents the browser from sending this cookie along with cross-site requests.
      *
-     * See https://owasp.org/www-community/SameSite for more information about sameSite.
+     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite for more information about sameSite.
      *
      * @since 2.0.21
      */
diff --git a/src/web/ErrorHandler.php b/src/web/ErrorHandler.php
index 8c9ee2728f9..0d573ad7927 100644
--- a/src/web/ErrorHandler.php
+++ b/src/web/ErrorHandler.php
@@ -180,7 +180,7 @@ protected function convertExceptionToArray($exception)
      */
     public function htmlEncode($text)
     {
-        return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
+        return htmlspecialchars($text, ENT_NOQUOTES | ENT_SUBSTITUTE | ENT_HTML5, 'UTF-8');
     }
 
     /**
diff --git a/src/web/JsExpression.php b/src/web/JsExpression.php
index 2b8bd5650b6..83c76abf8f8 100644
--- a/src/web/JsExpression.php
+++ b/src/web/JsExpression.php
@@ -10,9 +10,9 @@
 use yii\base\BaseObject;
 
 /**
- * JsExpression marks a string as a JavaScript expression.
+ * `JsExpression` marks a string as a JavaScript expression.
  *
- * When using [[\yii\helpers\Json::encode()]] or [[\yii\helpers\Json::htmlEncode()]] to encode a value, JsonExpression objects
+ * When using [[\yii\helpers\Json::encode()]] or [[\yii\helpers\Json::htmlEncode()]] to encode a value, `JsExpression` objects
  * will be specially handled and encoded as a JavaScript expression instead of a string.
  *
  * @author Qiang Xue <qiang.xue@gmail.com>
@@ -43,6 +43,6 @@ public function __construct($expression, $config = [])
      */
     public function __toString()
     {
-        return $this->expression;
+        return (string) $this->expression;
     }
 }
diff --git a/src/web/JsonParser.php b/src/web/JsonParser.php
index d741ba73744..94353fb5626 100644
--- a/src/web/JsonParser.php
+++ b/src/web/JsonParser.php
@@ -33,7 +33,7 @@ class JsonParser implements RequestParserInterface
      */
     public $asArray = true;
     /**
-     * @var bool whether to throw a [[BadRequestHttpException]] if the body is invalid json
+     * @var bool whether to throw a [[BadRequestHttpException]] if the body is invalid JSON
      */
     public $throwException = true;
 
@@ -42,11 +42,16 @@ class JsonParser implements RequestParserInterface
      * Parses a HTTP request body.
      * @param string $rawBody the raw HTTP request body.
      * @param string $contentType the content type specified for the request body.
-     * @return array parameters parsed from the request body
+     * @return array|\stdClass parameters parsed from the request body
      * @throws BadRequestHttpException if the body contains invalid json and [[throwException]] is `true`.
      */
     public function parse($rawBody, $contentType)
     {
+        // converts JSONP to JSON
+        if (strpos($contentType, 'application/javascript') !== false) {
+            $rawBody = preg_filter('/(^[^{]+|[^}]+$)/', '', $rawBody);
+        }
+
         try {
             $parameters = Json::decode($rawBody, $this->asArray);
             return $parameters === null ? [] : $parameters;
diff --git a/src/web/MultipartFormDataParser.php b/src/web/MultipartFormDataParser.php
index c6f8c8ccaa6..9cfac9b1996 100644
--- a/src/web/MultipartFormDataParser.php
+++ b/src/web/MultipartFormDataParser.php
@@ -109,7 +109,7 @@ public function setUploadFileMaxSize($uploadFileMaxSize)
     public function getUploadFileMaxCount()
     {
         if ($this->_uploadFileMaxCount === null) {
-            $this->_uploadFileMaxCount = ini_get('max_file_uploads');
+            $this->_uploadFileMaxCount = (int)ini_get('max_file_uploads');
         }
 
         return $this->_uploadFileMaxCount;
diff --git a/src/web/Request.php b/src/web/Request.php
index 70fa32dffda..51dd502ba1b 100644
--- a/src/web/Request.php
+++ b/src/web/Request.php
@@ -371,10 +371,16 @@ public function getHeaders()
                     $this->_headers->add($name, $value);
                 }
             } else {
+                // ['prefix' => length]
+                $headerPrefixes = ['HTTP_' => 5, 'REDIRECT_HTTP_' => 14];
+
                 foreach ($_SERVER as $name => $value) {
-                    if (strncmp($name, 'HTTP_', 5) === 0) {
-                        $name = str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))));
-                        $this->_headers->add($name, $value);
+                    foreach ($headerPrefixes as $prefix => $length) {
+                        if (strncmp($name, $prefix, $length) === 0) {
+                            $name = str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, $length)))));
+                            $this->_headers->add($name, $value);
+                            continue 2;
+                        }
                     }
                 }
             }
@@ -1321,13 +1327,16 @@ public function getAuthCredentials()
             return [$username, $password];
         }
 
-        /*
+        /**
          * Apache with php-cgi does not pass HTTP Basic authentication to PHP by default.
-         * To make it work, add the following line to to your .htaccess file:
+         * To make it work, add one of the following lines to to your .htaccess file:
          *
+         * SetEnvIf Authorization .+ HTTP_AUTHORIZATION=$0
+         * --OR--
          * RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
          */
-        $auth_token = $this->getHeaders()->get('HTTP_AUTHORIZATION') ?: $this->getHeaders()->get('REDIRECT_HTTP_AUTHORIZATION');
+        $auth_token = $this->getHeaders()->get('Authorization');
+
         if ($auth_token !== null && strncasecmp($auth_token, 'basic', 5) === 0) {
             $parts = array_map(function ($value) {
                 return strlen($value) === 0 ? null : $value;
diff --git a/src/web/Session.php b/src/web/Session.php
index 03d4ece7c63..a7de39f1824 100644
--- a/src/web/Session.php
+++ b/src/web/Session.php
@@ -105,7 +105,7 @@ class Session extends Component implements \IteratorAggregate, \ArrayAccess, \Co
      */
     private $_cookieParams = ['httponly' => true];
     /**
-     * @var $frozenSessionData array|null is used for saving session between recreations due to session parameters update.
+     * @var array|null is used for saving session between recreations due to session parameters update.
      */
     private $frozenSessionData;
 
diff --git a/src/web/User.php b/src/web/User.php
index 5550fcd576e..1aa791b6f67 100644
--- a/src/web/User.php
+++ b/src/web/User.php
@@ -99,7 +99,7 @@ class User extends Component
      */
     public $identityCookie = ['name' => '_identity', 'httpOnly' => true];
     /**
-     * @var int the number of seconds in which the user will be logged out automatically if he
+     * @var int the number of seconds in which the user will be logged out automatically if the user
      * remains inactive. If this property is not set, the user will be logged out after
      * the current session expires (c.f. [[Session::timeout]]).
      * Note that this will not work if [[enableAutoLogin]] is `true`.
@@ -771,7 +771,7 @@ public function can($permissionName, $params = [], $allowCaching = true)
      * @see acceptableRedirectTypes
      * @since 2.0.8
      */
-    protected function checkRedirectAcceptable()
+    public function checkRedirectAcceptable()
     {
         $acceptableTypes = Yii::$app->getRequest()->getAcceptableContentTypes();
         if (empty($acceptableTypes) || (count($acceptableTypes) === 1 && array_keys($acceptableTypes)[0] === '*/*')) {
diff --git a/src/widgets/MaskedInput.php b/src/widgets/MaskedInput.php
index 8208e139846..632af1f3daa 100644
--- a/src/widgets/MaskedInput.php
+++ b/src/widgets/MaskedInput.php
@@ -8,7 +8,6 @@
 namespace yii\widgets;
 
 use yii\base\InvalidConfigException;
-use yii\helpers\Html;
 use yii\helpers\Json;
 use yii\web\JsExpression;
 use yii\web\View;
@@ -33,7 +32,7 @@
  * method, for example like this:
  *
  * ```php
- * <?= $form->field($model, 'from_date')->widget(\yii\widgets\MaskedInput::className(), [
+ * <?= $form->field($model, 'from_date')->widget(\yii\widgets\MaskedInput::class, [
  *     'mask' => '999-999-9999',
  * ]) ?>
  * ```
diff --git a/tests/data/mysql.sql b/tests/data/mysql.sql
index afc8a4cc757..f4ff097347b 100644
--- a/tests/data/mysql.sql
+++ b/tests/data/mysql.sql
@@ -138,8 +138,10 @@ CREATE TABLE `negative_default_values` (
 CREATE TABLE `type` (
   `int_col` integer NOT NULL,
   `int_col2` integer DEFAULT '1',
+  `int_col3` integer(11) unsigned DEFAULT '1',
   `tinyint_col` tinyint(3) DEFAULT '1',
   `smallint_col` smallint(1) DEFAULT '1',
+  `bigint_col` bigint unsigned,
   `char_col` char(100) NOT NULL,
   `char_col2` varchar(100) DEFAULT 'something',
   `char_col3` text,
diff --git a/tests/framework/base/SecurityTest.php b/tests/framework/base/SecurityTest.php
index e84714000e0..215999c12aa 100644
--- a/tests/framework/base/SecurityTest.php
+++ b/tests/framework/base/SecurityTest.php
@@ -5,53 +5,7 @@
  * @license http://www.yiiframework.com/license/
  */
 
-namespace yii\base {
-
-    /**
-     * emulate availability of functions, to test different branches of Security class
-     * where different execution paths are chosen based on calling function_exists.
-     *
-     * This function overrides function_exists from the root namespace in yii\base.
-     * @param string $name
-     */
-    function function_exists($name)
-    {
-        if (isset(\yiiunit\framework\base\SecurityTest::$functions[$name])) {
-            return \yiiunit\framework\base\SecurityTest::$functions[$name];
-        }
-
-        return \function_exists($name);
-    }
-    /**
-     * Emulate chunked reading of fread(), to test different branches of Security class
-     * where different execution paths are chosen based on the return value of fopen/fread.
-     *
-     * This function overrides fopen and fread from the root namespace in yii\base.
-     * @param string $filename
-     * @param mixed $mode
-     */
-    function fopen($filename, $mode)
-    {
-        if (\yiiunit\framework\base\SecurityTest::$fopen !== null) {
-            return \yiiunit\framework\base\SecurityTest::$fopen;
-        }
-
-        return \fopen($filename, $mode);
-    }
-    function fread($handle, $length)
-    {
-        if (\yiiunit\framework\base\SecurityTest::$fread !== null) {
-            return \yiiunit\framework\base\SecurityTest::$fread;
-        }
-        if (\yiiunit\framework\base\SecurityTest::$fopen !== null) {
-            return $length < 8 ? \str_repeat('s', $length) : 'test1234';
-        }
-
-        return \fread($handle, $length);
-    }
-} // closing namespace yii\base;
-
-namespace yiiunit\framework\base {
+namespace yiiunit\framework\base;
 
 use yii\base\Security;
 use yiiunit\TestCase;
@@ -63,16 +17,6 @@ class SecurityTest extends TestCase
 {
     const CRYPT_VECTORS = 'old';
 
-    /**
-     * @var array set of functions for which a fake return value for `function_exists()` is provided.
-     */
-    public static $functions = [];
-    /**
-     * @var resource|false|null fake return value for fopen() in \yii\base namespace. Normal behavior if this is null.
-     */
-    public static $fopen;
-    public static $fread;
-
     /**
      * @var ExposedSecurity
      */
@@ -80,27 +24,11 @@ class SecurityTest extends TestCase
 
     protected function setUp(): void
     {
-        static::$functions = [];
-        static::$fopen = null;
-        static::$fread = null;
         parent::setUp();
         $this->security = new ExposedSecurity();
         $this->security->derivationIterations = 1000; // speed up test running
     }
 
-    protected function tearDown(): void
-    {
-        static::$functions = [];
-        static::$fopen = null;
-        static::$fread = null;
-        parent::tearDown();
-    }
-
-    private function isWindows()
-    {
-        return DIRECTORY_SEPARATOR !== '/';
-    }
-
     // Tests :
 
     public function testHashData()
@@ -893,76 +821,8 @@ public function testRandomKeyInvalidInput($input)
         $key1 = $this->security->generateRandomKey($input);
     }
 
-    /**
-     * Test the case where opening /dev/urandom fails.
-     */
-    public function testRandomKeyNoOptions()
-    {
-        static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];
-        static::$fopen = false;
-        $this->expectException('yii\base\Exception');
-        $this->expectExceptionMessage('Unable to generate a random key');
-
-        $this->security->generateRandomKey(42);
-    }
-
-    /**
-     * Test the case where reading from /dev/urandom fails.
-     */
-    public function testRandomKeyFreadFailure()
-    {
-        static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];
-        static::$fread = false;
-        $this->expectException('yii\base\Exception');
-        $this->expectExceptionMessage('Unable to generate a random key');
-
-        $this->security->generateRandomKey(42);
-    }
-
-    /**
-     * returns a set of different combinations of functions available.
-     */
-    public function randomKeyVariants()
+    public function testGenerateRandomKey()
     {
-        return [
-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],
-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],
-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],
-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],
-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],
-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],
-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],
-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],
-        ];
-    }
-
-    /**
-     * @dataProvider randomKeyVariants
-     * @param array $functions
-     */
-    public function testGenerateRandomKey($functions)
-    {
-        foreach ($functions as $fun => $available) {
-            if ($available && !\function_exists($fun)) {
-                $this->markTestSkipped("Can not test generateRandomKey() branch that includes $fun, because it is not available on your system.");
-            }
-        }
-        // there is no /dev/urandom on windows so we expect this to fail
-        if ($this->isWindows() && $functions['random_bytes'] === false && $functions['openssl_random_pseudo_bytes'] === false && $functions['mcrypt_create_iv'] === false) {
-            $this->expectException('yii\base\Exception');
-            $this->expectExceptionMessage('Unable to generate a random key');
-        }
-        // Function mcrypt_create_iv() is deprecated since PHP 7.1
-        if (version_compare(PHP_VERSION, '7.1.0alpha', '>=') && $functions['random_bytes'] === false && $functions['mcrypt_create_iv'] === true) {
-            if ($functions['openssl_random_pseudo_bytes'] === false) {
-                $this->markTestSkipped('Function mcrypt_create_iv() is deprecated as of PHP 7.1');
-            } elseif (!$this->security->shouldUseLibreSSL() && !$this->isWindows()) {
-                $this->markTestSkipped('Function openssl_random_pseudo_bytes need LibreSSL version >=2.1.5 or Windows system on server');
-            }
-        }
-
-        static::$functions = $functions;
-
         // test various string lengths
         for ($length = 1; $length < 64; $length++) {
             $key1 = $this->security->generateRandomKey($length);
@@ -985,16 +845,6 @@ public function testGenerateRandomKey($functions)
         $this->assertIsString($key2);
         $this->assertEquals($length, strlen($key2));
         $this->assertNotEquals($key1, $key2);
-
-        // force /dev/urandom reading loop to deal with chunked data
-        // the above test may have read everything in one run.
-        // not sure if this can happen in real life but if it does
-        // we should be prepared
-        static::$fopen = fopen('php://memory', 'rwb');
-        $length = 1024 * 1024;
-        $key1 = $this->security->generateRandomKey($length);
-        $this->assertIsString($key1);
-        $this->assertEquals($length, strlen($key1));
     }
 
     protected function randTime(Security $security, $count, $length, $message)
@@ -1010,42 +860,6 @@ protected function randTime(Security $security, $count, $length, $message)
         fwrite(STDERR, "$message: $count x $length B = $nbytes B in $milisec ms => $rate MB/s\n");
     }
 
-    public function testGenerateRandomKeySpeed()
-    {
-        self::markTestSkipped('Comment markTestSkipped in testGenerateRandomKeySpeed() in order to get RNG benchmark.');
-        $tests = [
-            "function_exists('random_bytes')",
-            "defined('OPENSSL_VERSION_TEXT') ? OPENSSL_VERSION_TEXT : null",
-            'PHP_VERSION_ID',
-            'PHP_OS',
-            "function_exists('mcrypt_create_iv') ? bin2hex(mcrypt_create_iv(4, MCRYPT_DEV_URANDOM)) : null",
-            'DIRECTORY_SEPARATOR',
-            "ini_get('open_basedir')",
-        ];
-        if ($this->isWindows()) {
-            $tests[] = "sprintf('%o', lstat(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom')['mode'] & 0170000)";
-            $tests[] = "bin2hex(file_get_contents(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom', false, null, 0, 8))";
-        }
-        foreach ($tests as $i => $test) {
-            $result = eval('return ' . $test . ';');
-            fwrite(STDERR, sprintf("%2d %s ==> %s\n", $i + 1, $test, var_export($result, true)));
-        }
-
-        foreach ([16, 2000, 262144] as $block) {
-            $security = new Security();
-            foreach (range(1, 10) as $nth) {
-                $this->randTime($security, 1, $block, "Call $nth");
-            }
-            unset($security);
-        }
-
-        $security = new Security();
-        $this->randTime($security, 10000, 16, 'Rate test');
-
-        $security = new Security();
-        $this->randTime($security, 10000, 5000, 'Rate test');
-    }
-
     public function testGenerateRandomString()
     {
         $length = 21;
@@ -1305,4 +1119,3 @@ public function maskProvider()
         ];
     }
 }
-} // closing namespace yiiunit\framework\base;
diff --git a/tests/framework/db/QueryTest.php b/tests/framework/db/QueryTest.php
index 18179085e44..ac7df07ea39 100644
--- a/tests/framework/db/QueryTest.php
+++ b/tests/framework/db/QueryTest.php
@@ -606,7 +606,7 @@ protected function countLikeQuery(Connection $db, $tableName, $columnName, array
             ->where($whereCondition)
             ->count('*', $db);
         if (is_numeric($result)) {
-            $result = (int)$result;
+            $result = (int) $result;
         }
 
         return $result;
diff --git a/tests/framework/db/mysql/QueryBuilderTest.php b/tests/framework/db/mysql/QueryBuilderTest.php
index 2865dc395ad..21399b4f351 100644
--- a/tests/framework/db/mysql/QueryBuilderTest.php
+++ b/tests/framework/db/mysql/QueryBuilderTest.php
@@ -374,23 +374,22 @@ public function testIssue17449()
     public function testInsertInteger()
     {
         $db = $this->getConnection();
-
         $command = $db->createCommand();
 
-        $sql = $command->insert(
-            '{{customer}}',
-            [
-                'profile_id' => 22,
-            ]
-        )->getRawSql();
-        $this->assertEquals('INSERT INTO `customer` (`profile_id`) VALUES (22)', $sql);
+        // int value should not be converted to string, when column is `int`
+        $sql = $command->insert('{{type}}', ['int_col' => 22])->getRawSql();
+        $this->assertEquals('INSERT INTO `type` (`int_col`) VALUES (22)', $sql);
 
-        $sql = $command->insert(
-            '{{customer}}',
-            [
-                'profile_id' => '1000000000000',
-            ]
-        )->getRawSql();
-        $this->assertEquals('INSERT INTO `customer` (`profile_id`) VALUES (1000000000000)', $sql);
+        // int value should not be converted to string, when column is `int unsigned`
+        $sql = $command->insert('{{type}}', ['int_col3' => 22])->getRawSql();
+        $this->assertEquals('INSERT INTO `type` (`int_col3`) VALUES (22)', $sql);
+
+        // int value should not be converted to string, when column is `bigint unsigned`
+        $sql = $command->insert('{{type}}', ['bigint_col' => 22])->getRawSql();
+        $this->assertEquals("INSERT INTO `type` (`bigint_col`) VALUES (22)", $sql);
+
+        // string value should not be converted
+        $sql = $command->insert('{{type}}', ['bigint_col' => '1000000000000'])->getRawSql();
+        $this->assertEquals("INSERT INTO `type` (`bigint_col`) VALUES ('1000000000000')", $sql);
     }
 }
diff --git a/tests/framework/db/mysql/SchemaTest.php b/tests/framework/db/mysql/SchemaTest.php
index 6fa6a5d2be6..b5419821e8e 100644
--- a/tests/framework/db/mysql/SchemaTest.php
+++ b/tests/framework/db/mysql/SchemaTest.php
@@ -121,9 +121,9 @@ public function testAlternativeDisplayOfDefaultCurrentTimestampInMariaDB()
 
     public function getExpectedColumns()
     {
-        $version = $this->getConnection()->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION);
+        $version = $this->getConnection()->getSchema()->getServerVersion();
 
-        return array_merge(
+        $columns = array_merge(
             parent::getExpectedColumns(),
             [
                 'int_col' => [
@@ -150,6 +150,18 @@ public function getExpectedColumns()
                     'scale' => null,
                     'defaultValue' => 1,
                 ],
+                'int_col3' => [
+                    'type' => 'integer',
+                    'dbType' => \version_compare($version, '8.0.17', '>') ? 'int unsigned' : 'int(11) unsigned',
+                    'phpType' => 'integer',
+                    'allowNull' => true,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 11,
+                    'scale' => null,
+                    'defaultValue' => 1,
+                ],
                 'tinyint_col' => [
                     'type' => 'tinyint',
                     'dbType' => \version_compare($version, '8.0.17', '>') ? 'tinyint' : 'tinyint(3)',
@@ -174,7 +186,29 @@ public function getExpectedColumns()
                     'scale' => null,
                     'defaultValue' => 1,
                 ],
+                'bigint_col' => [
+                    'type' => 'bigint',
+                    'dbType' => \version_compare($version, '8.0.17', '>') ? 'bigint unsigned' : 'bigint(20) unsigned',
+                    'phpType' => 'string',
+                    'allowNull' => true,
+                    'autoIncrement' => false,
+                    'enumValues' => null,
+                    'size' => \version_compare($version, '8.0.17', '>') ? null : 20,
+                    'precision' => \version_compare($version, '8.0.17', '>') ? null : 20,
+                    'scale' => null,
+                    'defaultValue' => null,
+                ],
             ]
         );
+
+        if (version_compare($version, '5.7', '<')) {
+            $columns['int_col3']['phpType'] = 'string';
+
+            $columns['json_col']['type'] = 'text';
+            $columns['json_col']['dbType'] = 'longtext';
+            $columns['json_col']['phpType'] = 'string';
+        }
+
+        return $columns;
     }
 }
diff --git a/tests/framework/filters/auth/BasicAuthTest.php b/tests/framework/filters/auth/BasicAuthTest.php
index 55d8ec2c572..1bde8a853f8 100644
--- a/tests/framework/filters/auth/BasicAuthTest.php
+++ b/tests/framework/filters/auth/BasicAuthTest.php
@@ -27,10 +27,13 @@ class BasicAuthTest extends AuthTest
      */
     public function testHttpBasicAuth($token, $login)
     {
+        $original = $_SERVER;
+
         $_SERVER['PHP_AUTH_USER'] = $token;
         $_SERVER['PHP_AUTH_PW'] = 'whatever, we are testers';
         $filter = ['class' => HttpBasicAuth::className()];
         $this->ensureFilterApplies($token, $login, $filter);
+        $_SERVER = $original;
     }
 
     /**
@@ -40,9 +43,12 @@ public function testHttpBasicAuth($token, $login)
      */
     public function testHttpBasicAuthWithHttpAuthorizationHeader($token, $login)
     {
-        Yii::$app->request->headers->set('HTTP_AUTHORIZATION', 'Basic ' . base64_encode($token . ':' . 'mypw'));
+        $original = $_SERVER;
+
+        $_SERVER['HTTP_AUTHORIZATION'] = 'Basic ' . base64_encode($token . ':' . 'mypw');
         $filter = ['class' => HttpBasicAuth::className()];
         $this->ensureFilterApplies($token, $login, $filter);
+        $_SERVER = $original;
     }
 
     /**
@@ -52,9 +58,12 @@ public function testHttpBasicAuthWithHttpAuthorizationHeader($token, $login)
      */
     public function testHttpBasicAuthWithRedirectHttpAuthorizationHeader($token, $login)
     {
-        Yii::$app->request->headers->set('REDIRECT_HTTP_AUTHORIZATION', 'Basic ' . base64_encode($token . ':' . 'mypw'));
+        $original = $_SERVER;
+
+        $_SERVER['REDIRECT_HTTP_AUTHORIZATION'] = 'Basic ' . base64_encode($token . ':' . 'mypw');
         $filter = ['class' => HttpBasicAuth::className()];
         $this->ensureFilterApplies($token, $login, $filter);
+        $_SERVER = $original;
     }
 
     /**
diff --git a/tests/framework/helpers/BaseConsoleTest.php b/tests/framework/helpers/BaseConsoleTest.php
index 0a655dfeab8..d9a4391dc10 100644
--- a/tests/framework/helpers/BaseConsoleTest.php
+++ b/tests/framework/helpers/BaseConsoleTest.php
@@ -80,4 +80,10 @@ public function ansiColorizedSubstr_withColors_data()
             ['Foo%yBar%nYes', 5, 3, '%yr%nYe'],
         ];
     }
+
+    public function testAnsiStrlen()
+    {
+        $this->assertSame(3, BaseConsole::ansiStrlen('Foo'));
+        $this->assertSame(3, BaseConsole::ansiStrlen(BaseConsole::renderColoredString('Bar%y')));
+    }
 }
diff --git a/tests/framework/helpers/FileHelperTest.php b/tests/framework/helpers/FileHelperTest.php
index 7fd94a99dcd..09da3d29606 100644
--- a/tests/framework/helpers/FileHelperTest.php
+++ b/tests/framework/helpers/FileHelperTest.php
@@ -6,6 +6,7 @@
  */
 
 use yii\helpers\FileHelper;
+use yii\helpers\VarDumper;
 use yiiunit\TestCase;
 
 /**
@@ -937,4 +938,309 @@ public function testFindDirectories()
         sort($foundFiles);
         $this->assertEquals($expectedFiles, $foundFiles);
     }
+
+    public function testChangeOwnership()
+    {
+        if (DIRECTORY_SEPARATOR !== '/') {
+            $this->markTestSkipped('FileHelper::changeOwnership() fails silently on Windows, nothing to test.');
+        }
+
+        if (!extension_loaded('posix')) {
+            $this->markTestSkipped('posix extension is required.');
+        }
+
+        $dirName = 'change_ownership_test_dir';
+        $fileName = 'file_1.txt';
+        $testFile = $this->testFilePath . DIRECTORY_SEPARATOR . $dirName . DIRECTORY_SEPARATOR . $fileName;
+
+        $currentUserId = posix_getuid();
+        $currentUserName = posix_getpwuid($currentUserId)['name'];
+        $currentGroupId = posix_getgid();
+        $currentGroupName = posix_getgrgid($currentGroupId)['name'];
+
+        /////////////
+        /// Setup ///
+        /////////////
+
+        $this->createFileStructure([
+            $dirName => [
+                $fileName => 'test 1',
+            ],
+        ]);
+
+        // Ensure the test file is created as the current user/group and has a specific file mode
+        $this->assertFileExists($testFile);
+        $fileMode = 0770;
+        @chmod($testFile, $fileMode);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected created test file owner to be current user.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected created test file group to be current group.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be changed.');
+
+
+        /////////////////
+        /// File Mode ///
+        /////////////////
+
+        // Test file mode
+        $fileMode = 0777;
+        FileHelper::changeOwnership($testFile, null, $fileMode);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be changed.');
+
+        if ($currentUserId !== 0) {
+            $this->markTestInComplete(__METHOD__ . ' could only run partially, chown() can only to be tested as root user. Current user: ' . $currentUserName);
+        }
+
+        //////////////////////
+        /// User Ownership ///
+        //////////////////////
+
+        // Test user ownership as integer
+        $ownership = 10001;
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership, fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as numeric string (should be treated as integer)
+        $ownership = '10002';
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)$ownership, fileowner($testFile), 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as string
+        $ownership = $currentUserName;
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership, posix_getpwuid(fileowner($testFile))['name'], 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as numeric string with trailing colon (should be treated as integer)
+        $ownership = '10003:';
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)$ownership, fileowner($testFile), 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as string with trailing colon
+        $ownership = $currentUserName . ':';
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals(substr($ownership, 0, -1), posix_getpwuid(fileowner($testFile))['name'], 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as indexed array (integer value)
+        $ownership = [10004];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership[0], fileowner($testFile), 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as indexed array (numeric string value)
+        $ownership = ['10005'];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)$ownership[0], fileowner($testFile), 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user ownership as associative array (string value)
+        $ownership = ['user' => $currentUserName];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership['user'], posix_getpwuid(fileowner($testFile))['name'], 'Expected created test file owner to be changed.');
+        $this->assertEquals($currentGroupId, filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        ///////////////////////
+        /// Group Ownership ///
+        ///////////////////////
+
+        // Test group ownership as numeric string
+        $ownership = ':10006';
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals((int)substr($ownership, 1), filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test group ownership as string
+        $ownership = ':' . $currentGroupName;
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals(substr($ownership, 1), posix_getgrgid(filegroup($testFile))['name'], 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test group ownership as associative array (integer value)
+        $ownership = ['group' => 10007];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals($ownership['group'], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test group ownership as associative array (numeric string value)
+        $ownership = ['group' => '10008'];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals((int)$ownership['group'], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test group ownership as associative array (string value)
+        $ownership = ['group' => $currentGroupName];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($currentUserId, fileowner($testFile), 'Expected file owner to be unchanged.');
+        $this->assertEquals($ownership['group'], posix_getgrgid(filegroup($testFile))['name'], 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        /////////////////////////////////
+        /// User- and Group Ownership ///
+        /////////////////////////////////
+
+        // Test user and group ownership as numeric string
+        $ownership = '10009:10010';
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)explode(':', $ownership)[0], fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals((int)explode(':', $ownership)[1], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as string
+        $ownership = $currentUserName . ':' . $currentGroupName;
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals(explode(':', $ownership)[0], posix_getpwuid(fileowner($testFile))['name'], 'Expected file owner to be changed.');
+        $this->assertEquals(explode(':', $ownership)[1], posix_getgrgid(filegroup($testFile))['name'], 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as indexed array (integer values)
+        $ownership = [10011, 10012];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership[0], fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals($ownership[1], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as indexed array (numeric string values)
+        $ownership = ['10013', '10014'];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)$ownership[0], fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals((int)$ownership[1], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as indexed array (string values)
+        $ownership = [$currentUserName, $currentGroupName];
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership[0], posix_getpwuid(fileowner($testFile))['name'], 'Expected file owner to be changed.');
+        $this->assertEquals($ownership[1], posix_getgrgid(filegroup($testFile))['name'], 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as associative array (integer values)
+        $ownership = ['group' => 10015, 'user' => 10016]; // user/group reversed on purpose
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership['user'], fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals($ownership['group'], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as associative array (numeric string values)
+        $ownership = ['group' => '10017', 'user' => '10018']; // user/group reversed on purpose
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals((int)$ownership['user'], fileowner($testFile), 'Expected file owner to be changed.');
+        $this->assertEquals((int)$ownership['group'], filegroup($testFile), 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        // Test user and group ownership as associative array (string values)
+        $ownership = ['group' => $currentGroupName, 'user' => $currentUserName]; // user/group reversed on purpose
+        FileHelper::changeOwnership($testFile, $ownership);
+        clearstatcache(true, $testFile);
+        $this->assertEquals($ownership['user'], posix_getpwuid(fileowner($testFile))['name'], 'Expected file owner to be changed.');
+        $this->assertEquals($ownership['group'], posix_getgrgid(filegroup($testFile))['name'], 'Expected created test file group to be changed.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected file mode to be unchanged.');
+
+        ///////////////////////////////////////
+        /// Mode, User- and Group Ownership ///
+        ///////////////////////////////////////
+
+        // Test user ownership as integer with file mode
+        $ownership = '10019:10020';
+        $fileMode = 0774;
+        FileHelper::changeOwnership($testFile, $ownership, $fileMode);
+        clearstatcache(true, $testFile);
+        $this->assertEquals(explode(':', $ownership)[0], fileowner($testFile), 'Expected created test file owner to be changed.');
+        $this->assertEquals(explode(':', $ownership)[1], filegroup($testFile), 'Expected file group to be unchanged.');
+        $this->assertEquals('0'.decoct($fileMode), substr(decoct(fileperms($testFile)), -4), 'Expected created test file mode to be changed.');
+
+    }
+
+    public function testChangeOwnershipNonExistingUser()
+    {
+        $dirName = 'change_ownership_non_existing_user';
+        $fileName = 'file_1.txt';
+        $testFile = $this->testFilePath . DIRECTORY_SEPARATOR . $dirName . DIRECTORY_SEPARATOR . $fileName;
+
+        $this->createFileStructure([
+            $dirName => [
+                $fileName => 'test 1',
+            ],
+        ]);
+
+        // Test user ownership as integer with file mode (Due to the nature of chown we can't use PHPUnit's `expectException`)
+        $ownership = 'non_existing_user';
+        try {
+            FileHelper::changeOwnership($testFile, $ownership);
+            throw new \Exception('FileHelper::changeOwnership() should have thrown error for non existing user.');
+        } catch(\Exception $e) {
+            $this->assertEquals('chown(): Unable to find uid for non_existing_user', $e->getMessage());
+        }
+    }
+
+    /**
+     * @dataProvider changeOwnershipInvalidArgumentsProvider
+     * @param bool $useFile
+     * @param mixed $ownership
+     * @param mixed $mode
+     */
+    public function testChangeOwnershipInvalidArguments($useFile, $ownership, $mode)
+    {
+        $dirName = 'change_ownership_invalid_arguments';
+        $fileName = 'file_1.txt';
+        $file = $this->testFilePath . DIRECTORY_SEPARATOR . $dirName . DIRECTORY_SEPARATOR . $fileName;
+
+        $this->createFileStructure([
+            $dirName => [
+                $fileName => 'test 1',
+            ],
+        ]);
+
+        $this->expectException('yii\base\InvalidArgumentException');
+        FileHelper::changeOwnership($useFile ? $file : null, $ownership, $mode);
+    }
+
+    public function changeOwnershipInvalidArgumentsProvider()
+    {
+        return [
+            [false, '123:123', null],
+            [true, new stdClass(), null],
+            [true, ['user' => new stdClass()], null],
+            [true, ['group' => new stdClass()], null],
+            [true, null, 'test'],
+        ];
+    }
 }
diff --git a/tests/framework/helpers/FormatConverterTest.php b/tests/framework/helpers/FormatConverterTest.php
index cd06418821c..ecd2d706247 100644
--- a/tests/framework/helpers/FormatConverterTest.php
+++ b/tests/framework/helpers/FormatConverterTest.php
@@ -43,18 +43,297 @@ public function testIntlIcuToPhpShortForm()
         $this->assertEquals('d.m.y', FormatConverter::convertDateIcuToPhp('short', 'date', 'de-DE'));
     }
 
-    public function testEscapedIcuToPhp()
+    public function testIntlIcuToPhpShortFormDefaultLang()
+    {
+        Yii::$app->language = 'en';
+        $this->assertEquals('n/j/y', FormatConverter::convertDateIcuToPhp('short', 'date'));
+        Yii::$app->language = 'de';
+        $this->assertEquals('d.m.y', FormatConverter::convertDateIcuToPhp('short', 'date'));
+    }
+
+    public function testIntlIcuToPhpShortFormTime()
+    {
+        $this->assertEquals('g:i A', FormatConverter::convertDateIcuToPhp('short', 'time', 'en-US'));
+        $this->assertEquals('H:i', FormatConverter::convertDateIcuToPhp('short', 'time', 'de-DE'));
+    }
+
+    public function testIntlIcuToPhpShortFormDateTime()
+    {
+        $this->assertEquals('n/j/y, g:i A', FormatConverter::convertDateIcuToPhp('short', 'datetime', 'en-US'));
+        $this->assertEquals(
+            PHP_VERSION_ID < 50600 ? 'd.m.y H:i' : 'd.m.y, H:i',
+            FormatConverter::convertDateIcuToPhp('short', 'datetime', 'de-DE')
+        );
+    }
+
+    public function testEscapedIcuToPhpMixedPatterns()
     {
         $this->assertEquals('l, F j, Y \\a\\t g:i:s A T', FormatConverter::convertDateIcuToPhp('EEEE, MMMM d, y \'at\' h:mm:ss a zzzz'));
         $this->assertEquals('\\o\\\'\\c\\l\\o\\c\\k', FormatConverter::convertDateIcuToPhp('\'o\'\'clock\''));
     }
 
+    public function providerForICU2PHPPatterns()
+    {
+        return [
+            'two single quotes produce one' => ["''", "\\'"],
+            'era designator like (Anno Domini)' => ['G', ''],
+            '4digit year of "Week of Year"' => ['Y', 'o'],
+            '4digit year #1' => ['y', 'Y'],
+            '4digit year #2' => ['yyyy', 'Y'],
+            '2digit year number' => ['yy', 'y'],
+            'extended year e.g. 4601' => ['u', ''],
+            'cyclic year name, as in Chinese lunar calendar' => ['U', ''],
+            'related Gregorian year e.g. 1996' => ['r', ''],
+            'number of quarter' => ['Q', ''],
+            'number of quarter "02"' => ['QQ', ''],
+            'quarter "Q2"' => ['QQQ', ''],
+            'quarter 2nd quarter' => ['QQQQ', ''],
+            'number of quarter 2' => ['QQQQQ', ''],
+            'number of Stand Alone quarter' => ['q', ''],
+            'number of Stand Alone quarter "02"' => ['qq', ''],
+            'Stand Alone quarter "Q2"' => ['qqq', ''],
+            'Stand Alone quarter "2nd quarter"' => ['qqqq', ''],
+            'number of Stand Alone quarter "2"' => ['qqqqq', ''],
+            'Numeric representation of a month, without leading zeros' => ['M', 'n'],
+            'Numeric representation of a month, with leading zeros' => ['MM', 'm'],
+            'A short textual representation of a month, three letters' => ['MMM', 'M'],
+            'A full textual representation of a month, such as January or March' => ['MMMM', 'F'],
+            'MMMMM' => ['MMMMM', ''],
+            'Stand alone month in year #1' => ['L', 'n'],
+            'Stand alone month in year #2' => ['LL', 'm'],
+            'Stand alone month in year #3' => ['LLL', 'M'],
+            'Stand alone month in year #4' => ['LLLL', 'F'],
+            'Stand alone month in year #5' => ['LLLLL', ''],
+            'ISO-8601 week number of year #1' => ['w', 'W'],
+            'ISO-8601 week number of year #2' => ['ww', 'W'],
+            'week of the current month' => ['W', ''],
+            'day without leading zeros' => ['d', 'j'],
+            'day with leading zeros' => ['dd', 'd'],
+            'day of the year 0 to 365' => ['D', 'z'],
+            'Day of Week in Month. eg. 2nd Wednesday in July' => ['F', ''],
+            'Modified Julian day. This is different from the conventional Julian day number in two regards.' => ['g', ''],
+            'day of week written in short form eg. Sun' => ['E', 'D'],
+            'EE' => ['EE', 'D'],
+            'EEE' => ['EEE', 'D'],
+            'day of week fully written eg. Sunday' => ['EEEE', 'l'],
+            'EEEEE' => ['EEEEE', ''],
+            'EEEEEE' => ['EEEEEE', ''],
+            'ISO-8601 numeric representation of the day of the week 1=Mon to 7=Sun #1' => ['e', 'N'],
+            'php "w" 0=Sun to 6=Sat isn`t supported by ICU -> "w" means week number of year #1' => ['ee', 'N'],
+            'eee' => ['eee', 'D'],
+            'eeee' => ['eeee', 'l'],
+            'eeeee' => ['eeeee', ''],
+            'eeeeee' => ['eeeeee', ''],
+            'ISO-8601 numeric representation of the day of the week 1=Mon to 7=Sun #2' => ['c', 'N'],
+            'php "w" 0=Sun to 6=Sat isn`t supported by ICU -> "w" means week number of year #2' => ['cc', 'N'],
+            'ccc' => ['ccc', 'D'],
+            'cccc' => ['cccc', 'l'],
+            'ccccc' => ['ccccc', ''],
+            'cccccc' => ['cccccc', ''],
+            'AM/PM marker' => ['a', 'A'],
+            '12-hour format of an hour without leading zeros 1 to 12h' => ['h', 'g'],
+            '12-hour format of an hour with leading zeros, 01 to 12 h' => ['hh', 'h'],
+            '24-hour format of an hour without leading zeros 0 to 23h' => ['H', 'G'],
+            '24-hour format of an hour with leading zeros, 00 to 23 h' => ['HH', 'H'],
+            'hour in day (1~24) #1' => ['k', ''],
+            'hour in day (1~24) #2' => ['kk', ''],
+            'hour in am/pm (0~11) #1' => ['K', ''],
+            'hour in am/pm (0~11) #2' => ['KK', ''],
+            'Minutes without leading zeros, not supported by php but we fallback' => ['m', 'i'],
+            'Minutes with leading zeros' => ['mm', 'i'],
+            'Seconds, without leading zeros, not supported by php but we fallback' => ['s', 's'],
+            'Seconds, with leading zeros' => ['ss', 's'],
+            'fractional second #1' => ['S', ''],
+            'fractional second #2' => ['SS', ''],
+            'fractional second #3' => ['SSS', ''],
+            'fractional second #4' => ['SSSS', ''],
+            'milliseconds in day' => ['A', ''],
+            'Timezone abbreviation #1' => ['z', 'T'],
+            'Timezone abbreviation #2' => ['zz', 'T'],
+            'Timezone abbreviation #3' => ['zzz', 'T'],
+            'Timezone full name, not supported by php but we fallback' => ['zzzz', 'T'],
+            'Difference to Greenwich time (GMT) in hours #1' => ['Z', 'O'],
+            'Difference to Greenwich time (GMT) in hours #2' => ['ZZ', 'O'],
+            'Difference to Greenwich time (GMT) in hours #3' => ['ZZZ', 'O'],
+            'Time Zone: long localized GMT (=OOOO) e.g. GMT-08:00' => ['ZZZZ', '\G\M\TP'],
+            'TIme Zone: ISO8601 extended hms? (=XXXXX)' => ['ZZZZZ', ''],
+            'Time Zone: short localized GMT e.g. GMT-8' => ['O', ''],
+            'Time Zone: long localized GMT (=ZZZZ) e.g. GMT-08:00' => ['OOOO', '\G\M\TP'],
+            'Time Zone: generic non-location (falls back first to VVVV and then to OOOO) using the ICU defined fallback here #1' => ['v', '\G\M\TP'],
+            'Time Zone: generic non-location (falls back first to VVVV and then to OOOO) using the ICU defined fallback here #2' => ['vvvv', '\G\M\TP'],
+            'Time Zone: short time zone ID' => ['V', ''],
+            'Time Zone: long time zone ID' => ['VV', 'e'],
+            'Time Zone: time zone exemplar city' => ['VVV', ''],
+            'Time Zone: generic location (falls back to OOOO) using the ICU defined fallback here' => ['VVVV', '\G\M\TP'],
+            'Time Zone: ISO8601 basic hm?, with Z for 0, e.g. -08, +0530, Z' => ['X', ''],
+            'Time Zone: ISO8601 basic hm, with Z, e.g. -0800, Z' => ['XX', 'O, \Z'],
+            'Time Zone: ISO8601 extended hm, with Z, e.g. -08:00, Z' => ['XXX', 'P, \Z'],
+            'Time Zone: ISO8601 basic hms?, with Z, e.g. -0800, -075258, Z' => ['XXXX', ''],
+            'Time Zone: ISO8601 extended hms?, with Z, e.g. -08:00, -07:52:58, Z' => ['XXXXX', ''],
+            'Time Zone: ISO8601 basic hm?, without Z for 0, e.g. -08, +0530' => ['x', ''],
+            'Time Zone: ISO8601 basic hm, without Z, e.g. -0800' => ['xx', 'O'],
+            'Time Zone: ISO8601 extended hm, without Z, e.g. -08:00' => ['xxx', 'P'],
+            'Time Zone: ISO8601 basic hms?, without Z, e.g. -0800, -075258' => ['xxxx', ''],
+            'Time Zone: ISO8601 extended hms?, without Z, e.g. -08:00, -07:52:58' => ['xxxxx', ''],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForICU2PHPPatterns
+     */
+    public function testEscapedIcuToPhpSinglePattern($pattern, $expected)
+    {
+        $this->assertEquals($expected, FormatConverter::convertDateIcuToPhp($pattern));
+    }
+
     public function testEscapedIcuToJui()
     {
-        $this->assertEquals('l, F j, Y \\a\\t g:i:s A T', FormatConverter::convertDateIcuToPhp('EEEE, MMMM d, y \'at\' h:mm:ss a zzzz'));
+        $this->assertEquals('DD, MM d, yy \'at\' ', FormatConverter::convertDateIcuToJui('EEEE, MMMM d, y \'at\' zzzz'));
         $this->assertEquals('\'o\'\'clock\'', FormatConverter::convertDateIcuToJui('\'o\'\'clock\''));
     }
 
+    public function testIntlIcuToJuiShortForm()
+    {
+        $this->assertEquals('m/d/y', FormatConverter::convertDateIcuToJui('short', 'date', 'en-US'));
+        $this->assertEquals('dd.mm.y', FormatConverter::convertDateIcuToJui('short', 'date', 'de-DE'));
+    }
+
+    public function testIntlIcuToJuiShortFormDefaultLang()
+    {
+        Yii::$app->language = 'en';
+        $this->assertEquals('m/d/y', FormatConverter::convertDateIcuToJui('short', 'date'));
+        Yii::$app->language = 'de';
+        $this->assertEquals('dd.mm.y', FormatConverter::convertDateIcuToJui('short', 'date'));
+    }
+
+    public function testIntlIcuToJuiShortFormTime()
+    {
+        $this->assertEquals(': ', FormatConverter::convertDateIcuToJui('short', 'time', 'en-US'));
+        $this->assertEquals(':', FormatConverter::convertDateIcuToJui('short', 'time', 'de-DE'));
+    }
+
+    public function testIntlIcuToJuiShortFormDateTime()
+    {
+        $this->assertEquals('m/d/y, : ', FormatConverter::convertDateIcuToJui('short', 'datetime', 'en-US'));
+        $this->assertEquals(
+            PHP_VERSION_ID < 50600 ? 'dd.mm.y :' : 'dd.mm.y, :',
+            FormatConverter::convertDateIcuToJui('short', 'datetime', 'de-DE')
+        );
+    }
+
+    public function providerForICU2JUIPatterns()
+    {
+        return [
+            'era designator like (Anno Domini)' => ['G', ''],
+            '4digit year of "Week of Year"' => ['Y', ''],
+            '4digit year e.g. 2014 #1' => ['y', 'yy'],
+            '4digit year e.g. 2014 #2' => ['yyyy', 'yy'],
+            '2digit year number eg. 14' => ['yy', 'y'],
+            'extended year e.g. 4601' => ['u', ''],
+            'cyclic year name, as in Chinese lunar calendar' => ['U', ''],
+            'related Gregorian year e.g. 1996' => ['r', ''],
+            'number of quarter' => ['Q', ''],
+            'number of quarter "02"' => ['QQ', ''],
+            'quarter "Q2"' => ['QQQ', ''],
+            'quarter "2nd quarter"' => ['QQQQ', ''],
+            'number of quarter "2"' => ['QQQQQ', ''],
+            'number of Stand Alone quarter' => ['q', ''],
+            'number of Stand Alone quarter "02"' => ['qq', ''],
+            'Stand Alone quarter "Q2"' => ['qqq', ''],
+            'Stand Alone quarter "2nd quarter"' => ['qqqq', ''],
+            'number of Stand Alone quarter "2"' => ['qqqqq', ''],
+            'Numeric representation of a month, without leading zeros' => ['M', 'm'],
+            'Numeric representation of a month, with leading zeros' => ['MM', 'mm'],
+            'A short textual representation of a month, three letters' => ['MMM', 'M'],
+            'A full textual representation of a month, such as January or March' => ['MMMM', 'MM'],
+            'MMMMM' => ['MMMMM', ''],
+            'Stand alone month in year #1' => ['L', 'm'],
+            'Stand alone month in year #2' => ['LL', 'mm'],
+            'Stand alone month in year #3' => ['LLL', 'M'],
+            'Stand alone month in year #4' => ['LLLL', 'MM'],
+            'Stand alone month in year #5' => ['LLLLL', ''],
+            'ISO-8601 week number of year #1' => ['w', ''],
+            'ISO-8601 week number of year #2' => ['ww', ''],
+            'week of the current month' => ['W', ''],
+            'day without leading zeros' => ['d', 'd'],
+            'day with leading zeros' => ['dd', 'dd'],
+            'day of the year 0 to 365' => ['D', 'o'],
+            'Day of Week in Month. eg. 2nd Wednesday in July' => ['F', ''],
+            'Modified Julian day. This is different from the conventional Julian day number in two regards.' => ['g', ''],
+            'day of week written in short form eg. Sun' => ['E', 'D'],
+            'EE' => ['EE', 'D'],
+            'EEE' => ['EEE', 'D'],
+            'day of week fully written eg. Sunday' => ['EEEE', 'DD'],
+            'EEEEE' => ['EEEEE', ''],
+            'EEEEEE' => ['EEEEEE', ''],
+            'ISO-8601 numeric representation of the day of the week 1=Mon to 7=Sun #1' => ['e', ''],
+            'php "w" 0=Sun to 6=Sat isn`t supported by ICU -> "w" means week number of year #1' => ['ee', ''],
+            'eee' => ['eee', 'D'],
+            'eeee' => ['eeee', ''],
+            'eeeee' => ['eeeee', ''],
+            'eeeeee' => ['eeeeee', ''],
+            'ISO-8601 numeric representation of the day of the week 1=Mon to 7=Sun #2' => ['c', ''],
+            'php "w" 0=Sun to 6=Sat isn`t supported by ICU -> "w" means week number of year #2' => ['cc', ''],
+            'ccc' => ['ccc', 'D'],
+            'cccc' => ['cccc', 'DD'],
+            'ccccc' => ['ccccc', ''],
+            'cccccc' => ['cccccc', ''],
+            'am/pm marker' => ['a', ''],
+            '12-hour format of an hour without leading zeros 1 to 12h' => ['h', ''],
+            '12-hour format of an hour with leading zeros, 01 to 12 h' => ['hh', ''],
+            '24-hour format of an hour without leading zeros 0 to 23h' => ['H', ''],
+            '24-hour format of an hour with leading zeros, 00 to 23 h' => ['HH', ''],
+            'hour in day (1~24) #1' => ['k', ''],
+            'hour in day (1~24) #2' => ['kk', ''],
+            'hour in am/pm (0~11) #1' => ['K', ''],
+            'hour in am/pm (0~11) #2' => ['KK', ''],
+            'Minutes without leading zeros, not supported by php but we fallback' => ['m', ''],
+            'Minutes with leading zeros' => ['mm', ''],
+            'Seconds, without leading zeros, not supported by php but we fallback' => ['s', ''],
+            'Seconds, with leading zeros' => ['ss', ''],
+            'fractional second #1' => ['S', ''],
+            'fractional second #2' => ['SS', ''],
+            'fractional second #3' => ['SSS', ''],
+            'fractional second #4' => ['SSSS', ''],
+            'milliseconds in day' => ['A', ''],
+            'Timezone abbreviation #1' => ['z', ''],
+            'Timezone abbreviation #2' => ['zz', ''],
+            'Timezone abbreviation #3' => ['zzz', ''],
+            'Timezone full name, not supported by php but we fallback' => ['zzzz', ''],
+            'Difference to Greenwich time (GMT) in hours #1' => ['Z', ''],
+            'Difference to Greenwich time (GMT) in hours #2' => ['ZZ', ''],
+            'Difference to Greenwich time (GMT) in hours #3' => ['ZZZ', ''],
+            'Time Zone: long localized GMT (=OOOO) e.g. GMT-08:00' => ['ZZZZ', ''],
+            'Time Zone: ISO8601 extended hms? (=XXXXX)' => ['ZZZZZ', ''],
+            'Time Zone: short localized GMT e.g. GMT-8' => ['O', ''],
+            'Time Zone: long localized GMT (=ZZZZ) e.g. GMT-08:00' => ['OOOO', ''],
+            'Time Zone: generic non-location (falls back first to VVVV and then to OOOO) using the ICU defined fallback here #1' => ['v', ''],
+            'Time Zone: generic non-location (falls back first to VVVV and then to OOOO) using the ICU defined fallback here #2' => ['vvvv', ''],
+            'Time Zone: short time zone ID' => ['V', ''],
+            'Time Zone: long time zone ID' => ['VV', ''],
+            'Time Zone: time zone exemplar city' => ['VVV', ''],
+            'Time Zone: generic location (falls back to OOOO) using the ICU defined fallback here' => ['VVVV', ''],
+            'Time Zone: ISO8601 basic hm?, with Z for 0, e.g. -08, +0530, Z' => ['X', ''],
+            'Time Zone: ISO8601 basic hm, with Z, e.g. -0800, Z' => ['XX', ''],
+            'Time Zone: ISO8601 extended hm, with Z, e.g. -08:00, Z' => ['XXX', ''],
+            'Time Zone: ISO8601 basic hms?, with Z, e.g. -0800, -075258, Z' => ['XXXX', ''],
+            'Time Zone: ISO8601 extended hms?, with Z, e.g. -08:00, -07:52:58, Z' => ['XXXXX', ''],
+            'Time Zone: ISO8601 basic hm?, without Z for 0, e.g. -08, +0530' => ['x', ''],
+            'Time Zone: ISO8601 basic hm, without Z, e.g. -0800' => ['xx', ''],
+            'Time Zone: ISO8601 extended hm, without Z, e.g. -08:00' => ['xxx', ''],
+            'Time Zone: ISO8601 basic hms?, without Z, e.g. -0800, -075258' => ['xxxx', ''],
+            'Time Zone: ISO8601 extended hms?, without Z, e.g. -08:00, -07:52:58' => ['xxxxx', ''],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForICU2JUIPatterns
+     */
+    public function testEscapedIcuToJuiSinglePattern($pattern, $expected)
+    {
+        $this->assertEquals($expected, FormatConverter::convertDateIcuToJui($pattern));
+    }
+
     public function testIntlOneDigitIcu()
     {
         $formatter = new Formatter(['locale' => 'en-US']);
@@ -82,7 +361,7 @@ public function testIntlUtf8Ru()
         $this->assertRegExp('/24 авг\.? 2014 г\./', $formatter->asDate('2014-8-24', "dd MMM y 'г'."));
     }
 
-    public function testPhpToICU()
+    public function testPhpToICUMixedPatterns()
     {
         $expected = "yyyy-MM-dd'T'HH:mm:ssxxx";
         $actual = FormatConverter::convertDatePhpToIcu('Y-m-d\TH:i:sP');
@@ -109,6 +388,97 @@ public function testPhpToICU()
         $this->assertEquals($expected, $actual);
     }
 
+    public function providerForPHP2ICUPatterns()
+    {
+        return [
+            'single \' should be encoded as \'\', which internally should be encoded as \'\'\'\'' => ["'", "''"],
+            '\d' => ['\d', "'d'"],
+            'Day of the month, 2 digits with leading zeros 01 to 31' => ['d', 'dd'],
+            '\D' => ['\D', "'D'"],
+            'A textual representation of a day, three letters Mon through Sun' => ['D', 'eee'],
+            '\j' => ['\j', "'j'"],
+            'Day of the month without leading zeros 1 to 31' => ['j', 'd'],
+            '\l' => ['\l', "'l'"],
+            'A full textual representation of the day of the week Sunday through Saturday' => ['l', 'eeee'],
+            '\N' => ['\N', "'N'"],
+            'ISO-8601 numeric representation of the day of the week, 1 (for Monday) through 7 (for Sunday)' => ['N', 'e'],
+            '\S' => ['\S', "'S'"],
+            'English ordinal suffix for the day of the month, 2 characters 	st, nd, rd or th. Works well with j' => ['S', ''],
+            '\w' => ['\w', "'w'"],
+            'Numeric representation of the day of the week 	0 (for Sunday) through 6 (for Saturday)' => ['w', ''],
+            '\z' => ['\z', "'z'"],
+            'The day of the year (starting from 0) 0 through 365' => ['z', 'D'],
+            '\W' => ['\W', "'W'"],
+            'ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0) Example: 42 (the 42nd week in the year)' => ['W', 'w'],
+            '\F' => ['\F', "'F'"],
+            'A full textual representation of a month, January through December' => ['F', 'MMMM'],
+            '\m' => ['\m', "'m'"],
+            'Numeric representation of a month, with leading zeros 01 through 12' => ['m', 'MM'],
+            '\M' => ['\M', "'M'"],
+            'A short textual representation of a month, three letters Jan through Dec' => ['M', 'MMM'],
+            '\n' => ['\n', "'n'"],
+            'Numeric representation of a month, without leading zeros 1 through 12, not supported by ICU but we fallback to "with leading zero"' => ['n', 'M'],
+            '\t' => ['\t', "'t'"],
+            'Number of days in the given month 28 through 31' => ['t', ''],
+            '\L' => ['\L', "'L'"],
+            'Whether it`s a leap year, 1 if it is a leap year, 0 otherwise.' => ['L', ''],
+            '\o' => ['\o', "'o'"],
+            'ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead.' => ['o', 'Y'],
+            '\Y' => ['\Y', "'Y'"],
+            'A full numeric representation of a year, 4 digits Examples: 1999 or 2003' => ['Y', 'yyyy'],
+            '\y' => ['\y', "'y'"],
+            'A two digit representation of a year Examples: 99 or 03' => ['y', 'yy'],
+            '\a' => ['\a', "'a'"],
+            'Lowercase Ante meridiem and Post meridiem, am or pm' => ['a', 'a'],
+            '\A' => ['\A', "'A'"],
+            'Uppercase Ante meridiem and Post meridiem, AM or PM, not supported by ICU but we fallback to lowercase' => ['A', 'a'],
+            '\B' => ['\B', "'B'"],
+            '\A\B' => ['\A\B', "'AB'"],
+            'Swatch Internet time 000 through 999' => ['B', ''],
+            '\g' => ['\g', "'g'"],
+            '12-hour format of an hour without leading zeros 1 through 12' => ['g', 'h'],
+            '\G' => ['\G', "'G'"],
+            '24-hour format of an hour without leading zeros 0 to 23h' => ['G', 'H'],
+            '\h' => ['\h', "'h'"],
+            '12-hour format of an hour with leading zeros, 01 to 12 h' => ['h', 'hh'],
+            '\H' => ['\H', "'H'"],
+            '24-hour format of an hour with leading zeros, 00 to 23 h' => ['H', 'HH'],
+            '\i' => ['\i', "'i'"],
+            'Minutes with leading zeros 00 to 59' => ['i', 'mm'],
+            '\s' => ['\s', "'s'"],
+            'Seconds, with leading zeros 00 through 59' => ['s', 'ss'],
+            '\u' => ['\u', "'u'"],
+            'Microseconds. Example: 654321' => ['u', ''],
+            '\e' => ['\e', "'e'"],
+            'Timezone identifier. Examples: UTC, GMT, Atlantic/Azores' => ['e', 'VV'],
+            '\I' => ['\I', "'I'"],
+            'Whether or not the date is in daylight saving time, 1 if Daylight Saving Time, 0 otherwise.' => ['I', ''],
+            '\O' => ['\O', "'O'"],
+            'Difference to Greenwich time (GMT) in hours, Example: +0200' => ['O', 'xx'],
+            '\P' => ['\P', "'P'"],
+            'Difference to Greenwich time (GMT) with colon between hours and minutes, Example: +02:00' => ['P', 'xxx'],
+            '\T' => ['\T', "'T'"],
+            'Timezone abbreviation, Examples: EST, MDT ...' => ['T', 'zzz'],
+            '\Z' => ['\Z', "'Z'"],
+            'Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. -43200 through 50400' => ['Z', ''],
+            '\c' => ['\c', "'c'"],
+            'ISO 8601 date, e.g. 2004-02-12T15:19:21+00:00' => ['c', "yyyy-MM-dd'T'HH:mm:ssxxx"],
+            '\r' => ['\r', "'r'"],
+            'RFC 2822 formatted date, Example: Thu, 21 Dec 2000 16:01:07 +0200' => ['r', 'eee, dd MMM yyyy HH:mm:ss xx'],
+            '\U' => ['\U', "'U'"],
+            'Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)' => ['U', ''],
+            '\\' => ['\\\\', '\\'],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForPHP2ICUPatterns
+     */
+    public function testPhpToICUSinglePattern($pattern, $expected)
+    {
+        $this->assertEquals($expected, FormatConverter::convertDatePhpToIcu($pattern));
+    }
+
     public function testPhpFormatC()
     {
         $time = time();
@@ -120,4 +490,60 @@ public function testPhpFormatC()
         $formatter = new Formatter(['locale' => 'ru-RU', 'timeZone' => 'Europe/Moscow']);
         $this->assertEquals(date('c', $time), $formatter->asDatetime($time, 'php:c'));
     }
+
+    public function testEscapedPhpToJuiMixedPatterns()
+    {
+        $this->assertEquals('dd-mm-yy', FormatConverter::convertDatePhpToJui('d-m-Y'));
+    }
+
+    public function providerForPHP2JUIPatterns()
+    {
+        return [
+            'Day of the month, 2 digits with leading zeros 	01 to 31' => ['d', 'dd'],
+            'A textual representation of a day, three letters 	Mon through Sun' => ['D', 'D'],
+            'Day of the month without leading zeros 1 to 31' => ['j', 'd'],
+            'A full textual representation of the day of the week Sunday through Saturday' => ['l', 'DD'],
+            'ISO-8601 numeric representation of the day of the week, 1 (for Monday) through 7 (for Sunday)' => ['N', ''],
+            'English ordinal suffix for the day of the month, 2 characters 	st, nd, rd or th. Works well with j' => ['S', ''],
+            'Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday)' => ['w', ''],
+            'The day of the year (starting from 0) 0 through 365' => ['z', 'o'],
+            'ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0) Example: 42 (the 42nd week in the year)' => ['W', ''],
+            'A full textual representation of a month, January through December' => ['F', 'MM'],
+            'Numeric representation of a month, with leading zeros 01 through 12' => ['m', 'mm'],
+            'A short textual representation of a month, three letters Jan through Dec' => ['M', 'M'],
+            'Numeric representation of a month, without leading zeros 1 through 12' => ['n', 'm'],
+            'Number of days in the given month 	28 through 31' => ['t', ''],
+            'Whether it`s a leap year, 1 if it is a leap year, 0 otherwise.' => ['L', ''],
+            'ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead.' => ['o', ''],
+            'A full numeric representation of a year, 4 digits 	Examples: 1999 or 2003' => ['Y', 'yy'],
+            'A two digit representation of a year Examples: 99 or 03' => ['y', 'y'],
+            'Lowercase Ante meridiem and Post meridiem, am or pm' => ['a', ''],
+            'Uppercase Ante meridiem and Post meridiem, AM or PM, not supported by ICU but we fallback to lowercase' => ['A', ''],
+            'Swatch Internet time 000 through 999' => ['B', ''],
+            '12-hour format of an hour without leading zeros 1 through 12' => ['g', ''],
+            '24-hour format of an hour without leading zeros 0 to 23h' => ['G', ''],
+            '12-hour format of an hour with leading zeros, 01 to 12 h' => ['h', ''],
+            '24-hour format of an hour with leading zeros, 00 to 23 h' => ['H', ''],
+            'Minutes with leading zeros 00 to 59' => ['i', ''],
+            'Seconds, with leading zeros 00 through 59' => ['s', ''],
+            'Microseconds. Example: 654321' => ['u', ''],
+            'Timezone identifier. Examples: UTC, GMT, Atlantic/Azores' => ['e', ''],
+            'Whether or not the date is in daylight saving time, 1 if Daylight Saving Time, 0 otherwise.' => ['I', ''],
+            'Difference to Greenwich time (GMT) in hours, Example: +0200' => ['O', ''],
+            'Difference to Greenwich time (GMT) with colon between hours and minutes, Example: +02:00' => ['P', ''],
+            'Timezone abbreviation, Examples: EST, MDT ...' => ['T', ''],
+            'Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. -43200 through 50400' => ['Z', ''],
+            'ISO 8601 date, e.g. 2004-02-12T15:19:21+00:00, skipping the time here because it is not supported' => ['c', 'yyyy-MM-dd'],
+            'RFC 2822 formatted date, Example: Thu, 21 Dec 2000 16:01:07 +0200, skipping the time here because it is not supported' => ['r', 'D, d M yy'],
+            'Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)' => ['U', '@'],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForPHP2JUIPatterns
+     */
+    public function testEscapedPhpToJuiSinglePattern($pattern, $expected)
+    {
+        $this->assertEquals($expected, FormatConverter::convertDatePhpToJui($pattern));
+    }
 }
diff --git a/tests/framework/helpers/HtmlTest.php b/tests/framework/helpers/HtmlTest.php
index 066d6873a57..5b2c9de0090 100644
--- a/tests/framework/helpers/HtmlTest.php
+++ b/tests/framework/helpers/HtmlTest.php
@@ -1943,6 +1943,19 @@ public function testGetInputId($attributeName, $inputIdExpected)
         $this->assertSame($inputIdExpected, $inputIdActual);
     }
 
+    /**
+     * @dataProvider testGetInputIdByNameDataProvider
+     */
+    public function testGetInputIdByName($attributeName, $inputIdExpected)
+    {
+        $model = new DynamicModel();
+        $model->defineAttribute($attributeName);
+        $inputNameActual = Html::getInputName($model, $attributeName);
+        $inputIdActual = Html::getInputIdByName($inputNameActual);
+
+        $this->assertSame($inputIdExpected, $inputIdActual);
+    }
+
     public function testEscapeJsRegularExpression()
     {
         $expected = '/[a-z0-9-]+/';
@@ -2078,6 +2091,45 @@ public function testGetInputIdDataProvider()
             ],
         ];
     }
+
+    public function testGetInputIdByNameDataProvider()
+    {
+        return [
+            [
+                'foo',
+                'dynamicmodel-foo',
+            ],
+            [
+                'FooBar',
+                'dynamicmodel-foobar',
+            ],
+            [
+                'Foo_Bar',
+                'dynamicmodel-foo_bar',
+            ],
+            [
+                'foo[]',
+                'dynamicmodel-foo',
+            ],
+            [
+                'foo[bar][baz]',
+                'dynamicmodel-foo-bar-baz',
+            ],
+
+            [
+                'foo.bar',
+                'dynamicmodel-foo-bar',
+            ],
+            [
+                'bild_groß_dateiname',
+                'dynamicmodel-bild_groß_dateiname',
+            ],
+            [
+                'ФуБарБаз',
+                'dynamicmodel-фубарбаз',
+            ],
+        ];
+    }
 }
 
 /**
diff --git a/tests/framework/helpers/InflectorTest.php b/tests/framework/helpers/InflectorTest.php
index 7b80522066a..eaadb1c8650 100644
--- a/tests/framework/helpers/InflectorTest.php
+++ b/tests/framework/helpers/InflectorTest.php
@@ -44,6 +44,8 @@ public function testPluralize()
             'car' => 'cars',
             'netherlands' => 'netherlands',
             'currency' => 'currencies',
+            'software' => 'software',
+            'hardware' => 'hardware',
         ];
 
         foreach ($testData as $testIn => $testOut) {
@@ -73,6 +75,8 @@ public function testSingularize()
             'cars' => 'car',
             'Netherlands' => 'Netherlands',
             'currencies' => 'currency',
+            'software' => 'software',
+            'hardware' => 'hardware',
         ];
         foreach ($testData as $testIn => $testOut) {
             $this->assertEquals($testOut, Inflector::singularize($testIn));
diff --git a/tests/framework/helpers/JsonTest.php b/tests/framework/helpers/JsonTest.php
index 785b093ea31..9695af91c0f 100644
--- a/tests/framework/helpers/JsonTest.php
+++ b/tests/framework/helpers/JsonTest.php
@@ -230,6 +230,37 @@ public function testEncodeDateTime()
         $output = Json::encode($input);
         $this->assertEquals('{"date":"2014-10-12 00:00:00.000000","timezone_type":3,"timezone":"UTC"}', $output);
     }
+
+    public function testPrettyPrint()
+    {
+        $defaultValue = Json::$prettyPrint;
+        $input = ['a' => 1, 'b' => 2];
+        $defOutput = '{"a":1,"b":2}';
+        $ppOutput = "{\n    \"a\": 1,\n    \"b\": 2\n}";
+
+        // Test unchanged options
+        Json::$prettyPrint = null;
+        $output = Json::encode($input, 320);
+        $this->assertEquals($defOutput, $output);
+        $output = Json::encode($input, 448);
+        $this->assertEquals($ppOutput, $output);
+
+        // Test pretty print enabled
+        Json::$prettyPrint = true;
+        $output = Json::encode($input, 320);
+        $this->assertEquals($ppOutput, $output);
+        $output = Json::encode($input, 448);
+        $this->assertEquals($ppOutput, $output);
+
+        // Test pretty print disabled
+        Json::$prettyPrint = false;
+        $output = Json::encode($input, 320);
+        $this->assertEquals($defOutput, $output);
+        $output = Json::encode($input, 448);
+        $this->assertEquals($defOutput, $output);
+
+        Json::$prettyPrint = $defaultValue;
+    }
 }
 
 class JsonModel extends DynamicModel implements \JsonSerializable
diff --git a/tests/framework/helpers/MimeTest.php b/tests/framework/helpers/MimeTest.php
new file mode 100644
index 00000000000..fd9d848c57c
--- /dev/null
+++ b/tests/framework/helpers/MimeTest.php
@@ -0,0 +1,1031 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\helpers;
+
+use yiiunit\TestCase;
+
+/**
+ * @group helpers
+ */
+class MimeTest extends TestCase
+{
+    public function testMimeAliases()
+    {
+        $this->assertSame(
+            [
+                'text/xml' => 'application/xml',
+                'image/svg' => 'image/svg+xml',
+                'image/x-bmp' => 'image/bmp',
+                'image/x-bitmap' => 'image/bmp',
+                'image/x-xbitmap' => 'image/bmp',
+                'image/x-win-bitmap' => 'image/bmp',
+                'image/x-windows-bmp' => 'image/bmp',
+                'image/ms-bmp' => 'image/bmp',
+                'image/x-ms-bmp' => 'image/bmp',
+                'application/bmp' => 'image/bmp',
+                'application/x-bmp' => 'image/bmp',
+                'application/x-win-bitmap' => 'image/bmp',
+            ],
+            require __DIR__ . '/../../../framework/helpers/mimeAliases.php'
+        );
+    }
+
+    public function testMimeTypes()
+    {
+        $this->assertSame(
+            [
+                '3dml' => 'text/vnd.in3d.3dml',
+                '3ds' => 'image/x-3ds',
+                '3g2' => 'video/3gpp2',
+                '3gp' => 'video/3gpp',
+                '7z' => 'application/x-7z-compressed',
+                'aab' => 'application/x-authorware-bin',
+                'aac' => 'audio/x-aac',
+                'aam' => 'application/x-authorware-map',
+                'aas' => 'application/x-authorware-seg',
+                'abw' => 'application/x-abiword',
+                'ac' => 'application/pkix-attr-cert',
+                'acc' => 'application/vnd.americandynamics.acc',
+                'ace' => 'application/x-ace-compressed',
+                'acu' => 'application/vnd.acucobol',
+                'acutc' => 'application/vnd.acucorp',
+                'adp' => 'audio/adpcm',
+                'aep' => 'application/vnd.audiograph',
+                'afm' => 'application/x-font-type1',
+                'afp' => 'application/vnd.ibm.modcap',
+                'ahead' => 'application/vnd.ahead.space',
+                'ai' => 'application/postscript',
+                'aif' => 'audio/x-aiff',
+                'aifc' => 'audio/x-aiff',
+                'aiff' => 'audio/x-aiff',
+                'air' => 'application/vnd.adobe.air-application-installer-package+zip',
+                'ait' => 'application/vnd.dvb.ait',
+                'ami' => 'application/vnd.amiga.ami',
+                'apk' => 'application/vnd.android.package-archive',
+                'appcache' => 'text/cache-manifest',
+                'application' => 'application/x-ms-application',
+                'apr' => 'application/vnd.lotus-approach',
+                'arc' => 'application/x-freearc',
+                'asc' => 'application/pgp-signature',
+                'asf' => 'video/x-ms-asf',
+                'asm' => 'text/x-asm',
+                'aso' => 'application/vnd.accpac.simply.aso',
+                'asx' => 'video/x-ms-asf',
+                'atc' => 'application/vnd.acucorp',
+                'atom' => 'application/atom+xml',
+                'atomcat' => 'application/atomcat+xml',
+                'atomsvc' => 'application/atomsvc+xml',
+                'atx' => 'application/vnd.antix.game-component',
+                'au' => 'audio/basic',
+                'avi' => 'video/x-msvideo',
+                'aw' => 'application/applixware',
+                'azf' => 'application/vnd.airzip.filesecure.azf',
+                'azs' => 'application/vnd.airzip.filesecure.azs',
+                'azw' => 'application/vnd.amazon.ebook',
+                'bat' => 'application/x-msdownload',
+                'bcpio' => 'application/x-bcpio',
+                'bdf' => 'application/x-font-bdf',
+                'bdm' => 'application/vnd.syncml.dm+wbxml',
+                'bed' => 'application/vnd.realvnc.bed',
+                'bh2' => 'application/vnd.fujitsu.oasysprs',
+                'bin' => 'application/octet-stream',
+                'blb' => 'application/x-blorb',
+                'blorb' => 'application/x-blorb',
+                'bmi' => 'application/vnd.bmi',
+                'bmp' => 'image/bmp',
+                'book' => 'application/vnd.framemaker',
+                'box' => 'application/vnd.previewsystems.box',
+                'boz' => 'application/x-bzip2',
+                'bpk' => 'application/octet-stream',
+                'btif' => 'image/prs.btif',
+                'bz' => 'application/x-bzip',
+                'bz2' => 'application/x-bzip2',
+                'c' => 'text/x-c',
+                'c11amc' => 'application/vnd.cluetrust.cartomobile-config',
+                'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
+                'c4d' => 'application/vnd.clonk.c4group',
+                'c4f' => 'application/vnd.clonk.c4group',
+                'c4g' => 'application/vnd.clonk.c4group',
+                'c4p' => 'application/vnd.clonk.c4group',
+                'c4u' => 'application/vnd.clonk.c4group',
+                'cab' => 'application/vnd.ms-cab-compressed',
+                'caf' => 'audio/x-caf',
+                'cap' => 'application/vnd.tcpdump.pcap',
+                'car' => 'application/vnd.curl.car',
+                'cat' => 'application/vnd.ms-pki.seccat',
+                'cb7' => 'application/x-cbr',
+                'cba' => 'application/x-cbr',
+                'cbr' => 'application/x-cbr',
+                'cbt' => 'application/x-cbr',
+                'cbz' => 'application/x-cbr',
+                'cc' => 'text/x-c',
+                'cct' => 'application/x-director',
+                'ccxml' => 'application/ccxml+xml',
+                'cdbcmsg' => 'application/vnd.contact.cmsg',
+                'cdf' => 'application/x-netcdf',
+                'cdkey' => 'application/vnd.mediastation.cdkey',
+                'cdmia' => 'application/cdmi-capability',
+                'cdmic' => 'application/cdmi-container',
+                'cdmid' => 'application/cdmi-domain',
+                'cdmio' => 'application/cdmi-object',
+                'cdmiq' => 'application/cdmi-queue',
+                'cdx' => 'chemical/x-cdx',
+                'cdxml' => 'application/vnd.chemdraw+xml',
+                'cdy' => 'application/vnd.cinderella',
+                'cer' => 'application/pkix-cert',
+                'cfs' => 'application/x-cfs-compressed',
+                'cgm' => 'image/cgm',
+                'chat' => 'application/x-chat',
+                'chm' => 'application/vnd.ms-htmlhelp',
+                'chrt' => 'application/vnd.kde.kchart',
+                'cif' => 'chemical/x-cif',
+                'cii' => 'application/vnd.anser-web-certificate-issue-initiation',
+                'cil' => 'application/vnd.ms-artgalry',
+                'cla' => 'application/vnd.claymore',
+                'class' => 'application/java-vm',
+                'clkk' => 'application/vnd.crick.clicker.keyboard',
+                'clkp' => 'application/vnd.crick.clicker.palette',
+                'clkt' => 'application/vnd.crick.clicker.template',
+                'clkw' => 'application/vnd.crick.clicker.wordbank',
+                'clkx' => 'application/vnd.crick.clicker',
+                'clp' => 'application/x-msclip',
+                'cmc' => 'application/vnd.cosmocaller',
+                'cmdf' => 'chemical/x-cmdf',
+                'cml' => 'chemical/x-cml',
+                'cmp' => 'application/vnd.yellowriver-custom-menu',
+                'cmx' => 'image/x-cmx',
+                'cod' => 'application/vnd.rim.cod',
+                'com' => 'application/x-msdownload',
+                'conf' => 'text/plain',
+                'cpio' => 'application/x-cpio',
+                'cpp' => 'text/x-c',
+                'cpt' => 'application/mac-compactpro',
+                'crd' => 'application/x-mscardfile',
+                'crl' => 'application/pkix-crl',
+                'crt' => 'application/x-x509-ca-cert',
+                'cryptonote' => 'application/vnd.rig.cryptonote',
+                'csh' => 'application/x-csh',
+                'csml' => 'chemical/x-csml',
+                'csp' => 'application/vnd.commonspace',
+                'css' => 'text/css',
+                'cst' => 'application/x-director',
+                'csv' => 'text/csv',
+                'cu' => 'application/cu-seeme',
+                'curl' => 'text/vnd.curl',
+                'cww' => 'application/prs.cww',
+                'cxt' => 'application/x-director',
+                'cxx' => 'text/x-c',
+                'dae' => 'model/vnd.collada+xml',
+                'daf' => 'application/vnd.mobius.daf',
+                'dart' => 'application/vnd.dart',
+                'dataless' => 'application/vnd.fdsn.seed',
+                'davmount' => 'application/davmount+xml',
+                'dbk' => 'application/docbook+xml',
+                'dcr' => 'application/x-director',
+                'dcurl' => 'text/vnd.curl.dcurl',
+                'dd2' => 'application/vnd.oma.dd2+xml',
+                'ddd' => 'application/vnd.fujixerox.ddd',
+                'deb' => 'application/x-debian-package',
+                'def' => 'text/plain',
+                'deploy' => 'application/octet-stream',
+                'der' => 'application/x-x509-ca-cert',
+                'dfac' => 'application/vnd.dreamfactory',
+                'dgc' => 'application/x-dgc-compressed',
+                'dic' => 'text/x-c',
+                'dir' => 'application/x-director',
+                'dis' => 'application/vnd.mobius.dis',
+                'dist' => 'application/octet-stream',
+                'distz' => 'application/octet-stream',
+                'djv' => 'image/vnd.djvu',
+                'djvu' => 'image/vnd.djvu',
+                'dll' => 'application/x-msdownload',
+                'dmg' => 'application/x-apple-diskimage',
+                'dmp' => 'application/vnd.tcpdump.pcap',
+                'dms' => 'application/octet-stream',
+                'dna' => 'application/vnd.dna',
+                'doc' => 'application/msword',
+                'docm' => 'application/vnd.ms-word.document.macroenabled.12',
+                'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+                'dot' => 'application/msword',
+                'dotm' => 'application/vnd.ms-word.template.macroenabled.12',
+                'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
+                'dp' => 'application/vnd.osgi.dp',
+                'dpg' => 'application/vnd.dpgraph',
+                'dra' => 'audio/vnd.dra',
+                'dsc' => 'text/prs.lines.tag',
+                'dssc' => 'application/dssc+der',
+                'dtb' => 'application/x-dtbook+xml',
+                'dtd' => 'application/xml-dtd',
+                'dts' => 'audio/vnd.dts',
+                'dtshd' => 'audio/vnd.dts.hd',
+                'dump' => 'application/octet-stream',
+                'dvb' => 'video/vnd.dvb.file',
+                'dvi' => 'application/x-dvi',
+                'dwf' => 'model/vnd.dwf',
+                'dwg' => 'image/vnd.dwg',
+                'dxf' => 'image/vnd.dxf',
+                'dxp' => 'application/vnd.spotfire.dxp',
+                'dxr' => 'application/x-director',
+                'ecelp4800' => 'audio/vnd.nuera.ecelp4800',
+                'ecelp7470' => 'audio/vnd.nuera.ecelp7470',
+                'ecelp9600' => 'audio/vnd.nuera.ecelp9600',
+                'ecma' => 'application/ecmascript',
+                'edm' => 'application/vnd.novadigm.edm',
+                'edx' => 'application/vnd.novadigm.edx',
+                'efif' => 'application/vnd.picsel',
+                'ei6' => 'application/vnd.pg.osasli',
+                'elc' => 'application/octet-stream',
+                'emf' => 'application/x-msmetafile',
+                'eml' => 'message/rfc822',
+                'emma' => 'application/emma+xml',
+                'emz' => 'application/x-msmetafile',
+                'eol' => 'audio/vnd.digital-winds',
+                'eot' => 'application/vnd.ms-fontobject',
+                'eps' => 'application/postscript',
+                'epub' => 'application/epub+zip',
+                'es3' => 'application/vnd.eszigno3+xml',
+                'esa' => 'application/vnd.osgi.subsystem',
+                'esf' => 'application/vnd.epson.esf',
+                'et3' => 'application/vnd.eszigno3+xml',
+                'etx' => 'text/x-setext',
+                'eva' => 'application/x-eva',
+                'evy' => 'application/x-envoy',
+                'exe' => 'application/x-msdownload',
+                'exi' => 'application/exi',
+                'ext' => 'application/vnd.novadigm.ext',
+                'ez' => 'application/andrew-inset',
+                'ez2' => 'application/vnd.ezpix-album',
+                'ez3' => 'application/vnd.ezpix-package',
+                'f' => 'text/x-fortran',
+                'f4v' => 'video/x-f4v',
+                'f77' => 'text/x-fortran',
+                'f90' => 'text/x-fortran',
+                'fbs' => 'image/vnd.fastbidsheet',
+                'fcdt' => 'application/vnd.adobe.formscentral.fcdt',
+                'fcs' => 'application/vnd.isac.fcs',
+                'fdf' => 'application/vnd.fdf',
+                'fe_launch' => 'application/vnd.denovo.fcselayout-link',
+                'fg5' => 'application/vnd.fujitsu.oasysgp',
+                'fgd' => 'application/x-director',
+                'fh' => 'image/x-freehand',
+                'fh4' => 'image/x-freehand',
+                'fh5' => 'image/x-freehand',
+                'fh7' => 'image/x-freehand',
+                'fhc' => 'image/x-freehand',
+                'fig' => 'application/x-xfig',
+                'flac' => 'audio/x-flac',
+                'fli' => 'video/x-fli',
+                'flo' => 'application/vnd.micrografx.flo',
+                'flv' => 'video/x-flv',
+                'flw' => 'application/vnd.kde.kivio',
+                'flx' => 'text/vnd.fmi.flexstor',
+                'fly' => 'text/vnd.fly',
+                'fm' => 'application/vnd.framemaker',
+                'fnc' => 'application/vnd.frogans.fnc',
+                'for' => 'text/x-fortran',
+                'fpx' => 'image/vnd.fpx',
+                'frame' => 'application/vnd.framemaker',
+                'fsc' => 'application/vnd.fsc.weblaunch',
+                'fst' => 'image/vnd.fst',
+                'ftc' => 'application/vnd.fluxtime.clip',
+                'fti' => 'application/vnd.anser-web-funds-transfer-initiation',
+                'fvt' => 'video/vnd.fvt',
+                'fxp' => 'application/vnd.adobe.fxp',
+                'fxpl' => 'application/vnd.adobe.fxp',
+                'fzs' => 'application/vnd.fuzzysheet',
+                'g2w' => 'application/vnd.geoplan',
+                'g3' => 'image/g3fax',
+                'g3w' => 'application/vnd.geospace',
+                'gac' => 'application/vnd.groove-account',
+                'gam' => 'application/x-tads',
+                'gbr' => 'application/rpki-ghostbusters',
+                'gca' => 'application/x-gca-compressed',
+                'gdl' => 'model/vnd.gdl',
+                'geo' => 'application/vnd.dynageo',
+                'gex' => 'application/vnd.geometry-explorer',
+                'ggb' => 'application/vnd.geogebra.file',
+                'ggt' => 'application/vnd.geogebra.tool',
+                'ghf' => 'application/vnd.groove-help',
+                'gif' => 'image/gif',
+                'gim' => 'application/vnd.groove-identity-message',
+                'gml' => 'application/gml+xml',
+                'gmx' => 'application/vnd.gmx',
+                'gnumeric' => 'application/x-gnumeric',
+                'gph' => 'application/vnd.flographit',
+                'gpx' => 'application/gpx+xml',
+                'gqf' => 'application/vnd.grafeq',
+                'gqs' => 'application/vnd.grafeq',
+                'gram' => 'application/srgs',
+                'gramps' => 'application/x-gramps-xml',
+                'gre' => 'application/vnd.geometry-explorer',
+                'grv' => 'application/vnd.groove-injector',
+                'grxml' => 'application/srgs+xml',
+                'gsf' => 'application/x-font-ghostscript',
+                'gtar' => 'application/x-gtar',
+                'gtm' => 'application/vnd.groove-tool-message',
+                'gtw' => 'model/vnd.gtw',
+                'gv' => 'text/vnd.graphviz',
+                'gxf' => 'application/gxf',
+                'gxt' => 'application/vnd.geonext',
+                'h' => 'text/x-c',
+                'h261' => 'video/h261',
+                'h263' => 'video/h263',
+                'h264' => 'video/h264',
+                'hal' => 'application/vnd.hal+xml',
+                'hbci' => 'application/vnd.hbci',
+                'hdf' => 'application/x-hdf',
+                'hh' => 'text/x-c',
+                'hlp' => 'application/winhlp',
+                'hpgl' => 'application/vnd.hp-hpgl',
+                'hpid' => 'application/vnd.hp-hpid',
+                'hps' => 'application/vnd.hp-hps',
+                'hqx' => 'application/mac-binhex40',
+                'htke' => 'application/vnd.kenameaapp',
+                'htm' => 'text/html',
+                'html' => 'text/html',
+                'hvd' => 'application/vnd.yamaha.hv-dic',
+                'hvp' => 'application/vnd.yamaha.hv-voice',
+                'hvs' => 'application/vnd.yamaha.hv-script',
+                'i2g' => 'application/vnd.intergeo',
+                'icc' => 'application/vnd.iccprofile',
+                'ice' => 'x-conference/x-cooltalk',
+                'icm' => 'application/vnd.iccprofile',
+                'ico' => 'image/x-icon',
+                'ics' => 'text/calendar',
+                'ief' => 'image/ief',
+                'ifb' => 'text/calendar',
+                'ifm' => 'application/vnd.shana.informed.formdata',
+                'iges' => 'model/iges',
+                'igl' => 'application/vnd.igloader',
+                'igm' => 'application/vnd.insors.igm',
+                'igs' => 'model/iges',
+                'igx' => 'application/vnd.micrografx.igx',
+                'iif' => 'application/vnd.shana.informed.interchange',
+                'imp' => 'application/vnd.accpac.simply.imp',
+                'ims' => 'application/vnd.ms-ims',
+                'in' => 'text/plain',
+                'ink' => 'application/inkml+xml',
+                'inkml' => 'application/inkml+xml',
+                'install' => 'application/x-install-instructions',
+                'iota' => 'application/vnd.astraea-software.iota',
+                'ipfix' => 'application/ipfix',
+                'ipk' => 'application/vnd.shana.informed.package',
+                'irm' => 'application/vnd.ibm.rights-management',
+                'irp' => 'application/vnd.irepository.package+xml',
+                'iso' => 'application/x-iso9660-image',
+                'itp' => 'application/vnd.shana.informed.formtemplate',
+                'ivp' => 'application/vnd.immervision-ivp',
+                'ivu' => 'application/vnd.immervision-ivu',
+                'jad' => 'text/vnd.sun.j2me.app-descriptor',
+                'jam' => 'application/vnd.jam',
+                'jar' => 'application/java-archive',
+                'java' => 'text/x-java-source',
+                'jisp' => 'application/vnd.jisp',
+                'jlt' => 'application/vnd.hp-jlyt',
+                'jnlp' => 'application/x-java-jnlp-file',
+                'joda' => 'application/vnd.joost.joda-archive',
+                'jpe' => 'image/jpeg',
+                'jpeg' => 'image/jpeg',
+                'jpg' => 'image/jpeg',
+                'jpgm' => 'video/jpm',
+                'jpgv' => 'video/jpeg',
+                'jpm' => 'video/jpm',
+                'js' => 'application/javascript',
+                'json' => 'application/json',
+                'jsonml' => 'application/jsonml+json',
+                'kar' => 'audio/midi',
+                'karbon' => 'application/vnd.kde.karbon',
+                'kfo' => 'application/vnd.kde.kformula',
+                'kia' => 'application/vnd.kidspiration',
+                'kml' => 'application/vnd.google-earth.kml+xml',
+                'kmz' => 'application/vnd.google-earth.kmz',
+                'kne' => 'application/vnd.kinar',
+                'knp' => 'application/vnd.kinar',
+                'kon' => 'application/vnd.kde.kontour',
+                'kpr' => 'application/vnd.kde.kpresenter',
+                'kpt' => 'application/vnd.kde.kpresenter',
+                'kpxx' => 'application/vnd.ds-keypoint',
+                'ksp' => 'application/vnd.kde.kspread',
+                'ktr' => 'application/vnd.kahootz',
+                'ktx' => 'image/ktx',
+                'ktz' => 'application/vnd.kahootz',
+                'kwd' => 'application/vnd.kde.kword',
+                'kwt' => 'application/vnd.kde.kword',
+                'lasxml' => 'application/vnd.las.las+xml',
+                'latex' => 'application/x-latex',
+                'lbd' => 'application/vnd.llamagraphics.life-balance.desktop',
+                'lbe' => 'application/vnd.llamagraphics.life-balance.exchange+xml',
+                'les' => 'application/vnd.hhe.lesson-player',
+                'lha' => 'application/x-lzh-compressed',
+                'link66' => 'application/vnd.route66.link66+xml',
+                'list' => 'text/plain',
+                'list3820' => 'application/vnd.ibm.modcap',
+                'listafp' => 'application/vnd.ibm.modcap',
+                'lnk' => 'application/x-ms-shortcut',
+                'log' => 'text/plain',
+                'lostxml' => 'application/lost+xml',
+                'lrf' => 'application/octet-stream',
+                'lrm' => 'application/vnd.ms-lrm',
+                'ltf' => 'application/vnd.frogans.ltf',
+                'lvp' => 'audio/vnd.lucent.voice',
+                'lwp' => 'application/vnd.lotus-wordpro',
+                'lzh' => 'application/x-lzh-compressed',
+                'm13' => 'application/x-msmediaview',
+                'm14' => 'application/x-msmediaview',
+                'm1v' => 'video/mpeg',
+                'm21' => 'application/mp21',
+                'm2a' => 'audio/mpeg',
+                'm2v' => 'video/mpeg',
+                'm3a' => 'audio/mpeg',
+                'm3u' => 'audio/x-mpegurl',
+                'm3u8' => 'application/vnd.apple.mpegurl',
+                'm4a' => 'audio/mp4',
+                'm4u' => 'video/vnd.mpegurl',
+                'm4v' => 'video/x-m4v',
+                'ma' => 'application/mathematica',
+                'mads' => 'application/mads+xml',
+                'mag' => 'application/vnd.ecowin.chart',
+                'maker' => 'application/vnd.framemaker',
+                'man' => 'text/troff',
+                'mar' => 'application/octet-stream',
+                'mathml' => 'application/mathml+xml',
+                'mb' => 'application/mathematica',
+                'mbk' => 'application/vnd.mobius.mbk',
+                'mbox' => 'application/mbox',
+                'mc1' => 'application/vnd.medcalcdata',
+                'mcd' => 'application/vnd.mcd',
+                'mcurl' => 'text/vnd.curl.mcurl',
+                'mdb' => 'application/x-msaccess',
+                'mdi' => 'image/vnd.ms-modi',
+                'me' => 'text/troff',
+                'mesh' => 'model/mesh',
+                'meta4' => 'application/metalink4+xml',
+                'metalink' => 'application/metalink+xml',
+                'mets' => 'application/mets+xml',
+                'mfm' => 'application/vnd.mfmp',
+                'mft' => 'application/rpki-manifest',
+                'mgp' => 'application/vnd.osgeo.mapguide.package',
+                'mgz' => 'application/vnd.proteus.magazine',
+                'mid' => 'audio/midi',
+                'midi' => 'audio/midi',
+                'mie' => 'application/x-mie',
+                'mif' => 'application/vnd.mif',
+                'mime' => 'message/rfc822',
+                'mj2' => 'video/mj2',
+                'mjp2' => 'video/mj2',
+                'mjs' => 'text/javascript',
+                'mk3d' => 'video/x-matroska',
+                'mka' => 'audio/x-matroska',
+                'mks' => 'video/x-matroska',
+                'mkv' => 'video/x-matroska',
+                'mlp' => 'application/vnd.dolby.mlp',
+                'mmd' => 'application/vnd.chipnuts.karaoke-mmd',
+                'mmf' => 'application/vnd.smaf',
+                'mmr' => 'image/vnd.fujixerox.edmics-mmr',
+                'mng' => 'video/x-mng',
+                'mny' => 'application/x-msmoney',
+                'mobi' => 'application/x-mobipocket-ebook',
+                'mods' => 'application/mods+xml',
+                'mov' => 'video/quicktime',
+                'movie' => 'video/x-sgi-movie',
+                'mp2' => 'audio/mpeg',
+                'mp21' => 'application/mp21',
+                'mp2a' => 'audio/mpeg',
+                'mp3' => 'audio/mpeg',
+                'mp4' => 'video/mp4',
+                'mp4a' => 'audio/mp4',
+                'mp4s' => 'application/mp4',
+                'mp4v' => 'video/mp4',
+                'mpc' => 'application/vnd.mophun.certificate',
+                'mpe' => 'video/mpeg',
+                'mpeg' => 'video/mpeg',
+                'mpg' => 'video/mpeg',
+                'mpg4' => 'video/mp4',
+                'mpga' => 'audio/mpeg',
+                'mpkg' => 'application/vnd.apple.installer+xml',
+                'mpm' => 'application/vnd.blueice.multipass',
+                'mpn' => 'application/vnd.mophun.application',
+                'mpp' => 'application/vnd.ms-project',
+                'mpt' => 'application/vnd.ms-project',
+                'mpy' => 'application/vnd.ibm.minipay',
+                'mqy' => 'application/vnd.mobius.mqy',
+                'mrc' => 'application/marc',
+                'mrcx' => 'application/marcxml+xml',
+                'ms' => 'text/troff',
+                'mscml' => 'application/mediaservercontrol+xml',
+                'mseed' => 'application/vnd.fdsn.mseed',
+                'mseq' => 'application/vnd.mseq',
+                'msf' => 'application/vnd.epson.msf',
+                0 => 'application/vnd.lotus-1-2-3',
+                'msh' => 'model/mesh',
+                'msi' => 'application/x-msdownload',
+                'msl' => 'application/vnd.mobius.msl',
+                'msty' => 'application/vnd.muvee.style',
+                'mts' => 'model/vnd.mts',
+                'mus' => 'application/vnd.musician',
+                'musicxml' => 'application/vnd.recordare.musicxml+xml',
+                'mvb' => 'application/x-msmediaview',
+                'mwf' => 'application/vnd.mfer',
+                'mxf' => 'application/mxf',
+                'mxl' => 'application/vnd.recordare.musicxml',
+                'mxml' => 'application/xv+xml',
+                'mxs' => 'application/vnd.triscape.mxs',
+                'mxu' => 'video/vnd.mpegurl',
+                'n-gage' => 'application/vnd.nokia.n-gage.symbian.install',
+                'n3' => 'text/n3',
+                'nb' => 'application/mathematica',
+                'nbp' => 'application/vnd.wolfram.player',
+                'nc' => 'application/x-netcdf',
+                'ncx' => 'application/x-dtbncx+xml',
+                'nfo' => 'text/x-nfo',
+                'ngdat' => 'application/vnd.nokia.n-gage.data',
+                'nitf' => 'application/vnd.nitf',
+                'nlu' => 'application/vnd.neurolanguage.nlu',
+                'nml' => 'application/vnd.enliven',
+                'nnd' => 'application/vnd.noblenet-directory',
+                'nns' => 'application/vnd.noblenet-sealer',
+                'nnw' => 'application/vnd.noblenet-web',
+                'npx' => 'image/vnd.net-fpx',
+                'nsc' => 'application/x-conference',
+                'nsf' => 'application/vnd.lotus-notes',
+                'ntf' => 'application/vnd.nitf',
+                'nzb' => 'application/x-nzb',
+                'oa2' => 'application/vnd.fujitsu.oasys2',
+                'oa3' => 'application/vnd.fujitsu.oasys3',
+                'oas' => 'application/vnd.fujitsu.oasys',
+                'obd' => 'application/x-msbinder',
+                'obj' => 'application/x-tgif',
+                'oda' => 'application/oda',
+                'odb' => 'application/vnd.oasis.opendocument.database',
+                'odc' => 'application/vnd.oasis.opendocument.chart',
+                'odf' => 'application/vnd.oasis.opendocument.formula',
+                'odft' => 'application/vnd.oasis.opendocument.formula-template',
+                'odg' => 'application/vnd.oasis.opendocument.graphics',
+                'odi' => 'application/vnd.oasis.opendocument.image',
+                'odm' => 'application/vnd.oasis.opendocument.text-master',
+                'odp' => 'application/vnd.oasis.opendocument.presentation',
+                'ods' => 'application/vnd.oasis.opendocument.spreadsheet',
+                'odt' => 'application/vnd.oasis.opendocument.text',
+                'oga' => 'audio/ogg',
+                'ogg' => 'audio/ogg',
+                'ogv' => 'video/ogg',
+                'ogx' => 'application/ogg',
+                'omdoc' => 'application/omdoc+xml',
+                'onepkg' => 'application/onenote',
+                'onetmp' => 'application/onenote',
+                'onetoc' => 'application/onenote',
+                'onetoc2' => 'application/onenote',
+                'opf' => 'application/oebps-package+xml',
+                'opml' => 'text/x-opml',
+                'oprc' => 'application/vnd.palm',
+                'opus' => 'audio/ogg',
+                'org' => 'application/vnd.lotus-organizer',
+                'osf' => 'application/vnd.yamaha.openscoreformat',
+                'osfpvg' => 'application/vnd.yamaha.openscoreformat.osfpvg+xml',
+                'otc' => 'application/vnd.oasis.opendocument.chart-template',
+                'otf' => 'font/otf',
+                'otg' => 'application/vnd.oasis.opendocument.graphics-template',
+                'oth' => 'application/vnd.oasis.opendocument.text-web',
+                'oti' => 'application/vnd.oasis.opendocument.image-template',
+                'otp' => 'application/vnd.oasis.opendocument.presentation-template',
+                'ots' => 'application/vnd.oasis.opendocument.spreadsheet-template',
+                'ott' => 'application/vnd.oasis.opendocument.text-template',
+                'oxps' => 'application/oxps',
+                'oxt' => 'application/vnd.openofficeorg.extension',
+                'p' => 'text/x-pascal',
+                'p10' => 'application/pkcs10',
+                'p12' => 'application/x-pkcs12',
+                'p7b' => 'application/x-pkcs7-certificates',
+                'p7c' => 'application/pkcs7-mime',
+                'p7m' => 'application/pkcs7-mime',
+                'p7r' => 'application/x-pkcs7-certreqresp',
+                'p7s' => 'application/pkcs7-signature',
+                'p8' => 'application/pkcs8',
+                'pas' => 'text/x-pascal',
+                'paw' => 'application/vnd.pawaafile',
+                'pbd' => 'application/vnd.powerbuilder6',
+                'pbm' => 'image/x-portable-bitmap',
+                'pcap' => 'application/vnd.tcpdump.pcap',
+                'pcf' => 'application/x-font-pcf',
+                'pcl' => 'application/vnd.hp-pcl',
+                'pclxl' => 'application/vnd.hp-pclxl',
+                'pct' => 'image/x-pict',
+                'pcurl' => 'application/vnd.curl.pcurl',
+                'pcx' => 'image/x-pcx',
+                'pdb' => 'application/vnd.palm',
+                'pdf' => 'application/pdf',
+                'pfa' => 'application/x-font-type1',
+                'pfb' => 'application/x-font-type1',
+                'pfm' => 'application/x-font-type1',
+                'pfr' => 'application/font-tdpfr',
+                'pfx' => 'application/x-pkcs12',
+                'pgm' => 'image/x-portable-graymap',
+                'pgn' => 'application/x-chess-pgn',
+                'pgp' => 'application/pgp-encrypted',
+                'pic' => 'image/x-pict',
+                'pkg' => 'application/octet-stream',
+                'pki' => 'application/pkixcmp',
+                'pkipath' => 'application/pkix-pkipath',
+                'plb' => 'application/vnd.3gpp.pic-bw-large',
+                'plc' => 'application/vnd.mobius.plc',
+                'plf' => 'application/vnd.pocketlearn',
+                'pls' => 'application/pls+xml',
+                'pml' => 'application/vnd.ctc-posml',
+                'png' => 'image/png',
+                'pnm' => 'image/x-portable-anymap',
+                'portpkg' => 'application/vnd.macports.portpkg',
+                'pot' => 'application/vnd.ms-powerpoint',
+                'potm' => 'application/vnd.ms-powerpoint.template.macroenabled.12',
+                'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',
+                'ppam' => 'application/vnd.ms-powerpoint.addin.macroenabled.12',
+                'ppd' => 'application/vnd.cups-ppd',
+                'ppm' => 'image/x-portable-pixmap',
+                'pps' => 'application/vnd.ms-powerpoint',
+                'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroenabled.12',
+                'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
+                'ppt' => 'application/vnd.ms-powerpoint',
+                'pptm' => 'application/vnd.ms-powerpoint.presentation.macroenabled.12',
+                'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
+                'pqa' => 'application/vnd.palm',
+                'prc' => 'application/x-mobipocket-ebook',
+                'pre' => 'application/vnd.lotus-freelance',
+                'prf' => 'application/pics-rules',
+                'ps' => 'application/postscript',
+                'psb' => 'application/vnd.3gpp.pic-bw-small',
+                'psd' => 'image/vnd.adobe.photoshop',
+                'psf' => 'application/x-font-linux-psf',
+                'pskcxml' => 'application/pskc+xml',
+                'ptid' => 'application/vnd.pvi.ptid1',
+                'pub' => 'application/x-mspublisher',
+                'pvb' => 'application/vnd.3gpp.pic-bw-var',
+                'pwn' => 'application/vnd.3m.post-it-notes',
+                'pya' => 'audio/vnd.ms-playready.media.pya',
+                'pyv' => 'video/vnd.ms-playready.media.pyv',
+                'qam' => 'application/vnd.epson.quickanime',
+                'qbo' => 'application/vnd.intu.qbo',
+                'qfx' => 'application/vnd.intu.qfx',
+                'qps' => 'application/vnd.publishare-delta-tree',
+                'qt' => 'video/quicktime',
+                'qwd' => 'application/vnd.quark.quarkxpress',
+                'qwt' => 'application/vnd.quark.quarkxpress',
+                'qxb' => 'application/vnd.quark.quarkxpress',
+                'qxd' => 'application/vnd.quark.quarkxpress',
+                'qxl' => 'application/vnd.quark.quarkxpress',
+                'qxt' => 'application/vnd.quark.quarkxpress',
+                'ra' => 'audio/x-pn-realaudio',
+                'ram' => 'audio/x-pn-realaudio',
+                'rar' => 'application/x-rar-compressed',
+                'ras' => 'image/x-cmu-raster',
+                'rcprofile' => 'application/vnd.ipunplugged.rcprofile',
+                'rdf' => 'application/rdf+xml',
+                'rdz' => 'application/vnd.data-vision.rdz',
+                'rep' => 'application/vnd.businessobjects',
+                'res' => 'application/x-dtbresource+xml',
+                'rgb' => 'image/x-rgb',
+                'rif' => 'application/reginfo+xml',
+                'rip' => 'audio/vnd.rip',
+                'ris' => 'application/x-research-info-systems',
+                'rl' => 'application/resource-lists+xml',
+                'rlc' => 'image/vnd.fujixerox.edmics-rlc',
+                'rld' => 'application/resource-lists-diff+xml',
+                'rm' => 'application/vnd.rn-realmedia',
+                'rmi' => 'audio/midi',
+                'rmp' => 'audio/x-pn-realaudio-plugin',
+                'rms' => 'application/vnd.jcp.javame.midlet-rms',
+                'rmvb' => 'application/vnd.rn-realmedia-vbr',
+                'rnc' => 'application/relax-ng-compact-syntax',
+                'roa' => 'application/rpki-roa',
+                'roff' => 'text/troff',
+                'rp9' => 'application/vnd.cloanto.rp9',
+                'rpss' => 'application/vnd.nokia.radio-presets',
+                'rpst' => 'application/vnd.nokia.radio-preset',
+                'rq' => 'application/sparql-query',
+                'rs' => 'application/rls-services+xml',
+                'rsd' => 'application/rsd+xml',
+                'rss' => 'application/rss+xml',
+                'rtf' => 'application/rtf',
+                'rtx' => 'text/richtext',
+                's' => 'text/x-asm',
+                's3m' => 'audio/s3m',
+                'saf' => 'application/vnd.yamaha.smaf-audio',
+                'sbml' => 'application/sbml+xml',
+                'sc' => 'application/vnd.ibm.secure-container',
+                'scd' => 'application/x-msschedule',
+                'scm' => 'application/vnd.lotus-screencam',
+                'scq' => 'application/scvp-cv-request',
+                'scs' => 'application/scvp-cv-response',
+                'scurl' => 'text/vnd.curl.scurl',
+                'sda' => 'application/vnd.stardivision.draw',
+                'sdc' => 'application/vnd.stardivision.calc',
+                'sdd' => 'application/vnd.stardivision.impress',
+                'sdkd' => 'application/vnd.solent.sdkm+xml',
+                'sdkm' => 'application/vnd.solent.sdkm+xml',
+                'sdp' => 'application/sdp',
+                'sdw' => 'application/vnd.stardivision.writer',
+                'see' => 'application/vnd.seemail',
+                'seed' => 'application/vnd.fdsn.seed',
+                'sema' => 'application/vnd.sema',
+                'semd' => 'application/vnd.semd',
+                'semf' => 'application/vnd.semf',
+                'ser' => 'application/java-serialized-object',
+                'setpay' => 'application/set-payment-initiation',
+                'setreg' => 'application/set-registration-initiation',
+                'sfd-hdstx' => 'application/vnd.hydrostatix.sof-data',
+                'sfs' => 'application/vnd.spotfire.sfs',
+                'sfv' => 'text/x-sfv',
+                'sgi' => 'image/sgi',
+                'sgl' => 'application/vnd.stardivision.writer-global',
+                'sgm' => 'text/sgml',
+                'sgml' => 'text/sgml',
+                'sh' => 'application/x-sh',
+                'shar' => 'application/x-shar',
+                'shf' => 'application/shf+xml',
+                'sid' => 'image/x-mrsid-image',
+                'sig' => 'application/pgp-signature',
+                'sil' => 'audio/silk',
+                'silo' => 'model/mesh',
+                'sis' => 'application/vnd.symbian.install',
+                'sisx' => 'application/vnd.symbian.install',
+                'sit' => 'application/x-stuffit',
+                'sitx' => 'application/x-stuffitx',
+                'skd' => 'application/vnd.koan',
+                'skm' => 'application/vnd.koan',
+                'skp' => 'application/vnd.koan',
+                'skt' => 'application/vnd.koan',
+                'sldm' => 'application/vnd.ms-powerpoint.slide.macroenabled.12',
+                'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',
+                'slt' => 'application/vnd.epson.salt',
+                'sm' => 'application/vnd.stepmania.stepchart',
+                'smf' => 'application/vnd.stardivision.math',
+                'smi' => 'application/smil+xml',
+                'smil' => 'application/smil+xml',
+                'smv' => 'video/x-smv',
+                'smzip' => 'application/vnd.stepmania.package',
+                'snd' => 'audio/basic',
+                'snf' => 'application/x-font-snf',
+                'so' => 'application/octet-stream',
+                'spc' => 'application/x-pkcs7-certificates',
+                'spf' => 'application/vnd.yamaha.smaf-phrase',
+                'spl' => 'application/x-futuresplash',
+                'spot' => 'text/vnd.in3d.spot',
+                'spp' => 'application/scvp-vp-response',
+                'spq' => 'application/scvp-vp-request',
+                'spx' => 'audio/ogg',
+                'sql' => 'application/x-sql',
+                'src' => 'application/x-wais-source',
+                'srt' => 'application/x-subrip',
+                'sru' => 'application/sru+xml',
+                'srx' => 'application/sparql-results+xml',
+                'ssdl' => 'application/ssdl+xml',
+                'sse' => 'application/vnd.kodak-descriptor',
+                'ssf' => 'application/vnd.epson.ssf',
+                'ssml' => 'application/ssml+xml',
+                'st' => 'application/vnd.sailingtracker.track',
+                'stc' => 'application/vnd.sun.xml.calc.template',
+                'std' => 'application/vnd.sun.xml.draw.template',
+                'stf' => 'application/vnd.wt.stf',
+                'sti' => 'application/vnd.sun.xml.impress.template',
+                'stk' => 'application/hyperstudio',
+                'stl' => 'application/vnd.ms-pki.stl',
+                'str' => 'application/vnd.pg.format',
+                'stw' => 'application/vnd.sun.xml.writer.template',
+                'sub' => 'text/vnd.dvb.subtitle',
+                'sus' => 'application/vnd.sus-calendar',
+                'susp' => 'application/vnd.sus-calendar',
+                'sv4cpio' => 'application/x-sv4cpio',
+                'sv4crc' => 'application/x-sv4crc',
+                'svc' => 'application/vnd.dvb.service',
+                'svd' => 'application/vnd.svd',
+                'svg' => 'image/svg+xml',
+                'svgz' => 'image/svg+xml',
+                'swa' => 'application/x-director',
+                'swf' => 'application/x-shockwave-flash',
+                'swi' => 'application/vnd.aristanetworks.swi',
+                'sxc' => 'application/vnd.sun.xml.calc',
+                'sxd' => 'application/vnd.sun.xml.draw',
+                'sxg' => 'application/vnd.sun.xml.writer.global',
+                'sxi' => 'application/vnd.sun.xml.impress',
+                'sxm' => 'application/vnd.sun.xml.math',
+                'sxw' => 'application/vnd.sun.xml.writer',
+                't' => 'text/troff',
+                't3' => 'application/x-t3vm-image',
+                'taglet' => 'application/vnd.mynfc',
+                'tao' => 'application/vnd.tao.intent-module-archive',
+                'tar' => 'application/x-tar',
+                'tcap' => 'application/vnd.3gpp2.tcap',
+                'tcl' => 'application/x-tcl',
+                'teacher' => 'application/vnd.smart.teacher',
+                'tei' => 'application/tei+xml',
+                'teicorpus' => 'application/tei+xml',
+                'tex' => 'application/x-tex',
+                'texi' => 'application/x-texinfo',
+                'texinfo' => 'application/x-texinfo',
+                'text' => 'text/plain',
+                'tfi' => 'application/thraud+xml',
+                'tfm' => 'application/x-tex-tfm',
+                'tga' => 'image/x-tga',
+                'thmx' => 'application/vnd.ms-officetheme',
+                'tif' => 'image/tiff',
+                'tiff' => 'image/tiff',
+                'tmo' => 'application/vnd.tmobile-livetv',
+                'torrent' => 'application/x-bittorrent',
+                'tpl' => 'application/vnd.groove-tool-template',
+                'tpt' => 'application/vnd.trid.tpt',
+                'tr' => 'text/troff',
+                'tra' => 'application/vnd.trueapp',
+                'trm' => 'application/x-msterminal',
+                'tsd' => 'application/timestamped-data',
+                'tsv' => 'text/tab-separated-values',
+                'ttc' => 'font/collection',
+                'ttf' => 'font/ttf',
+                'ttl' => 'text/turtle',
+                'twd' => 'application/vnd.simtech-mindmapper',
+                'twds' => 'application/vnd.simtech-mindmapper',
+                'txd' => 'application/vnd.genomatix.tuxedo',
+                'txf' => 'application/vnd.mobius.txf',
+                'txt' => 'text/plain',
+                'u32' => 'application/x-authorware-bin',
+                'udeb' => 'application/x-debian-package',
+                'ufd' => 'application/vnd.ufdl',
+                'ufdl' => 'application/vnd.ufdl',
+                'ulx' => 'application/x-glulx',
+                'umj' => 'application/vnd.umajin',
+                'unityweb' => 'application/vnd.unity',
+                'uoml' => 'application/vnd.uoml+xml',
+                'uri' => 'text/uri-list',
+                'uris' => 'text/uri-list',
+                'urls' => 'text/uri-list',
+                'ustar' => 'application/x-ustar',
+                'utz' => 'application/vnd.uiq.theme',
+                'uu' => 'text/x-uuencode',
+                'uva' => 'audio/vnd.dece.audio',
+                'uvd' => 'application/vnd.dece.data',
+                'uvf' => 'application/vnd.dece.data',
+                'uvg' => 'image/vnd.dece.graphic',
+                'uvh' => 'video/vnd.dece.hd',
+                'uvi' => 'image/vnd.dece.graphic',
+                'uvm' => 'video/vnd.dece.mobile',
+                'uvp' => 'video/vnd.dece.pd',
+                'uvs' => 'video/vnd.dece.sd',
+                'uvt' => 'application/vnd.dece.ttml+xml',
+                'uvu' => 'video/vnd.uvvu.mp4',
+                'uvv' => 'video/vnd.dece.video',
+                'uvva' => 'audio/vnd.dece.audio',
+                'uvvd' => 'application/vnd.dece.data',
+                'uvvf' => 'application/vnd.dece.data',
+                'uvvg' => 'image/vnd.dece.graphic',
+                'uvvh' => 'video/vnd.dece.hd',
+                'uvvi' => 'image/vnd.dece.graphic',
+                'uvvm' => 'video/vnd.dece.mobile',
+                'uvvp' => 'video/vnd.dece.pd',
+                'uvvs' => 'video/vnd.dece.sd',
+                'uvvt' => 'application/vnd.dece.ttml+xml',
+                'uvvu' => 'video/vnd.uvvu.mp4',
+                'uvvv' => 'video/vnd.dece.video',
+                'uvvx' => 'application/vnd.dece.unspecified',
+                'uvvz' => 'application/vnd.dece.zip',
+                'uvx' => 'application/vnd.dece.unspecified',
+                'uvz' => 'application/vnd.dece.zip',
+                'vcard' => 'text/vcard',
+                'vcd' => 'application/x-cdlink',
+                'vcf' => 'text/x-vcard',
+                'vcg' => 'application/vnd.groove-vcard',
+                'vcs' => 'text/x-vcalendar',
+                'vcx' => 'application/vnd.vcx',
+                'vis' => 'application/vnd.visionary',
+                'viv' => 'video/vnd.vivo',
+                'vob' => 'video/x-ms-vob',
+                'vor' => 'application/vnd.stardivision.writer',
+                'vox' => 'application/x-authorware-bin',
+                'vrml' => 'model/vrml',
+                'vsd' => 'application/vnd.visio',
+                'vsf' => 'application/vnd.vsf',
+                'vss' => 'application/vnd.visio',
+                'vst' => 'application/vnd.visio',
+                'vsw' => 'application/vnd.visio',
+                'vtu' => 'model/vnd.vtu',
+                'vxml' => 'application/voicexml+xml',
+                'w3d' => 'application/x-director',
+                'wad' => 'application/x-doom',
+                'wav' => 'audio/x-wav',
+                'wax' => 'audio/x-ms-wax',
+                'wbmp' => 'image/vnd.wap.wbmp',
+                'wbs' => 'application/vnd.criticaltools.wbs+xml',
+                'wbxml' => 'application/vnd.wap.wbxml',
+                'wcm' => 'application/vnd.ms-works',
+                'wdb' => 'application/vnd.ms-works',
+                'wdp' => 'image/vnd.ms-photo',
+                'weba' => 'audio/webm',
+                'webm' => 'video/webm',
+                'webp' => 'image/webp',
+                'wg' => 'application/vnd.pmi.widget',
+                'wgt' => 'application/widget',
+                'wks' => 'application/vnd.ms-works',
+                'wm' => 'video/x-ms-wm',
+                'wma' => 'audio/x-ms-wma',
+                'wmd' => 'application/x-ms-wmd',
+                'wmf' => 'application/x-msmetafile',
+                'wml' => 'text/vnd.wap.wml',
+                'wmlc' => 'application/vnd.wap.wmlc',
+                'wmls' => 'text/vnd.wap.wmlscript',
+                'wmlsc' => 'application/vnd.wap.wmlscriptc',
+                'wmv' => 'video/x-ms-wmv',
+                'wmx' => 'video/x-ms-wmx',
+                'wmz' => 'application/x-msmetafile',
+                'woff' => 'font/woff',
+                'woff2' => 'font/woff2',
+                'wpd' => 'application/vnd.wordperfect',
+                'wpl' => 'application/vnd.ms-wpl',
+                'wps' => 'application/vnd.ms-works',
+                'wqd' => 'application/vnd.wqd',
+                'wri' => 'application/x-mswrite',
+                'wrl' => 'model/vrml',
+                'wsdl' => 'application/wsdl+xml',
+                'wspolicy' => 'application/wspolicy+xml',
+                'wtb' => 'application/vnd.webturbo',
+                'wvx' => 'video/x-ms-wvx',
+                'x32' => 'application/x-authorware-bin',
+                'x3d' => 'model/x3d+xml',
+                'x3db' => 'model/x3d+binary',
+                'x3dbz' => 'model/x3d+binary',
+                'x3dv' => 'model/x3d+vrml',
+                'x3dvz' => 'model/x3d+vrml',
+                'x3dz' => 'model/x3d+xml',
+                'xaml' => 'application/xaml+xml',
+                'xap' => 'application/x-silverlight-app',
+                'xar' => 'application/vnd.xara',
+                'xbap' => 'application/x-ms-xbap',
+                'xbd' => 'application/vnd.fujixerox.docuworks.binder',
+                'xbm' => 'image/x-xbitmap',
+                'xdf' => 'application/xcap-diff+xml',
+                'xdm' => 'application/vnd.syncml.dm+xml',
+                'xdp' => 'application/vnd.adobe.xdp+xml',
+                'xdssc' => 'application/dssc+xml',
+                'xdw' => 'application/vnd.fujixerox.docuworks',
+                'xenc' => 'application/xenc+xml',
+                'xer' => 'application/patch-ops-error+xml',
+                'xfdf' => 'application/vnd.adobe.xfdf',
+                'xfdl' => 'application/vnd.xfdl',
+                'xht' => 'application/xhtml+xml',
+                'xhtml' => 'application/xhtml+xml',
+                'xhvml' => 'application/xv+xml',
+                'xif' => 'image/vnd.xiff',
+                'xla' => 'application/vnd.ms-excel',
+                'xlam' => 'application/vnd.ms-excel.addin.macroenabled.12',
+                'xlc' => 'application/vnd.ms-excel',
+                'xlf' => 'application/x-xliff+xml',
+                'xlm' => 'application/vnd.ms-excel',
+                'xls' => 'application/vnd.ms-excel',
+                'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
+                'xlsm' => 'application/vnd.ms-excel.sheet.macroenabled.12',
+                'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
+                'xlt' => 'application/vnd.ms-excel',
+                'xltm' => 'application/vnd.ms-excel.template.macroenabled.12',
+                'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
+                'xlw' => 'application/vnd.ms-excel',
+                'xm' => 'audio/xm',
+                'xml' => 'application/xml',
+                'xo' => 'application/vnd.olpc-sugar',
+                'xop' => 'application/xop+xml',
+                'xpi' => 'application/x-xpinstall',
+                'xpl' => 'application/xproc+xml',
+                'xpm' => 'image/x-xpixmap',
+                'xpr' => 'application/vnd.is-xpr',
+                'xps' => 'application/vnd.ms-xpsdocument',
+                'xpw' => 'application/vnd.intercon.formnet',
+                'xpx' => 'application/vnd.intercon.formnet',
+                'xsl' => 'application/xml',
+                'xslt' => 'application/xslt+xml',
+                'xsm' => 'application/vnd.syncml+xml',
+                'xspf' => 'application/xspf+xml',
+                'xul' => 'application/vnd.mozilla.xul+xml',
+                'xvm' => 'application/xv+xml',
+                'xvml' => 'application/xv+xml',
+                'xwd' => 'image/x-xwindowdump',
+                'xyz' => 'chemical/x-xyz',
+                'xz' => 'application/x-xz',
+                'yang' => 'application/yang',
+                'yin' => 'application/yin+xml',
+                'z1' => 'application/x-zmachine',
+                'z2' => 'application/x-zmachine',
+                'z3' => 'application/x-zmachine',
+                'z4' => 'application/x-zmachine',
+                'z5' => 'application/x-zmachine',
+                'z6' => 'application/x-zmachine',
+                'z7' => 'application/x-zmachine',
+                'z8' => 'application/x-zmachine',
+                'zaz' => 'application/vnd.zzazz.deck+xml',
+                'zip' => 'application/zip',
+                'zir' => 'application/vnd.zul',
+                'zirz' => 'application/vnd.zul',
+                'zmm' => 'application/vnd.handheld-entertainment+xml',
+            ],
+            require __DIR__ . '/../../../framework/helpers/mimeTypes.php'
+        );
+    }
+}
diff --git a/tests/framework/helpers/ReplaceArrayValueTest.php b/tests/framework/helpers/ReplaceArrayValueTest.php
new file mode 100644
index 00000000000..d055483ac3d
--- /dev/null
+++ b/tests/framework/helpers/ReplaceArrayValueTest.php
@@ -0,0 +1,33 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\helpers;
+
+use yii\helpers\ReplaceArrayValue;
+use yiiunit\TestCase;
+
+/**
+ * @group helpers
+ */
+class ReplaceArrayValueTest extends TestCase
+{
+    public function testSetStateWithoutValue()
+    {
+        $this->expectException('yii\base\InvalidConfigException');
+        $this->expectExceptionMessage('Failed to instantiate class "ReplaceArrayValue". Required parameter "value" is missing');
+        $object = new ReplaceArrayValue('test');
+        $object::__set_state([]);
+    }
+
+    public function testSetStateWithValue()
+    {
+        $object = new ReplaceArrayValue('test');
+        $result = $object::__set_state(['value' => 'test2']);
+        $this->assertInstanceOf('yii\helpers\ReplaceArrayValue', $result);
+        $this->assertSame('test2', $result->value);
+    }
+}
diff --git a/tests/framework/helpers/StringHelperTest.php b/tests/framework/helpers/StringHelperTest.php
index 90dc42e08e4..faac9bf6f93 100644
--- a/tests/framework/helpers/StringHelperTest.php
+++ b/tests/framework/helpers/StringHelperTest.php
@@ -429,8 +429,13 @@ public function dataProviderMb_ucwords()
         return [
             ['foo', 'Foo'],
             ['foo bar', 'Foo Bar'],
+            ['!foo bar-baz', '!foo Bar-baz'],
+            [' foo BAR', ' Foo BAR'],
+            [' ! foo BAR', ' ! Foo BAR'],
+            ["\tfoo\nbar  baz", "\tFoo\nBar  Baz"],
             ['👍🏻 foo bar', '👍🏻 Foo Bar'],
             ['', ''],
+            ['0', '0'],
             [null, ''],
             ['здесь我 multibyte我 строка', 'Здесь我 Multibyte我 Строка'],
         ];
diff --git a/tests/framework/helpers/UnsetArrayValueTest.php b/tests/framework/helpers/UnsetArrayValueTest.php
new file mode 100644
index 00000000000..6d3b943a29a
--- /dev/null
+++ b/tests/framework/helpers/UnsetArrayValueTest.php
@@ -0,0 +1,24 @@
+<?php
+/**
+ * @link http://www.yiiframework.com/
+ * @copyright Copyright (c) 2008 Yii Software LLC
+ * @license http://www.yiiframework.com/license/
+ */
+
+namespace yiiunit\framework\helpers;
+
+use yii\helpers\UnsetArrayValue;
+use yiiunit\TestCase;
+
+/**
+ * @group helpers
+ */
+class UnsetArrayValueTest extends TestCase
+{
+    public function testSetState()
+    {
+        $object = new UnsetArrayValue();
+        $result = $object::__set_state([]);
+        $this->assertInstanceOf('yii\helpers\UnsetArrayValue', $result);
+    }
+}
diff --git a/tests/framework/helpers/UrlTest.php b/tests/framework/helpers/UrlTest.php
index cf57f15078c..e8c11858e15 100644
--- a/tests/framework/helpers/UrlTest.php
+++ b/tests/framework/helpers/UrlTest.php
@@ -303,4 +303,17 @@ public function testIsRelative()
         $this->assertFalse(Url::isRelative('http://example.com/'));
         $this->assertFalse(Url::isRelative('https://example.com/'));
     }
+
+    public function testRemember()
+    {
+        Yii::$app->getUser()->login(UserIdentity::findIdentity('user1'));
+
+        Url::remember('test');
+        $this->assertSame('test', Yii::$app->getUser()->getReturnUrl());
+        $this->assertSame('test', Yii::$app->getSession()->get(Yii::$app->getUser()->returnUrlParam));
+
+        Yii::$app->getUser()->setReturnUrl(null);
+        Url::remember('test', 'remember-test');
+        $this->assertSame('test', Yii::$app->getSession()->get('remember-test'));
+    }
 }
diff --git a/tests/framework/i18n/FormatterDateTest.php b/tests/framework/i18n/FormatterDateTest.php
index ceb1aa0d208..d6c8a58ff38 100644
--- a/tests/framework/i18n/FormatterDateTest.php
+++ b/tests/framework/i18n/FormatterDateTest.php
@@ -74,7 +74,7 @@ public function testAsDate()
         $this->assertSame(date('n/j/y', $value->getTimestamp()), $this->formatter->asDate($value, 'short'));
         $this->assertSame(date('F j, Y', $value->getTimestamp()), $this->formatter->asDate($value, 'long'));
 
-        if (version_compare(PHP_VERSION, '5.5.0', '>=')) {
+        if (PHP_VERSION_ID >= 50500) {
             $value = new \DateTimeImmutable();
             $this->assertSame(date('M j, Y', $value->getTimestamp()), $this->formatter->asDate($value));
             $this->assertSame(date('Y/m/d', $value->getTimestamp()), $this->formatter->asDate($value, 'php:Y/m/d'));
@@ -410,6 +410,9 @@ public function testAsRelativeTime()
         // just now
         $this->assertSame('just now', $this->formatter->asRelativeTime($t = time(), $t));
         $this->assertSame('just now', $this->formatter->asRelativeTime(0, 0));
+        $interval_0_seconds = new DateInterval('PT0S');
+        $interval_0_seconds->invert = true;
+        $this->assertSame('just now', $this->formatter->asRelativeTime($interval_0_seconds));
 
         // empty input
         $this->assertSame('just now', $this->formatter->asRelativeTime(false, 0));
@@ -418,6 +421,10 @@ public function testAsRelativeTime()
         // null display
         $this->assertSame($this->formatter->nullDisplay, $this->formatter->asRelativeTime(null));
         $this->assertSame($this->formatter->nullDisplay, $this->formatter->asRelativeTime(null, time()));
+
+        // no reference time
+        $now = new DateTime('-1 minute');
+        $this->assertSame('a minute ago', $this->formatter->asRelativeTime($now));
     }
 
     public function testIntlAsDuration()
diff --git a/tests/framework/i18n/FormatterNumberTest.php b/tests/framework/i18n/FormatterNumberTest.php
index 6d1b7b7fa30..635917ec690 100755
--- a/tests/framework/i18n/FormatterNumberTest.php
+++ b/tests/framework/i18n/FormatterNumberTest.php
@@ -125,7 +125,6 @@ public function testIntlAsIntegerOptions()
         $this->formatter->numberFormatterTextOptions = [
             \NumberFormatter::POSITIVE_PREFIX => '+',
         ];
-
         $this->assertSame('+2', $this->formatter->asInteger(2));
         $this->assertSame('+10', $this->formatter->asInteger(10));
         $this->assertSame('+12', $this->formatter->asInteger(12));
@@ -141,19 +140,15 @@ public function testIntlAsIntegerOptions()
         $this->assertSame('+123,456', $this->formatter->asInteger(123456.789));
     }
 
-    /**
-     * @expectedException \yii\base\InvalidParamException
-     */
     public function testAsIntegerException()
     {
+        $this->expectException('\yii\base\InvalidParamException');
         $this->formatter->asInteger('a');
     }
 
-    /**
-     * @expectedException \yii\base\InvalidParamException
-     */
     public function testAsIntegerException2()
     {
+        $this->expectException('\yii\base\InvalidParamException');
         $this->formatter->asInteger('-123abc');
     }
 
@@ -270,6 +265,7 @@ public function testAsDecimal()
         $this->assertSame('87,654,321,098,765,436.00', $this->formatter->asDecimal('87654321098765436'));
         $this->assertSame('95,836,208,451,783,051.86', $this->formatter->asDecimal('95836208451783051.864'));
         $this->assertSame('95,836,208,451,783,052', $this->formatter->asDecimal('95836208451783051.864', 0));
+        $this->assertSame('95,836,208,451,783,051.9', $this->formatter->asDecimal('95836208451783051.864', 1));
 
         $this->formatter->thousandSeparator = ' ';
         $this->formatter->decimalSeparator = ',';
@@ -422,11 +418,9 @@ public function testIntlAsCurrency()
         $this->assertIsOneOf($this->formatter->asCurrency('123'), ["123.00\xc2\xa0₽", "123.00\xc2\xa0руб."]);
     }
 
-    /**
-     * @expectedException \yii\base\InvalidConfigException
-     */
     public function testAsCurrencyStringFallbackException()
     {
+        $this->expectException('\yii\base\InvalidConfigException');
         $this->formatter->asCurrency('87654321098765436');
     }
 
@@ -555,6 +549,13 @@ public function testAsScientific()
         $this->assertSame('8.765432E+16', $this->formatter->asScientific('87654321098765436'));
     }
 
+    public function testAsSpellout()
+    {
+        $this->expectException('\yii\base\InvalidConfigException');
+        $this->expectExceptionMessage('Format as Spellout is only supported when PHP intl extension is installed.');
+        $this->formatter->asSpellout(123);
+    }
+
     public function testIntlAsSpellout()
     {
         $this->assertSame('one hundred twenty-three', $this->formatter->asSpellout(123));
@@ -611,6 +612,8 @@ public function testIntlAsShortSize()
         $this->assertSame('999 B', $this->formatter->asShortSize(999));
         $this->assertSame('999 B', $this->formatter->asShortSize('999'));
         $this->assertSame('1.05 MB', $this->formatter->asShortSize(1024 * 1024));
+        $this->assertSame('1.07 GB', $this->formatter->asShortSize(1024 * 1024 * 1024));
+        $this->assertSame('1.1 TB', $this->formatter->asShortSize(1024 * 1024 * 1024 * 1024));
         $this->assertSame('1 kB', $this->formatter->asShortSize(1000));
         $this->assertSame('1.02 kB', $this->formatter->asShortSize(1023));
         $this->assertNotEquals('3 PB', $this->formatter->asShortSize(3 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)); // this is 3 EB not 3 PB
@@ -627,6 +630,7 @@ public function testIntlAsShortSize()
         // https://github.com/yiisoft/yii2/issues/4960
         $this->assertSame('1023 B', $this->formatter->asShortSize(1023));
         $this->assertSame('5 GiB', $this->formatter->asShortSize(5 * 1024 * 1024 * 1024));
+        $this->assertSame('6 TiB', $this->formatter->asShortSize(6 * 1024 * 1024 * 1024 * 1024));
         $this->assertNotEquals('5 PiB', $this->formatter->asShortSize(5 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024)); // this is 5 EiB not 5 PiB
         //$this->assertSame("1 YiB", $this->formatter->asShortSize(pow(2, 80)));
         $this->assertSame('2 GiB', $this->formatter->asShortSize(2147483647)); // round 1.999 up to 2
@@ -648,6 +652,8 @@ public function testAsShortSize()
         $this->assertSame('999 B', $this->formatter->asShortSize(999));
         $this->assertSame('999 B', $this->formatter->asShortSize('999'));
         $this->assertSame('1.05 MB', $this->formatter->asShortSize(1024 * 1024));
+        $this->assertSame('1.07 GB', $this->formatter->asShortSize(1024 * 1024 * 1024));
+        $this->assertSame('1.10 TB', $this->formatter->asShortSize(1024 * 1024 * 1024 * 1024));
         $this->assertSame('1.0486 MB', $this->formatter->asShortSize(1024 * 1024, 4));
         $this->assertSame('1.00 kB', $this->formatter->asShortSize(1000));
         $this->assertSame('1.02 kB', $this->formatter->asShortSize(1023));
@@ -665,6 +671,7 @@ public function testAsShortSize()
         // https://github.com/yiisoft/yii2/issues/4960
         $this->assertSame('1023 B', $this->formatter->asShortSize(1023));
         $this->assertSame('5.00 GiB', $this->formatter->asShortSize(5 * 1024 * 1024 * 1024));
+        $this->assertSame('6.00 TiB', $this->formatter->asShortSize(6 * 1024 * 1024 * 1024 * 1024));
         $this->assertNotEquals('5.00 PiB', $this->formatter->asShortSize(5 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024)); // this is 5 EiB not 5 PiB
         //$this->assertSame("1 YiB", $this->formatter->asShortSize(pow(2, 80)));
         $this->assertSame('2.00 GiB', $this->formatter->asShortSize(2147483647)); // round 1.999 up to 2
@@ -693,6 +700,7 @@ public function testIntlAsSize()
         $this->assertSame('1 kilobyte', $this->formatter->asSize(1000));
         $this->assertSame('1.02 kilobytes', $this->formatter->asSize(1023));
         $this->assertSame('3 gigabytes', $this->formatter->asSize(3 * 1000 * 1000 * 1000));
+        $this->assertSame('4 terabytes', $this->formatter->asSize(4 * 1000 * 1000 * 1000 * 1000));
         $this->assertNotEquals('3 PB', $this->formatter->asSize(3 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)); // this is 3 EB not 3 PB
         // tests for base 1024
         $this->formatter->sizeFormatBase = 1024;
@@ -700,6 +708,7 @@ public function testIntlAsSize()
         $this->assertSame('1 mebibyte', $this->formatter->asSize(1024 * 1024));
         $this->assertSame('1023 bytes', $this->formatter->asSize(1023));
         $this->assertSame('5 gibibytes', $this->formatter->asSize(5 * 1024 * 1024 * 1024));
+        $this->assertSame('6 tebibytes', $this->formatter->asSize(6 * 1024 * 1024 * 1024 * 1024));
         $this->assertNotEquals('5 pibibytes', $this->formatter->asSize(5 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024)); // this is 5 EiB not 5 PiB
         $this->assertSame('2 gibibytes', $this->formatter->asSize(2147483647)); // round 1.999 up to 2
         $this->formatter->decimalSeparator = ',';
@@ -750,6 +759,7 @@ public function testAsSize()
         $this->assertSame('1.00 kilobyte', $this->formatter->asSize(1000));
         $this->assertSame('1.02 kilobytes', $this->formatter->asSize(1023));
         $this->assertSame('3.00 gigabytes', $this->formatter->asSize(3 * 1000 * 1000 * 1000));
+        $this->assertSame('4.00 terabytes', $this->formatter->asSize(4 * 1000 * 1000 * 1000 * 1000));
         $this->assertNotEquals('3 PB', $this->formatter->asSize(3 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)); // this is 3 EB not 3 PB
         // tests for base 1024
         $this->formatter->sizeFormatBase = 1024;
@@ -757,6 +767,7 @@ public function testAsSize()
         $this->assertSame('1.00 mebibyte', $this->formatter->asSize(1024 * 1024));
         $this->assertSame('1023 bytes', $this->formatter->asSize(1023));
         $this->assertSame('5.00 gibibytes', $this->formatter->asSize(5 * 1024 * 1024 * 1024));
+        $this->assertSame('6.00 tebibytes', $this->formatter->asSize(6 * 1024 * 1024 * 1024 * 1024));
         $this->assertNotEquals('5.00 pibibytes', $this->formatter->asSize(5 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024)); // this is 5 EiB not 5 PiB
         $this->assertSame('2.00 gibibytes', $this->formatter->asSize(2147483647)); // round 1.999 up to 2
         $this->formatter->decimalSeparator = ',';
@@ -812,4 +823,117 @@ public function testAsSizeConfiguration()
         $this->assertSame('1023 bytes', $this->formatter->asSize(1023));
         $this->assertSame('1023 B', $this->formatter->asShortSize(1023));
     }
+
+    public function providerForDirectWrongTypeAttributes()
+    {
+        return [
+            'not-int key for int options' => [
+                ['a' => 1],
+                [],
+                'The $options array keys must be integers recognizable by NumberFormatter::setAttribute(). "string" provided instead.'
+            ],
+            'string value for int options' => [
+                [1 => 'a'],
+                [],
+                'The $options array values must be integers. Did you mean to use $textOptions?'
+            ],
+            'non-string-int value for int options' => [
+                [1 => 1.1],
+                [],
+                'The $options array values must be integers. "double" provided instead.'
+            ],
+            'not-int key for text options' => [
+                [],
+                ['a' => 1],
+                'The $textOptions array keys must be integers recognizable by NumberFormatter::setTextAttribute(). "string" provided instead.'
+            ],
+            'int value for text options' => [
+                [],
+                [1 => 1],
+                'The $textOptions array values must be strings. Did you mean to use $options?'
+            ],
+            'non-string-int value for text options' => [
+                [],
+                [1 => 1.1],
+                'The $textOptions array values must be strings. "double" provided instead.'
+            ],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForDirectWrongTypeAttributes
+     */
+    public function testIntlAsIntegerDirectWrongTypeAttributes($intOptions, $textOptions, $message)
+    {
+        $this->expectException('yii\base\InvalidArgumentException');
+        $this->expectExceptionMessage($message);
+        $this->formatter->asInteger(1, $intOptions, $textOptions);
+    }
+
+    public function providerForConfiguredWrongTypeAttributes()
+    {
+        return [
+            'not-int key for int options' => [
+                ['a' => 1],
+                [],
+                [],
+                'The numberFormatterOptions array keys must be integers recognizable by NumberFormatter::setAttribute(). "string" provided instead.'
+            ],
+            'string value for int options' => [
+                [1 => 'a'],
+                [],
+                [],
+                'The numberFormatterOptions array values must be integers. Did you mean to use numberFormatterTextOptions?'
+            ],
+            'non-string-int value for int options' => [
+                [1 => 1.1],
+                [],
+                [],
+                'The numberFormatterOptions array values must be integers. "double" provided instead.'
+            ],
+            'not-int key for text options' => [
+                [],
+                ['a' => 1],
+                [],
+                'The numberFormatterTextOptions array keys must be integers recognizable by NumberFormatter::setTextAttribute(). "string" provided instead.'
+            ],
+            'int value for text options' => [
+                [],
+                [1 => 1],
+                [],
+                'The numberFormatterTextOptions array values must be strings. Did you mean to use numberFormatterOptions?'
+            ],
+            'non-string-int value for text options' => [
+                [],
+                [1 => 1.1],
+                [],
+                'The numberFormatterTextOptions array values must be strings. "double" provided instead.'
+            ],
+            'non-int key for symbol' => [
+                [],
+                [],
+                ['a' => 2],
+                'The numberFormatterSymbols array keys must be integers recognizable by NumberFormatter::setSymbol(). "string" provided instead.'
+            ],
+            'non-string value for symbol' => [
+                [],
+                [],
+                [1 => 3],
+                'The numberFormatterSymbols array values must be strings. "integer" provided instead.'
+            ],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForConfiguredWrongTypeAttributes
+     */
+    public function testIntlAsIntegerConfiguredWrongTypeAttributes($intOptions, $textOptions, $symbols, $message)
+    {
+        $this->expectException('yii\base\InvalidArgumentException');
+        $this->expectExceptionMessage($message);
+        $this->formatter->numberFormatterTextOptions = $textOptions;
+        $this->formatter->numberFormatterOptions = $intOptions;
+        $this->formatter->numberFormatterSymbols = $symbols;
+        $this->formatter->asInteger(1);
+    }
 }
diff --git a/tests/framework/i18n/FormatterTest.php b/tests/framework/i18n/FormatterTest.php
index 4716c67827b..300f2b7148f 100644
--- a/tests/framework/i18n/FormatterTest.php
+++ b/tests/framework/i18n/FormatterTest.php
@@ -7,7 +7,6 @@
 
 namespace yiiunit\framework\i18n;
 
-use Yii;
 use yii\i18n\Formatter;
 use yiiunit\TestCase;
 
@@ -45,23 +44,51 @@ protected function tearDown()
         $this->formatter = null;
     }
 
-
     public function testFormat()
     {
         $value = time();
         $this->assertSame(date('M j, Y', $value), $this->formatter->format($value, 'date'));
         $this->assertSame(date('M j, Y', $value), $this->formatter->format($value, 'DATE'));
         $this->assertSame(date('Y/m/d', $value), $this->formatter->format($value, ['date', 'php:Y/m/d']));
+    }
+
+    public function testInvalidFormat()
+    {
+        $value = time();
         $this->expectException('\yii\base\InvalidParamException');
+        $this->expectExceptionMessage('Unknown format type: data');
         $this->assertSame(date('Y-m-d', $value), $this->formatter->format($value, 'data'));
+    }
+
+    public function testInvalidFormatArray()
+    {
+        $value = time();
+        $this->expectException('\yii\base\InvalidParamException');
+        $this->expectExceptionMessage('Unknown format type: data');
+        $this->assertSame(date('Y-m-d', $value), $this->formatter->format($value, ['data']));
+    }
+
+    public function testFormatArrayInvalidStructure()
+    {
+        $value = time();
+        $this->expectException('\yii\base\InvalidParamException');
+        $this->expectExceptionMessage('The $format array must contain at least one element.');
+        $this->assertSame(date('Y-m-d', $value), $this->formatter->format($value, []));
+    }
+
+    public function testClosureFormat()
+    {
+        $value = time();
         $this->assertSame(date('Y-m-d', $value), $this->formatter->format($value, function ($value) {
             return date('Y-m-d', $value);
         }));
-        $this->assertSame('from: ' . date('Y-m-d', $value),
+        $this->assertSame(
+            'from: ' . date('Y-m-d', $value),
             $this->formatter->format($value, function ($value, $formatter) {
-                /** @var $formatter Formatter */
-                return 'from: ' . $formatter->asDate($value, 'php:Y-m-d');
-            }));
+              /** @var $formatter Formatter */
+              return 'from: ' . $formatter->asDate($value, 'php:Y-m-d');
+            })
+        );
     }
 
     public function testLocale()
@@ -162,10 +189,16 @@ public function testAsParagraphs()
         $this->assertSame($this->formatter->nullDisplay, $this->formatter->asParagraphs(null));
     }
 
-    /*public function testAsHtml()
+    public function testAsHtml()
     {
-        // todo: dependency on HtmlPurifier
-    }*/
+        $value = 'no HTML tags';
+        $this->assertSame($value, $this->formatter->asHtml($value));
+        $value = '<p>paragraph</p>';
+        $this->assertSame($value, $this->formatter->asHtml($value));
+        // null display
+        $this->assertSame($this->formatter->nullDisplay, $this->formatter->asHtml(null));
+        $this->assertSame('<p>w1 w2</p>', $this->formatter->asHtml('<p>w1 <b>w2</b><br></p>', ['HTML.Allowed' => 'p']));
+    }
 
     public function testAsEmail()
     {
@@ -183,13 +216,86 @@ public function testAsUrl()
     {
         $value = 'http://www.yiiframework.com/';
         $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => null]));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => false]));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'http']));
+        $this->assertSame(
+            "<a href=\"https://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => 'https'])
+        );
+        $this->assertSame(
+            "<a href=\"//www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => ''])
+        );
+
         $value = 'https://www.yiiframework.com/';
         $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => false]));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => null]));
+        $this->assertSame(
+            "<a href=\"http://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => 'http'])
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'https']));
+        $this->assertSame(
+            "<a href=\"//www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => ''])
+        );
+
         $value = 'www.yiiframework.com/';
-        $this->assertSame("<a href=\"http://$value\">$value</a>", $this->formatter->asUrl($value));
+        $this->assertSame(
+            "<a href=\"http://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value)
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => false]));
+        $this->assertSame(
+            "<a href=\"http://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => null])
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'http']));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'https']));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => '']));
+
+        $value = '//www.yiiframework.com/';
+        $this->assertSame(
+            "<a href=\"http:////www.yiiframework.com/\">$value</a>", // invalid but this is how it works
+            $this->formatter->asUrl($value)
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => false]));
+        $this->assertSame(
+            "<a href=\"http:////www.yiiframework.com/\">$value</a>", // invalid but this is how it works
+            $this->formatter->asUrl($value, ['scheme' => null])
+        );
+        $this->assertSame(
+            "<a href=\"http://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => 'http'])
+        );
+        $this->assertSame(
+            "<a href=\"https://www.yiiframework.com/\">$value</a>",
+            $this->formatter->asUrl($value, ['scheme' => 'https'])
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => '']));
+
+        $value = '/books/about/yii';
+        $this->assertSame(
+            "<a href=\"http:///books/about/yii\">$value</a>", // invalid but this is how it works
+            $this->formatter->asUrl($value)
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => false]));
+        $this->assertSame(
+            "<a href=\"http:///books/about/yii\">$value</a>", // invalid but this is how it works
+            $this->formatter->asUrl($value, ['scheme' => null])
+        );
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'http']));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => 'https']));
+        $this->assertSame("<a href=\"$value\">$value</a>", $this->formatter->asUrl($value, ['scheme' => '']));
+
         $value = 'https://www.yiiframework.com/?name=test&value=5"';
-        $this->assertSame('<a href="https://www.yiiframework.com/?name=test&amp;value=5&quot;">https://www.yiiframework.com/?name=test&amp;value=5&quot;</a>',
-            $this->formatter->asUrl($value));
+        $this->assertSame(
+            '<a href="https://www.yiiframework.com/?name=test&amp;value=5&quot;">https://www.yiiframework.com/?name=test&amp;value=5&quot;</a>',
+            $this->formatter->asUrl($value)
+        );
+
         $value = 'http://www.yiiframework.com/';
         $this->assertSame("<a href=\"$value\" target=\"_blank\">$value</a>",
             $this->formatter->asUrl($value, ['target' => '_blank']));
@@ -439,21 +545,17 @@ public function testIntlAsShortWeight($message, $arguments, $_weight, $expected,
         $this->assertSame($expected, call_user_func_array([$this->formatter, 'asShortWeight'], $arguments), 'Failed asserting that ' . $message);
     }
 
-    /**
-     * @expectedException \yii\base\InvalidConfigException
-     * @expectedExceptionMessage Format of mass is only supported when PHP intl extension is installed.
-     */
     public function testAsWeight()
     {
+        $this->expectException('\yii\base\InvalidConfigException');
+        $this->expectExceptionMessage('Format of mass is only supported when PHP intl extension is installed.');
         $this->formatter->asWeight(10);
     }
 
-    /**
-     * @expectedException \yii\base\InvalidConfigException
-     * @expectedExceptionMessage Format of length is only supported when PHP intl extension is installed.
-     */
     public function testAsLength()
     {
+        $this->expectException('\yii\base\InvalidConfigException');
+        $this->expectExceptionMessage('Format of length is only supported when PHP intl extension is installed.');
         $this->formatter->asShortLength(10);
     }
 
diff --git a/tests/framework/log/LoggerTest.php b/tests/framework/log/LoggerTest.php
index c23da90f67e..1aa5587b16e 100644
--- a/tests/framework/log/LoggerTest.php
+++ b/tests/framework/log/LoggerTest.php
@@ -350,7 +350,7 @@ public function testGetProfilingWithEmptyCategoriesAndExcludeCategories()
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals($returnValue, $logger->getProfiling());
     }
 
@@ -377,7 +377,7 @@ public function testGetProfilingWithNotEmptyCategoriesAndNotMatched()
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals([], $logger->getProfiling(['not-matched-category']));
     }
 
@@ -417,7 +417,7 @@ public function testGetProfilingWithNotEmptyCategoriesAndMatched()
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals([$matchedByCategoryName], $logger->getProfiling(['category']));
 
         /*
@@ -430,7 +430,7 @@ public function testGetProfilingWithNotEmptyCategoriesAndMatched()
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals([$matchedByCategoryName, $secondCategory], $logger->getProfiling(['category*']));
     }
 
@@ -479,7 +479,7 @@ public function testGetProfilingWithNotEmptyCategoriesMatchedAndExcludeCategorie
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals([$fistCategory, $secondCategory], $logger->getProfiling(['cat*'], ['category3']));
 
         /*
@@ -492,7 +492,48 @@ public function testGetProfilingWithNotEmptyCategoriesMatchedAndExcludeCategorie
 
         $logger->messages = $messages;
         $logger->method('calculateTimings')->willReturn($returnValue);
-        $logger->expects($this->once())->method('calculateTimings')->with($this->equalTo($messages));
+        $logger->expects($this->once())->method('calculateTimings')->with($messages);
         $this->assertEquals([$fistCategory], $logger->getProfiling(['cat*'], ['category*']));
     }
+
+    public function providerForNonProfilingMessages()
+    {
+        return [
+            [Logger::LEVEL_ERROR],
+            [Logger::LEVEL_WARNING],
+            [Logger::LEVEL_INFO],
+            [Logger::LEVEL_TRACE],
+            [Logger::LEVEL_PROFILE],
+        ];
+    }
+
+    /**
+     * @dataProvider providerForNonProfilingMessages
+     */
+    public function testGatheringNonProfilingMessages($level)
+    {
+        $logger = new Logger(['flushInterval' => 0]);
+        $logger->log('aaa', $level);
+        $logger->log('aaa', Logger::LEVEL_PROFILE_END);
+        $this->assertSame([], $logger->getProfiling());
+        $this->assertCount(2, $logger->messages);
+    }
+
+    public function testGatheringProfilingMessages()
+    {
+        $logger = new Logger(['flushInterval' => 0]);
+        $logger->log('aaa', Logger::LEVEL_PROFILE_BEGIN);
+        $logger->log('aaa', Logger::LEVEL_PROFILE_END);
+        $this->assertCount(1, $logger->getProfiling());
+        $profiling = $logger->getProfiling()[0];
+        $this->assertSame('aaa', $profiling['info']);
+        $this->assertSame('application', $profiling['category']);
+        $this->assertSame(0, $profiling['level']);
+        $this->assertSame([], $profiling['trace']);
+        $this->assertArrayHasKey('timestamp', $profiling);
+        $this->assertArrayHasKey('duration', $profiling);
+        $this->assertArrayHasKey('memory', $profiling);
+        $this->assertArrayHasKey('memoryDiff', $profiling);
+        $this->assertCount(2, $logger->messages);
+    }
 }
diff --git a/tests/framework/log/TargetTest.php b/tests/framework/log/TargetTest.php
index 22db667f0a6..c09757c83af 100644
--- a/tests/framework/log/TargetTest.php
+++ b/tests/framework/log/TargetTest.php
@@ -236,6 +236,110 @@ public function testCollectMessageStructure()
         $this->assertCount(6, static::$messages[0]);
         $this->assertCount(6, static::$messages[1]);
     }
+
+    public function testBreakProfilingWithFlushWithProfilingDisabled()
+    {
+        $dispatcher = $this->getMockBuilder('yii\log\Dispatcher')
+            ->setMethods(['dispatch'])
+            ->getMock();
+        $dispatcher->expects($this->once())->method('dispatch')->with($this->callback(function ($messages) {
+            return count($messages) === 2
+                && $messages[0][0] === 'token.a'
+                && $messages[0][1] == Logger::LEVEL_PROFILE_BEGIN
+                && $messages[1][0] === 'info';
+        }), false);
+
+        $logger = new Logger([
+            'dispatcher' => $dispatcher,
+            'flushInterval' => 2,
+        ]);
+
+        $logger->log('token.a', Logger::LEVEL_PROFILE_BEGIN, 'category');
+        $logger->log('info', Logger::LEVEL_INFO, 'category');
+        $logger->log('token.a', Logger::LEVEL_PROFILE_END, 'category');
+    }
+
+    public function testNotBreakProfilingWithFlushWithProfilingEnabled()
+    {
+        $dispatcher = $this->getMockBuilder('yii\log\Dispatcher')
+            ->setMethods(['dispatch'])
+            ->getMock();
+        $dispatcher->expects($this->exactly(2))->method('dispatch')->withConsecutive(
+            [
+                $this->callback(function ($messages) {
+                    return count($messages) === 1 && $messages[0][0] === 'info';
+                }),
+                false
+            ],
+            [
+                $this->callback(function ($messages) {
+                    return count($messages) === 2
+                        && $messages[0][0] === 'token.a'
+                        && $messages[0][1] == Logger::LEVEL_PROFILE_BEGIN
+                        && $messages[1][0] === 'token.a'
+                        && $messages[1][1] == Logger::LEVEL_PROFILE_END;
+                }),
+                false
+            ]
+        );
+
+        $logger = new Logger([
+            'profilingAware' => true,
+            'dispatcher' => $dispatcher,
+            'flushInterval' => 2,
+        ]);
+
+        $logger->log('token.a', Logger::LEVEL_PROFILE_BEGIN, 'category');
+        $logger->log('info', Logger::LEVEL_INFO, 'category');
+        $logger->log('token.a', Logger::LEVEL_PROFILE_END, 'category');
+    }
+
+    public function testFlushingWithProfilingEnabledAndOverflow()
+    {
+        $dispatcher = $this->getMockBuilder('yii\log\Dispatcher')
+            ->setMethods(['dispatch'])
+            ->getMock();
+        $dispatcher->expects($this->exactly(3))->method('dispatch')->withConsecutive(
+            [
+                $this->callback(function ($messages) {
+                    return count($messages) === 2
+                        && $messages[0][0] === 'token.a'
+                        && $messages[0][1] == Logger::LEVEL_PROFILE_BEGIN
+                        && $messages[1][0] === 'token.b'
+                        && $messages[1][1] == Logger::LEVEL_PROFILE_BEGIN;
+                }),
+                false
+            ],
+            [
+                $this->callback(function ($messages) {
+                    return count($messages) === 1
+                        && $messages[0][0] === 'Number of dangling profiling block messages reached flushInterval value and therefore these were flushed. Please consider setting higher flushInterval value or making profiling blocks shorter.';
+                }),
+                false
+            ],
+            [
+                $this->callback(function ($messages) {
+                    return count($messages) === 2
+                        && $messages[0][0] === 'token.b'
+                        && $messages[0][1] == Logger::LEVEL_PROFILE_END
+                        && $messages[1][0] === 'token.a'
+                        && $messages[1][1] == Logger::LEVEL_PROFILE_END;
+                }),
+                false
+            ]
+        );
+
+        $logger = new Logger([
+            'profilingAware' => true,
+            'dispatcher' => $dispatcher,
+            'flushInterval' => 2,
+        ]);
+
+        $logger->log('token.a', Logger::LEVEL_PROFILE_BEGIN, 'category');
+        $logger->log('token.b', Logger::LEVEL_PROFILE_BEGIN, 'category');
+        $logger->log('token.b', Logger::LEVEL_PROFILE_END, 'category');
+        $logger->log('token.a', Logger::LEVEL_PROFILE_END, 'category');
+    }
 }
 
 class TestTarget extends Target
diff --git a/tests/framework/validators/ExistValidatorTest.php b/tests/framework/validators/ExistValidatorTest.php
index 472c74e6b12..45759d90167 100644
--- a/tests/framework/validators/ExistValidatorTest.php
+++ b/tests/framework/validators/ExistValidatorTest.php
@@ -97,6 +97,13 @@ public function testValidateAttribute()
         $m->test_val = [2, 3, 4, 5];
         $val->validateAttribute($m, 'test_val');
         $this->assertFalse($m->hasErrors('test_val'));
+        // existing non-unique array
+        $val = new ExistValidator(['targetAttribute' => 'ref']);
+        $val->allowArray = true;
+        $m = new ValidatorTestRefModel();
+        $m->test_val = [2, 2, 3, 3, 4, 4, 5, 5];
+        $val->validateAttribute($m, 'test_val');
+        $this->assertFalse($m->hasErrors('test_val'));
         // non-existing array
         $val = new ExistValidator(['targetAttribute' => 'ref']);
         $val->allowArray = true;
diff --git a/tests/framework/validators/FileValidatorTest.php b/tests/framework/validators/FileValidatorTest.php
index cbed1fbabf1..2ce3c797ca3 100644
--- a/tests/framework/validators/FileValidatorTest.php
+++ b/tests/framework/validators/FileValidatorTest.php
@@ -324,7 +324,7 @@ protected function createTestFiles($params = [])
             $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
             $randomString = '';
             for ($i = 0; $i < $len; $i++) {
-                $randomString .= $characters[rand(0, strlen($characters) - 1)];
+                $randomString .= $characters[random_int(0, strlen($characters) - 1)];
             }
 
             return $randomString;
@@ -340,7 +340,7 @@ protected function createTestFiles($params = [])
             if (is_readable($tempName)) {
                 $size = filesize($tempName);
             } else {
-                $size = isset($param['size']) ? $param['size'] : rand(
+                $size = isset($param['size']) ? $param['size'] : random_int(
                     1,
                     $this->sizeToBytes(ini_get('upload_max_filesize'))
                 );
diff --git a/tests/framework/web/ErrorHandlerTest.php b/tests/framework/web/ErrorHandlerTest.php
index 14db1af0cb1..9fdd41fcb6d 100644
--- a/tests/framework/web/ErrorHandlerTest.php
+++ b/tests/framework/web/ErrorHandlerTest.php
@@ -79,6 +79,61 @@ public function testRenderCallStackItem()
 
         $this->assertContains('<a href="netbeans://open?file=' . $file . '&line=63">', $out);
     }
+
+    public function dataHtmlEncode()
+    {
+        return [
+            [
+                "a \t=<>&\"'\x80`\n",
+                "a \t=&lt;&gt;&amp;\"'�`\n",
+            ],
+            [
+                '<b>test</b>',
+                '&lt;b&gt;test&lt;/b&gt;',
+            ],
+            [
+                '"hello"',
+                '"hello"',
+            ],
+            [
+                "'hello world'",
+                "'hello world'",
+            ],
+            [
+                'Chip&amp;Dale',
+                'Chip&amp;amp;Dale',
+            ],
+            [
+                "\t\$x=24;",
+                "\t\$x=24;",
+            ],
+        ];
+    }
+
+    /**
+     * @dataProvider dataHtmlEncode
+     */
+    public function testHtmlEncode($text, $expected)
+    {
+        $handler = Yii::$app->getErrorHandler();
+
+        $this->assertSame($expected, $handler->htmlEncode($text));
+    }
+
+    public function testHtmlEncodeWithUnicodeSequence()
+    {
+        if (PHP_VERSION_ID < 70000) {
+            $this->markTestSkipped('Can not be tested on PHP < 7.0');
+            return;
+        }
+
+        $handler = Yii::$app->getErrorHandler();
+
+        $text = "a \t=<>&\"'\x80\u{20bd}`\u{000a}\u{000c}\u{0000}";
+        $expected = "a \t=&lt;&gt;&amp;\"'�₽`\n\u{000c}\u{0000}";
+
+        $this->assertSame($expected, $handler->htmlEncode($text));
+    }
 }
 
 class ErrorHandler extends \yii\web\ErrorHandler
diff --git a/tests/framework/web/RequestTest.php b/tests/framework/web/RequestTest.php
index 934148b1982..2891372ce79 100644
--- a/tests/framework/web/RequestTest.php
+++ b/tests/framework/web/RequestTest.php
@@ -12,6 +12,7 @@
 
 /**
  * @group web
+ * @backupGlobals enabled
  */
 class RequestTest extends TestCase
 {
@@ -991,18 +992,21 @@ public function httpAuthorizationHeadersProvider()
      */
     public function testHttpAuthCredentialsFromHttpAuthorizationHeader($secret, $expected)
     {
-        $request = new Request();
+        $original = $_SERVER;
 
-        $request->getHeaders()->set('HTTP_AUTHORIZATION', 'Basic ' . $secret);
+        $request = new Request();
+        $_SERVER['HTTP_AUTHORIZATION'] = 'Basic ' . $secret;
         $this->assertSame($request->getAuthCredentials(), $expected);
         $this->assertSame($request->getAuthUser(), $expected[0]);
         $this->assertSame($request->getAuthPassword(), $expected[1]);
-        $request->getHeaders()->offsetUnset('HTTP_AUTHORIZATION');
+        $_SERVER = $original;
 
-        $request->getHeaders()->set('REDIRECT_HTTP_AUTHORIZATION', 'Basic ' . $secret);
+        $request = new Request();
+        $_SERVER['REDIRECT_HTTP_AUTHORIZATION'] = 'Basic ' . $secret;
         $this->assertSame($request->getAuthCredentials(), $expected);
         $this->assertSame($request->getAuthUser(), $expected[0]);
         $this->assertSame($request->getAuthPassword(), $expected[1]);
+        $_SERVER = $original;
     }
 
     public function testHttpAuthCredentialsFromServerSuperglobal()
@@ -1013,7 +1017,7 @@ public function testHttpAuthCredentialsFromServerSuperglobal()
         $_SERVER['PHP_AUTH_PW'] = $pw;
 
         $request = new Request();
-        $request->getHeaders()->set('HTTP_AUTHORIZATION', 'Basic ' . base64_encode('less-priority:than-PHP_AUTH_*'));
+        $request->getHeaders()->set('Authorization', 'Basic ' . base64_encode('less-priority:than-PHP_AUTH_*'));
 
         $this->assertSame($request->getAuthCredentials(), [$user, $pw]);
         $this->assertSame($request->getAuthUser(), $user);
@@ -1046,6 +1050,30 @@ public function testGetBodyParam()
         $this->assertSame('default', $request->getBodyParam('unexisting', 'default'));
     }
 
+    public function getBodyParamsDataProvider()
+    {
+        return [
+            'json' => ['application/json', '{"foo":"bar","baz":1}', ['foo' => 'bar', 'baz' => 1]],
+            'jsonp' => ['application/javascript', 'parseResponse({"foo":"bar","baz":1});', ['foo' => 'bar', 'baz' => 1]],
+            'get' => ['application/x-www-form-urlencoded', 'foo=bar&baz=1', ['foo' => 'bar', 'baz' => '1']],
+        ];
+    }
+
+    /**
+     * @dataProvider getBodyParamsDataProvider
+     */
+    public function testGetBodyParams($contentType, $rawBody, array $expected)
+    {
+        $_SERVER['CONTENT_TYPE'] = $contentType;
+        $request = new Request();
+        $request->parsers = [
+            'application/json' => 'yii\web\JsonParser',
+            'application/javascript' => 'yii\web\JsonParser',
+        ];
+        $request->setRawBody($rawBody);
+        $this->assertSame($expected, $request->getBodyParams());
+    }
+
     public function trustedHostAndInjectedXForwardedForDataProvider()
     {
         return [
diff --git a/tests/framework/web/UploadedFileTest.php b/tests/framework/web/UploadedFileTest.php
index 4702c5adb6e..d374a733335 100644
--- a/tests/framework/web/UploadedFileTest.php
+++ b/tests/framework/web/UploadedFileTest.php
@@ -7,6 +7,7 @@
 
 namespace yiiunit\framework\web;
 
+use Yii;
 use yii\web\UploadedFile;
 use yiiunit\framework\web\mocks\UploadedFileMock;
 use yiiunit\framework\web\stubs\ModelStub;
@@ -28,10 +29,10 @@ protected function setUp()
     private function generateFakeFileData()
     {
         return [
-            'name' => md5(mt_rand()),
-            'tmp_name' => md5(mt_rand()),
+            'name' => md5(random_int(0, PHP_INT_MAX)),
+            'tmp_name' => md5(random_int(0, PHP_INT_MAX)),
             'type' => 'image/jpeg',
-            'size' => mt_rand(1000, 10000),
+            'size' => random_int(1000, 10000),
             'error' => '0',
         ];
     }
@@ -39,10 +40,10 @@ private function generateFakeFileData()
     private function generateTempFileData()
     {
         return [
-            'name' => md5(mt_rand()),
+            'name' => md5(random_int(0, PHP_INT_MAX)),
             'tmp_name' => tempnam(sys_get_temp_dir(), ''),
             'type' => 'image/jpeg',
-            'size' => mt_rand(1000, 10000),
+            'size' => random_int(1000, 10000),
             'error' => '0',
         ];
     }
