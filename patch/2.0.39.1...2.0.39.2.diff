diff --git a/.github/workflows/ci-mysql.yml b/.github/workflows/ci-mysql.yml
index d2049645ef6..de0a5e1a44f 100644
--- a/.github/workflows/ci-mysql.yml
+++ b/.github/workflows/ci-mysql.yml
@@ -63,7 +63,7 @@ jobs:
 
       - name: Determine composer cache directory
         if: matrix.os == 'ubuntu-latest'
-        run: echo "::set-env name=COMPOSER_CACHE_DIR::$(composer config cache-dir)"
+        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
 
       - name: Cache dependencies installed with composer
         uses: actions/cache@v1
diff --git a/.github/workflows/ci-pgsql.yml b/.github/workflows/ci-pgsql.yml
index 9325ac2e901..b934f6ab791 100644
--- a/.github/workflows/ci-pgsql.yml
+++ b/.github/workflows/ci-pgsql.yml
@@ -67,7 +67,7 @@ jobs:
 
       - name: Determine composer cache directory
         if: matrix.os == 'ubuntu-latest'
-        run: echo "::set-env name=COMPOSER_CACHE_DIR::$(composer config cache-dir)"
+        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
 
       - name: Cache dependencies installed with composer
         uses: actions/cache@v1
diff --git a/framework/BaseYii.php b/framework/BaseYii.php
index 6aebd46bbee..cb707b020e2 100644
--- a/framework/BaseYii.php
+++ b/framework/BaseYii.php
@@ -93,7 +93,7 @@ class BaseYii
      */
     public static function getVersion()
     {
-        return '2.0.39.1';
+        return '2.0.39.2';
     }
 
     /**
diff --git a/framework/CHANGELOG.md b/framework/CHANGELOG.md
index 3480bcb26d0..1e64030d6cc 100644
--- a/framework/CHANGELOG.md
+++ b/framework/CHANGELOG.md
@@ -1,10 +1,16 @@
 Yii Framework 2 Change Log
 ==========================
 
+2.0.39.2 November 13, 2020
+--------------------------
+
+- Bug #18378: Fix not taking default value when unable to resolve abstract class via DI container (vjik)
+
+
 2.0.39.1 November 10, 2020
 --------------------------
 
-- Bug #18373: Fix not taking default value when unable to resolve non-exing class via DI container (vjik)
+- Bug #18373: Fix not taking default value when unable to resolve non-existing class via DI container (vjik)
 - Enh #18370: Add option to provide a string replacement for `null` value in `yii\data\DataFilter` (bizley)
 
 
diff --git a/framework/di/Container.php b/framework/di/Container.php
index d6b396b6ed9..1c8c9aad68c 100644
--- a/framework/di/Container.php
+++ b/framework/di/Container.php
@@ -528,10 +528,8 @@ protected function getDependencies($class)
                 }
                 $className = $isClass ? $c->getName() : null;
 
-                if ($className !== null &&
-                    ($this->has($className) || class_exists($className))
-                ) {
-                    $dependencies[$param->getName()] = Instance::of($className);
+                if ($className !== null) {
+                    $dependencies[$param->getName()] = Instance::of($className, true);
                 } else {
                     $dependencies[$param->getName()] = $param->isDefaultValueAvailable()
                         ? $param->getDefaultValue()
@@ -558,7 +556,7 @@ protected function resolveDependencies($dependencies, $reflection = null)
         foreach ($dependencies as $index => $dependency) {
             if ($dependency instanceof Instance) {
                 if ($dependency->id !== null) {
-                    $dependencies[$index] = $this->get($dependency->id);
+                    $dependencies[$index] = $dependency->get($this);
                 } elseif ($reflection !== null) {
                     $name = $reflection->getConstructor()->getParameters()[$index]->getName();
                     $class = $reflection->getName();
diff --git a/framework/di/Instance.php b/framework/di/Instance.php
index af0044ce4ae..52943860488 100644
--- a/framework/di/Instance.php
+++ b/framework/di/Instance.php
@@ -7,6 +7,7 @@
 
 namespace yii\di;
 
+use Exception;
 use Yii;
 use yii\base\InvalidConfigException;
 
@@ -59,25 +60,32 @@ class Instance
      * @var string the component ID, class name, interface name or alias name
      */
     public $id;
+    /**
+     * @var bool if null should be returned instead of throwing an exception
+     */
+    public $optional;
 
 
     /**
      * Constructor.
      * @param string $id the component ID
+     * @param bool $optional if null should be returned instead of throwing an exception
      */
-    protected function __construct($id)
+    protected function __construct($id, $optional = false)
     {
         $this->id = $id;
+        $this->optional = $optional;
     }
 
     /**
      * Creates a new Instance object.
      * @param string $id the component ID
+     * @param bool $optional if null should be returned instead of throwing an exception
      * @return Instance the new Instance object.
      */
-    public static function of($id)
+    public static function of($id, $optional = false)
     {
-        return new static($id);
+        return new static($id, $optional);
     }
 
     /**
@@ -157,14 +165,21 @@ public static function ensure($reference, $type = null, $container = null)
      */
     public function get($container = null)
     {
-        if ($container) {
-            return $container->get($this->id);
-        }
-        if (Yii::$app && Yii::$app->has($this->id)) {
-            return Yii::$app->get($this->id);
-        }
+        try {
+            if ($container) {
+                return $container->get($this->id);
+            }
+            if (Yii::$app && Yii::$app->has($this->id)) {
+                return Yii::$app->get($this->id);
+            }
 
-        return Yii::$container->get($this->id);
+            return Yii::$container->get($this->id);
+        } catch (Exception $e) {
+            if ($this->optional) {
+                return null;
+            }
+            throw $e;
+        }
     }
 
     /**
diff --git a/tests/framework/di/ContainerTest.php b/tests/framework/di/ContainerTest.php
index f3f832e7852..1ba991e84e0 100644
--- a/tests/framework/di/ContainerTest.php
+++ b/tests/framework/di/ContainerTest.php
@@ -547,6 +547,12 @@ public function testNulledConstructorParameters()
         $this->assertInstanceOf(Beta::className(), $alpha->beta);
         $this->assertInstanceOf($QuxInterface, $alpha->omega);
         $this->assertNull($alpha->unknown);
+        $this->assertNull($alpha->color);
+
+        $container = new Container();
+        $container->set(__NAMESPACE__ . '\stubs\AbstractColor', __NAMESPACE__ . '\stubs\Color');
+        $alpha = $container->get(Alpha::className());
+        $this->assertInstanceOf(__NAMESPACE__ . '\stubs\Color', $alpha->color);
     }
 
     /**
diff --git a/tests/framework/di/InstanceTest.php b/tests/framework/di/InstanceTest.php
index 040c759d5e2..a5b23c5fd15 100644
--- a/tests/framework/di/InstanceTest.php
+++ b/tests/framework/di/InstanceTest.php
@@ -171,7 +171,7 @@ public function testRestoreAfterVarExport()
         $instance = Instance::of('something');
         $export = var_export($instance, true);
 
-        $this->assertRegExp('~yii\\\\di\\\\Instance::__set_state\(array\(\s+\'id\' => \'something\',\s+\)\)~', $export);
+        $this->assertRegExp('~yii\\\\di\\\\Instance::__set_state\(array\(\s+\'id\' => \'something\',\s+\'optional\' => false,\s+\)\)~', $export);
 
         $this->assertEquals($instance, Instance::__set_state([
             'id' => 'something',
diff --git a/tests/framework/di/stubs/AbstractColor.php b/tests/framework/di/stubs/AbstractColor.php
new file mode 100644
index 00000000000..f3d03a44e9f
--- /dev/null
+++ b/tests/framework/di/stubs/AbstractColor.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+use yii\base\BaseObject;
+
+abstract class AbstractColor extends BaseObject
+{
+}
diff --git a/tests/framework/di/stubs/Alpha.php b/tests/framework/di/stubs/Alpha.php
index 83023f5eb98..151d2f109bb 100644
--- a/tests/framework/di/stubs/Alpha.php
+++ b/tests/framework/di/stubs/Alpha.php
@@ -9,11 +9,17 @@ class Alpha extends BaseObject
     public $beta;
     public $omega;
     public $unknown = true;
+    public $color = true;
 
-    public function __construct(Beta $beta = null, QuxInterface $omega = null, Unknown $unknown = null)
-    {
+    public function __construct(
+        Beta $beta = null,
+        QuxInterface $omega = null,
+        Unknown $unknown = null,
+        AbstractColor $color = null
+    ) {
         $this->beta = $beta;
         $this->omega = $omega;
         $this->unknown = $unknown;
+        $this->color = $color;
     }
 }
diff --git a/tests/framework/di/stubs/Color.php b/tests/framework/di/stubs/Color.php
new file mode 100644
index 00000000000..b9bd0f99199
--- /dev/null
+++ b/tests/framework/di/stubs/Color.php
@@ -0,0 +1,7 @@
+<?php
+
+namespace yiiunit\framework\di\stubs;
+
+final class Color extends AbstractColor
+{
+}
